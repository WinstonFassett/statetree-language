diff --git a/node_modules/@typefox/monaco-editor-react/dist/index.js b/node_modules/@typefox/monaco-editor-react/dist/index.js
index 1000ced..6ef9875 100644
--- a/node_modules/@typefox/monaco-editor-react/dist/index.js
+++ b/node_modules/@typefox/monaco-editor-react/dist/index.js
@@ -1,11 +1,21 @@
 import { MonacoEditorLanguageClientWrapper } from 'monaco-editor-wrapper';
 import * as vscode from 'vscode';
 import React from 'react';
+
+let monacoInitializerQueue = Promise.resolve()
+function enqueueMonacoInitializer(makePromise) {
+    monacoInitializerQueue = monacoInitializerQueue.then(makePromise).catch(e => {
+        console.error("Error during initialization:", e);        
+    });
+    return monacoInitializerQueue;
+}
+
 export class MonacoEditorReactComp extends React.Component {
     wrapper = new MonacoEditorLanguageClientWrapper();
     containerElement;
     _subscription = null;
     isStarting;
+    isReiniting;
     constructor(props) {
         super(props);
         this.containerElement = undefined;
@@ -14,8 +24,13 @@ export class MonacoEditorReactComp extends React.Component {
         await this.handleReinit();
     }
     async handleReinit() {
-        await this.destroyMonaco();
-        await this.initMonaco();
+        if (this.isReiniting) return this.isReiniting
+        this.isReiniting = enqueueMonacoInitializer(async () => {
+            await this.destroyMonaco();
+            await this.initMonaco();
+        })
+        await this.isReiniting
+        delete this.isReiniting
     }
     async componentDidUpdate(prevProps) {
         const { className, userConfig } = this.props;
diff --git a/node_modules/@typefox/monaco-editor-react/src/index.tsx b/node_modules/@typefox/monaco-editor-react/src/index.tsx
index bfe20f0..c5bb16e 100644
--- a/node_modules/@typefox/monaco-editor-react/src/index.tsx
+++ b/node_modules/@typefox/monaco-editor-react/src/index.tsx
@@ -12,13 +12,21 @@ export type MonacoEditorProps = {
     onLoad?: () => void;
 }
 
+let monacoInitializerQueue = Promise.resolve()
+function enqueueMonacoInitializer(makePromise) {
+    monacoInitializerQueue = monacoInitializerQueue.then(makePromise).catch(e => {
+        console.error("Error during initialization:", e);        
+    });
+    return monacoInitializerQueue;
+}
+
 export class MonacoEditorReactComp extends React.Component<MonacoEditorProps> {
 
     private wrapper: MonacoEditorLanguageClientWrapper = new MonacoEditorLanguageClientWrapper();
     private containerElement?: HTMLDivElement;
     private _subscription: IDisposable | null = null;
     private isStarting?: Promise<void>;
-
+    private isReiniting?: Promise<void>;
     constructor(props: MonacoEditorProps) {
         super(props);
         this.containerElement = undefined;
@@ -28,9 +36,14 @@ export class MonacoEditorReactComp extends React.Component<MonacoEditorProps> {
         await this.handleReinit();
     }
 
-    private async handleReinit() {
-        await this.destroyMonaco();
-        await this.initMonaco();
+    async handleReinit() {
+        if (this.isReiniting) return this.isReiniting
+        this.isReiniting = enqueueMonacoInitializer(async () => {
+            await this.destroyMonaco();
+            await this.initMonaco();
+        })
+        await this.isReiniting
+        delete this.isReiniting
     }
 
     override async componentDidUpdate(prevProps: MonacoEditorProps) {
