(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a2 = function a3() {
      if (this instanceof a3) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a2.prototype = f2.prototype;
  } else
    a2 = {};
  Object.defineProperty(a2, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a2, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a2;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReact_production_min;
function requireReact_production_min() {
  if (hasRequiredReact_production_min)
    return react_production_min;
  hasRequiredReact_production_min = 1;
  var l2 = Symbol.for("react.element"), n2 = Symbol.for("react.portal"), p2 = Symbol.for("react.fragment"), q = Symbol.for("react.strict_mode"), r2 = Symbol.for("react.profiler"), t2 = Symbol.for("react.provider"), u2 = Symbol.for("react.context"), v2 = Symbol.for("react.forward_ref"), w2 = Symbol.for("react.suspense"), x2 = Symbol.for("react.memo"), y2 = Symbol.for("react.lazy"), z2 = Symbol.iterator;
  function A2(a2) {
    if (null === a2 || "object" !== typeof a2)
      return null;
    a2 = z2 && a2[z2] || a2["@@iterator"];
    return "function" === typeof a2 ? a2 : null;
  }
  var B2 = { isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, C2 = Object.assign, D2 = {};
  function E2(a2, b2, e) {
    this.props = a2;
    this.context = b2;
    this.refs = D2;
    this.updater = e || B2;
  }
  E2.prototype.isReactComponent = {};
  E2.prototype.setState = function(a2, b2) {
    if ("object" !== typeof a2 && "function" !== typeof a2 && null != a2)
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a2, b2, "setState");
  };
  E2.prototype.forceUpdate = function(a2) {
    this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
  };
  function F2() {
  }
  F2.prototype = E2.prototype;
  function G2(a2, b2, e) {
    this.props = a2;
    this.context = b2;
    this.refs = D2;
    this.updater = e || B2;
  }
  var H2 = G2.prototype = new F2();
  H2.constructor = G2;
  C2(H2, E2.prototype);
  H2.isPureReactComponent = true;
  var I2 = Array.isArray, J2 = Object.prototype.hasOwnProperty, K = { current: null }, L2 = { key: true, ref: true, __self: true, __source: true };
  function M2(a2, b2, e) {
    var d2, c2 = {}, k2 = null, h2 = null;
    if (null != b2)
      for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
        J2.call(b2, d2) && !L2.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
    var g2 = arguments.length - 2;
    if (1 === g2)
      c2.children = e;
    else if (1 < g2) {
      for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
        f2[m2] = arguments[m2 + 2];
      c2.children = f2;
    }
    if (a2 && a2.defaultProps)
      for (d2 in g2 = a2.defaultProps, g2)
        void 0 === c2[d2] && (c2[d2] = g2[d2]);
    return { $$typeof: l2, type: a2, key: k2, ref: h2, props: c2, _owner: K.current };
  }
  function N2(a2, b2) {
    return { $$typeof: l2, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
  }
  function O2(a2) {
    return "object" === typeof a2 && null !== a2 && a2.$$typeof === l2;
  }
  function escape(a2) {
    var b2 = { "=": "=0", ":": "=2" };
    return "$" + a2.replace(/[=:]/g, function(a3) {
      return b2[a3];
    });
  }
  var P2 = /\/+/g;
  function Q(a2, b2) {
    return "object" === typeof a2 && null !== a2 && null != a2.key ? escape("" + a2.key) : b2.toString(36);
  }
  function R2(a2, b2, e, d2, c2) {
    var k2 = typeof a2;
    if ("undefined" === k2 || "boolean" === k2)
      a2 = null;
    var h2 = false;
    if (null === a2)
      h2 = true;
    else
      switch (k2) {
        case "string":
        case "number":
          h2 = true;
          break;
        case "object":
          switch (a2.$$typeof) {
            case l2:
            case n2:
              h2 = true;
          }
      }
    if (h2)
      return h2 = a2, c2 = c2(h2), a2 = "" === d2 ? "." + Q(h2, 0) : d2, I2(c2) ? (e = "", null != a2 && (e = a2.replace(P2, "$&/") + "/"), R2(c2, b2, e, "", function(a3) {
        return a3;
      })) : null != c2 && (O2(c2) && (c2 = N2(c2, e + (!c2.key || h2 && h2.key === c2.key ? "" : ("" + c2.key).replace(P2, "$&/") + "/") + a2)), b2.push(c2)), 1;
    h2 = 0;
    d2 = "" === d2 ? "." : d2 + ":";
    if (I2(a2))
      for (var g2 = 0; g2 < a2.length; g2++) {
        k2 = a2[g2];
        var f2 = d2 + Q(k2, g2);
        h2 += R2(k2, b2, e, f2, c2);
      }
    else if (f2 = A2(a2), "function" === typeof f2)
      for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
        k2 = k2.value, f2 = d2 + Q(k2, g2++), h2 += R2(k2, b2, e, f2, c2);
    else if ("object" === k2)
      throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
    return h2;
  }
  function S2(a2, b2, e) {
    if (null == a2)
      return a2;
    var d2 = [], c2 = 0;
    R2(a2, d2, "", "", function(a3) {
      return b2.call(e, a3, c2++);
    });
    return d2;
  }
  function T2(a2) {
    if (-1 === a2._status) {
      var b2 = a2._result;
      b2 = b2();
      b2.then(function(b3) {
        if (0 === a2._status || -1 === a2._status)
          a2._status = 1, a2._result = b3;
      }, function(b3) {
        if (0 === a2._status || -1 === a2._status)
          a2._status = 2, a2._result = b3;
      });
      -1 === a2._status && (a2._status = 0, a2._result = b2);
    }
    if (1 === a2._status)
      return a2._result.default;
    throw a2._result;
  }
  var U2 = { current: null }, V2 = { transition: null }, W2 = { ReactCurrentDispatcher: U2, ReactCurrentBatchConfig: V2, ReactCurrentOwner: K };
  react_production_min.Children = { map: S2, forEach: function(a2, b2, e) {
    S2(a2, function() {
      b2.apply(this, arguments);
    }, e);
  }, count: function(a2) {
    var b2 = 0;
    S2(a2, function() {
      b2++;
    });
    return b2;
  }, toArray: function(a2) {
    return S2(a2, function(a3) {
      return a3;
    }) || [];
  }, only: function(a2) {
    if (!O2(a2))
      throw Error("React.Children.only expected to receive a single React element child.");
    return a2;
  } };
  react_production_min.Component = E2;
  react_production_min.Fragment = p2;
  react_production_min.Profiler = r2;
  react_production_min.PureComponent = G2;
  react_production_min.StrictMode = q;
  react_production_min.Suspense = w2;
  react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W2;
  react_production_min.cloneElement = function(a2, b2, e) {
    if (null === a2 || void 0 === a2)
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
    var d2 = C2({}, a2.props), c2 = a2.key, k2 = a2.ref, h2 = a2._owner;
    if (null != b2) {
      void 0 !== b2.ref && (k2 = b2.ref, h2 = K.current);
      void 0 !== b2.key && (c2 = "" + b2.key);
      if (a2.type && a2.type.defaultProps)
        var g2 = a2.type.defaultProps;
      for (f2 in b2)
        J2.call(b2, f2) && !L2.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
    }
    var f2 = arguments.length - 2;
    if (1 === f2)
      d2.children = e;
    else if (1 < f2) {
      g2 = Array(f2);
      for (var m2 = 0; m2 < f2; m2++)
        g2[m2] = arguments[m2 + 2];
      d2.children = g2;
    }
    return { $$typeof: l2, type: a2.type, key: c2, ref: k2, props: d2, _owner: h2 };
  };
  react_production_min.createContext = function(a2) {
    a2 = { $$typeof: u2, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
    a2.Provider = { $$typeof: t2, _context: a2 };
    return a2.Consumer = a2;
  };
  react_production_min.createElement = M2;
  react_production_min.createFactory = function(a2) {
    var b2 = M2.bind(null, a2);
    b2.type = a2;
    return b2;
  };
  react_production_min.createRef = function() {
    return { current: null };
  };
  react_production_min.forwardRef = function(a2) {
    return { $$typeof: v2, render: a2 };
  };
  react_production_min.isValidElement = O2;
  react_production_min.lazy = function(a2) {
    return { $$typeof: y2, _payload: { _status: -1, _result: a2 }, _init: T2 };
  };
  react_production_min.memo = function(a2, b2) {
    return { $$typeof: x2, type: a2, compare: void 0 === b2 ? null : b2 };
  };
  react_production_min.startTransition = function(a2) {
    var b2 = V2.transition;
    V2.transition = {};
    try {
      a2();
    } finally {
      V2.transition = b2;
    }
  };
  react_production_min.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
  };
  react_production_min.useCallback = function(a2, b2) {
    return U2.current.useCallback(a2, b2);
  };
  react_production_min.useContext = function(a2) {
    return U2.current.useContext(a2);
  };
  react_production_min.useDebugValue = function() {
  };
  react_production_min.useDeferredValue = function(a2) {
    return U2.current.useDeferredValue(a2);
  };
  react_production_min.useEffect = function(a2, b2) {
    return U2.current.useEffect(a2, b2);
  };
  react_production_min.useId = function() {
    return U2.current.useId();
  };
  react_production_min.useImperativeHandle = function(a2, b2, e) {
    return U2.current.useImperativeHandle(a2, b2, e);
  };
  react_production_min.useInsertionEffect = function(a2, b2) {
    return U2.current.useInsertionEffect(a2, b2);
  };
  react_production_min.useLayoutEffect = function(a2, b2) {
    return U2.current.useLayoutEffect(a2, b2);
  };
  react_production_min.useMemo = function(a2, b2) {
    return U2.current.useMemo(a2, b2);
  };
  react_production_min.useReducer = function(a2, b2, e) {
    return U2.current.useReducer(a2, b2, e);
  };
  react_production_min.useRef = function(a2) {
    return U2.current.useRef(a2);
  };
  react_production_min.useState = function(a2) {
    return U2.current.useState(a2);
  };
  react_production_min.useSyncExternalStore = function(a2, b2, e) {
    return U2.current.useSyncExternalStore(a2, b2, e);
  };
  react_production_min.useTransition = function() {
    return U2.current.useTransition();
  };
  react_production_min.version = "18.2.0";
  return react_production_min;
}
var hasRequiredReact;
function requireReact() {
  if (hasRequiredReact)
    return react.exports;
  hasRequiredReact = 1;
  {
    react.exports = requireReact_production_min();
  }
  return react.exports;
}
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min)
    return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f2 = requireReact(), k2 = Symbol.for("react.element"), l2 = Symbol.for("react.fragment"), m2 = Object.prototype.hasOwnProperty, n2 = f2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p2 = { key: true, ref: true, __self: true, __source: true };
  function q(c2, a2, g2) {
    var b2, d2 = {}, e = null, h2 = null;
    void 0 !== g2 && (e = "" + g2);
    void 0 !== a2.key && (e = "" + a2.key);
    void 0 !== a2.ref && (h2 = a2.ref);
    for (b2 in a2)
      m2.call(a2, b2) && !p2.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
    if (c2 && c2.defaultProps)
      for (b2 in a2 = c2.defaultProps, a2)
        void 0 === d2[b2] && (d2[b2] = a2[b2]);
    return { $$typeof: k2, type: c2, key: e, ref: h2, props: d2, _owner: n2.current };
  }
  reactJsxRuntime_production_min.Fragment = l2;
  reactJsxRuntime_production_min.jsx = q;
  reactJsxRuntime_production_min.jsxs = q;
  return reactJsxRuntime_production_min;
}
var hasRequiredJsxRuntime;
function requireJsxRuntime() {
  if (hasRequiredJsxRuntime)
    return jsxRuntime.exports;
  hasRequiredJsxRuntime = 1;
  {
    jsxRuntime.exports = requireReactJsxRuntime_production_min();
  }
  return jsxRuntime.exports;
}
var jsxRuntimeExports = requireJsxRuntime();
var client = {};
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredScheduler_production_min;
function requireScheduler_production_min() {
  if (hasRequiredScheduler_production_min)
    return scheduler_production_min;
  hasRequiredScheduler_production_min = 1;
  (function(exports) {
    function f2(a2, b2) {
      var c2 = a2.length;
      a2.push(b2);
      a:
        for (; 0 < c2; ) {
          var d2 = c2 - 1 >>> 1, e = a2[d2];
          if (0 < g2(e, b2))
            a2[d2] = b2, a2[c2] = e, c2 = d2;
          else
            break a;
        }
    }
    function h2(a2) {
      return 0 === a2.length ? null : a2[0];
    }
    function k2(a2) {
      if (0 === a2.length)
        return null;
      var b2 = a2[0], c2 = a2.pop();
      if (c2 !== b2) {
        a2[0] = c2;
        a:
          for (var d2 = 0, e = a2.length, w2 = e >>> 1; d2 < w2; ) {
            var m2 = 2 * (d2 + 1) - 1, C2 = a2[m2], n2 = m2 + 1, x2 = a2[n2];
            if (0 > g2(C2, c2))
              n2 < e && 0 > g2(x2, C2) ? (a2[d2] = x2, a2[n2] = c2, d2 = n2) : (a2[d2] = C2, a2[m2] = c2, d2 = m2);
            else if (n2 < e && 0 > g2(x2, c2))
              a2[d2] = x2, a2[n2] = c2, d2 = n2;
            else
              break a;
          }
      }
      return b2;
    }
    function g2(a2, b2) {
      var c2 = a2.sortIndex - b2.sortIndex;
      return 0 !== c2 ? c2 : a2.id - b2.id;
    }
    if ("object" === typeof performance && "function" === typeof performance.now) {
      var l2 = performance;
      exports.unstable_now = function() {
        return l2.now();
      };
    } else {
      var p2 = Date, q = p2.now();
      exports.unstable_now = function() {
        return p2.now() - q;
      };
    }
    var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G2(a2) {
      for (var b2 = h2(t2); null !== b2; ) {
        if (null === b2.callback)
          k2(t2);
        else if (b2.startTime <= a2)
          k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
        else
          break;
        b2 = h2(t2);
      }
    }
    function H2(a2) {
      B2 = false;
      G2(a2);
      if (!A2)
        if (null !== h2(r2))
          A2 = true, I2(J2);
        else {
          var b2 = h2(t2);
          null !== b2 && K(H2, b2.startTime - a2);
        }
    }
    function J2(a2, b2) {
      A2 = false;
      B2 && (B2 = false, E2(L2), L2 = -1);
      z2 = true;
      var c2 = y2;
      try {
        G2(b2);
        for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a2 && !M2()); ) {
          var d2 = v2.callback;
          if ("function" === typeof d2) {
            v2.callback = null;
            y2 = v2.priorityLevel;
            var e = d2(v2.expirationTime <= b2);
            b2 = exports.unstable_now();
            "function" === typeof e ? v2.callback = e : v2 === h2(r2) && k2(r2);
            G2(b2);
          } else
            k2(r2);
          v2 = h2(r2);
        }
        if (null !== v2)
          var w2 = true;
        else {
          var m2 = h2(t2);
          null !== m2 && K(H2, m2.startTime - b2);
          w2 = false;
        }
        return w2;
      } finally {
        v2 = null, y2 = c2, z2 = false;
      }
    }
    var N2 = false, O2 = null, L2 = -1, P2 = 5, Q = -1;
    function M2() {
      return exports.unstable_now() - Q < P2 ? false : true;
    }
    function R2() {
      if (null !== O2) {
        var a2 = exports.unstable_now();
        Q = a2;
        var b2 = true;
        try {
          b2 = O2(true, a2);
        } finally {
          b2 ? S2() : (N2 = false, O2 = null);
        }
      } else
        N2 = false;
    }
    var S2;
    if ("function" === typeof F2)
      S2 = function() {
        F2(R2);
      };
    else if ("undefined" !== typeof MessageChannel) {
      var T2 = new MessageChannel(), U2 = T2.port2;
      T2.port1.onmessage = R2;
      S2 = function() {
        U2.postMessage(null);
      };
    } else
      S2 = function() {
        D2(R2, 0);
      };
    function I2(a2) {
      O2 = a2;
      N2 || (N2 = true, S2());
    }
    function K(a2, b2) {
      L2 = D2(function() {
        a2(exports.unstable_now());
      }, b2);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a2) {
      a2.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A2 || z2 || (A2 = true, I2(J2));
    };
    exports.unstable_forceFrameRate = function(a2) {
      0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y2;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h2(r2);
    };
    exports.unstable_next = function(a2) {
      switch (y2) {
        case 1:
        case 2:
        case 3:
          var b2 = 3;
          break;
        default:
          b2 = y2;
      }
      var c2 = y2;
      y2 = b2;
      try {
        return a2();
      } finally {
        y2 = c2;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a2, b2) {
      switch (a2) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a2 = 3;
      }
      var c2 = y2;
      y2 = a2;
      try {
        return b2();
      } finally {
        y2 = c2;
      }
    };
    exports.unstable_scheduleCallback = function(a2, b2, c2) {
      var d2 = exports.unstable_now();
      "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
      switch (a2) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c2 + e;
      a2 = { id: u2++, callback: b2, priorityLevel: a2, startTime: c2, expirationTime: e, sortIndex: -1 };
      c2 > d2 ? (a2.sortIndex = c2, f2(t2, a2), null === h2(r2) && a2 === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K(H2, c2 - d2))) : (a2.sortIndex = e, f2(r2, a2), A2 || z2 || (A2 = true, I2(J2)));
      return a2;
    };
    exports.unstable_shouldYield = M2;
    exports.unstable_wrapCallback = function(a2) {
      var b2 = y2;
      return function() {
        var c2 = y2;
        y2 = b2;
        try {
          return a2.apply(this, arguments);
        } finally {
          y2 = c2;
        }
      };
    };
  })(scheduler_production_min);
  return scheduler_production_min;
}
var hasRequiredScheduler;
function requireScheduler() {
  if (hasRequiredScheduler)
    return scheduler.exports;
  hasRequiredScheduler = 1;
  {
    scheduler.exports = requireScheduler_production_min();
  }
  return scheduler.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDom_production_min;
function requireReactDom_production_min() {
  if (hasRequiredReactDom_production_min)
    return reactDom_production_min;
  hasRequiredReactDom_production_min = 1;
  var aa = requireReact(), ca = requireScheduler();
  function p2(a2) {
    for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
      b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
    return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var da = /* @__PURE__ */ new Set(), ea = {};
  function fa(a2, b2) {
    ha(a2, b2);
    ha(a2 + "Capture", b2);
  }
  function ha(a2, b2) {
    ea[a2] = b2;
    for (a2 = 0; a2 < b2.length; a2++)
      da.add(b2[a2]);
  }
  var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
  function oa(a2) {
    if (ja.call(ma, a2))
      return true;
    if (ja.call(la, a2))
      return false;
    if (ka.test(a2))
      return ma[a2] = true;
    la[a2] = true;
    return false;
  }
  function pa(a2, b2, c2, d2) {
    if (null !== c2 && 0 === c2.type)
      return false;
    switch (typeof b2) {
      case "function":
      case "symbol":
        return true;
      case "boolean":
        if (d2)
          return false;
        if (null !== c2)
          return !c2.acceptsBooleans;
        a2 = a2.toLowerCase().slice(0, 5);
        return "data-" !== a2 && "aria-" !== a2;
      default:
        return false;
    }
  }
  function qa(a2, b2, c2, d2) {
    if (null === b2 || "undefined" === typeof b2 || pa(a2, b2, c2, d2))
      return true;
    if (d2)
      return false;
    if (null !== c2)
      switch (c2.type) {
        case 3:
          return !b2;
        case 4:
          return false === b2;
        case 5:
          return isNaN(b2);
        case 6:
          return isNaN(b2) || 1 > b2;
      }
    return false;
  }
  function v2(a2, b2, c2, d2, e, f2, g2) {
    this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
    this.attributeName = d2;
    this.attributeNamespace = e;
    this.mustUseProperty = c2;
    this.propertyName = a2;
    this.type = b2;
    this.sanitizeURL = f2;
    this.removeEmptyString = g2;
  }
  var z2 = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
    z2[a2] = new v2(a2, 0, false, a2, null, false, false);
  });
  [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
    var b2 = a2[0];
    z2[b2] = new v2(b2, 1, false, a2[1], null, false, false);
  });
  ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
    z2[a2] = new v2(a2, 2, false, a2.toLowerCase(), null, false, false);
  });
  ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
    z2[a2] = new v2(a2, 2, false, a2, null, false, false);
  });
  "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
    z2[a2] = new v2(a2, 3, false, a2.toLowerCase(), null, false, false);
  });
  ["checked", "multiple", "muted", "selected"].forEach(function(a2) {
    z2[a2] = new v2(a2, 3, true, a2, null, false, false);
  });
  ["capture", "download"].forEach(function(a2) {
    z2[a2] = new v2(a2, 4, false, a2, null, false, false);
  });
  ["cols", "rows", "size", "span"].forEach(function(a2) {
    z2[a2] = new v2(a2, 6, false, a2, null, false, false);
  });
  ["rowSpan", "start"].forEach(function(a2) {
    z2[a2] = new v2(a2, 5, false, a2.toLowerCase(), null, false, false);
  });
  var ra = /[\-:]([a-z])/g;
  function sa(a2) {
    return a2[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
    var b2 = a2.replace(
      ra,
      sa
    );
    z2[b2] = new v2(b2, 1, false, a2, null, false, false);
  });
  "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
    var b2 = a2.replace(ra, sa);
    z2[b2] = new v2(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
  });
  ["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
    var b2 = a2.replace(ra, sa);
    z2[b2] = new v2(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
  });
  ["tabIndex", "crossOrigin"].forEach(function(a2) {
    z2[a2] = new v2(a2, 1, false, a2.toLowerCase(), null, false, false);
  });
  z2.xlinkHref = new v2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
  ["src", "href", "action", "formAction"].forEach(function(a2) {
    z2[a2] = new v2(a2, 1, false, a2.toLowerCase(), null, true, true);
  });
  function ta(a2, b2, c2, d2) {
    var e = z2.hasOwnProperty(b2) ? z2[b2] : null;
    if (null !== e ? 0 !== e.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
      qa(b2, c2, e, d2) && (c2 = null), d2 || null === e ? oa(b2) && (null === c2 ? a2.removeAttribute(b2) : a2.setAttribute(b2, "" + c2)) : e.mustUseProperty ? a2[e.propertyName] = null === c2 ? 3 === e.type ? false : "" : c2 : (b2 = e.attributeName, d2 = e.attributeNamespace, null === c2 ? a2.removeAttribute(b2) : (e = e.type, c2 = 3 === e || 4 === e && true === c2 ? "" : "" + c2, d2 ? a2.setAttributeNS(d2, b2, c2) : a2.setAttribute(b2, c2)));
  }
  var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
  var Ia = Symbol.for("react.offscreen");
  var Ja = Symbol.iterator;
  function Ka(a2) {
    if (null === a2 || "object" !== typeof a2)
      return null;
    a2 = Ja && a2[Ja] || a2["@@iterator"];
    return "function" === typeof a2 ? a2 : null;
  }
  var A2 = Object.assign, La;
  function Ma(a2) {
    if (void 0 === La)
      try {
        throw Error();
      } catch (c2) {
        var b2 = c2.stack.trim().match(/\n( *(at )?)/);
        La = b2 && b2[1] || "";
      }
    return "\n" + La + a2;
  }
  var Na = false;
  function Oa(a2, b2) {
    if (!a2 || Na)
      return "";
    Na = true;
    var c2 = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (b2)
        if (b2 = function() {
          throw Error();
        }, Object.defineProperty(b2.prototype, "props", { set: function() {
          throw Error();
        } }), "object" === typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b2, []);
          } catch (l2) {
            var d2 = l2;
          }
          Reflect.construct(a2, [], b2);
        } else {
          try {
            b2.call();
          } catch (l2) {
            d2 = l2;
          }
          a2.call(b2.prototype);
        }
      else {
        try {
          throw Error();
        } catch (l2) {
          d2 = l2;
        }
        a2();
      }
    } catch (l2) {
      if (l2 && d2 && "string" === typeof l2.stack) {
        for (var e = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e[g2] !== f2[h2]; )
          h2--;
        for (; 1 <= g2 && 0 <= h2; g2--, h2--)
          if (e[g2] !== f2[h2]) {
            if (1 !== g2 || 1 !== h2) {
              do
                if (g2--, h2--, 0 > h2 || e[g2] !== f2[h2]) {
                  var k2 = "\n" + e[g2].replace(" at new ", " at ");
                  a2.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a2.displayName));
                  return k2;
                }
              while (1 <= g2 && 0 <= h2);
            }
            break;
          }
      }
    } finally {
      Na = false, Error.prepareStackTrace = c2;
    }
    return (a2 = a2 ? a2.displayName || a2.name : "") ? Ma(a2) : "";
  }
  function Pa(a2) {
    switch (a2.tag) {
      case 5:
        return Ma(a2.type);
      case 16:
        return Ma("Lazy");
      case 13:
        return Ma("Suspense");
      case 19:
        return Ma("SuspenseList");
      case 0:
      case 2:
      case 15:
        return a2 = Oa(a2.type, false), a2;
      case 11:
        return a2 = Oa(a2.type.render, false), a2;
      case 1:
        return a2 = Oa(a2.type, true), a2;
      default:
        return "";
    }
  }
  function Qa(a2) {
    if (null == a2)
      return null;
    if ("function" === typeof a2)
      return a2.displayName || a2.name || null;
    if ("string" === typeof a2)
      return a2;
    switch (a2) {
      case ya:
        return "Fragment";
      case wa:
        return "Portal";
      case Aa:
        return "Profiler";
      case za:
        return "StrictMode";
      case Ea:
        return "Suspense";
      case Fa:
        return "SuspenseList";
    }
    if ("object" === typeof a2)
      switch (a2.$$typeof) {
        case Ca:
          return (a2.displayName || "Context") + ".Consumer";
        case Ba:
          return (a2._context.displayName || "Context") + ".Provider";
        case Da:
          var b2 = a2.render;
          a2 = a2.displayName;
          a2 || (a2 = b2.displayName || b2.name || "", a2 = "" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
          return a2;
        case Ga:
          return b2 = a2.displayName || null, null !== b2 ? b2 : Qa(a2.type) || "Memo";
        case Ha:
          b2 = a2._payload;
          a2 = a2._init;
          try {
            return Qa(a2(b2));
          } catch (c2) {
          }
      }
    return null;
  }
  function Ra(a2) {
    var b2 = a2.type;
    switch (a2.tag) {
      case 24:
        return "Cache";
      case 9:
        return (b2.displayName || "Context") + ".Consumer";
      case 10:
        return (b2._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return a2 = b2.render, a2 = a2.displayName || a2.name || "", b2.displayName || ("" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return b2;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return Qa(b2);
      case 8:
        return b2 === za ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof b2)
          return b2.displayName || b2.name || null;
        if ("string" === typeof b2)
          return b2;
    }
    return null;
  }
  function Sa(a2) {
    switch (typeof a2) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return a2;
      case "object":
        return a2;
      default:
        return "";
    }
  }
  function Ta(a2) {
    var b2 = a2.type;
    return (a2 = a2.nodeName) && "input" === a2.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
  }
  function Ua(a2) {
    var b2 = Ta(a2) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a2.constructor.prototype, b2), d2 = "" + a2[b2];
    if (!a2.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
      var e = c2.get, f2 = c2.set;
      Object.defineProperty(a2, b2, { configurable: true, get: function() {
        return e.call(this);
      }, set: function(a3) {
        d2 = "" + a3;
        f2.call(this, a3);
      } });
      Object.defineProperty(a2, b2, { enumerable: c2.enumerable });
      return { getValue: function() {
        return d2;
      }, setValue: function(a3) {
        d2 = "" + a3;
      }, stopTracking: function() {
        a2._valueTracker = null;
        delete a2[b2];
      } };
    }
  }
  function Va(a2) {
    a2._valueTracker || (a2._valueTracker = Ua(a2));
  }
  function Wa(a2) {
    if (!a2)
      return false;
    var b2 = a2._valueTracker;
    if (!b2)
      return true;
    var c2 = b2.getValue();
    var d2 = "";
    a2 && (d2 = Ta(a2) ? a2.checked ? "true" : "false" : a2.value);
    a2 = d2;
    return a2 !== c2 ? (b2.setValue(a2), true) : false;
  }
  function Xa(a2) {
    a2 = a2 || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a2)
      return null;
    try {
      return a2.activeElement || a2.body;
    } catch (b2) {
      return a2.body;
    }
  }
  function Ya(a2, b2) {
    var c2 = b2.checked;
    return A2({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a2._wrapperState.initialChecked });
  }
  function Za(a2, b2) {
    var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
    c2 = Sa(null != b2.value ? b2.value : c2);
    a2._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
  }
  function ab(a2, b2) {
    b2 = b2.checked;
    null != b2 && ta(a2, "checked", b2, false);
  }
  function bb(a2, b2) {
    ab(a2, b2);
    var c2 = Sa(b2.value), d2 = b2.type;
    if (null != c2)
      if ("number" === d2) {
        if (0 === c2 && "" === a2.value || a2.value != c2)
          a2.value = "" + c2;
      } else
        a2.value !== "" + c2 && (a2.value = "" + c2);
    else if ("submit" === d2 || "reset" === d2) {
      a2.removeAttribute("value");
      return;
    }
    b2.hasOwnProperty("value") ? cb(a2, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a2, b2.type, Sa(b2.defaultValue));
    null == b2.checked && null != b2.defaultChecked && (a2.defaultChecked = !!b2.defaultChecked);
  }
  function db(a2, b2, c2) {
    if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
      var d2 = b2.type;
      if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
        return;
      b2 = "" + a2._wrapperState.initialValue;
      c2 || b2 === a2.value || (a2.value = b2);
      a2.defaultValue = b2;
    }
    c2 = a2.name;
    "" !== c2 && (a2.name = "");
    a2.defaultChecked = !!a2._wrapperState.initialChecked;
    "" !== c2 && (a2.name = c2);
  }
  function cb(a2, b2, c2) {
    if ("number" !== b2 || Xa(a2.ownerDocument) !== a2)
      null == c2 ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c2 && (a2.defaultValue = "" + c2);
  }
  var eb = Array.isArray;
  function fb(a2, b2, c2, d2) {
    a2 = a2.options;
    if (b2) {
      b2 = {};
      for (var e = 0; e < c2.length; e++)
        b2["$" + c2[e]] = true;
      for (c2 = 0; c2 < a2.length; c2++)
        e = b2.hasOwnProperty("$" + a2[c2].value), a2[c2].selected !== e && (a2[c2].selected = e), e && d2 && (a2[c2].defaultSelected = true);
    } else {
      c2 = "" + Sa(c2);
      b2 = null;
      for (e = 0; e < a2.length; e++) {
        if (a2[e].value === c2) {
          a2[e].selected = true;
          d2 && (a2[e].defaultSelected = true);
          return;
        }
        null !== b2 || a2[e].disabled || (b2 = a2[e]);
      }
      null !== b2 && (b2.selected = true);
    }
  }
  function gb(a2, b2) {
    if (null != b2.dangerouslySetInnerHTML)
      throw Error(p2(91));
    return A2({}, b2, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
  }
  function hb(a2, b2) {
    var c2 = b2.value;
    if (null == c2) {
      c2 = b2.children;
      b2 = b2.defaultValue;
      if (null != c2) {
        if (null != b2)
          throw Error(p2(92));
        if (eb(c2)) {
          if (1 < c2.length)
            throw Error(p2(93));
          c2 = c2[0];
        }
        b2 = c2;
      }
      null == b2 && (b2 = "");
      c2 = b2;
    }
    a2._wrapperState = { initialValue: Sa(c2) };
  }
  function ib(a2, b2) {
    var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
    null != c2 && (c2 = "" + c2, c2 !== a2.value && (a2.value = c2), null == b2.defaultValue && a2.defaultValue !== c2 && (a2.defaultValue = c2));
    null != d2 && (a2.defaultValue = "" + d2);
  }
  function jb(a2) {
    var b2 = a2.textContent;
    b2 === a2._wrapperState.initialValue && "" !== b2 && null !== b2 && (a2.value = b2);
  }
  function kb(a2) {
    switch (a2) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function lb(a2, b2) {
    return null == a2 || "http://www.w3.org/1999/xhtml" === a2 ? kb(b2) : "http://www.w3.org/2000/svg" === a2 && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a2;
  }
  var mb, nb = function(a2) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e) {
      MSApp.execUnsafeLocalFunction(function() {
        return a2(b2, c2, d2, e);
      });
    } : a2;
  }(function(a2, b2) {
    if ("http://www.w3.org/2000/svg" !== a2.namespaceURI || "innerHTML" in a2)
      a2.innerHTML = b2;
    else {
      mb = mb || document.createElement("div");
      mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
      for (b2 = mb.firstChild; a2.firstChild; )
        a2.removeChild(a2.firstChild);
      for (; b2.firstChild; )
        a2.appendChild(b2.firstChild);
    }
  });
  function ob(a2, b2) {
    if (b2) {
      var c2 = a2.firstChild;
      if (c2 && c2 === a2.lastChild && 3 === c2.nodeType) {
        c2.nodeValue = b2;
        return;
      }
    }
    a2.textContent = b2;
  }
  var pb = {
    animationIterationCount: true,
    aspectRatio: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  }, qb = ["Webkit", "ms", "Moz", "O"];
  Object.keys(pb).forEach(function(a2) {
    qb.forEach(function(b2) {
      b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
      pb[b2] = pb[a2];
    });
  });
  function rb(a2, b2, c2) {
    return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a2) && pb[a2] ? ("" + b2).trim() : b2 + "px";
  }
  function sb(a2, b2) {
    a2 = a2.style;
    for (var c2 in b2)
      if (b2.hasOwnProperty(c2)) {
        var d2 = 0 === c2.indexOf("--"), e = rb(c2, b2[c2], d2);
        "float" === c2 && (c2 = "cssFloat");
        d2 ? a2.setProperty(c2, e) : a2[c2] = e;
      }
  }
  var tb = A2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
  function ub(a2, b2) {
    if (b2) {
      if (tb[a2] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
        throw Error(p2(137, a2));
      if (null != b2.dangerouslySetInnerHTML) {
        if (null != b2.children)
          throw Error(p2(60));
        if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
          throw Error(p2(61));
      }
      if (null != b2.style && "object" !== typeof b2.style)
        throw Error(p2(62));
    }
  }
  function vb(a2, b2) {
    if (-1 === a2.indexOf("-"))
      return "string" === typeof b2.is;
    switch (a2) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var wb = null;
  function xb(a2) {
    a2 = a2.target || a2.srcElement || window;
    a2.correspondingUseElement && (a2 = a2.correspondingUseElement);
    return 3 === a2.nodeType ? a2.parentNode : a2;
  }
  var yb = null, zb = null, Ab = null;
  function Bb(a2) {
    if (a2 = Cb(a2)) {
      if ("function" !== typeof yb)
        throw Error(p2(280));
      var b2 = a2.stateNode;
      b2 && (b2 = Db(b2), yb(a2.stateNode, a2.type, b2));
    }
  }
  function Eb(a2) {
    zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
  }
  function Fb() {
    if (zb) {
      var a2 = zb, b2 = Ab;
      Ab = zb = null;
      Bb(a2);
      if (b2)
        for (a2 = 0; a2 < b2.length; a2++)
          Bb(b2[a2]);
    }
  }
  function Gb(a2, b2) {
    return a2(b2);
  }
  function Hb() {
  }
  var Ib = false;
  function Jb(a2, b2, c2) {
    if (Ib)
      return a2(b2, c2);
    Ib = true;
    try {
      return Gb(a2, b2, c2);
    } finally {
      if (Ib = false, null !== zb || null !== Ab)
        Hb(), Fb();
    }
  }
  function Kb(a2, b2) {
    var c2 = a2.stateNode;
    if (null === c2)
      return null;
    var d2 = Db(c2);
    if (null === d2)
      return null;
    c2 = d2[b2];
    a:
      switch (b2) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d2 = !d2.disabled) || (a2 = a2.type, d2 = !("button" === a2 || "input" === a2 || "select" === a2 || "textarea" === a2));
          a2 = !d2;
          break a;
        default:
          a2 = false;
      }
    if (a2)
      return null;
    if (c2 && "function" !== typeof c2)
      throw Error(p2(231, b2, typeof c2));
    return c2;
  }
  var Lb = false;
  if (ia)
    try {
      var Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a2) {
      Lb = false;
    }
  function Nb(a2, b2, c2, d2, e, f2, g2, h2, k2) {
    var l2 = Array.prototype.slice.call(arguments, 3);
    try {
      b2.apply(c2, l2);
    } catch (m2) {
      this.onError(m2);
    }
  }
  var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a2) {
    Ob = true;
    Pb = a2;
  } };
  function Tb(a2, b2, c2, d2, e, f2, g2, h2, k2) {
    Ob = false;
    Pb = null;
    Nb.apply(Sb, arguments);
  }
  function Ub(a2, b2, c2, d2, e, f2, g2, h2, k2) {
    Tb.apply(this, arguments);
    if (Ob) {
      if (Ob) {
        var l2 = Pb;
        Ob = false;
        Pb = null;
      } else
        throw Error(p2(198));
      Qb || (Qb = true, Rb = l2);
    }
  }
  function Vb(a2) {
    var b2 = a2, c2 = a2;
    if (a2.alternate)
      for (; b2.return; )
        b2 = b2.return;
    else {
      a2 = b2;
      do
        b2 = a2, 0 !== (b2.flags & 4098) && (c2 = b2.return), a2 = b2.return;
      while (a2);
    }
    return 3 === b2.tag ? c2 : null;
  }
  function Wb(a2) {
    if (13 === a2.tag) {
      var b2 = a2.memoizedState;
      null === b2 && (a2 = a2.alternate, null !== a2 && (b2 = a2.memoizedState));
      if (null !== b2)
        return b2.dehydrated;
    }
    return null;
  }
  function Xb(a2) {
    if (Vb(a2) !== a2)
      throw Error(p2(188));
  }
  function Yb(a2) {
    var b2 = a2.alternate;
    if (!b2) {
      b2 = Vb(a2);
      if (null === b2)
        throw Error(p2(188));
      return b2 !== a2 ? null : a2;
    }
    for (var c2 = a2, d2 = b2; ; ) {
      var e = c2.return;
      if (null === e)
        break;
      var f2 = e.alternate;
      if (null === f2) {
        d2 = e.return;
        if (null !== d2) {
          c2 = d2;
          continue;
        }
        break;
      }
      if (e.child === f2.child) {
        for (f2 = e.child; f2; ) {
          if (f2 === c2)
            return Xb(e), a2;
          if (f2 === d2)
            return Xb(e), b2;
          f2 = f2.sibling;
        }
        throw Error(p2(188));
      }
      if (c2.return !== d2.return)
        c2 = e, d2 = f2;
      else {
        for (var g2 = false, h2 = e.child; h2; ) {
          if (h2 === c2) {
            g2 = true;
            c2 = e;
            d2 = f2;
            break;
          }
          if (h2 === d2) {
            g2 = true;
            d2 = e;
            c2 = f2;
            break;
          }
          h2 = h2.sibling;
        }
        if (!g2) {
          for (h2 = f2.child; h2; ) {
            if (h2 === c2) {
              g2 = true;
              c2 = f2;
              d2 = e;
              break;
            }
            if (h2 === d2) {
              g2 = true;
              d2 = f2;
              c2 = e;
              break;
            }
            h2 = h2.sibling;
          }
          if (!g2)
            throw Error(p2(189));
        }
      }
      if (c2.alternate !== d2)
        throw Error(p2(190));
    }
    if (3 !== c2.tag)
      throw Error(p2(188));
    return c2.stateNode.current === c2 ? a2 : b2;
  }
  function Zb(a2) {
    a2 = Yb(a2);
    return null !== a2 ? $b(a2) : null;
  }
  function $b(a2) {
    if (5 === a2.tag || 6 === a2.tag)
      return a2;
    for (a2 = a2.child; null !== a2; ) {
      var b2 = $b(a2);
      if (null !== b2)
        return b2;
      a2 = a2.sibling;
    }
    return null;
  }
  var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B2 = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
  function mc(a2) {
    if (lc && "function" === typeof lc.onCommitFiberRoot)
      try {
        lc.onCommitFiberRoot(kc, a2, void 0, 128 === (a2.current.flags & 128));
      } catch (b2) {
      }
  }
  var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
  function nc(a2) {
    a2 >>>= 0;
    return 0 === a2 ? 32 : 31 - (pc(a2) / qc | 0) | 0;
  }
  var rc = 64, sc = 4194304;
  function tc(a2) {
    switch (a2 & -a2) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a2 & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return a2 & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return a2;
    }
  }
  function uc(a2, b2) {
    var c2 = a2.pendingLanes;
    if (0 === c2)
      return 0;
    var d2 = 0, e = a2.suspendedLanes, f2 = a2.pingedLanes, g2 = c2 & 268435455;
    if (0 !== g2) {
      var h2 = g2 & ~e;
      0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
    } else
      g2 = c2 & ~e, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
    if (0 === d2)
      return 0;
    if (0 !== b2 && b2 !== d2 && 0 === (b2 & e) && (e = d2 & -d2, f2 = b2 & -b2, e >= f2 || 16 === e && 0 !== (f2 & 4194240)))
      return b2;
    0 !== (d2 & 4) && (d2 |= c2 & 16);
    b2 = a2.entangledLanes;
    if (0 !== b2)
      for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
        c2 = 31 - oc(b2), e = 1 << c2, d2 |= a2[c2], b2 &= ~e;
    return d2;
  }
  function vc(a2, b2) {
    switch (a2) {
      case 1:
      case 2:
      case 4:
        return b2 + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return b2 + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function wc(a2, b2) {
    for (var c2 = a2.suspendedLanes, d2 = a2.pingedLanes, e = a2.expirationTimes, f2 = a2.pendingLanes; 0 < f2; ) {
      var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e[g2];
      if (-1 === k2) {
        if (0 === (h2 & c2) || 0 !== (h2 & d2))
          e[g2] = vc(h2, b2);
      } else
        k2 <= b2 && (a2.expiredLanes |= h2);
      f2 &= ~h2;
    }
  }
  function xc(a2) {
    a2 = a2.pendingLanes & -1073741825;
    return 0 !== a2 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
  }
  function yc() {
    var a2 = rc;
    rc <<= 1;
    0 === (rc & 4194240) && (rc = 64);
    return a2;
  }
  function zc(a2) {
    for (var b2 = [], c2 = 0; 31 > c2; c2++)
      b2.push(a2);
    return b2;
  }
  function Ac(a2, b2, c2) {
    a2.pendingLanes |= b2;
    536870912 !== b2 && (a2.suspendedLanes = 0, a2.pingedLanes = 0);
    a2 = a2.eventTimes;
    b2 = 31 - oc(b2);
    a2[b2] = c2;
  }
  function Bc(a2, b2) {
    var c2 = a2.pendingLanes & ~b2;
    a2.pendingLanes = b2;
    a2.suspendedLanes = 0;
    a2.pingedLanes = 0;
    a2.expiredLanes &= b2;
    a2.mutableReadLanes &= b2;
    a2.entangledLanes &= b2;
    b2 = a2.entanglements;
    var d2 = a2.eventTimes;
    for (a2 = a2.expirationTimes; 0 < c2; ) {
      var e = 31 - oc(c2), f2 = 1 << e;
      b2[e] = 0;
      d2[e] = -1;
      a2[e] = -1;
      c2 &= ~f2;
    }
  }
  function Cc(a2, b2) {
    var c2 = a2.entangledLanes |= b2;
    for (a2 = a2.entanglements; c2; ) {
      var d2 = 31 - oc(c2), e = 1 << d2;
      e & b2 | a2[d2] & b2 && (a2[d2] |= b2);
      c2 &= ~e;
    }
  }
  var C2 = 0;
  function Dc(a2) {
    a2 &= -a2;
    return 1 < a2 ? 4 < a2 ? 0 !== (a2 & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Sc(a2, b2) {
    switch (a2) {
      case "focusin":
      case "focusout":
        Lc = null;
        break;
      case "dragenter":
      case "dragleave":
        Mc = null;
        break;
      case "mouseover":
      case "mouseout":
        Nc = null;
        break;
      case "pointerover":
      case "pointerout":
        Oc.delete(b2.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Pc.delete(b2.pointerId);
    }
  }
  function Tc(a2, b2, c2, d2, e, f2) {
    if (null === a2 || a2.nativeEvent !== f2)
      return a2 = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a2;
    a2.eventSystemFlags |= d2;
    b2 = a2.targetContainers;
    null !== e && -1 === b2.indexOf(e) && b2.push(e);
    return a2;
  }
  function Uc(a2, b2, c2, d2, e) {
    switch (b2) {
      case "focusin":
        return Lc = Tc(Lc, a2, b2, c2, d2, e), true;
      case "dragenter":
        return Mc = Tc(Mc, a2, b2, c2, d2, e), true;
      case "mouseover":
        return Nc = Tc(Nc, a2, b2, c2, d2, e), true;
      case "pointerover":
        var f2 = e.pointerId;
        Oc.set(f2, Tc(Oc.get(f2) || null, a2, b2, c2, d2, e));
        return true;
      case "gotpointercapture":
        return f2 = e.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a2, b2, c2, d2, e)), true;
    }
    return false;
  }
  function Vc(a2) {
    var b2 = Wc(a2.target);
    if (null !== b2) {
      var c2 = Vb(b2);
      if (null !== c2) {
        if (b2 = c2.tag, 13 === b2) {
          if (b2 = Wb(c2), null !== b2) {
            a2.blockedOn = b2;
            Ic(a2.priority, function() {
              Gc(c2);
            });
            return;
          }
        } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
          a2.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
          return;
        }
      }
    }
    a2.blockedOn = null;
  }
  function Xc(a2) {
    if (null !== a2.blockedOn)
      return false;
    for (var b2 = a2.targetContainers; 0 < b2.length; ) {
      var c2 = Yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
      if (null === c2) {
        c2 = a2.nativeEvent;
        var d2 = new c2.constructor(c2.type, c2);
        wb = d2;
        c2.target.dispatchEvent(d2);
        wb = null;
      } else
        return b2 = Cb(c2), null !== b2 && Fc(b2), a2.blockedOn = c2, false;
      b2.shift();
    }
    return true;
  }
  function Zc(a2, b2, c2) {
    Xc(a2) && c2.delete(b2);
  }
  function $c() {
    Jc = false;
    null !== Lc && Xc(Lc) && (Lc = null);
    null !== Mc && Xc(Mc) && (Mc = null);
    null !== Nc && Xc(Nc) && (Nc = null);
    Oc.forEach(Zc);
    Pc.forEach(Zc);
  }
  function ad(a2, b2) {
    a2.blockedOn === b2 && (a2.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
  }
  function bd(a2) {
    function b2(b3) {
      return ad(b3, a2);
    }
    if (0 < Kc.length) {
      ad(Kc[0], a2);
      for (var c2 = 1; c2 < Kc.length; c2++) {
        var d2 = Kc[c2];
        d2.blockedOn === a2 && (d2.blockedOn = null);
      }
    }
    null !== Lc && ad(Lc, a2);
    null !== Mc && ad(Mc, a2);
    null !== Nc && ad(Nc, a2);
    Oc.forEach(b2);
    Pc.forEach(b2);
    for (c2 = 0; c2 < Qc.length; c2++)
      d2 = Qc[c2], d2.blockedOn === a2 && (d2.blockedOn = null);
    for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
      Vc(c2), null === c2.blockedOn && Qc.shift();
  }
  var cd = ua.ReactCurrentBatchConfig, dd = true;
  function ed(a2, b2, c2, d2) {
    var e = C2, f2 = cd.transition;
    cd.transition = null;
    try {
      C2 = 1, fd(a2, b2, c2, d2);
    } finally {
      C2 = e, cd.transition = f2;
    }
  }
  function gd(a2, b2, c2, d2) {
    var e = C2, f2 = cd.transition;
    cd.transition = null;
    try {
      C2 = 4, fd(a2, b2, c2, d2);
    } finally {
      C2 = e, cd.transition = f2;
    }
  }
  function fd(a2, b2, c2, d2) {
    if (dd) {
      var e = Yc(a2, b2, c2, d2);
      if (null === e)
        hd(a2, b2, d2, id2, c2), Sc(a2, d2);
      else if (Uc(e, a2, b2, c2, d2))
        d2.stopPropagation();
      else if (Sc(a2, d2), b2 & 4 && -1 < Rc.indexOf(a2)) {
        for (; null !== e; ) {
          var f2 = Cb(e);
          null !== f2 && Ec(f2);
          f2 = Yc(a2, b2, c2, d2);
          null === f2 && hd(a2, b2, d2, id2, c2);
          if (f2 === e)
            break;
          e = f2;
        }
        null !== e && d2.stopPropagation();
      } else
        hd(a2, b2, d2, null, c2);
    }
  }
  var id2 = null;
  function Yc(a2, b2, c2, d2) {
    id2 = null;
    a2 = xb(d2);
    a2 = Wc(a2);
    if (null !== a2)
      if (b2 = Vb(a2), null === b2)
        a2 = null;
      else if (c2 = b2.tag, 13 === c2) {
        a2 = Wb(b2);
        if (null !== a2)
          return a2;
        a2 = null;
      } else if (3 === c2) {
        if (b2.stateNode.current.memoizedState.isDehydrated)
          return 3 === b2.tag ? b2.stateNode.containerInfo : null;
        a2 = null;
      } else
        b2 !== a2 && (a2 = null);
    id2 = a2;
    return null;
  }
  function jd(a2) {
    switch (a2) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (ec()) {
          case fc:
            return 1;
          case gc:
            return 4;
          case hc:
          case ic:
            return 16;
          case jc:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var kd = null, ld = null, md = null;
  function nd() {
    if (md)
      return md;
    var a2, b2 = ld, c2 = b2.length, d2, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
    for (a2 = 0; a2 < c2 && b2[a2] === e[a2]; a2++)
      ;
    var g2 = c2 - a2;
    for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e[f2 - d2]; d2++)
      ;
    return md = e.slice(a2, 1 < d2 ? 1 - d2 : void 0);
  }
  function od(a2) {
    var b2 = a2.keyCode;
    "charCode" in a2 ? (a2 = a2.charCode, 0 === a2 && 13 === b2 && (a2 = 13)) : a2 = b2;
    10 === a2 && (a2 = 13);
    return 32 <= a2 || 13 === a2 ? a2 : 0;
  }
  function pd() {
    return true;
  }
  function qd() {
    return false;
  }
  function rd(a2) {
    function b2(b3, d2, e, f2, g2) {
      this._reactName = b3;
      this._targetInst = e;
      this.type = d2;
      this.nativeEvent = f2;
      this.target = g2;
      this.currentTarget = null;
      for (var c2 in a2)
        a2.hasOwnProperty(c2) && (b3 = a2[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
      this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
      this.isPropagationStopped = qd;
      return this;
    }
    A2(b2.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var a3 = this.nativeEvent;
      a3 && (a3.preventDefault ? a3.preventDefault() : "unknown" !== typeof a3.returnValue && (a3.returnValue = false), this.isDefaultPrevented = pd);
    }, stopPropagation: function() {
      var a3 = this.nativeEvent;
      a3 && (a3.stopPropagation ? a3.stopPropagation() : "unknown" !== typeof a3.cancelBubble && (a3.cancelBubble = true), this.isPropagationStopped = pd);
    }, persist: function() {
    }, isPersistent: pd });
    return b2;
  }
  var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
    return a2.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A2({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
    return void 0 === a2.relatedTarget ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
  }, movementX: function(a2) {
    if ("movementX" in a2)
      return a2.movementX;
    a2 !== yd && (yd && "mousemove" === a2.type ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2);
    return wd;
  }, movementY: function(a2) {
    return "movementY" in a2 ? a2.movementY : xd;
  } }), Bd = rd(Ad), Cd = A2({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A2({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A2({}, sd, { clipboardData: function(a2) {
    return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
  } }), Jd = rd(Id), Kd = A2({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
  function Pd(a2) {
    var b2 = this.nativeEvent;
    return b2.getModifierState ? b2.getModifierState(a2) : (a2 = Od[a2]) ? !!b2[a2] : false;
  }
  function zd() {
    return Pd;
  }
  var Qd = A2({}, ud, { key: function(a2) {
    if (a2.key) {
      var b2 = Md[a2.key] || a2.key;
      if ("Unidentified" !== b2)
        return b2;
    }
    return "keypress" === a2.type ? (a2 = od(a2), 13 === a2 ? "Enter" : String.fromCharCode(a2)) : "keydown" === a2.type || "keyup" === a2.type ? Nd[a2.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
    return "keypress" === a2.type ? od(a2) : 0;
  }, keyCode: function(a2) {
    return "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
  }, which: function(a2) {
    return "keypress" === a2.type ? od(a2) : "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
  } }), Rd = rd(Qd), Sd = A2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A2({}, Ad, {
    deltaX: function(a2) {
      return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
    },
    deltaY: function(a2) {
      return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
  ia && "documentMode" in document && (be = document.documentMode);
  var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
  function ge(a2, b2) {
    switch (a2) {
      case "keyup":
        return -1 !== $d.indexOf(b2.keyCode);
      case "keydown":
        return 229 !== b2.keyCode;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function he(a2) {
    a2 = a2.detail;
    return "object" === typeof a2 && "data" in a2 ? a2.data : null;
  }
  var ie2 = false;
  function je(a2, b2) {
    switch (a2) {
      case "compositionend":
        return he(b2);
      case "keypress":
        if (32 !== b2.which)
          return null;
        fe = true;
        return ee;
      case "textInput":
        return a2 = b2.data, a2 === ee && fe ? null : a2;
      default:
        return null;
    }
  }
  function ke(a2, b2) {
    if (ie2)
      return "compositionend" === a2 || !ae && ge(a2, b2) ? (a2 = nd(), md = ld = kd = null, ie2 = false, a2) : null;
    switch (a2) {
      case "paste":
        return null;
      case "keypress":
        if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
          if (b2.char && 1 < b2.char.length)
            return b2.char;
          if (b2.which)
            return String.fromCharCode(b2.which);
        }
        return null;
      case "compositionend":
        return de && "ko" !== b2.locale ? null : b2.data;
      default:
        return null;
    }
  }
  var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
  function me(a2) {
    var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
    return "input" === b2 ? !!le[a2.type] : "textarea" === b2 ? true : false;
  }
  function ne(a2, b2, c2, d2) {
    Eb(d2);
    b2 = oe(b2, "onChange");
    0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a2.push({ event: c2, listeners: b2 }));
  }
  var pe = null, qe = null;
  function re(a2) {
    se(a2, 0);
  }
  function te(a2) {
    var b2 = ue(a2);
    if (Wa(b2))
      return a2;
  }
  function ve(a2, b2) {
    if ("change" === a2)
      return b2;
  }
  var we = false;
  if (ia) {
    var xe;
    if (ia) {
      var ye = "oninput" in document;
      if (!ye) {
        var ze = document.createElement("div");
        ze.setAttribute("oninput", "return;");
        ye = "function" === typeof ze.oninput;
      }
      xe = ye;
    } else
      xe = false;
    we = xe && (!document.documentMode || 9 < document.documentMode);
  }
  function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
  }
  function Be(a2) {
    if ("value" === a2.propertyName && te(qe)) {
      var b2 = [];
      ne(b2, qe, a2, xb(a2));
      Jb(re, b2);
    }
  }
  function Ce(a2, b2, c2) {
    "focusin" === a2 ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a2 && Ae();
  }
  function De(a2) {
    if ("selectionchange" === a2 || "keyup" === a2 || "keydown" === a2)
      return te(qe);
  }
  function Ee(a2, b2) {
    if ("click" === a2)
      return te(b2);
  }
  function Fe(a2, b2) {
    if ("input" === a2 || "change" === a2)
      return te(b2);
  }
  function Ge(a2, b2) {
    return a2 === b2 && (0 !== a2 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
  }
  var He = "function" === typeof Object.is ? Object.is : Ge;
  function Ie(a2, b2) {
    if (He(a2, b2))
      return true;
    if ("object" !== typeof a2 || null === a2 || "object" !== typeof b2 || null === b2)
      return false;
    var c2 = Object.keys(a2), d2 = Object.keys(b2);
    if (c2.length !== d2.length)
      return false;
    for (d2 = 0; d2 < c2.length; d2++) {
      var e = c2[d2];
      if (!ja.call(b2, e) || !He(a2[e], b2[e]))
        return false;
    }
    return true;
  }
  function Je(a2) {
    for (; a2 && a2.firstChild; )
      a2 = a2.firstChild;
    return a2;
  }
  function Ke(a2, b2) {
    var c2 = Je(a2);
    a2 = 0;
    for (var d2; c2; ) {
      if (3 === c2.nodeType) {
        d2 = a2 + c2.textContent.length;
        if (a2 <= b2 && d2 >= b2)
          return { node: c2, offset: b2 - a2 };
        a2 = d2;
      }
      a: {
        for (; c2; ) {
          if (c2.nextSibling) {
            c2 = c2.nextSibling;
            break a;
          }
          c2 = c2.parentNode;
        }
        c2 = void 0;
      }
      c2 = Je(c2);
    }
  }
  function Le(a2, b2) {
    return a2 && b2 ? a2 === b2 ? true : a2 && 3 === a2.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a2, b2.parentNode) : "contains" in a2 ? a2.contains(b2) : a2.compareDocumentPosition ? !!(a2.compareDocumentPosition(b2) & 16) : false : false;
  }
  function Me() {
    for (var a2 = window, b2 = Xa(); b2 instanceof a2.HTMLIFrameElement; ) {
      try {
        var c2 = "string" === typeof b2.contentWindow.location.href;
      } catch (d2) {
        c2 = false;
      }
      if (c2)
        a2 = b2.contentWindow;
      else
        break;
      b2 = Xa(a2.document);
    }
    return b2;
  }
  function Ne(a2) {
    var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
    return b2 && ("input" === b2 && ("text" === a2.type || "search" === a2.type || "tel" === a2.type || "url" === a2.type || "password" === a2.type) || "textarea" === b2 || "true" === a2.contentEditable);
  }
  function Oe(a2) {
    var b2 = Me(), c2 = a2.focusedElem, d2 = a2.selectionRange;
    if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
      if (null !== d2 && Ne(c2)) {
        if (b2 = d2.start, a2 = d2.end, void 0 === a2 && (a2 = b2), "selectionStart" in c2)
          c2.selectionStart = b2, c2.selectionEnd = Math.min(a2, c2.value.length);
        else if (a2 = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a2.getSelection) {
          a2 = a2.getSelection();
          var e = c2.textContent.length, f2 = Math.min(d2.start, e);
          d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e);
          !a2.extend && f2 > d2 && (e = d2, d2 = f2, f2 = e);
          e = Ke(c2, f2);
          var g2 = Ke(
            c2,
            d2
          );
          e && g2 && (1 !== a2.rangeCount || a2.anchorNode !== e.node || a2.anchorOffset !== e.offset || a2.focusNode !== g2.node || a2.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e.node, e.offset), a2.removeAllRanges(), f2 > d2 ? (a2.addRange(b2), a2.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a2.addRange(b2)));
        }
      }
      b2 = [];
      for (a2 = c2; a2 = a2.parentNode; )
        1 === a2.nodeType && b2.push({ element: a2, left: a2.scrollLeft, top: a2.scrollTop });
      "function" === typeof c2.focus && c2.focus();
      for (c2 = 0; c2 < b2.length; c2++)
        a2 = b2[c2], a2.element.scrollLeft = a2.left, a2.element.scrollTop = a2.top;
    }
  }
  var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
  function Ue(a2, b2, c2) {
    var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
    Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a2.push({ event: b2, listeners: d2 }), b2.target = Qe)));
  }
  function Ve(a2, b2) {
    var c2 = {};
    c2[a2.toLowerCase()] = b2.toLowerCase();
    c2["Webkit" + a2] = "webkit" + b2;
    c2["Moz" + a2] = "moz" + b2;
    return c2;
  }
  var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
  ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
  function Ze(a2) {
    if (Xe[a2])
      return Xe[a2];
    if (!We[a2])
      return a2;
    var b2 = We[a2], c2;
    for (c2 in b2)
      if (b2.hasOwnProperty(c2) && c2 in Ye)
        return Xe[a2] = b2[c2];
    return a2;
  }
  var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function ff(a2, b2) {
    df.set(a2, b2);
    fa(b2, [a2]);
  }
  for (var gf = 0; gf < ef.length; gf++) {
    var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
    ff(jf, "on" + kf);
  }
  ff($e, "onAnimationEnd");
  ff(af, "onAnimationIteration");
  ff(bf, "onAnimationStart");
  ff("dblclick", "onDoubleClick");
  ff("focusin", "onFocus");
  ff("focusout", "onBlur");
  ff(cf, "onTransitionEnd");
  ha("onMouseEnter", ["mouseout", "mouseover"]);
  ha("onMouseLeave", ["mouseout", "mouseover"]);
  ha("onPointerEnter", ["pointerout", "pointerover"]);
  ha("onPointerLeave", ["pointerout", "pointerover"]);
  fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
  fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
  fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
  fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
  fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
  function nf(a2, b2, c2) {
    var d2 = a2.type || "unknown-event";
    a2.currentTarget = c2;
    Ub(d2, b2, void 0, a2);
    a2.currentTarget = null;
  }
  function se(a2, b2) {
    b2 = 0 !== (b2 & 4);
    for (var c2 = 0; c2 < a2.length; c2++) {
      var d2 = a2[c2], e = d2.event;
      d2 = d2.listeners;
      a: {
        var f2 = void 0;
        if (b2)
          for (var g2 = d2.length - 1; 0 <= g2; g2--) {
            var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
            h2 = h2.listener;
            if (k2 !== f2 && e.isPropagationStopped())
              break a;
            nf(e, h2, l2);
            f2 = k2;
          }
        else
          for (g2 = 0; g2 < d2.length; g2++) {
            h2 = d2[g2];
            k2 = h2.instance;
            l2 = h2.currentTarget;
            h2 = h2.listener;
            if (k2 !== f2 && e.isPropagationStopped())
              break a;
            nf(e, h2, l2);
            f2 = k2;
          }
      }
    }
    if (Qb)
      throw a2 = Rb, Qb = false, Rb = null, a2;
  }
  function D2(a2, b2) {
    var c2 = b2[of];
    void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
    var d2 = a2 + "__bubble";
    c2.has(d2) || (pf(b2, a2, 2, false), c2.add(d2));
  }
  function qf(a2, b2, c2) {
    var d2 = 0;
    b2 && (d2 |= 4);
    pf(c2, a2, d2, b2);
  }
  var rf = "_reactListening" + Math.random().toString(36).slice(2);
  function sf(a2) {
    if (!a2[rf]) {
      a2[rf] = true;
      da.forEach(function(b3) {
        "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a2), qf(b3, true, a2));
      });
      var b2 = 9 === a2.nodeType ? a2 : a2.ownerDocument;
      null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
    }
  }
  function pf(a2, b2, c2, d2) {
    switch (jd(b2)) {
      case 1:
        var e = ed;
        break;
      case 4:
        e = gd;
        break;
      default:
        e = fd;
    }
    c2 = e.bind(null, b2, c2, a2);
    e = void 0;
    !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e = true);
    d2 ? void 0 !== e ? a2.addEventListener(b2, c2, { capture: true, passive: e }) : a2.addEventListener(b2, c2, true) : void 0 !== e ? a2.addEventListener(b2, c2, { passive: e }) : a2.addEventListener(b2, c2, false);
  }
  function hd(a2, b2, c2, d2, e) {
    var f2 = d2;
    if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
      a:
        for (; ; ) {
          if (null === d2)
            return;
          var g2 = d2.tag;
          if (3 === g2 || 4 === g2) {
            var h2 = d2.stateNode.containerInfo;
            if (h2 === e || 8 === h2.nodeType && h2.parentNode === e)
              break;
            if (4 === g2)
              for (g2 = d2.return; null !== g2; ) {
                var k2 = g2.tag;
                if (3 === k2 || 4 === k2) {
                  if (k2 = g2.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e)
                    return;
                }
                g2 = g2.return;
              }
            for (; null !== h2; ) {
              g2 = Wc(h2);
              if (null === g2)
                return;
              k2 = g2.tag;
              if (5 === k2 || 6 === k2) {
                d2 = f2 = g2;
                continue a;
              }
              h2 = h2.parentNode;
            }
          }
          d2 = d2.return;
        }
    Jb(function() {
      var d3 = f2, e2 = xb(c2), g3 = [];
      a: {
        var h3 = df.get(a2);
        if (void 0 !== h3) {
          var k3 = td, n2 = a2;
          switch (a2) {
            case "keypress":
              if (0 === od(c2))
                break a;
            case "keydown":
            case "keyup":
              k3 = Rd;
              break;
            case "focusin":
              n2 = "focus";
              k3 = Fd;
              break;
            case "focusout":
              n2 = "blur";
              k3 = Fd;
              break;
            case "beforeblur":
            case "afterblur":
              k3 = Fd;
              break;
            case "click":
              if (2 === c2.button)
                break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k3 = Bd;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k3 = Dd;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k3 = Vd;
              break;
            case $e:
            case af:
            case bf:
              k3 = Hd;
              break;
            case cf:
              k3 = Xd;
              break;
            case "scroll":
              k3 = vd;
              break;
            case "wheel":
              k3 = Zd;
              break;
            case "copy":
            case "cut":
            case "paste":
              k3 = Jd;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k3 = Td;
          }
          var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a2, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
          t2 = [];
          for (var w2 = d3, u2; null !== w2; ) {
            u2 = w2;
            var F2 = u2.stateNode;
            5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
            if (J2)
              break;
            w2 = w2.return;
          }
          0 < t2.length && (h3 = new k3(h3, n2, null, c2, e2), g3.push({ event: h3, listeners: t2 }));
        }
      }
      if (0 === (b2 & 7)) {
        a: {
          h3 = "mouseover" === a2 || "pointerover" === a2;
          k3 = "mouseout" === a2 || "pointerout" === a2;
          if (h3 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
            break a;
          if (k3 || h3) {
            h3 = e2.window === e2 ? e2 : (h3 = e2.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
            if (k3) {
              if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
                n2 = null;
            } else
              k3 = null, n2 = d3;
            if (k3 !== n2) {
              t2 = Bd;
              F2 = "onMouseLeave";
              x2 = "onMouseEnter";
              w2 = "mouse";
              if ("pointerout" === a2 || "pointerover" === a2)
                t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
              J2 = null == k3 ? h3 : ue(k3);
              u2 = null == n2 ? h3 : ue(n2);
              h3 = new t2(F2, w2 + "leave", k3, c2, e2);
              h3.target = J2;
              h3.relatedTarget = u2;
              F2 = null;
              Wc(e2) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e2), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
              J2 = F2;
              if (k3 && n2)
                b: {
                  t2 = k3;
                  x2 = n2;
                  w2 = 0;
                  for (u2 = t2; u2; u2 = vf(u2))
                    w2++;
                  u2 = 0;
                  for (F2 = x2; F2; F2 = vf(F2))
                    u2++;
                  for (; 0 < w2 - u2; )
                    t2 = vf(t2), w2--;
                  for (; 0 < u2 - w2; )
                    x2 = vf(x2), u2--;
                  for (; w2--; ) {
                    if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                      break b;
                    t2 = vf(t2);
                    x2 = vf(x2);
                  }
                  t2 = null;
                }
              else
                t2 = null;
              null !== k3 && wf(g3, h3, k3, t2, false);
              null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
            }
          }
        }
        a: {
          h3 = d3 ? ue(d3) : window;
          k3 = h3.nodeName && h3.nodeName.toLowerCase();
          if ("select" === k3 || "input" === k3 && "file" === h3.type)
            var na = ve;
          else if (me(h3))
            if (we)
              na = Fe;
            else {
              na = De;
              var xa = Ce;
            }
          else
            (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee);
          if (na && (na = na(a2, d3))) {
            ne(g3, na, c2, e2);
            break a;
          }
          xa && xa(a2, h3, d3);
          "focusout" === a2 && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
        }
        xa = d3 ? ue(d3) : window;
        switch (a2) {
          case "focusin":
            if (me(xa) || "true" === xa.contentEditable)
              Qe = xa, Re = d3, Se = null;
            break;
          case "focusout":
            Se = Re = Qe = null;
            break;
          case "mousedown":
            Te = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te = false;
            Ue(g3, c2, e2);
            break;
          case "selectionchange":
            if (Pe)
              break;
          case "keydown":
          case "keyup":
            Ue(g3, c2, e2);
        }
        var $a;
        if (ae)
          b: {
            switch (a2) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
        else
          ie2 ? ge(a2, c2) && (ba = "onCompositionEnd") : "keydown" === a2 && 229 === c2.keyCode && (ba = "onCompositionStart");
        ba && (de && "ko" !== c2.locale && (ie2 || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie2 && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie2 = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a2, null, c2, e2), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c2), null !== $a && (ba.data = $a))));
        if ($a = ce ? je(a2, c2) : ke(a2, c2))
          d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c2, e2), g3.push({ event: e2, listeners: d3 }), e2.data = $a);
      }
      se(g3, b2);
    });
  }
  function tf(a2, b2, c2) {
    return { instance: a2, listener: b2, currentTarget: c2 };
  }
  function oe(a2, b2) {
    for (var c2 = b2 + "Capture", d2 = []; null !== a2; ) {
      var e = a2, f2 = e.stateNode;
      5 === e.tag && null !== f2 && (e = f2, f2 = Kb(a2, c2), null != f2 && d2.unshift(tf(a2, f2, e)), f2 = Kb(a2, b2), null != f2 && d2.push(tf(a2, f2, e)));
      a2 = a2.return;
    }
    return d2;
  }
  function vf(a2) {
    if (null === a2)
      return null;
    do
      a2 = a2.return;
    while (a2 && 5 !== a2.tag);
    return a2 ? a2 : null;
  }
  function wf(a2, b2, c2, d2, e) {
    for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
      var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
      if (null !== k2 && k2 === d2)
        break;
      5 === h2.tag && null !== l2 && (h2 = l2, e ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h2))) : e || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h2))));
      c2 = c2.return;
    }
    0 !== g2.length && a2.push({ event: b2, listeners: g2 });
  }
  var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
  function zf(a2) {
    return ("string" === typeof a2 ? a2 : "" + a2).replace(xf, "\n").replace(yf, "");
  }
  function Af(a2, b2, c2) {
    b2 = zf(b2);
    if (zf(a2) !== b2 && c2)
      throw Error(p2(425));
  }
  function Bf() {
  }
  var Cf = null, Df = null;
  function Ef(a2, b2) {
    return "textarea" === a2 || "noscript" === a2 || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
  }
  var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a2) {
    return Hf.resolve(null).then(a2).catch(If);
  } : Ff;
  function If(a2) {
    setTimeout(function() {
      throw a2;
    });
  }
  function Kf(a2, b2) {
    var c2 = b2, d2 = 0;
    do {
      var e = c2.nextSibling;
      a2.removeChild(c2);
      if (e && 8 === e.nodeType)
        if (c2 = e.data, "/$" === c2) {
          if (0 === d2) {
            a2.removeChild(e);
            bd(b2);
            return;
          }
          d2--;
        } else
          "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
      c2 = e;
    } while (c2);
    bd(b2);
  }
  function Lf(a2) {
    for (; null != a2; a2 = a2.nextSibling) {
      var b2 = a2.nodeType;
      if (1 === b2 || 3 === b2)
        break;
      if (8 === b2) {
        b2 = a2.data;
        if ("$" === b2 || "$!" === b2 || "$?" === b2)
          break;
        if ("/$" === b2)
          return null;
      }
    }
    return a2;
  }
  function Mf(a2) {
    a2 = a2.previousSibling;
    for (var b2 = 0; a2; ) {
      if (8 === a2.nodeType) {
        var c2 = a2.data;
        if ("$" === c2 || "$!" === c2 || "$?" === c2) {
          if (0 === b2)
            return a2;
          b2--;
        } else
          "/$" === c2 && b2++;
      }
      a2 = a2.previousSibling;
    }
    return null;
  }
  var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
  function Wc(a2) {
    var b2 = a2[Of];
    if (b2)
      return b2;
    for (var c2 = a2.parentNode; c2; ) {
      if (b2 = c2[uf] || c2[Of]) {
        c2 = b2.alternate;
        if (null !== b2.child || null !== c2 && null !== c2.child)
          for (a2 = Mf(a2); null !== a2; ) {
            if (c2 = a2[Of])
              return c2;
            a2 = Mf(a2);
          }
        return b2;
      }
      a2 = c2;
      c2 = a2.parentNode;
    }
    return null;
  }
  function Cb(a2) {
    a2 = a2[Of] || a2[uf];
    return !a2 || 5 !== a2.tag && 6 !== a2.tag && 13 !== a2.tag && 3 !== a2.tag ? null : a2;
  }
  function ue(a2) {
    if (5 === a2.tag || 6 === a2.tag)
      return a2.stateNode;
    throw Error(p2(33));
  }
  function Db(a2) {
    return a2[Pf] || null;
  }
  var Sf = [], Tf = -1;
  function Uf(a2) {
    return { current: a2 };
  }
  function E2(a2) {
    0 > Tf || (a2.current = Sf[Tf], Sf[Tf] = null, Tf--);
  }
  function G2(a2, b2) {
    Tf++;
    Sf[Tf] = a2.current;
    a2.current = b2;
  }
  var Vf = {}, H2 = Uf(Vf), Wf = Uf(false), Xf = Vf;
  function Yf(a2, b2) {
    var c2 = a2.type.contextTypes;
    if (!c2)
      return Vf;
    var d2 = a2.stateNode;
    if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
      return d2.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f2;
    for (f2 in c2)
      e[f2] = b2[f2];
    d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e);
    return e;
  }
  function Zf(a2) {
    a2 = a2.childContextTypes;
    return null !== a2 && void 0 !== a2;
  }
  function $f() {
    E2(Wf);
    E2(H2);
  }
  function ag(a2, b2, c2) {
    if (H2.current !== Vf)
      throw Error(p2(168));
    G2(H2, b2);
    G2(Wf, c2);
  }
  function bg(a2, b2, c2) {
    var d2 = a2.stateNode;
    b2 = b2.childContextTypes;
    if ("function" !== typeof d2.getChildContext)
      return c2;
    d2 = d2.getChildContext();
    for (var e in d2)
      if (!(e in b2))
        throw Error(p2(108, Ra(a2) || "Unknown", e));
    return A2({}, c2, d2);
  }
  function cg(a2) {
    a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Vf;
    Xf = H2.current;
    G2(H2, a2);
    G2(Wf, Wf.current);
    return true;
  }
  function dg(a2, b2, c2) {
    var d2 = a2.stateNode;
    if (!d2)
      throw Error(p2(169));
    c2 ? (a2 = bg(a2, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a2, E2(Wf), E2(H2), G2(H2, a2)) : E2(Wf);
    G2(Wf, c2);
  }
  var eg = null, fg = false, gg = false;
  function hg(a2) {
    null === eg ? eg = [a2] : eg.push(a2);
  }
  function ig(a2) {
    fg = true;
    hg(a2);
  }
  function jg() {
    if (!gg && null !== eg) {
      gg = true;
      var a2 = 0, b2 = C2;
      try {
        var c2 = eg;
        for (C2 = 1; a2 < c2.length; a2++) {
          var d2 = c2[a2];
          do
            d2 = d2(true);
          while (null !== d2);
        }
        eg = null;
        fg = false;
      } catch (e) {
        throw null !== eg && (eg = eg.slice(a2 + 1)), ac(fc, jg), e;
      } finally {
        C2 = b2, gg = false;
      }
    }
    return null;
  }
  var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
  function tg(a2, b2) {
    kg[lg++] = ng;
    kg[lg++] = mg;
    mg = a2;
    ng = b2;
  }
  function ug(a2, b2, c2) {
    og[pg++] = rg;
    og[pg++] = sg;
    og[pg++] = qg;
    qg = a2;
    var d2 = rg;
    a2 = sg;
    var e = 32 - oc(d2) - 1;
    d2 &= ~(1 << e);
    c2 += 1;
    var f2 = 32 - oc(b2) + e;
    if (30 < f2) {
      var g2 = e - e % 5;
      f2 = (d2 & (1 << g2) - 1).toString(32);
      d2 >>= g2;
      e -= g2;
      rg = 1 << 32 - oc(b2) + e | c2 << e | d2;
      sg = f2 + a2;
    } else
      rg = 1 << f2 | c2 << e | d2, sg = a2;
  }
  function vg(a2) {
    null !== a2.return && (tg(a2, 1), ug(a2, 1, 0));
  }
  function wg(a2) {
    for (; a2 === mg; )
      mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
    for (; a2 === qg; )
      qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
  }
  var xg = null, yg = null, I2 = false, zg = null;
  function Ag(a2, b2) {
    var c2 = Bg(5, null, null, 0);
    c2.elementType = "DELETED";
    c2.stateNode = b2;
    c2.return = a2;
    b2 = a2.deletions;
    null === b2 ? (a2.deletions = [c2], a2.flags |= 16) : b2.push(c2);
  }
  function Cg(a2, b2) {
    switch (a2.tag) {
      case 5:
        var c2 = a2.type;
        b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
        return null !== b2 ? (a2.stateNode = b2, xg = a2, yg = Lf(b2.firstChild), true) : false;
      case 6:
        return b2 = "" === a2.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a2.stateNode = b2, xg = a2, yg = null, true) : false;
      case 13:
        return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a2.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a2, a2.child = c2, xg = a2, yg = null, true) : false;
      default:
        return false;
    }
  }
  function Dg(a2) {
    return 0 !== (a2.mode & 1) && 0 === (a2.flags & 128);
  }
  function Eg(a2) {
    if (I2) {
      var b2 = yg;
      if (b2) {
        var c2 = b2;
        if (!Cg(a2, b2)) {
          if (Dg(a2))
            throw Error(p2(418));
          b2 = Lf(c2.nextSibling);
          var d2 = xg;
          b2 && Cg(a2, b2) ? Ag(d2, c2) : (a2.flags = a2.flags & -4097 | 2, I2 = false, xg = a2);
        }
      } else {
        if (Dg(a2))
          throw Error(p2(418));
        a2.flags = a2.flags & -4097 | 2;
        I2 = false;
        xg = a2;
      }
    }
  }
  function Fg(a2) {
    for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
      a2 = a2.return;
    xg = a2;
  }
  function Gg(a2) {
    if (a2 !== xg)
      return false;
    if (!I2)
      return Fg(a2), I2 = true, false;
    var b2;
    (b2 = 3 !== a2.tag) && !(b2 = 5 !== a2.tag) && (b2 = a2.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a2.type, a2.memoizedProps));
    if (b2 && (b2 = yg)) {
      if (Dg(a2))
        throw Hg(), Error(p2(418));
      for (; b2; )
        Ag(a2, b2), b2 = Lf(b2.nextSibling);
    }
    Fg(a2);
    if (13 === a2.tag) {
      a2 = a2.memoizedState;
      a2 = null !== a2 ? a2.dehydrated : null;
      if (!a2)
        throw Error(p2(317));
      a: {
        a2 = a2.nextSibling;
        for (b2 = 0; a2; ) {
          if (8 === a2.nodeType) {
            var c2 = a2.data;
            if ("/$" === c2) {
              if (0 === b2) {
                yg = Lf(a2.nextSibling);
                break a;
              }
              b2--;
            } else
              "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
          }
          a2 = a2.nextSibling;
        }
        yg = null;
      }
    } else
      yg = xg ? Lf(a2.stateNode.nextSibling) : null;
    return true;
  }
  function Hg() {
    for (var a2 = yg; a2; )
      a2 = Lf(a2.nextSibling);
  }
  function Ig() {
    yg = xg = null;
    I2 = false;
  }
  function Jg(a2) {
    null === zg ? zg = [a2] : zg.push(a2);
  }
  var Kg = ua.ReactCurrentBatchConfig;
  function Lg(a2, b2) {
    if (a2 && a2.defaultProps) {
      b2 = A2({}, b2);
      a2 = a2.defaultProps;
      for (var c2 in a2)
        void 0 === b2[c2] && (b2[c2] = a2[c2]);
      return b2;
    }
    return b2;
  }
  var Mg = Uf(null), Ng = null, Og = null, Pg = null;
  function Qg() {
    Pg = Og = Ng = null;
  }
  function Rg(a2) {
    var b2 = Mg.current;
    E2(Mg);
    a2._currentValue = b2;
  }
  function Sg(a2, b2, c2) {
    for (; null !== a2; ) {
      var d2 = a2.alternate;
      (a2.childLanes & b2) !== b2 ? (a2.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
      if (a2 === c2)
        break;
      a2 = a2.return;
    }
  }
  function Tg(a2, b2) {
    Ng = a2;
    Pg = Og = null;
    a2 = a2.dependencies;
    null !== a2 && null !== a2.firstContext && (0 !== (a2.lanes & b2) && (Ug = true), a2.firstContext = null);
  }
  function Vg(a2) {
    var b2 = a2._currentValue;
    if (Pg !== a2)
      if (a2 = { context: a2, memoizedValue: b2, next: null }, null === Og) {
        if (null === Ng)
          throw Error(p2(308));
        Og = a2;
        Ng.dependencies = { lanes: 0, firstContext: a2 };
      } else
        Og = Og.next = a2;
    return b2;
  }
  var Wg = null;
  function Xg(a2) {
    null === Wg ? Wg = [a2] : Wg.push(a2);
  }
  function Yg(a2, b2, c2, d2) {
    var e = b2.interleaved;
    null === e ? (c2.next = c2, Xg(b2)) : (c2.next = e.next, e.next = c2);
    b2.interleaved = c2;
    return Zg(a2, d2);
  }
  function Zg(a2, b2) {
    a2.lanes |= b2;
    var c2 = a2.alternate;
    null !== c2 && (c2.lanes |= b2);
    c2 = a2;
    for (a2 = a2.return; null !== a2; )
      a2.childLanes |= b2, c2 = a2.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a2, a2 = a2.return;
    return 3 === c2.tag ? c2.stateNode : null;
  }
  var $g = false;
  function ah(a2) {
    a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function bh(a2, b2) {
    a2 = a2.updateQueue;
    b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
  }
  function ch(a2, b2) {
    return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
  }
  function dh(a2, b2, c2) {
    var d2 = a2.updateQueue;
    if (null === d2)
      return null;
    d2 = d2.shared;
    if (0 !== (K & 2)) {
      var e = d2.pending;
      null === e ? b2.next = b2 : (b2.next = e.next, e.next = b2);
      d2.pending = b2;
      return Zg(a2, c2);
    }
    e = d2.interleaved;
    null === e ? (b2.next = b2, Xg(d2)) : (b2.next = e.next, e.next = b2);
    d2.interleaved = b2;
    return Zg(a2, c2);
  }
  function eh(a2, b2, c2) {
    b2 = b2.updateQueue;
    if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
      var d2 = b2.lanes;
      d2 &= a2.pendingLanes;
      c2 |= d2;
      b2.lanes = c2;
      Cc(a2, c2);
    }
  }
  function fh(a2, b2) {
    var c2 = a2.updateQueue, d2 = a2.alternate;
    if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
      var e = null, f2 = null;
      c2 = c2.firstBaseUpdate;
      if (null !== c2) {
        do {
          var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
          null === f2 ? e = f2 = g2 : f2 = f2.next = g2;
          c2 = c2.next;
        } while (null !== c2);
        null === f2 ? e = f2 = b2 : f2 = f2.next = b2;
      } else
        e = f2 = b2;
      c2 = { baseState: d2.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
      a2.updateQueue = c2;
      return;
    }
    a2 = c2.lastBaseUpdate;
    null === a2 ? c2.firstBaseUpdate = b2 : a2.next = b2;
    c2.lastBaseUpdate = b2;
  }
  function gh(a2, b2, c2, d2) {
    var e = a2.updateQueue;
    $g = false;
    var f2 = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h2 = e.shared.pending;
    if (null !== h2) {
      e.shared.pending = null;
      var k2 = h2, l2 = k2.next;
      k2.next = null;
      null === g2 ? f2 = l2 : g2.next = l2;
      g2 = k2;
      var m2 = a2.alternate;
      null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
    }
    if (null !== f2) {
      var q = e.baseState;
      g2 = 0;
      m2 = l2 = k2 = null;
      h2 = f2;
      do {
        var r2 = h2.lane, y2 = h2.eventTime;
        if ((d2 & r2) === r2) {
          null !== m2 && (m2 = m2.next = {
            eventTime: y2,
            lane: 0,
            tag: h2.tag,
            payload: h2.payload,
            callback: h2.callback,
            next: null
          });
          a: {
            var n2 = a2, t2 = h2;
            r2 = b2;
            y2 = c2;
            switch (t2.tag) {
              case 1:
                n2 = t2.payload;
                if ("function" === typeof n2) {
                  q = n2.call(y2, q, r2);
                  break a;
                }
                q = n2;
                break a;
              case 3:
                n2.flags = n2.flags & -65537 | 128;
              case 0:
                n2 = t2.payload;
                r2 = "function" === typeof n2 ? n2.call(y2, q, r2) : n2;
                if (null === r2 || void 0 === r2)
                  break a;
                q = A2({}, q, r2);
                break a;
              case 2:
                $g = true;
            }
          }
          null !== h2.callback && 0 !== h2.lane && (a2.flags |= 64, r2 = e.effects, null === r2 ? e.effects = [h2] : r2.push(h2));
        } else
          y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q) : m2 = m2.next = y2, g2 |= r2;
        h2 = h2.next;
        if (null === h2)
          if (h2 = e.shared.pending, null === h2)
            break;
          else
            r2 = h2, h2 = r2.next, r2.next = null, e.lastBaseUpdate = r2, e.shared.pending = null;
      } while (1);
      null === m2 && (k2 = q);
      e.baseState = k2;
      e.firstBaseUpdate = l2;
      e.lastBaseUpdate = m2;
      b2 = e.shared.interleaved;
      if (null !== b2) {
        e = b2;
        do
          g2 |= e.lane, e = e.next;
        while (e !== b2);
      } else
        null === f2 && (e.shared.lanes = 0);
      hh |= g2;
      a2.lanes = g2;
      a2.memoizedState = q;
    }
  }
  function ih(a2, b2, c2) {
    a2 = b2.effects;
    b2.effects = null;
    if (null !== a2)
      for (b2 = 0; b2 < a2.length; b2++) {
        var d2 = a2[b2], e = d2.callback;
        if (null !== e) {
          d2.callback = null;
          d2 = c2;
          if ("function" !== typeof e)
            throw Error(p2(191, e));
          e.call(d2);
        }
      }
  }
  var jh = new aa.Component().refs;
  function kh(a2, b2, c2, d2) {
    b2 = a2.memoizedState;
    c2 = c2(d2, b2);
    c2 = null === c2 || void 0 === c2 ? b2 : A2({}, b2, c2);
    a2.memoizedState = c2;
    0 === a2.lanes && (a2.updateQueue.baseState = c2);
  }
  var nh = { isMounted: function(a2) {
    return (a2 = a2._reactInternals) ? Vb(a2) === a2 : false;
  }, enqueueSetState: function(a2, b2, c2) {
    a2 = a2._reactInternals;
    var d2 = L2(), e = lh(a2), f2 = ch(d2, e);
    f2.payload = b2;
    void 0 !== c2 && null !== c2 && (f2.callback = c2);
    b2 = dh(a2, f2, e);
    null !== b2 && (mh(b2, a2, e, d2), eh(b2, a2, e));
  }, enqueueReplaceState: function(a2, b2, c2) {
    a2 = a2._reactInternals;
    var d2 = L2(), e = lh(a2), f2 = ch(d2, e);
    f2.tag = 1;
    f2.payload = b2;
    void 0 !== c2 && null !== c2 && (f2.callback = c2);
    b2 = dh(a2, f2, e);
    null !== b2 && (mh(b2, a2, e, d2), eh(b2, a2, e));
  }, enqueueForceUpdate: function(a2, b2) {
    a2 = a2._reactInternals;
    var c2 = L2(), d2 = lh(a2), e = ch(c2, d2);
    e.tag = 2;
    void 0 !== b2 && null !== b2 && (e.callback = b2);
    b2 = dh(a2, e, d2);
    null !== b2 && (mh(b2, a2, d2, c2), eh(b2, a2, d2));
  } };
  function oh(a2, b2, c2, d2, e, f2, g2) {
    a2 = a2.stateNode;
    return "function" === typeof a2.shouldComponentUpdate ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e, f2) : true;
  }
  function ph(a2, b2, c2) {
    var d2 = false, e = Vf;
    var f2 = b2.contextType;
    "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e = Zf(b2) ? Xf : H2.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a2, e) : Vf);
    b2 = new b2(c2, f2);
    a2.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
    b2.updater = nh;
    a2.stateNode = b2;
    b2._reactInternals = a2;
    d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e, a2.__reactInternalMemoizedMaskedChildContext = f2);
    return b2;
  }
  function qh(a2, b2, c2, d2) {
    a2 = b2.state;
    "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
    "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
    b2.state !== a2 && nh.enqueueReplaceState(b2, b2.state, null);
  }
  function rh(a2, b2, c2, d2) {
    var e = a2.stateNode;
    e.props = c2;
    e.state = a2.memoizedState;
    e.refs = jh;
    ah(a2);
    var f2 = b2.contextType;
    "object" === typeof f2 && null !== f2 ? e.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H2.current, e.context = Yf(a2, f2));
    e.state = a2.memoizedState;
    f2 = b2.getDerivedStateFromProps;
    "function" === typeof f2 && (kh(a2, b2, f2, c2), e.state = a2.memoizedState);
    "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b2 = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b2 !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a2, c2, e, d2), e.state = a2.memoizedState);
    "function" === typeof e.componentDidMount && (a2.flags |= 4194308);
  }
  function sh(a2, b2, c2) {
    a2 = c2.ref;
    if (null !== a2 && "function" !== typeof a2 && "object" !== typeof a2) {
      if (c2._owner) {
        c2 = c2._owner;
        if (c2) {
          if (1 !== c2.tag)
            throw Error(p2(309));
          var d2 = c2.stateNode;
        }
        if (!d2)
          throw Error(p2(147, a2));
        var e = d2, f2 = "" + a2;
        if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
          return b2.ref;
        b2 = function(a3) {
          var b3 = e.refs;
          b3 === jh && (b3 = e.refs = {});
          null === a3 ? delete b3[f2] : b3[f2] = a3;
        };
        b2._stringRef = f2;
        return b2;
      }
      if ("string" !== typeof a2)
        throw Error(p2(284));
      if (!c2._owner)
        throw Error(p2(290, a2));
    }
    return a2;
  }
  function th(a2, b2) {
    a2 = Object.prototype.toString.call(b2);
    throw Error(p2(31, "[object Object]" === a2 ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a2));
  }
  function uh(a2) {
    var b2 = a2._init;
    return b2(a2._payload);
  }
  function vh(a2) {
    function b2(b3, c3) {
      if (a2) {
        var d3 = b3.deletions;
        null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
      }
    }
    function c2(c3, d3) {
      if (!a2)
        return null;
      for (; null !== d3; )
        b2(c3, d3), d3 = d3.sibling;
      return null;
    }
    function d2(a3, b3) {
      for (a3 = /* @__PURE__ */ new Map(); null !== b3; )
        null !== b3.key ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
      return a3;
    }
    function e(a3, b3) {
      a3 = wh(a3, b3);
      a3.index = 0;
      a3.sibling = null;
      return a3;
    }
    function f2(b3, c3, d3) {
      b3.index = d3;
      if (!a2)
        return b3.flags |= 1048576, c3;
      d3 = b3.alternate;
      if (null !== d3)
        return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
      b3.flags |= 2;
      return c3;
    }
    function g2(b3) {
      a2 && null === b3.alternate && (b3.flags |= 2);
      return b3;
    }
    function h2(a3, b3, c3, d3) {
      if (null === b3 || 6 !== b3.tag)
        return b3 = xh(c3, a3.mode, d3), b3.return = a3, b3;
      b3 = e(b3, c3);
      b3.return = a3;
      return b3;
    }
    function k2(a3, b3, c3, d3) {
      var f3 = c3.type;
      if (f3 === ya)
        return m2(a3, b3, c3.props.children, d3, c3.key);
      if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
        return d3 = e(b3, c3.props), d3.ref = sh(a3, b3, c3), d3.return = a3, d3;
      d3 = yh(c3.type, c3.key, c3.props, null, a3.mode, d3);
      d3.ref = sh(a3, b3, c3);
      d3.return = a3;
      return d3;
    }
    function l2(a3, b3, c3, d3) {
      if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
        return b3 = zh(c3, a3.mode, d3), b3.return = a3, b3;
      b3 = e(b3, c3.children || []);
      b3.return = a3;
      return b3;
    }
    function m2(a3, b3, c3, d3, f3) {
      if (null === b3 || 7 !== b3.tag)
        return b3 = Ah(c3, a3.mode, d3, f3), b3.return = a3, b3;
      b3 = e(b3, c3);
      b3.return = a3;
      return b3;
    }
    function q(a3, b3, c3) {
      if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
        return b3 = xh("" + b3, a3.mode, c3), b3.return = a3, b3;
      if ("object" === typeof b3 && null !== b3) {
        switch (b3.$$typeof) {
          case va:
            return c3 = yh(b3.type, b3.key, b3.props, null, a3.mode, c3), c3.ref = sh(a3, null, b3), c3.return = a3, c3;
          case wa:
            return b3 = zh(b3, a3.mode, c3), b3.return = a3, b3;
          case Ha:
            var d3 = b3._init;
            return q(a3, d3(b3._payload), c3);
        }
        if (eb(b3) || Ka(b3))
          return b3 = Ah(b3, a3.mode, c3, null), b3.return = a3, b3;
        th(a3, b3);
      }
      return null;
    }
    function r2(a3, b3, c3, d3) {
      var e2 = null !== b3 ? b3.key : null;
      if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
        return null !== e2 ? null : h2(a3, b3, "" + c3, d3);
      if ("object" === typeof c3 && null !== c3) {
        switch (c3.$$typeof) {
          case va:
            return c3.key === e2 ? k2(a3, b3, c3, d3) : null;
          case wa:
            return c3.key === e2 ? l2(a3, b3, c3, d3) : null;
          case Ha:
            return e2 = c3._init, r2(
              a3,
              b3,
              e2(c3._payload),
              d3
            );
        }
        if (eb(c3) || Ka(c3))
          return null !== e2 ? null : m2(a3, b3, c3, d3, null);
        th(a3, c3);
      }
      return null;
    }
    function y2(a3, b3, c3, d3, e2) {
      if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
        return a3 = a3.get(c3) || null, h2(b3, a3, "" + d3, e2);
      if ("object" === typeof d3 && null !== d3) {
        switch (d3.$$typeof) {
          case va:
            return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a3, d3, e2);
          case wa:
            return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a3, d3, e2);
          case Ha:
            var f3 = d3._init;
            return y2(a3, b3, c3, f3(d3._payload), e2);
        }
        if (eb(d3) || Ka(d3))
          return a3 = a3.get(c3) || null, m2(b3, a3, d3, e2, null);
        th(b3, d3);
      }
      return null;
    }
    function n2(e2, g3, h3, k3) {
      for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
        u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
        var n3 = r2(e2, u2, h3[w2], k3);
        if (null === n3) {
          null === u2 && (u2 = x2);
          break;
        }
        a2 && u2 && null === n3.alternate && b2(e2, u2);
        g3 = f2(n3, g3, w2);
        null === m3 ? l3 = n3 : m3.sibling = n3;
        m3 = n3;
        u2 = x2;
      }
      if (w2 === h3.length)
        return c2(e2, u2), I2 && tg(e2, w2), l3;
      if (null === u2) {
        for (; w2 < h3.length; w2++)
          u2 = q(e2, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
        I2 && tg(e2, w2);
        return l3;
      }
      for (u2 = d2(e2, u2); w2 < h3.length; w2++)
        x2 = y2(u2, e2, w2, h3[w2], k3), null !== x2 && (a2 && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
      a2 && u2.forEach(function(a3) {
        return b2(e2, a3);
      });
      I2 && tg(e2, w2);
      return l3;
    }
    function t2(e2, g3, h3, k3) {
      var l3 = Ka(h3);
      if ("function" !== typeof l3)
        throw Error(p2(150));
      h3 = l3.call(h3);
      if (null == h3)
        throw Error(p2(151));
      for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h3.next(); null !== m3 && !n3.done; w2++, n3 = h3.next()) {
        m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
        var t3 = r2(e2, m3, n3.value, k3);
        if (null === t3) {
          null === m3 && (m3 = x2);
          break;
        }
        a2 && m3 && null === t3.alternate && b2(e2, m3);
        g3 = f2(t3, g3, w2);
        null === u2 ? l3 = t3 : u2.sibling = t3;
        u2 = t3;
        m3 = x2;
      }
      if (n3.done)
        return c2(
          e2,
          m3
        ), I2 && tg(e2, w2), l3;
      if (null === m3) {
        for (; !n3.done; w2++, n3 = h3.next())
          n3 = q(e2, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
        I2 && tg(e2, w2);
        return l3;
      }
      for (m3 = d2(e2, m3); !n3.done; w2++, n3 = h3.next())
        n3 = y2(m3, e2, w2, n3.value, k3), null !== n3 && (a2 && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      a2 && m3.forEach(function(a3) {
        return b2(e2, a3);
      });
      I2 && tg(e2, w2);
      return l3;
    }
    function J2(a3, d3, f3, h3) {
      "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
      if ("object" === typeof f3 && null !== f3) {
        switch (f3.$$typeof) {
          case va:
            a: {
              for (var k3 = f3.key, l3 = d3; null !== l3; ) {
                if (l3.key === k3) {
                  k3 = f3.type;
                  if (k3 === ya) {
                    if (7 === l3.tag) {
                      c2(a3, l3.sibling);
                      d3 = e(l3, f3.props.children);
                      d3.return = a3;
                      a3 = d3;
                      break a;
                    }
                  } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                    c2(a3, l3.sibling);
                    d3 = e(l3, f3.props);
                    d3.ref = sh(a3, l3, f3);
                    d3.return = a3;
                    a3 = d3;
                    break a;
                  }
                  c2(a3, l3);
                  break;
                } else
                  b2(a3, l3);
                l3 = l3.sibling;
              }
              f3.type === ya ? (d3 = Ah(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = yh(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = sh(a3, d3, f3), h3.return = a3, a3 = h3);
            }
            return g2(a3);
          case wa:
            a: {
              for (l3 = f3.key; null !== d3; ) {
                if (d3.key === l3)
                  if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                    c2(a3, d3.sibling);
                    d3 = e(d3, f3.children || []);
                    d3.return = a3;
                    a3 = d3;
                    break a;
                  } else {
                    c2(a3, d3);
                    break;
                  }
                else
                  b2(a3, d3);
                d3 = d3.sibling;
              }
              d3 = zh(f3, a3.mode, h3);
              d3.return = a3;
              a3 = d3;
            }
            return g2(a3);
          case Ha:
            return l3 = f3._init, J2(a3, d3, l3(f3._payload), h3);
        }
        if (eb(f3))
          return n2(a3, d3, f3, h3);
        if (Ka(f3))
          return t2(a3, d3, f3, h3);
        th(a3, f3);
      }
      return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a3, d3.sibling), d3 = e(d3, f3), d3.return = a3, a3 = d3) : (c2(a3, d3), d3 = xh(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3)) : c2(a3, d3);
    }
    return J2;
  }
  var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
  function Hh(a2) {
    if (a2 === Dh)
      throw Error(p2(174));
    return a2;
  }
  function Ih(a2, b2) {
    G2(Gh, b2);
    G2(Fh, a2);
    G2(Eh, Dh);
    a2 = b2.nodeType;
    switch (a2) {
      case 9:
      case 11:
        b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
        break;
      default:
        a2 = 8 === a2 ? b2.parentNode : b2, b2 = a2.namespaceURI || null, a2 = a2.tagName, b2 = lb(b2, a2);
    }
    E2(Eh);
    G2(Eh, b2);
  }
  function Jh() {
    E2(Eh);
    E2(Fh);
    E2(Gh);
  }
  function Kh(a2) {
    Hh(Gh.current);
    var b2 = Hh(Eh.current);
    var c2 = lb(b2, a2.type);
    b2 !== c2 && (G2(Fh, a2), G2(Eh, c2));
  }
  function Lh(a2) {
    Fh.current === a2 && (E2(Eh), E2(Fh));
  }
  var M2 = Uf(0);
  function Mh(a2) {
    for (var b2 = a2; null !== b2; ) {
      if (13 === b2.tag) {
        var c2 = b2.memoizedState;
        if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
          return b2;
      } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
        if (0 !== (b2.flags & 128))
          return b2;
      } else if (null !== b2.child) {
        b2.child.return = b2;
        b2 = b2.child;
        continue;
      }
      if (b2 === a2)
        break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a2)
          return null;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
    return null;
  }
  var Nh = [];
  function Oh() {
    for (var a2 = 0; a2 < Nh.length; a2++)
      Nh[a2]._workInProgressVersionPrimary = null;
    Nh.length = 0;
  }
  var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N2 = null, O2 = null, P2 = null, Sh = false, Th = false, Uh = 0, Vh = 0;
  function Q() {
    throw Error(p2(321));
  }
  function Wh(a2, b2) {
    if (null === b2)
      return false;
    for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
      if (!He(a2[c2], b2[c2]))
        return false;
    return true;
  }
  function Xh(a2, b2, c2, d2, e, f2) {
    Rh = f2;
    N2 = b2;
    b2.memoizedState = null;
    b2.updateQueue = null;
    b2.lanes = 0;
    Ph.current = null === a2 || null === a2.memoizedState ? Yh : Zh;
    a2 = c2(d2, e);
    if (Th) {
      f2 = 0;
      do {
        Th = false;
        Uh = 0;
        if (25 <= f2)
          throw Error(p2(301));
        f2 += 1;
        P2 = O2 = null;
        b2.updateQueue = null;
        Ph.current = $h;
        a2 = c2(d2, e);
      } while (Th);
    }
    Ph.current = ai;
    b2 = null !== O2 && null !== O2.next;
    Rh = 0;
    P2 = O2 = N2 = null;
    Sh = false;
    if (b2)
      throw Error(p2(300));
    return a2;
  }
  function bi() {
    var a2 = 0 !== Uh;
    Uh = 0;
    return a2;
  }
  function ci() {
    var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    null === P2 ? N2.memoizedState = P2 = a2 : P2 = P2.next = a2;
    return P2;
  }
  function di() {
    if (null === O2) {
      var a2 = N2.alternate;
      a2 = null !== a2 ? a2.memoizedState : null;
    } else
      a2 = O2.next;
    var b2 = null === P2 ? N2.memoizedState : P2.next;
    if (null !== b2)
      P2 = b2, O2 = a2;
    else {
      if (null === a2)
        throw Error(p2(310));
      O2 = a2;
      a2 = { memoizedState: O2.memoizedState, baseState: O2.baseState, baseQueue: O2.baseQueue, queue: O2.queue, next: null };
      null === P2 ? N2.memoizedState = P2 = a2 : P2 = P2.next = a2;
    }
    return P2;
  }
  function ei(a2, b2) {
    return "function" === typeof b2 ? b2(a2) : b2;
  }
  function fi(a2) {
    var b2 = di(), c2 = b2.queue;
    if (null === c2)
      throw Error(p2(311));
    c2.lastRenderedReducer = a2;
    var d2 = O2, e = d2.baseQueue, f2 = c2.pending;
    if (null !== f2) {
      if (null !== e) {
        var g2 = e.next;
        e.next = f2.next;
        f2.next = g2;
      }
      d2.baseQueue = e = f2;
      c2.pending = null;
    }
    if (null !== e) {
      f2 = e.next;
      d2 = d2.baseState;
      var h2 = g2 = null, k2 = null, l2 = f2;
      do {
        var m2 = l2.lane;
        if ((Rh & m2) === m2)
          null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a2(d2, l2.action);
        else {
          var q = {
            lane: m2,
            action: l2.action,
            hasEagerState: l2.hasEagerState,
            eagerState: l2.eagerState,
            next: null
          };
          null === k2 ? (h2 = k2 = q, g2 = d2) : k2 = k2.next = q;
          N2.lanes |= m2;
          hh |= m2;
        }
        l2 = l2.next;
      } while (null !== l2 && l2 !== f2);
      null === k2 ? g2 = d2 : k2.next = h2;
      He(d2, b2.memoizedState) || (Ug = true);
      b2.memoizedState = d2;
      b2.baseState = g2;
      b2.baseQueue = k2;
      c2.lastRenderedState = d2;
    }
    a2 = c2.interleaved;
    if (null !== a2) {
      e = a2;
      do
        f2 = e.lane, N2.lanes |= f2, hh |= f2, e = e.next;
      while (e !== a2);
    } else
      null === e && (c2.lanes = 0);
    return [b2.memoizedState, c2.dispatch];
  }
  function gi(a2) {
    var b2 = di(), c2 = b2.queue;
    if (null === c2)
      throw Error(p2(311));
    c2.lastRenderedReducer = a2;
    var d2 = c2.dispatch, e = c2.pending, f2 = b2.memoizedState;
    if (null !== e) {
      c2.pending = null;
      var g2 = e = e.next;
      do
        f2 = a2(f2, g2.action), g2 = g2.next;
      while (g2 !== e);
      He(f2, b2.memoizedState) || (Ug = true);
      b2.memoizedState = f2;
      null === b2.baseQueue && (b2.baseState = f2);
      c2.lastRenderedState = f2;
    }
    return [f2, d2];
  }
  function hi() {
  }
  function ii(a2, b2) {
    var c2 = N2, d2 = di(), e = b2(), f2 = !He(d2.memoizedState, e);
    f2 && (d2.memoizedState = e, Ug = true);
    d2 = d2.queue;
    ji(ki.bind(null, c2, d2, a2), [a2]);
    if (d2.getSnapshot !== b2 || f2 || null !== P2 && P2.memoizedState.tag & 1) {
      c2.flags |= 2048;
      li(9, mi.bind(null, c2, d2, e, b2), void 0, null);
      if (null === R2)
        throw Error(p2(349));
      0 !== (Rh & 30) || ni(c2, b2, e);
    }
    return e;
  }
  function ni(a2, b2, c2) {
    a2.flags |= 16384;
    a2 = { getSnapshot: b2, value: c2 };
    b2 = N2.updateQueue;
    null === b2 ? (b2 = { lastEffect: null, stores: null }, N2.updateQueue = b2, b2.stores = [a2]) : (c2 = b2.stores, null === c2 ? b2.stores = [a2] : c2.push(a2));
  }
  function mi(a2, b2, c2, d2) {
    b2.value = c2;
    b2.getSnapshot = d2;
    oi(b2) && pi(a2);
  }
  function ki(a2, b2, c2) {
    return c2(function() {
      oi(b2) && pi(a2);
    });
  }
  function oi(a2) {
    var b2 = a2.getSnapshot;
    a2 = a2.value;
    try {
      var c2 = b2();
      return !He(a2, c2);
    } catch (d2) {
      return true;
    }
  }
  function pi(a2) {
    var b2 = Zg(a2, 1);
    null !== b2 && mh(b2, a2, 1, -1);
  }
  function qi(a2) {
    var b2 = ci();
    "function" === typeof a2 && (a2 = a2());
    b2.memoizedState = b2.baseState = a2;
    a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a2 };
    b2.queue = a2;
    a2 = a2.dispatch = ri.bind(null, N2, a2);
    return [b2.memoizedState, a2];
  }
  function li(a2, b2, c2, d2) {
    a2 = { tag: a2, create: b2, destroy: c2, deps: d2, next: null };
    b2 = N2.updateQueue;
    null === b2 ? (b2 = { lastEffect: null, stores: null }, N2.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a2.next = a2 : (d2 = c2.next, c2.next = a2, a2.next = d2, b2.lastEffect = a2));
    return a2;
  }
  function si() {
    return di().memoizedState;
  }
  function ti(a2, b2, c2, d2) {
    var e = ci();
    N2.flags |= a2;
    e.memoizedState = li(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
  }
  function ui(a2, b2, c2, d2) {
    var e = di();
    d2 = void 0 === d2 ? null : d2;
    var f2 = void 0;
    if (null !== O2) {
      var g2 = O2.memoizedState;
      f2 = g2.destroy;
      if (null !== d2 && Wh(d2, g2.deps)) {
        e.memoizedState = li(b2, c2, f2, d2);
        return;
      }
    }
    N2.flags |= a2;
    e.memoizedState = li(1 | b2, c2, f2, d2);
  }
  function vi(a2, b2) {
    return ti(8390656, 8, a2, b2);
  }
  function ji(a2, b2) {
    return ui(2048, 8, a2, b2);
  }
  function wi(a2, b2) {
    return ui(4, 2, a2, b2);
  }
  function xi(a2, b2) {
    return ui(4, 4, a2, b2);
  }
  function yi(a2, b2) {
    if ("function" === typeof b2)
      return a2 = a2(), b2(a2), function() {
        b2(null);
      };
    if (null !== b2 && void 0 !== b2)
      return a2 = a2(), b2.current = a2, function() {
        b2.current = null;
      };
  }
  function zi(a2, b2, c2) {
    c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
    return ui(4, 4, yi.bind(null, b2, a2), c2);
  }
  function Ai() {
  }
  function Bi(a2, b2) {
    var c2 = di();
    b2 = void 0 === b2 ? null : b2;
    var d2 = c2.memoizedState;
    if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
      return d2[0];
    c2.memoizedState = [a2, b2];
    return a2;
  }
  function Ci(a2, b2) {
    var c2 = di();
    b2 = void 0 === b2 ? null : b2;
    var d2 = c2.memoizedState;
    if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
      return d2[0];
    a2 = a2();
    c2.memoizedState = [a2, b2];
    return a2;
  }
  function Di(a2, b2, c2) {
    if (0 === (Rh & 21))
      return a2.baseState && (a2.baseState = false, Ug = true), a2.memoizedState = c2;
    He(c2, b2) || (c2 = yc(), N2.lanes |= c2, hh |= c2, a2.baseState = true);
    return b2;
  }
  function Ei(a2, b2) {
    var c2 = C2;
    C2 = 0 !== c2 && 4 > c2 ? c2 : 4;
    a2(true);
    var d2 = Qh.transition;
    Qh.transition = {};
    try {
      a2(false), b2();
    } finally {
      C2 = c2, Qh.transition = d2;
    }
  }
  function Fi() {
    return di().memoizedState;
  }
  function Gi(a2, b2, c2) {
    var d2 = lh(a2);
    c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
    if (Hi(a2))
      Ii(b2, c2);
    else if (c2 = Yg(a2, b2, c2, d2), null !== c2) {
      var e = L2();
      mh(c2, a2, d2, e);
      Ji(c2, b2, d2);
    }
  }
  function ri(a2, b2, c2) {
    var d2 = lh(a2), e = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
    if (Hi(a2))
      Ii(b2, e);
    else {
      var f2 = a2.alternate;
      if (0 === a2.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
        try {
          var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
          e.hasEagerState = true;
          e.eagerState = h2;
          if (He(h2, g2)) {
            var k2 = b2.interleaved;
            null === k2 ? (e.next = e, Xg(b2)) : (e.next = k2.next, k2.next = e);
            b2.interleaved = e;
            return;
          }
        } catch (l2) {
        } finally {
        }
      c2 = Yg(a2, b2, e, d2);
      null !== c2 && (e = L2(), mh(c2, a2, d2, e), Ji(c2, b2, d2));
    }
  }
  function Hi(a2) {
    var b2 = a2.alternate;
    return a2 === N2 || null !== b2 && b2 === N2;
  }
  function Ii(a2, b2) {
    Th = Sh = true;
    var c2 = a2.pending;
    null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
    a2.pending = b2;
  }
  function Ji(a2, b2, c2) {
    if (0 !== (c2 & 4194240)) {
      var d2 = b2.lanes;
      d2 &= a2.pendingLanes;
      c2 |= d2;
      b2.lanes = c2;
      Cc(a2, c2);
    }
  }
  var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a2, b2) {
    ci().memoizedState = [a2, void 0 === b2 ? null : b2];
    return a2;
  }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a2, b2, c2) {
    c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
    return ti(
      4194308,
      4,
      yi.bind(null, b2, a2),
      c2
    );
  }, useLayoutEffect: function(a2, b2) {
    return ti(4194308, 4, a2, b2);
  }, useInsertionEffect: function(a2, b2) {
    return ti(4, 2, a2, b2);
  }, useMemo: function(a2, b2) {
    var c2 = ci();
    b2 = void 0 === b2 ? null : b2;
    a2 = a2();
    c2.memoizedState = [a2, b2];
    return a2;
  }, useReducer: function(a2, b2, c2) {
    var d2 = ci();
    b2 = void 0 !== c2 ? c2(b2) : b2;
    d2.memoizedState = d2.baseState = b2;
    a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
    d2.queue = a2;
    a2 = a2.dispatch = Gi.bind(null, N2, a2);
    return [d2.memoizedState, a2];
  }, useRef: function(a2) {
    var b2 = ci();
    a2 = { current: a2 };
    return b2.memoizedState = a2;
  }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a2) {
    return ci().memoizedState = a2;
  }, useTransition: function() {
    var a2 = qi(false), b2 = a2[0];
    a2 = Ei.bind(null, a2[1]);
    ci().memoizedState = a2;
    return [b2, a2];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(a2, b2, c2) {
    var d2 = N2, e = ci();
    if (I2) {
      if (void 0 === c2)
        throw Error(p2(407));
      c2 = c2();
    } else {
      c2 = b2();
      if (null === R2)
        throw Error(p2(349));
      0 !== (Rh & 30) || ni(d2, b2, c2);
    }
    e.memoizedState = c2;
    var f2 = { value: c2, getSnapshot: b2 };
    e.queue = f2;
    vi(ki.bind(
      null,
      d2,
      f2,
      a2
    ), [a2]);
    d2.flags |= 2048;
    li(9, mi.bind(null, d2, f2, c2, b2), void 0, null);
    return c2;
  }, useId: function() {
    var a2 = ci(), b2 = R2.identifierPrefix;
    if (I2) {
      var c2 = sg;
      var d2 = rg;
      c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
      b2 = ":" + b2 + "R" + c2;
      c2 = Uh++;
      0 < c2 && (b2 += "H" + c2.toString(32));
      b2 += ":";
    } else
      c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
    return a2.memoizedState = b2;
  }, unstable_isNewReconciler: false }, Zh = {
    readContext: Vg,
    useCallback: Bi,
    useContext: Vg,
    useEffect: ji,
    useImperativeHandle: zi,
    useInsertionEffect: wi,
    useLayoutEffect: xi,
    useMemo: Ci,
    useReducer: fi,
    useRef: si,
    useState: function() {
      return fi(ei);
    },
    useDebugValue: Ai,
    useDeferredValue: function(a2) {
      var b2 = di();
      return Di(b2, O2.memoizedState, a2);
    },
    useTransition: function() {
      var a2 = fi(ei)[0], b2 = di().memoizedState;
      return [a2, b2];
    },
    useMutableSource: hi,
    useSyncExternalStore: ii,
    useId: Fi,
    unstable_isNewReconciler: false
  }, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
    return gi(ei);
  }, useDebugValue: Ai, useDeferredValue: function(a2) {
    var b2 = di();
    return null === O2 ? b2.memoizedState = a2 : Di(b2, O2.memoizedState, a2);
  }, useTransition: function() {
    var a2 = gi(ei)[0], b2 = di().memoizedState;
    return [a2, b2];
  }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
  function Ki(a2, b2) {
    try {
      var c2 = "", d2 = b2;
      do
        c2 += Pa(d2), d2 = d2.return;
      while (d2);
      var e = c2;
    } catch (f2) {
      e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
    }
    return { value: a2, source: b2, stack: e, digest: null };
  }
  function Li(a2, b2, c2) {
    return { value: a2, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
  }
  function Mi(a2, b2) {
    try {
      console.error(b2.value);
    } catch (c2) {
      setTimeout(function() {
        throw c2;
      });
    }
  }
  var Ni = "function" === typeof WeakMap ? WeakMap : Map;
  function Oi(a2, b2, c2) {
    c2 = ch(-1, c2);
    c2.tag = 3;
    c2.payload = { element: null };
    var d2 = b2.value;
    c2.callback = function() {
      Pi || (Pi = true, Qi = d2);
      Mi(a2, b2);
    };
    return c2;
  }
  function Ri(a2, b2, c2) {
    c2 = ch(-1, c2);
    c2.tag = 3;
    var d2 = a2.type.getDerivedStateFromError;
    if ("function" === typeof d2) {
      var e = b2.value;
      c2.payload = function() {
        return d2(e);
      };
      c2.callback = function() {
        Mi(a2, b2);
      };
    }
    var f2 = a2.stateNode;
    null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
      Mi(a2, b2);
      "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
      var c3 = b2.stack;
      this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
    });
    return c2;
  }
  function Ti(a2, b2, c2) {
    var d2 = a2.pingCache;
    if (null === d2) {
      d2 = a2.pingCache = new Ni();
      var e = /* @__PURE__ */ new Set();
      d2.set(b2, e);
    } else
      e = d2.get(b2), void 0 === e && (e = /* @__PURE__ */ new Set(), d2.set(b2, e));
    e.has(c2) || (e.add(c2), a2 = Ui.bind(null, a2, b2, c2), b2.then(a2, a2));
  }
  function Vi(a2) {
    do {
      var b2;
      if (b2 = 13 === a2.tag)
        b2 = a2.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
      if (b2)
        return a2;
      a2 = a2.return;
    } while (null !== a2);
    return null;
  }
  function Wi(a2, b2, c2, d2, e) {
    if (0 === (a2.mode & 1))
      return a2 === b2 ? a2.flags |= 65536 : (a2.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a2;
    a2.flags |= 65536;
    a2.lanes = e;
    return a2;
  }
  var Xi = ua.ReactCurrentOwner, Ug = false;
  function Yi(a2, b2, c2, d2) {
    b2.child = null === a2 ? Ch(b2, null, c2, d2) : Bh(b2, a2.child, c2, d2);
  }
  function Zi(a2, b2, c2, d2, e) {
    c2 = c2.render;
    var f2 = b2.ref;
    Tg(b2, e);
    d2 = Xh(a2, b2, c2, d2, f2, e);
    c2 = bi();
    if (null !== a2 && !Ug)
      return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e, $i(a2, b2, e);
    I2 && c2 && vg(b2);
    b2.flags |= 1;
    Yi(a2, b2, d2, e);
    return b2.child;
  }
  function aj(a2, b2, c2, d2, e) {
    if (null === a2) {
      var f2 = c2.type;
      if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
        return b2.tag = 15, b2.type = f2, cj(a2, b2, f2, d2, e);
      a2 = yh(c2.type, null, d2, b2, b2.mode, e);
      a2.ref = b2.ref;
      a2.return = b2;
      return b2.child = a2;
    }
    f2 = a2.child;
    if (0 === (a2.lanes & e)) {
      var g2 = f2.memoizedProps;
      c2 = c2.compare;
      c2 = null !== c2 ? c2 : Ie;
      if (c2(g2, d2) && a2.ref === b2.ref)
        return $i(a2, b2, e);
    }
    b2.flags |= 1;
    a2 = wh(f2, d2);
    a2.ref = b2.ref;
    a2.return = b2;
    return b2.child = a2;
  }
  function cj(a2, b2, c2, d2, e) {
    if (null !== a2) {
      var f2 = a2.memoizedProps;
      if (Ie(f2, d2) && a2.ref === b2.ref)
        if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a2.lanes & e))
          0 !== (a2.flags & 131072) && (Ug = true);
        else
          return b2.lanes = a2.lanes, $i(a2, b2, e);
    }
    return dj(a2, b2, c2, d2, e);
  }
  function ej(a2, b2, c2) {
    var d2 = b2.pendingProps, e = d2.children, f2 = null !== a2 ? a2.memoizedState : null;
    if ("hidden" === d2.mode)
      if (0 === (b2.mode & 1))
        b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G2(fj, gj), gj |= c2;
      else {
        if (0 === (c2 & 1073741824))
          return a2 = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2, cachePool: null, transitions: null }, b2.updateQueue = null, G2(fj, gj), gj |= a2, null;
        b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d2 = null !== f2 ? f2.baseLanes : c2;
        G2(fj, gj);
        gj |= d2;
      }
    else
      null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G2(fj, gj), gj |= d2;
    Yi(a2, b2, e, c2);
    return b2.child;
  }
  function hj(a2, b2) {
    var c2 = b2.ref;
    if (null === a2 && null !== c2 || null !== a2 && a2.ref !== c2)
      b2.flags |= 512, b2.flags |= 2097152;
  }
  function dj(a2, b2, c2, d2, e) {
    var f2 = Zf(c2) ? Xf : H2.current;
    f2 = Yf(b2, f2);
    Tg(b2, e);
    c2 = Xh(a2, b2, c2, d2, f2, e);
    d2 = bi();
    if (null !== a2 && !Ug)
      return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e, $i(a2, b2, e);
    I2 && d2 && vg(b2);
    b2.flags |= 1;
    Yi(a2, b2, c2, e);
    return b2.child;
  }
  function ij(a2, b2, c2, d2, e) {
    if (Zf(c2)) {
      var f2 = true;
      cg(b2);
    } else
      f2 = false;
    Tg(b2, e);
    if (null === b2.stateNode)
      jj(a2, b2), ph(b2, c2, d2), rh(b2, c2, d2, e), d2 = true;
    else if (null === a2) {
      var g2 = b2.stateNode, h2 = b2.memoizedProps;
      g2.props = h2;
      var k2 = g2.context, l2 = c2.contextType;
      "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H2.current, l2 = Yf(b2, l2));
      var m2 = c2.getDerivedStateFromProps, q = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
      q || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
      $g = false;
      var r2 = b2.memoizedState;
      g2.state = r2;
      gh(b2, d2, g2, e);
      k2 = b2.memoizedState;
      h2 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = $g || oh(b2, c2, h2, d2, r2, k2, l2)) ? (q || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
    } else {
      g2 = b2.stateNode;
      bh(a2, b2);
      h2 = b2.memoizedProps;
      l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
      g2.props = l2;
      q = b2.pendingProps;
      r2 = g2.context;
      k2 = c2.contextType;
      "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H2.current, k2 = Yf(b2, k2));
      var y2 = c2.getDerivedStateFromProps;
      (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q || r2 !== k2) && qh(b2, g2, d2, k2);
      $g = false;
      r2 = b2.memoizedState;
      g2.state = r2;
      gh(b2, d2, g2, e);
      var n2 = b2.memoizedState;
      h2 !== q || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), d2 = false);
    }
    return kj(a2, b2, c2, d2, f2, e);
  }
  function kj(a2, b2, c2, d2, e, f2) {
    hj(a2, b2);
    var g2 = 0 !== (b2.flags & 128);
    if (!d2 && !g2)
      return e && dg(b2, c2, false), $i(a2, b2, f2);
    d2 = b2.stateNode;
    Xi.current = b2;
    var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
    b2.flags |= 1;
    null !== a2 && g2 ? (b2.child = Bh(b2, a2.child, null, f2), b2.child = Bh(b2, null, h2, f2)) : Yi(a2, b2, h2, f2);
    b2.memoizedState = d2.state;
    e && dg(b2, c2, true);
    return b2.child;
  }
  function lj(a2) {
    var b2 = a2.stateNode;
    b2.pendingContext ? ag(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a2, b2.context, false);
    Ih(a2, b2.containerInfo);
  }
  function mj(a2, b2, c2, d2, e) {
    Ig();
    Jg(e);
    b2.flags |= 256;
    Yi(a2, b2, c2, d2);
    return b2.child;
  }
  var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
  function oj(a2) {
    return { baseLanes: a2, cachePool: null, transitions: null };
  }
  function pj(a2, b2, c2) {
    var d2 = b2.pendingProps, e = M2.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
    (h2 = g2) || (h2 = null !== a2 && null === a2.memoizedState ? false : 0 !== (e & 2));
    if (h2)
      f2 = true, b2.flags &= -129;
    else if (null === a2 || null !== a2.memoizedState)
      e |= 1;
    G2(M2, e & 1);
    if (null === a2) {
      Eg(b2);
      a2 = b2.memoizedState;
      if (null !== a2 && (a2 = a2.dehydrated, null !== a2))
        return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a2.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
      g2 = d2.children;
      a2 = d2.fallback;
      return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a2 = Ah(a2, d2, c2, null), f2.return = b2, a2.return = b2, f2.sibling = a2, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a2) : rj(b2, g2);
    }
    e = a2.memoizedState;
    if (null !== e && (h2 = e.dehydrated, null !== h2))
      return sj(a2, b2, g2, d2, h2, e, c2);
    if (f2) {
      f2 = d2.fallback;
      g2 = b2.mode;
      e = a2.child;
      h2 = e.sibling;
      var k2 = { mode: "hidden", children: d2.children };
      0 === (g2 & 1) && b2.child !== e ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e, k2), d2.subtreeFlags = e.subtreeFlags & 14680064);
      null !== h2 ? f2 = wh(h2, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
      f2.return = b2;
      d2.return = b2;
      d2.sibling = f2;
      b2.child = d2;
      d2 = f2;
      f2 = b2.child;
      g2 = a2.child.memoizedState;
      g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
      f2.memoizedState = g2;
      f2.childLanes = a2.childLanes & ~c2;
      b2.memoizedState = nj;
      return d2;
    }
    f2 = a2.child;
    a2 = f2.sibling;
    d2 = wh(f2, { mode: "visible", children: d2.children });
    0 === (b2.mode & 1) && (d2.lanes = c2);
    d2.return = b2;
    d2.sibling = null;
    null !== a2 && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a2], b2.flags |= 16) : c2.push(a2));
    b2.child = d2;
    b2.memoizedState = null;
    return d2;
  }
  function rj(a2, b2) {
    b2 = qj({ mode: "visible", children: b2 }, a2.mode, 0, null);
    b2.return = a2;
    return a2.child = b2;
  }
  function tj(a2, b2, c2, d2) {
    null !== d2 && Jg(d2);
    Bh(b2, a2.child, null, c2);
    a2 = rj(b2, b2.pendingProps.children);
    a2.flags |= 2;
    b2.memoizedState = null;
    return a2;
  }
  function sj(a2, b2, c2, d2, e, f2, g2) {
    if (c2) {
      if (b2.flags & 256)
        return b2.flags &= -257, d2 = Li(Error(p2(422))), tj(a2, b2, g2, d2);
      if (null !== b2.memoizedState)
        return b2.child = a2.child, b2.flags |= 128, null;
      f2 = d2.fallback;
      e = b2.mode;
      d2 = qj({ mode: "visible", children: d2.children }, e, 0, null);
      f2 = Ah(f2, e, g2, null);
      f2.flags |= 2;
      d2.return = b2;
      f2.return = b2;
      d2.sibling = f2;
      b2.child = d2;
      0 !== (b2.mode & 1) && Bh(b2, a2.child, null, g2);
      b2.child.memoizedState = oj(g2);
      b2.memoizedState = nj;
      return f2;
    }
    if (0 === (b2.mode & 1))
      return tj(a2, b2, g2, null);
    if ("$!" === e.data) {
      d2 = e.nextSibling && e.nextSibling.dataset;
      if (d2)
        var h2 = d2.dgst;
      d2 = h2;
      f2 = Error(p2(419));
      d2 = Li(f2, d2, void 0);
      return tj(a2, b2, g2, d2);
    }
    h2 = 0 !== (g2 & a2.childLanes);
    if (Ug || h2) {
      d2 = R2;
      if (null !== d2) {
        switch (g2 & -g2) {
          case 4:
            e = 2;
            break;
          case 16:
            e = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            e = 32;
            break;
          case 536870912:
            e = 268435456;
            break;
          default:
            e = 0;
        }
        e = 0 !== (e & (d2.suspendedLanes | g2)) ? 0 : e;
        0 !== e && e !== f2.retryLane && (f2.retryLane = e, Zg(a2, e), mh(d2, a2, e, -1));
      }
      uj();
      d2 = Li(Error(p2(421)));
      return tj(a2, b2, g2, d2);
    }
    if ("$?" === e.data)
      return b2.flags |= 128, b2.child = a2.child, b2 = vj.bind(null, a2), e._reactRetry = b2, null;
    a2 = f2.treeContext;
    yg = Lf(e.nextSibling);
    xg = b2;
    I2 = true;
    zg = null;
    null !== a2 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a2.id, sg = a2.overflow, qg = b2);
    b2 = rj(b2, d2.children);
    b2.flags |= 4096;
    return b2;
  }
  function wj(a2, b2, c2) {
    a2.lanes |= b2;
    var d2 = a2.alternate;
    null !== d2 && (d2.lanes |= b2);
    Sg(a2.return, b2, c2);
  }
  function xj(a2, b2, c2, d2, e) {
    var f2 = a2.memoizedState;
    null === f2 ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e);
  }
  function yj(a2, b2, c2) {
    var d2 = b2.pendingProps, e = d2.revealOrder, f2 = d2.tail;
    Yi(a2, b2, d2.children, c2);
    d2 = M2.current;
    if (0 !== (d2 & 2))
      d2 = d2 & 1 | 2, b2.flags |= 128;
    else {
      if (null !== a2 && 0 !== (a2.flags & 128))
        a:
          for (a2 = b2.child; null !== a2; ) {
            if (13 === a2.tag)
              null !== a2.memoizedState && wj(a2, c2, b2);
            else if (19 === a2.tag)
              wj(a2, c2, b2);
            else if (null !== a2.child) {
              a2.child.return = a2;
              a2 = a2.child;
              continue;
            }
            if (a2 === b2)
              break a;
            for (; null === a2.sibling; ) {
              if (null === a2.return || a2.return === b2)
                break a;
              a2 = a2.return;
            }
            a2.sibling.return = a2.return;
            a2 = a2.sibling;
          }
      d2 &= 1;
    }
    G2(M2, d2);
    if (0 === (b2.mode & 1))
      b2.memoizedState = null;
    else
      switch (e) {
        case "forwards":
          c2 = b2.child;
          for (e = null; null !== c2; )
            a2 = c2.alternate, null !== a2 && null === Mh(a2) && (e = c2), c2 = c2.sibling;
          c2 = e;
          null === c2 ? (e = b2.child, b2.child = null) : (e = c2.sibling, c2.sibling = null);
          xj(b2, false, e, c2, f2);
          break;
        case "backwards":
          c2 = null;
          e = b2.child;
          for (b2.child = null; null !== e; ) {
            a2 = e.alternate;
            if (null !== a2 && null === Mh(a2)) {
              b2.child = e;
              break;
            }
            a2 = e.sibling;
            e.sibling = c2;
            c2 = e;
            e = a2;
          }
          xj(b2, true, c2, null, f2);
          break;
        case "together":
          xj(b2, false, null, null, void 0);
          break;
        default:
          b2.memoizedState = null;
      }
    return b2.child;
  }
  function jj(a2, b2) {
    0 === (b2.mode & 1) && null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
  }
  function $i(a2, b2, c2) {
    null !== a2 && (b2.dependencies = a2.dependencies);
    hh |= b2.lanes;
    if (0 === (c2 & b2.childLanes))
      return null;
    if (null !== a2 && b2.child !== a2.child)
      throw Error(p2(153));
    if (null !== b2.child) {
      a2 = b2.child;
      c2 = wh(a2, a2.pendingProps);
      b2.child = c2;
      for (c2.return = b2; null !== a2.sibling; )
        a2 = a2.sibling, c2 = c2.sibling = wh(a2, a2.pendingProps), c2.return = b2;
      c2.sibling = null;
    }
    return b2.child;
  }
  function zj(a2, b2, c2) {
    switch (b2.tag) {
      case 3:
        lj(b2);
        Ig();
        break;
      case 5:
        Kh(b2);
        break;
      case 1:
        Zf(b2.type) && cg(b2);
        break;
      case 4:
        Ih(b2, b2.stateNode.containerInfo);
        break;
      case 10:
        var d2 = b2.type._context, e = b2.memoizedProps.value;
        G2(Mg, d2._currentValue);
        d2._currentValue = e;
        break;
      case 13:
        d2 = b2.memoizedState;
        if (null !== d2) {
          if (null !== d2.dehydrated)
            return G2(M2, M2.current & 1), b2.flags |= 128, null;
          if (0 !== (c2 & b2.child.childLanes))
            return pj(a2, b2, c2);
          G2(M2, M2.current & 1);
          a2 = $i(a2, b2, c2);
          return null !== a2 ? a2.sibling : null;
        }
        G2(M2, M2.current & 1);
        break;
      case 19:
        d2 = 0 !== (c2 & b2.childLanes);
        if (0 !== (a2.flags & 128)) {
          if (d2)
            return yj(a2, b2, c2);
          b2.flags |= 128;
        }
        e = b2.memoizedState;
        null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
        G2(M2, M2.current);
        if (d2)
          break;
        else
          return null;
      case 22:
      case 23:
        return b2.lanes = 0, ej(a2, b2, c2);
    }
    return $i(a2, b2, c2);
  }
  var Aj, Bj, Cj, Dj;
  Aj = function(a2, b2) {
    for (var c2 = b2.child; null !== c2; ) {
      if (5 === c2.tag || 6 === c2.tag)
        a2.appendChild(c2.stateNode);
      else if (4 !== c2.tag && null !== c2.child) {
        c2.child.return = c2;
        c2 = c2.child;
        continue;
      }
      if (c2 === b2)
        break;
      for (; null === c2.sibling; ) {
        if (null === c2.return || c2.return === b2)
          return;
        c2 = c2.return;
      }
      c2.sibling.return = c2.return;
      c2 = c2.sibling;
    }
  };
  Bj = function() {
  };
  Cj = function(a2, b2, c2, d2) {
    var e = a2.memoizedProps;
    if (e !== d2) {
      a2 = b2.stateNode;
      Hh(Eh.current);
      var f2 = null;
      switch (c2) {
        case "input":
          e = Ya(a2, e);
          d2 = Ya(a2, d2);
          f2 = [];
          break;
        case "select":
          e = A2({}, e, { value: void 0 });
          d2 = A2({}, d2, { value: void 0 });
          f2 = [];
          break;
        case "textarea":
          e = gb(a2, e);
          d2 = gb(a2, d2);
          f2 = [];
          break;
        default:
          "function" !== typeof e.onClick && "function" === typeof d2.onClick && (a2.onclick = Bf);
      }
      ub(c2, d2);
      var g2;
      c2 = null;
      for (l2 in e)
        if (!d2.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2])
          if ("style" === l2) {
            var h2 = e[l2];
            for (g2 in h2)
              h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
          } else
            "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
      for (l2 in d2) {
        var k2 = d2[l2];
        h2 = null != e ? e[l2] : void 0;
        if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
          if ("style" === l2)
            if (h2) {
              for (g2 in h2)
                !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
              for (g2 in k2)
                k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
            } else
              c2 || (f2 || (f2 = []), f2.push(
                l2,
                c2
              )), c2 = k2;
          else
            "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D2("scroll", a2), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
      }
      c2 && (f2 = f2 || []).push("style", c2);
      var l2 = f2;
      if (b2.updateQueue = l2)
        b2.flags |= 4;
    }
  };
  Dj = function(a2, b2, c2, d2) {
    c2 !== d2 && (b2.flags |= 4);
  };
  function Ej(a2, b2) {
    if (!I2)
      switch (a2.tailMode) {
        case "hidden":
          b2 = a2.tail;
          for (var c2 = null; null !== b2; )
            null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
          null === c2 ? a2.tail = null : c2.sibling = null;
          break;
        case "collapsed":
          c2 = a2.tail;
          for (var d2 = null; null !== c2; )
            null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
          null === d2 ? b2 || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
      }
  }
  function S2(a2) {
    var b2 = null !== a2.alternate && a2.alternate.child === a2.child, c2 = 0, d2 = 0;
    if (b2)
      for (var e = a2.child; null !== e; )
        c2 |= e.lanes | e.childLanes, d2 |= e.subtreeFlags & 14680064, d2 |= e.flags & 14680064, e.return = a2, e = e.sibling;
    else
      for (e = a2.child; null !== e; )
        c2 |= e.lanes | e.childLanes, d2 |= e.subtreeFlags, d2 |= e.flags, e.return = a2, e = e.sibling;
    a2.subtreeFlags |= d2;
    a2.childLanes = c2;
    return b2;
  }
  function Fj(a2, b2, c2) {
    var d2 = b2.pendingProps;
    wg(b2);
    switch (b2.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return S2(b2), null;
      case 1:
        return Zf(b2.type) && $f(), S2(b2), null;
      case 3:
        d2 = b2.stateNode;
        Jh();
        E2(Wf);
        E2(H2);
        Oh();
        d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
        if (null === a2 || null === a2.child)
          Gg(b2) ? b2.flags |= 4 : null === a2 || a2.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
        Bj(a2, b2);
        S2(b2);
        return null;
      case 5:
        Lh(b2);
        var e = Hh(Gh.current);
        c2 = b2.type;
        if (null !== a2 && null != b2.stateNode)
          Cj(a2, b2, c2, d2, e), a2.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
        else {
          if (!d2) {
            if (null === b2.stateNode)
              throw Error(p2(166));
            S2(b2);
            return null;
          }
          a2 = Hh(Eh.current);
          if (Gg(b2)) {
            d2 = b2.stateNode;
            c2 = b2.type;
            var f2 = b2.memoizedProps;
            d2[Of] = b2;
            d2[Pf] = f2;
            a2 = 0 !== (b2.mode & 1);
            switch (c2) {
              case "dialog":
                D2("cancel", d2);
                D2("close", d2);
                break;
              case "iframe":
              case "object":
              case "embed":
                D2("load", d2);
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++)
                  D2(lf[e], d2);
                break;
              case "source":
                D2("error", d2);
                break;
              case "img":
              case "image":
              case "link":
                D2(
                  "error",
                  d2
                );
                D2("load", d2);
                break;
              case "details":
                D2("toggle", d2);
                break;
              case "input":
                Za(d2, f2);
                D2("invalid", d2);
                break;
              case "select":
                d2._wrapperState = { wasMultiple: !!f2.multiple };
                D2("invalid", d2);
                break;
              case "textarea":
                hb(d2, f2), D2("invalid", d2);
            }
            ub(c2, f2);
            e = null;
            for (var g2 in f2)
              if (f2.hasOwnProperty(g2)) {
                var h2 = f2[g2];
                "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a2), e = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                  d2.textContent,
                  h2,
                  a2
                ), e = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D2("scroll", d2);
              }
            switch (c2) {
              case "input":
                Va(d2);
                db(d2, f2, true);
                break;
              case "textarea":
                Va(d2);
                jb(d2);
                break;
              case "select":
              case "option":
                break;
              default:
                "function" === typeof f2.onClick && (d2.onclick = Bf);
            }
            d2 = e;
            b2.updateQueue = d2;
            null !== d2 && (b2.flags |= 4);
          } else {
            g2 = 9 === e.nodeType ? e : e.ownerDocument;
            "http://www.w3.org/1999/xhtml" === a2 && (a2 = kb(c2));
            "http://www.w3.org/1999/xhtml" === a2 ? "script" === c2 ? (a2 = g2.createElement("div"), a2.innerHTML = "<script><\/script>", a2 = a2.removeChild(a2.firstChild)) : "string" === typeof d2.is ? a2 = g2.createElement(c2, { is: d2.is }) : (a2 = g2.createElement(c2), "select" === c2 && (g2 = a2, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a2 = g2.createElementNS(a2, c2);
            a2[Of] = b2;
            a2[Pf] = d2;
            Aj(a2, b2, false, false);
            b2.stateNode = a2;
            a: {
              g2 = vb(c2, d2);
              switch (c2) {
                case "dialog":
                  D2("cancel", a2);
                  D2("close", a2);
                  e = d2;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D2("load", a2);
                  e = d2;
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++)
                    D2(lf[e], a2);
                  e = d2;
                  break;
                case "source":
                  D2("error", a2);
                  e = d2;
                  break;
                case "img":
                case "image":
                case "link":
                  D2(
                    "error",
                    a2
                  );
                  D2("load", a2);
                  e = d2;
                  break;
                case "details":
                  D2("toggle", a2);
                  e = d2;
                  break;
                case "input":
                  Za(a2, d2);
                  e = Ya(a2, d2);
                  D2("invalid", a2);
                  break;
                case "option":
                  e = d2;
                  break;
                case "select":
                  a2._wrapperState = { wasMultiple: !!d2.multiple };
                  e = A2({}, d2, { value: void 0 });
                  D2("invalid", a2);
                  break;
                case "textarea":
                  hb(a2, d2);
                  e = gb(a2, d2);
                  D2("invalid", a2);
                  break;
                default:
                  e = d2;
              }
              ub(c2, e);
              h2 = e;
              for (f2 in h2)
                if (h2.hasOwnProperty(f2)) {
                  var k2 = h2[f2];
                  "style" === f2 ? sb(a2, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a2, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a2, k2) : "number" === typeof k2 && ob(a2, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D2("scroll", a2) : null != k2 && ta(a2, f2, k2, g2));
                }
              switch (c2) {
                case "input":
                  Va(a2);
                  db(a2, d2, false);
                  break;
                case "textarea":
                  Va(a2);
                  jb(a2);
                  break;
                case "option":
                  null != d2.value && a2.setAttribute("value", "" + Sa(d2.value));
                  break;
                case "select":
                  a2.multiple = !!d2.multiple;
                  f2 = d2.value;
                  null != f2 ? fb(a2, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                    a2,
                    !!d2.multiple,
                    d2.defaultValue,
                    true
                  );
                  break;
                default:
                  "function" === typeof e.onClick && (a2.onclick = Bf);
              }
              switch (c2) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  d2 = !!d2.autoFocus;
                  break a;
                case "img":
                  d2 = true;
                  break a;
                default:
                  d2 = false;
              }
            }
            d2 && (b2.flags |= 4);
          }
          null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
        }
        S2(b2);
        return null;
      case 6:
        if (a2 && null != b2.stateNode)
          Dj(a2, b2, a2.memoizedProps, d2);
        else {
          if ("string" !== typeof d2 && null === b2.stateNode)
            throw Error(p2(166));
          c2 = Hh(Gh.current);
          Hh(Eh.current);
          if (Gg(b2)) {
            d2 = b2.stateNode;
            c2 = b2.memoizedProps;
            d2[Of] = b2;
            if (f2 = d2.nodeValue !== c2) {
              if (a2 = xg, null !== a2)
                switch (a2.tag) {
                  case 3:
                    Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
                    break;
                  case 5:
                    true !== a2.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
                }
            }
            f2 && (b2.flags |= 4);
          } else
            d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
        }
        S2(b2);
        return null;
      case 13:
        E2(M2);
        d2 = b2.memoizedState;
        if (null === a2 || null !== a2.memoizedState && null !== a2.memoizedState.dehydrated) {
          if (I2 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
            Hg(), Ig(), b2.flags |= 98560, f2 = false;
          else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
            if (null === a2) {
              if (!f2)
                throw Error(p2(318));
              f2 = b2.memoizedState;
              f2 = null !== f2 ? f2.dehydrated : null;
              if (!f2)
                throw Error(p2(317));
              f2[Of] = b2;
            } else
              Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
            S2(b2);
            f2 = false;
          } else
            null !== zg && (Gj(zg), zg = null), f2 = true;
          if (!f2)
            return b2.flags & 65536 ? b2 : null;
        }
        if (0 !== (b2.flags & 128))
          return b2.lanes = c2, b2;
        d2 = null !== d2;
        d2 !== (null !== a2 && null !== a2.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a2 || 0 !== (M2.current & 1) ? 0 === T2 && (T2 = 3) : uj()));
        null !== b2.updateQueue && (b2.flags |= 4);
        S2(b2);
        return null;
      case 4:
        return Jh(), Bj(a2, b2), null === a2 && sf(b2.stateNode.containerInfo), S2(b2), null;
      case 10:
        return Rg(b2.type._context), S2(b2), null;
      case 17:
        return Zf(b2.type) && $f(), S2(b2), null;
      case 19:
        E2(M2);
        f2 = b2.memoizedState;
        if (null === f2)
          return S2(b2), null;
        d2 = 0 !== (b2.flags & 128);
        g2 = f2.rendering;
        if (null === g2)
          if (d2)
            Ej(f2, false);
          else {
            if (0 !== T2 || null !== a2 && 0 !== (a2.flags & 128))
              for (a2 = b2.child; null !== a2; ) {
                g2 = Mh(a2);
                if (null !== g2) {
                  b2.flags |= 128;
                  Ej(f2, false);
                  d2 = g2.updateQueue;
                  null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                  b2.subtreeFlags = 0;
                  d2 = c2;
                  for (c2 = b2.child; null !== c2; )
                    f2 = c2, a2 = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a2, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a2 = g2.dependencies, f2.dependencies = null === a2 ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c2 = c2.sibling;
                  G2(M2, M2.current & 1 | 2);
                  return b2.child;
                }
                a2 = a2.sibling;
              }
            null !== f2.tail && B2() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
          }
        else {
          if (!d2)
            if (a2 = Mh(g2), null !== a2) {
              if (b2.flags |= 128, d2 = true, c2 = a2.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I2)
                return S2(b2), null;
            } else
              2 * B2() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
          f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
        }
        if (null !== f2.tail)
          return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B2(), b2.sibling = null, c2 = M2.current, G2(M2, d2 ? c2 & 1 | 2 : c2 & 1), b2;
        S2(b2);
        return null;
      case 22:
      case 23:
        return Ij(), d2 = null !== b2.memoizedState, null !== a2 && null !== a2.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S2(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S2(b2), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(p2(156, b2.tag));
  }
  function Jj(a2, b2) {
    wg(b2);
    switch (b2.tag) {
      case 1:
        return Zf(b2.type) && $f(), a2 = b2.flags, a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
      case 3:
        return Jh(), E2(Wf), E2(H2), Oh(), a2 = b2.flags, 0 !== (a2 & 65536) && 0 === (a2 & 128) ? (b2.flags = a2 & -65537 | 128, b2) : null;
      case 5:
        return Lh(b2), null;
      case 13:
        E2(M2);
        a2 = b2.memoizedState;
        if (null !== a2 && null !== a2.dehydrated) {
          if (null === b2.alternate)
            throw Error(p2(340));
          Ig();
        }
        a2 = b2.flags;
        return a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
      case 19:
        return E2(M2), null;
      case 4:
        return Jh(), null;
      case 10:
        return Rg(b2.type._context), null;
      case 22:
      case 23:
        return Ij(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Kj = false, U2 = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V2 = null;
  function Mj(a2, b2) {
    var c2 = a2.ref;
    if (null !== c2)
      if ("function" === typeof c2)
        try {
          c2(null);
        } catch (d2) {
          W2(a2, b2, d2);
        }
      else
        c2.current = null;
  }
  function Nj(a2, b2, c2) {
    try {
      c2();
    } catch (d2) {
      W2(a2, b2, d2);
    }
  }
  var Oj = false;
  function Pj(a2, b2) {
    Cf = dd;
    a2 = Me();
    if (Ne(a2)) {
      if ("selectionStart" in a2)
        var c2 = { start: a2.selectionStart, end: a2.selectionEnd };
      else
        a: {
          c2 = (c2 = a2.ownerDocument) && c2.defaultView || window;
          var d2 = c2.getSelection && c2.getSelection();
          if (d2 && 0 !== d2.rangeCount) {
            c2 = d2.anchorNode;
            var e = d2.anchorOffset, f2 = d2.focusNode;
            d2 = d2.focusOffset;
            try {
              c2.nodeType, f2.nodeType;
            } catch (F2) {
              c2 = null;
              break a;
            }
            var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q = a2, r2 = null;
            b:
              for (; ; ) {
                for (var y2; ; ) {
                  q !== c2 || 0 !== e && 3 !== q.nodeType || (h2 = g2 + e);
                  q !== f2 || 0 !== d2 && 3 !== q.nodeType || (k2 = g2 + d2);
                  3 === q.nodeType && (g2 += q.nodeValue.length);
                  if (null === (y2 = q.firstChild))
                    break;
                  r2 = q;
                  q = y2;
                }
                for (; ; ) {
                  if (q === a2)
                    break b;
                  r2 === c2 && ++l2 === e && (h2 = g2);
                  r2 === f2 && ++m2 === d2 && (k2 = g2);
                  if (null !== (y2 = q.nextSibling))
                    break;
                  q = r2;
                  r2 = q.parentNode;
                }
                q = y2;
              }
            c2 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
          } else
            c2 = null;
        }
      c2 = c2 || { start: 0, end: 0 };
    } else
      c2 = null;
    Df = { focusedElem: a2, selectionRange: c2 };
    dd = false;
    for (V2 = b2; null !== V2; )
      if (b2 = V2, a2 = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a2)
        a2.return = b2, V2 = a2;
      else
        for (; null !== V2; ) {
          b2 = V2;
          try {
            var n2 = b2.alternate;
            if (0 !== (b2.flags & 1024))
              switch (b2.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (null !== n2) {
                    var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                    x2.__reactInternalSnapshotBeforeUpdate = w2;
                  }
                  break;
                case 3:
                  var u2 = b2.stateNode.containerInfo;
                  1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(p2(163));
              }
          } catch (F2) {
            W2(b2, b2.return, F2);
          }
          a2 = b2.sibling;
          if (null !== a2) {
            a2.return = b2.return;
            V2 = a2;
            break;
          }
          V2 = b2.return;
        }
    n2 = Oj;
    Oj = false;
    return n2;
  }
  function Qj(a2, b2, c2) {
    var d2 = b2.updateQueue;
    d2 = null !== d2 ? d2.lastEffect : null;
    if (null !== d2) {
      var e = d2 = d2.next;
      do {
        if ((e.tag & a2) === a2) {
          var f2 = e.destroy;
          e.destroy = void 0;
          void 0 !== f2 && Nj(b2, c2, f2);
        }
        e = e.next;
      } while (e !== d2);
    }
  }
  function Rj(a2, b2) {
    b2 = b2.updateQueue;
    b2 = null !== b2 ? b2.lastEffect : null;
    if (null !== b2) {
      var c2 = b2 = b2.next;
      do {
        if ((c2.tag & a2) === a2) {
          var d2 = c2.create;
          c2.destroy = d2();
        }
        c2 = c2.next;
      } while (c2 !== b2);
    }
  }
  function Sj(a2) {
    var b2 = a2.ref;
    if (null !== b2) {
      var c2 = a2.stateNode;
      switch (a2.tag) {
        case 5:
          a2 = c2;
          break;
        default:
          a2 = c2;
      }
      "function" === typeof b2 ? b2(a2) : b2.current = a2;
    }
  }
  function Tj(a2) {
    var b2 = a2.alternate;
    null !== b2 && (a2.alternate = null, Tj(b2));
    a2.child = null;
    a2.deletions = null;
    a2.sibling = null;
    5 === a2.tag && (b2 = a2.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
    a2.stateNode = null;
    a2.return = null;
    a2.dependencies = null;
    a2.memoizedProps = null;
    a2.memoizedState = null;
    a2.pendingProps = null;
    a2.stateNode = null;
    a2.updateQueue = null;
  }
  function Uj(a2) {
    return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
  }
  function Vj(a2) {
    a:
      for (; ; ) {
        for (; null === a2.sibling; ) {
          if (null === a2.return || Uj(a2.return))
            return null;
          a2 = a2.return;
        }
        a2.sibling.return = a2.return;
        for (a2 = a2.sibling; 5 !== a2.tag && 6 !== a2.tag && 18 !== a2.tag; ) {
          if (a2.flags & 2)
            continue a;
          if (null === a2.child || 4 === a2.tag)
            continue a;
          else
            a2.child.return = a2, a2 = a2.child;
        }
        if (!(a2.flags & 2))
          return a2.stateNode;
      }
  }
  function Wj(a2, b2, c2) {
    var d2 = a2.tag;
    if (5 === d2 || 6 === d2)
      a2 = a2.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a2, b2) : c2.insertBefore(a2, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a2, c2)) : (b2 = c2, b2.appendChild(a2)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
    else if (4 !== d2 && (a2 = a2.child, null !== a2))
      for (Wj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
        Wj(a2, b2, c2), a2 = a2.sibling;
  }
  function Xj(a2, b2, c2) {
    var d2 = a2.tag;
    if (5 === d2 || 6 === d2)
      a2 = a2.stateNode, b2 ? c2.insertBefore(a2, b2) : c2.appendChild(a2);
    else if (4 !== d2 && (a2 = a2.child, null !== a2))
      for (Xj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
        Xj(a2, b2, c2), a2 = a2.sibling;
  }
  var X2 = null, Yj = false;
  function Zj(a2, b2, c2) {
    for (c2 = c2.child; null !== c2; )
      ak(a2, b2, c2), c2 = c2.sibling;
  }
  function ak(a2, b2, c2) {
    if (lc && "function" === typeof lc.onCommitFiberUnmount)
      try {
        lc.onCommitFiberUnmount(kc, c2);
      } catch (h2) {
      }
    switch (c2.tag) {
      case 5:
        U2 || Mj(c2, b2);
      case 6:
        var d2 = X2, e = Yj;
        X2 = null;
        Zj(a2, b2, c2);
        X2 = d2;
        Yj = e;
        null !== X2 && (Yj ? (a2 = X2, c2 = c2.stateNode, 8 === a2.nodeType ? a2.parentNode.removeChild(c2) : a2.removeChild(c2)) : X2.removeChild(c2.stateNode));
        break;
      case 18:
        null !== X2 && (Yj ? (a2 = X2, c2 = c2.stateNode, 8 === a2.nodeType ? Kf(a2.parentNode, c2) : 1 === a2.nodeType && Kf(a2, c2), bd(a2)) : Kf(X2, c2.stateNode));
        break;
      case 4:
        d2 = X2;
        e = Yj;
        X2 = c2.stateNode.containerInfo;
        Yj = true;
        Zj(a2, b2, c2);
        X2 = d2;
        Yj = e;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (!U2 && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
          e = d2 = d2.next;
          do {
            var f2 = e, g2 = f2.destroy;
            f2 = f2.tag;
            void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
            e = e.next;
          } while (e !== d2);
        }
        Zj(a2, b2, c2);
        break;
      case 1:
        if (!U2 && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
          try {
            d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
          } catch (h2) {
            W2(c2, b2, h2);
          }
        Zj(a2, b2, c2);
        break;
      case 21:
        Zj(a2, b2, c2);
        break;
      case 22:
        c2.mode & 1 ? (U2 = (d2 = U2) || null !== c2.memoizedState, Zj(a2, b2, c2), U2 = d2) : Zj(a2, b2, c2);
        break;
      default:
        Zj(a2, b2, c2);
    }
  }
  function bk(a2) {
    var b2 = a2.updateQueue;
    if (null !== b2) {
      a2.updateQueue = null;
      var c2 = a2.stateNode;
      null === c2 && (c2 = a2.stateNode = new Lj());
      b2.forEach(function(b3) {
        var d2 = ck.bind(null, a2, b3);
        c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
      });
    }
  }
  function dk(a2, b2) {
    var c2 = b2.deletions;
    if (null !== c2)
      for (var d2 = 0; d2 < c2.length; d2++) {
        var e = c2[d2];
        try {
          var f2 = a2, g2 = b2, h2 = g2;
          a:
            for (; null !== h2; ) {
              switch (h2.tag) {
                case 5:
                  X2 = h2.stateNode;
                  Yj = false;
                  break a;
                case 3:
                  X2 = h2.stateNode.containerInfo;
                  Yj = true;
                  break a;
                case 4:
                  X2 = h2.stateNode.containerInfo;
                  Yj = true;
                  break a;
              }
              h2 = h2.return;
            }
          if (null === X2)
            throw Error(p2(160));
          ak(f2, g2, e);
          X2 = null;
          Yj = false;
          var k2 = e.alternate;
          null !== k2 && (k2.return = null);
          e.return = null;
        } catch (l2) {
          W2(e, b2, l2);
        }
      }
    if (b2.subtreeFlags & 12854)
      for (b2 = b2.child; null !== b2; )
        ek(b2, a2), b2 = b2.sibling;
  }
  function ek(a2, b2) {
    var c2 = a2.alternate, d2 = a2.flags;
    switch (a2.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        dk(b2, a2);
        fk(a2);
        if (d2 & 4) {
          try {
            Qj(3, a2, a2.return), Rj(3, a2);
          } catch (t2) {
            W2(a2, a2.return, t2);
          }
          try {
            Qj(5, a2, a2.return);
          } catch (t2) {
            W2(a2, a2.return, t2);
          }
        }
        break;
      case 1:
        dk(b2, a2);
        fk(a2);
        d2 & 512 && null !== c2 && Mj(c2, c2.return);
        break;
      case 5:
        dk(b2, a2);
        fk(a2);
        d2 & 512 && null !== c2 && Mj(c2, c2.return);
        if (a2.flags & 32) {
          var e = a2.stateNode;
          try {
            ob(e, "");
          } catch (t2) {
            W2(a2, a2.return, t2);
          }
        }
        if (d2 & 4 && (e = a2.stateNode, null != e)) {
          var f2 = a2.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h2 = a2.type, k2 = a2.updateQueue;
          a2.updateQueue = null;
          if (null !== k2)
            try {
              "input" === h2 && "radio" === f2.type && null != f2.name && ab(e, f2);
              vb(h2, g2);
              var l2 = vb(h2, f2);
              for (g2 = 0; g2 < k2.length; g2 += 2) {
                var m2 = k2[g2], q = k2[g2 + 1];
                "style" === m2 ? sb(e, q) : "dangerouslySetInnerHTML" === m2 ? nb(e, q) : "children" === m2 ? ob(e, q) : ta(e, m2, q, l2);
              }
              switch (h2) {
                case "input":
                  bb(e, f2);
                  break;
                case "textarea":
                  ib(e, f2);
                  break;
                case "select":
                  var r2 = e._wrapperState.wasMultiple;
                  e._wrapperState.wasMultiple = !!f2.multiple;
                  var y2 = f2.value;
                  null != y2 ? fb(e, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                    e,
                    !!f2.multiple,
                    f2.defaultValue,
                    true
                  ) : fb(e, !!f2.multiple, f2.multiple ? [] : "", false));
              }
              e[Pf] = f2;
            } catch (t2) {
              W2(a2, a2.return, t2);
            }
        }
        break;
      case 6:
        dk(b2, a2);
        fk(a2);
        if (d2 & 4) {
          if (null === a2.stateNode)
            throw Error(p2(162));
          e = a2.stateNode;
          f2 = a2.memoizedProps;
          try {
            e.nodeValue = f2;
          } catch (t2) {
            W2(a2, a2.return, t2);
          }
        }
        break;
      case 3:
        dk(b2, a2);
        fk(a2);
        if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
          try {
            bd(b2.containerInfo);
          } catch (t2) {
            W2(a2, a2.return, t2);
          }
        break;
      case 4:
        dk(b2, a2);
        fk(a2);
        break;
      case 13:
        dk(b2, a2);
        fk(a2);
        e = a2.child;
        e.flags & 8192 && (f2 = null !== e.memoizedState, e.stateNode.isHidden = f2, !f2 || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B2()));
        d2 & 4 && bk(a2);
        break;
      case 22:
        m2 = null !== c2 && null !== c2.memoizedState;
        a2.mode & 1 ? (U2 = (l2 = U2) || m2, dk(b2, a2), U2 = l2) : dk(b2, a2);
        fk(a2);
        if (d2 & 8192) {
          l2 = null !== a2.memoizedState;
          if ((a2.stateNode.isHidden = l2) && !m2 && 0 !== (a2.mode & 1))
            for (V2 = a2, m2 = a2.child; null !== m2; ) {
              for (q = V2 = m2; null !== V2; ) {
                r2 = V2;
                y2 = r2.child;
                switch (r2.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Qj(4, r2, r2.return);
                    break;
                  case 1:
                    Mj(r2, r2.return);
                    var n2 = r2.stateNode;
                    if ("function" === typeof n2.componentWillUnmount) {
                      d2 = r2;
                      c2 = r2.return;
                      try {
                        b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                      } catch (t2) {
                        W2(d2, c2, t2);
                      }
                    }
                    break;
                  case 5:
                    Mj(r2, r2.return);
                    break;
                  case 22:
                    if (null !== r2.memoizedState) {
                      hk(q);
                      continue;
                    }
                }
                null !== y2 ? (y2.return = r2, V2 = y2) : hk(q);
              }
              m2 = m2.sibling;
            }
          a:
            for (m2 = null, q = a2; ; ) {
              if (5 === q.tag) {
                if (null === m2) {
                  m2 = q;
                  try {
                    e = q.stateNode, l2 ? (f2 = e.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q.stateNode, k2 = q.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                  } catch (t2) {
                    W2(a2, a2.return, t2);
                  }
                }
              } else if (6 === q.tag) {
                if (null === m2)
                  try {
                    q.stateNode.nodeValue = l2 ? "" : q.memoizedProps;
                  } catch (t2) {
                    W2(a2, a2.return, t2);
                  }
              } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a2) && null !== q.child) {
                q.child.return = q;
                q = q.child;
                continue;
              }
              if (q === a2)
                break a;
              for (; null === q.sibling; ) {
                if (null === q.return || q.return === a2)
                  break a;
                m2 === q && (m2 = null);
                q = q.return;
              }
              m2 === q && (m2 = null);
              q.sibling.return = q.return;
              q = q.sibling;
            }
        }
        break;
      case 19:
        dk(b2, a2);
        fk(a2);
        d2 & 4 && bk(a2);
        break;
      case 21:
        break;
      default:
        dk(
          b2,
          a2
        ), fk(a2);
    }
  }
  function fk(a2) {
    var b2 = a2.flags;
    if (b2 & 2) {
      try {
        a: {
          for (var c2 = a2.return; null !== c2; ) {
            if (Uj(c2)) {
              var d2 = c2;
              break a;
            }
            c2 = c2.return;
          }
          throw Error(p2(160));
        }
        switch (d2.tag) {
          case 5:
            var e = d2.stateNode;
            d2.flags & 32 && (ob(e, ""), d2.flags &= -33);
            var f2 = Vj(a2);
            Xj(a2, f2, e);
            break;
          case 3:
          case 4:
            var g2 = d2.stateNode.containerInfo, h2 = Vj(a2);
            Wj(a2, h2, g2);
            break;
          default:
            throw Error(p2(161));
        }
      } catch (k2) {
        W2(a2, a2.return, k2);
      }
      a2.flags &= -3;
    }
    b2 & 4096 && (a2.flags &= -4097);
  }
  function ik(a2, b2, c2) {
    V2 = a2;
    jk(a2);
  }
  function jk(a2, b2, c2) {
    for (var d2 = 0 !== (a2.mode & 1); null !== V2; ) {
      var e = V2, f2 = e.child;
      if (22 === e.tag && d2) {
        var g2 = null !== e.memoizedState || Kj;
        if (!g2) {
          var h2 = e.alternate, k2 = null !== h2 && null !== h2.memoizedState || U2;
          h2 = Kj;
          var l2 = U2;
          Kj = g2;
          if ((U2 = k2) && !l2)
            for (V2 = e; null !== V2; )
              g2 = V2, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e) : null !== k2 ? (k2.return = g2, V2 = k2) : kk(e);
          for (; null !== f2; )
            V2 = f2, jk(f2), f2 = f2.sibling;
          V2 = e;
          Kj = h2;
          U2 = l2;
        }
        lk(a2);
      } else
        0 !== (e.subtreeFlags & 8772) && null !== f2 ? (f2.return = e, V2 = f2) : lk(a2);
    }
  }
  function lk(a2) {
    for (; null !== V2; ) {
      var b2 = V2;
      if (0 !== (b2.flags & 8772)) {
        var c2 = b2.alternate;
        try {
          if (0 !== (b2.flags & 8772))
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                U2 || Rj(5, b2);
                break;
              case 1:
                var d2 = b2.stateNode;
                if (b2.flags & 4 && !U2)
                  if (null === c2)
                    d2.componentDidMount();
                  else {
                    var e = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                    d2.componentDidUpdate(e, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                  }
                var f2 = b2.updateQueue;
                null !== f2 && ih(b2, f2, d2);
                break;
              case 3:
                var g2 = b2.updateQueue;
                if (null !== g2) {
                  c2 = null;
                  if (null !== b2.child)
                    switch (b2.child.tag) {
                      case 5:
                        c2 = b2.child.stateNode;
                        break;
                      case 1:
                        c2 = b2.child.stateNode;
                    }
                  ih(b2, g2, c2);
                }
                break;
              case 5:
                var h2 = b2.stateNode;
                if (null === c2 && b2.flags & 4) {
                  c2 = h2;
                  var k2 = b2.memoizedProps;
                  switch (b2.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k2.autoFocus && c2.focus();
                      break;
                    case "img":
                      k2.src && (c2.src = k2.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b2.memoizedState) {
                  var l2 = b2.alternate;
                  if (null !== l2) {
                    var m2 = l2.memoizedState;
                    if (null !== m2) {
                      var q = m2.dehydrated;
                      null !== q && bd(q);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p2(163));
            }
          U2 || b2.flags & 512 && Sj(b2);
        } catch (r2) {
          W2(b2, b2.return, r2);
        }
      }
      if (b2 === a2) {
        V2 = null;
        break;
      }
      c2 = b2.sibling;
      if (null !== c2) {
        c2.return = b2.return;
        V2 = c2;
        break;
      }
      V2 = b2.return;
    }
  }
  function hk(a2) {
    for (; null !== V2; ) {
      var b2 = V2;
      if (b2 === a2) {
        V2 = null;
        break;
      }
      var c2 = b2.sibling;
      if (null !== c2) {
        c2.return = b2.return;
        V2 = c2;
        break;
      }
      V2 = b2.return;
    }
  }
  function kk(a2) {
    for (; null !== V2; ) {
      var b2 = V2;
      try {
        switch (b2.tag) {
          case 0:
          case 11:
          case 15:
            var c2 = b2.return;
            try {
              Rj(4, b2);
            } catch (k2) {
              W2(b2, c2, k2);
            }
            break;
          case 1:
            var d2 = b2.stateNode;
            if ("function" === typeof d2.componentDidMount) {
              var e = b2.return;
              try {
                d2.componentDidMount();
              } catch (k2) {
                W2(b2, e, k2);
              }
            }
            var f2 = b2.return;
            try {
              Sj(b2);
            } catch (k2) {
              W2(b2, f2, k2);
            }
            break;
          case 5:
            var g2 = b2.return;
            try {
              Sj(b2);
            } catch (k2) {
              W2(b2, g2, k2);
            }
        }
      } catch (k2) {
        W2(b2, b2.return, k2);
      }
      if (b2 === a2) {
        V2 = null;
        break;
      }
      var h2 = b2.sibling;
      if (null !== h2) {
        h2.return = b2.return;
        V2 = h2;
        break;
      }
      V2 = b2.return;
    }
  }
  var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R2 = null, Y = null, Z2 = 0, gj = 0, fj = Uf(0), T2 = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
  function L2() {
    return 0 !== (K & 6) ? B2() : -1 !== Bk ? Bk : Bk = B2();
  }
  function lh(a2) {
    if (0 === (a2.mode & 1))
      return 1;
    if (0 !== (K & 2) && 0 !== Z2)
      return Z2 & -Z2;
    if (null !== Kg.transition)
      return 0 === Ck && (Ck = yc()), Ck;
    a2 = C2;
    if (0 !== a2)
      return a2;
    a2 = window.event;
    a2 = void 0 === a2 ? 16 : jd(a2.type);
    return a2;
  }
  function mh(a2, b2, c2, d2) {
    if (50 < zk)
      throw zk = 0, Ak = null, Error(p2(185));
    Ac(a2, c2, d2);
    if (0 === (K & 2) || a2 !== R2)
      a2 === R2 && (0 === (K & 2) && (rk |= c2), 4 === T2 && Dk(a2, Z2)), Ek(a2, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Hj = B2() + 500, fg && jg());
  }
  function Ek(a2, b2) {
    var c2 = a2.callbackNode;
    wc(a2, b2);
    var d2 = uc(a2, a2 === R2 ? Z2 : 0);
    if (0 === d2)
      null !== c2 && bc(c2), a2.callbackNode = null, a2.callbackPriority = 0;
    else if (b2 = d2 & -d2, a2.callbackPriority !== b2) {
      null != c2 && bc(c2);
      if (1 === b2)
        0 === a2.tag ? ig(Fk.bind(null, a2)) : hg(Fk.bind(null, a2)), Jf(function() {
          0 === (K & 6) && jg();
        }), c2 = null;
      else {
        switch (Dc(d2)) {
          case 1:
            c2 = fc;
            break;
          case 4:
            c2 = gc;
            break;
          case 16:
            c2 = hc;
            break;
          case 536870912:
            c2 = jc;
            break;
          default:
            c2 = hc;
        }
        c2 = Gk(c2, Hk.bind(null, a2));
      }
      a2.callbackPriority = b2;
      a2.callbackNode = c2;
    }
  }
  function Hk(a2, b2) {
    Bk = -1;
    Ck = 0;
    if (0 !== (K & 6))
      throw Error(p2(327));
    var c2 = a2.callbackNode;
    if (Ik() && a2.callbackNode !== c2)
      return null;
    var d2 = uc(a2, a2 === R2 ? Z2 : 0);
    if (0 === d2)
      return null;
    if (0 !== (d2 & 30) || 0 !== (d2 & a2.expiredLanes) || b2)
      b2 = Jk(a2, d2);
    else {
      b2 = d2;
      var e = K;
      K |= 2;
      var f2 = Kk();
      if (R2 !== a2 || Z2 !== b2)
        vk = null, Hj = B2() + 500, Lk(a2, b2);
      do
        try {
          Mk();
          break;
        } catch (h2) {
          Nk(a2, h2);
        }
      while (1);
      Qg();
      nk.current = f2;
      K = e;
      null !== Y ? b2 = 0 : (R2 = null, Z2 = 0, b2 = T2);
    }
    if (0 !== b2) {
      2 === b2 && (e = xc(a2), 0 !== e && (d2 = e, b2 = Ok(a2, e)));
      if (1 === b2)
        throw c2 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B2()), c2;
      if (6 === b2)
        Dk(a2, d2);
      else {
        e = a2.current.alternate;
        if (0 === (d2 & 30) && !Pk(e) && (b2 = Jk(a2, d2), 2 === b2 && (f2 = xc(a2), 0 !== f2 && (d2 = f2, b2 = Ok(a2, f2))), 1 === b2))
          throw c2 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B2()), c2;
        a2.finishedWork = e;
        a2.finishedLanes = d2;
        switch (b2) {
          case 0:
          case 1:
            throw Error(p2(345));
          case 2:
            Qk(a2, uk, vk);
            break;
          case 3:
            Dk(a2, d2);
            if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B2(), 10 < b2)) {
              if (0 !== uc(a2, 0))
                break;
              e = a2.suspendedLanes;
              if ((e & d2) !== d2) {
                L2();
                a2.pingedLanes |= a2.suspendedLanes & e;
                break;
              }
              a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), b2);
              break;
            }
            Qk(a2, uk, vk);
            break;
          case 4:
            Dk(a2, d2);
            if ((d2 & 4194240) === d2)
              break;
            b2 = a2.eventTimes;
            for (e = -1; 0 < d2; ) {
              var g2 = 31 - oc(d2);
              f2 = 1 << g2;
              g2 = b2[g2];
              g2 > e && (e = g2);
              d2 &= ~f2;
            }
            d2 = e;
            d2 = B2() - d2;
            d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
            if (10 < d2) {
              a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), d2);
              break;
            }
            Qk(a2, uk, vk);
            break;
          case 5:
            Qk(a2, uk, vk);
            break;
          default:
            throw Error(p2(329));
        }
      }
    }
    Ek(a2, B2());
    return a2.callbackNode === c2 ? Hk.bind(null, a2) : null;
  }
  function Ok(a2, b2) {
    var c2 = tk;
    a2.current.memoizedState.isDehydrated && (Lk(a2, b2).flags |= 256);
    a2 = Jk(a2, b2);
    2 !== a2 && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
    return a2;
  }
  function Gj(a2) {
    null === uk ? uk = a2 : uk.push.apply(uk, a2);
  }
  function Pk(a2) {
    for (var b2 = a2; ; ) {
      if (b2.flags & 16384) {
        var c2 = b2.updateQueue;
        if (null !== c2 && (c2 = c2.stores, null !== c2))
          for (var d2 = 0; d2 < c2.length; d2++) {
            var e = c2[d2], f2 = e.getSnapshot;
            e = e.value;
            try {
              if (!He(f2(), e))
                return false;
            } catch (g2) {
              return false;
            }
          }
      }
      c2 = b2.child;
      if (b2.subtreeFlags & 16384 && null !== c2)
        c2.return = b2, b2 = c2;
      else {
        if (b2 === a2)
          break;
        for (; null === b2.sibling; ) {
          if (null === b2.return || b2.return === a2)
            return true;
          b2 = b2.return;
        }
        b2.sibling.return = b2.return;
        b2 = b2.sibling;
      }
    }
    return true;
  }
  function Dk(a2, b2) {
    b2 &= ~sk;
    b2 &= ~rk;
    a2.suspendedLanes |= b2;
    a2.pingedLanes &= ~b2;
    for (a2 = a2.expirationTimes; 0 < b2; ) {
      var c2 = 31 - oc(b2), d2 = 1 << c2;
      a2[c2] = -1;
      b2 &= ~d2;
    }
  }
  function Fk(a2) {
    if (0 !== (K & 6))
      throw Error(p2(327));
    Ik();
    var b2 = uc(a2, 0);
    if (0 === (b2 & 1))
      return Ek(a2, B2()), null;
    var c2 = Jk(a2, b2);
    if (0 !== a2.tag && 2 === c2) {
      var d2 = xc(a2);
      0 !== d2 && (b2 = d2, c2 = Ok(a2, d2));
    }
    if (1 === c2)
      throw c2 = qk, Lk(a2, 0), Dk(a2, b2), Ek(a2, B2()), c2;
    if (6 === c2)
      throw Error(p2(345));
    a2.finishedWork = a2.current.alternate;
    a2.finishedLanes = b2;
    Qk(a2, uk, vk);
    Ek(a2, B2());
    return null;
  }
  function Rk(a2, b2) {
    var c2 = K;
    K |= 1;
    try {
      return a2(b2);
    } finally {
      K = c2, 0 === K && (Hj = B2() + 500, fg && jg());
    }
  }
  function Sk(a2) {
    null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
    var b2 = K;
    K |= 1;
    var c2 = pk.transition, d2 = C2;
    try {
      if (pk.transition = null, C2 = 1, a2)
        return a2();
    } finally {
      C2 = d2, pk.transition = c2, K = b2, 0 === (K & 6) && jg();
    }
  }
  function Ij() {
    gj = fj.current;
    E2(fj);
  }
  function Lk(a2, b2) {
    a2.finishedWork = null;
    a2.finishedLanes = 0;
    var c2 = a2.timeoutHandle;
    -1 !== c2 && (a2.timeoutHandle = -1, Gf(c2));
    if (null !== Y)
      for (c2 = Y.return; null !== c2; ) {
        var d2 = c2;
        wg(d2);
        switch (d2.tag) {
          case 1:
            d2 = d2.type.childContextTypes;
            null !== d2 && void 0 !== d2 && $f();
            break;
          case 3:
            Jh();
            E2(Wf);
            E2(H2);
            Oh();
            break;
          case 5:
            Lh(d2);
            break;
          case 4:
            Jh();
            break;
          case 13:
            E2(M2);
            break;
          case 19:
            E2(M2);
            break;
          case 10:
            Rg(d2.type._context);
            break;
          case 22:
          case 23:
            Ij();
        }
        c2 = c2.return;
      }
    R2 = a2;
    Y = a2 = wh(a2.current, null);
    Z2 = gj = b2;
    T2 = 0;
    qk = null;
    sk = rk = hh = 0;
    uk = tk = null;
    if (null !== Wg) {
      for (b2 = 0; b2 < Wg.length; b2++)
        if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
          c2.interleaved = null;
          var e = d2.next, f2 = c2.pending;
          if (null !== f2) {
            var g2 = f2.next;
            f2.next = e;
            d2.next = g2;
          }
          c2.pending = d2;
        }
      Wg = null;
    }
    return a2;
  }
  function Nk(a2, b2) {
    do {
      var c2 = Y;
      try {
        Qg();
        Ph.current = ai;
        if (Sh) {
          for (var d2 = N2.memoizedState; null !== d2; ) {
            var e = d2.queue;
            null !== e && (e.pending = null);
            d2 = d2.next;
          }
          Sh = false;
        }
        Rh = 0;
        P2 = O2 = N2 = null;
        Th = false;
        Uh = 0;
        ok.current = null;
        if (null === c2 || null === c2.return) {
          T2 = 1;
          qk = b2;
          Y = null;
          break;
        }
        a: {
          var f2 = a2, g2 = c2.return, h2 = c2, k2 = b2;
          b2 = Z2;
          h2.flags |= 32768;
          if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
            var l2 = k2, m2 = h2, q = m2.tag;
            if (0 === (m2.mode & 1) && (0 === q || 11 === q || 15 === q)) {
              var r2 = m2.alternate;
              r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
            }
            var y2 = Vi(g2);
            if (null !== y2) {
              y2.flags &= -257;
              Wi(y2, g2, h2, f2, b2);
              y2.mode & 1 && Ti(f2, l2, b2);
              b2 = y2;
              k2 = l2;
              var n2 = b2.updateQueue;
              if (null === n2) {
                var t2 = /* @__PURE__ */ new Set();
                t2.add(k2);
                b2.updateQueue = t2;
              } else
                n2.add(k2);
              break a;
            } else {
              if (0 === (b2 & 1)) {
                Ti(f2, l2, b2);
                uj();
                break a;
              }
              k2 = Error(p2(426));
            }
          } else if (I2 && h2.mode & 1) {
            var J2 = Vi(g2);
            if (null !== J2) {
              0 === (J2.flags & 65536) && (J2.flags |= 256);
              Wi(J2, g2, h2, f2, b2);
              Jg(Ki(k2, h2));
              break a;
            }
          }
          f2 = k2 = Ki(k2, h2);
          4 !== T2 && (T2 = 2);
          null === tk ? tk = [f2] : tk.push(f2);
          f2 = g2;
          do {
            switch (f2.tag) {
              case 3:
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var x2 = Oi(f2, k2, b2);
                fh(f2, x2);
                break a;
              case 1:
                h2 = k2;
                var w2 = f2.type, u2 = f2.stateNode;
                if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                  f2.flags |= 65536;
                  b2 &= -b2;
                  f2.lanes |= b2;
                  var F2 = Ri(f2, h2, b2);
                  fh(f2, F2);
                  break a;
                }
            }
            f2 = f2.return;
          } while (null !== f2);
        }
        Tk(c2);
      } catch (na) {
        b2 = na;
        Y === c2 && null !== c2 && (Y = c2 = c2.return);
        continue;
      }
      break;
    } while (1);
  }
  function Kk() {
    var a2 = nk.current;
    nk.current = ai;
    return null === a2 ? ai : a2;
  }
  function uj() {
    if (0 === T2 || 3 === T2 || 2 === T2)
      T2 = 4;
    null === R2 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R2, Z2);
  }
  function Jk(a2, b2) {
    var c2 = K;
    K |= 2;
    var d2 = Kk();
    if (R2 !== a2 || Z2 !== b2)
      vk = null, Lk(a2, b2);
    do
      try {
        Uk();
        break;
      } catch (e) {
        Nk(a2, e);
      }
    while (1);
    Qg();
    K = c2;
    nk.current = d2;
    if (null !== Y)
      throw Error(p2(261));
    R2 = null;
    Z2 = 0;
    return T2;
  }
  function Uk() {
    for (; null !== Y; )
      Vk(Y);
  }
  function Mk() {
    for (; null !== Y && !cc(); )
      Vk(Y);
  }
  function Vk(a2) {
    var b2 = Wk(a2.alternate, a2, gj);
    a2.memoizedProps = a2.pendingProps;
    null === b2 ? Tk(a2) : Y = b2;
    ok.current = null;
  }
  function Tk(a2) {
    var b2 = a2;
    do {
      var c2 = b2.alternate;
      a2 = b2.return;
      if (0 === (b2.flags & 32768)) {
        if (c2 = Fj(c2, b2, gj), null !== c2) {
          Y = c2;
          return;
        }
      } else {
        c2 = Jj(c2, b2);
        if (null !== c2) {
          c2.flags &= 32767;
          Y = c2;
          return;
        }
        if (null !== a2)
          a2.flags |= 32768, a2.subtreeFlags = 0, a2.deletions = null;
        else {
          T2 = 6;
          Y = null;
          return;
        }
      }
      b2 = b2.sibling;
      if (null !== b2) {
        Y = b2;
        return;
      }
      Y = b2 = a2;
    } while (null !== b2);
    0 === T2 && (T2 = 5);
  }
  function Qk(a2, b2, c2) {
    var d2 = C2, e = pk.transition;
    try {
      pk.transition = null, C2 = 1, Xk(a2, b2, c2, d2);
    } finally {
      pk.transition = e, C2 = d2;
    }
    return null;
  }
  function Xk(a2, b2, c2, d2) {
    do
      Ik();
    while (null !== xk);
    if (0 !== (K & 6))
      throw Error(p2(327));
    c2 = a2.finishedWork;
    var e = a2.finishedLanes;
    if (null === c2)
      return null;
    a2.finishedWork = null;
    a2.finishedLanes = 0;
    if (c2 === a2.current)
      throw Error(p2(177));
    a2.callbackNode = null;
    a2.callbackPriority = 0;
    var f2 = c2.lanes | c2.childLanes;
    Bc(a2, f2);
    a2 === R2 && (Y = R2 = null, Z2 = 0);
    0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
      Ik();
      return null;
    }));
    f2 = 0 !== (c2.flags & 15990);
    if (0 !== (c2.subtreeFlags & 15990) || f2) {
      f2 = pk.transition;
      pk.transition = null;
      var g2 = C2;
      C2 = 1;
      var h2 = K;
      K |= 4;
      ok.current = null;
      Pj(a2, c2);
      ek(c2, a2);
      Oe(Df);
      dd = !!Cf;
      Df = Cf = null;
      a2.current = c2;
      ik(c2);
      dc();
      K = h2;
      C2 = g2;
      pk.transition = f2;
    } else
      a2.current = c2;
    wk && (wk = false, xk = a2, yk = e);
    f2 = a2.pendingLanes;
    0 === f2 && (Si = null);
    mc(c2.stateNode);
    Ek(a2, B2());
    if (null !== b2)
      for (d2 = a2.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
        e = b2[c2], d2(e.value, { componentStack: e.stack, digest: e.digest });
    if (Pi)
      throw Pi = false, a2 = Qi, Qi = null, a2;
    0 !== (yk & 1) && 0 !== a2.tag && Ik();
    f2 = a2.pendingLanes;
    0 !== (f2 & 1) ? a2 === Ak ? zk++ : (zk = 0, Ak = a2) : zk = 0;
    jg();
    return null;
  }
  function Ik() {
    if (null !== xk) {
      var a2 = Dc(yk), b2 = pk.transition, c2 = C2;
      try {
        pk.transition = null;
        C2 = 16 > a2 ? 16 : a2;
        if (null === xk)
          var d2 = false;
        else {
          a2 = xk;
          xk = null;
          yk = 0;
          if (0 !== (K & 6))
            throw Error(p2(331));
          var e = K;
          K |= 4;
          for (V2 = a2.current; null !== V2; ) {
            var f2 = V2, g2 = f2.child;
            if (0 !== (V2.flags & 16)) {
              var h2 = f2.deletions;
              if (null !== h2) {
                for (var k2 = 0; k2 < h2.length; k2++) {
                  var l2 = h2[k2];
                  for (V2 = l2; null !== V2; ) {
                    var m2 = V2;
                    switch (m2.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(8, m2, f2);
                    }
                    var q = m2.child;
                    if (null !== q)
                      q.return = m2, V2 = q;
                    else
                      for (; null !== V2; ) {
                        m2 = V2;
                        var r2 = m2.sibling, y2 = m2.return;
                        Tj(m2);
                        if (m2 === l2) {
                          V2 = null;
                          break;
                        }
                        if (null !== r2) {
                          r2.return = y2;
                          V2 = r2;
                          break;
                        }
                        V2 = y2;
                      }
                  }
                }
                var n2 = f2.alternate;
                if (null !== n2) {
                  var t2 = n2.child;
                  if (null !== t2) {
                    n2.child = null;
                    do {
                      var J2 = t2.sibling;
                      t2.sibling = null;
                      t2 = J2;
                    } while (null !== t2);
                  }
                }
                V2 = f2;
              }
            }
            if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
              g2.return = f2, V2 = g2;
            else
              b:
                for (; null !== V2; ) {
                  f2 = V2;
                  if (0 !== (f2.flags & 2048))
                    switch (f2.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, f2, f2.return);
                    }
                  var x2 = f2.sibling;
                  if (null !== x2) {
                    x2.return = f2.return;
                    V2 = x2;
                    break b;
                  }
                  V2 = f2.return;
                }
          }
          var w2 = a2.current;
          for (V2 = w2; null !== V2; ) {
            g2 = V2;
            var u2 = g2.child;
            if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
              u2.return = g2, V2 = u2;
            else
              b:
                for (g2 = w2; null !== V2; ) {
                  h2 = V2;
                  if (0 !== (h2.flags & 2048))
                    try {
                      switch (h2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Rj(9, h2);
                      }
                    } catch (na) {
                      W2(h2, h2.return, na);
                    }
                  if (h2 === g2) {
                    V2 = null;
                    break b;
                  }
                  var F2 = h2.sibling;
                  if (null !== F2) {
                    F2.return = h2.return;
                    V2 = F2;
                    break b;
                  }
                  V2 = h2.return;
                }
          }
          K = e;
          jg();
          if (lc && "function" === typeof lc.onPostCommitFiberRoot)
            try {
              lc.onPostCommitFiberRoot(kc, a2);
            } catch (na) {
            }
          d2 = true;
        }
        return d2;
      } finally {
        C2 = c2, pk.transition = b2;
      }
    }
    return false;
  }
  function Yk(a2, b2, c2) {
    b2 = Ki(c2, b2);
    b2 = Oi(a2, b2, 1);
    a2 = dh(a2, b2, 1);
    b2 = L2();
    null !== a2 && (Ac(a2, 1, b2), Ek(a2, b2));
  }
  function W2(a2, b2, c2) {
    if (3 === a2.tag)
      Yk(a2, a2, c2);
    else
      for (; null !== b2; ) {
        if (3 === b2.tag) {
          Yk(b2, a2, c2);
          break;
        } else if (1 === b2.tag) {
          var d2 = b2.stateNode;
          if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
            a2 = Ki(c2, a2);
            a2 = Ri(b2, a2, 1);
            b2 = dh(b2, a2, 1);
            a2 = L2();
            null !== b2 && (Ac(b2, 1, a2), Ek(b2, a2));
            break;
          }
        }
        b2 = b2.return;
      }
  }
  function Ui(a2, b2, c2) {
    var d2 = a2.pingCache;
    null !== d2 && d2.delete(b2);
    b2 = L2();
    a2.pingedLanes |= a2.suspendedLanes & c2;
    R2 === a2 && (Z2 & c2) === c2 && (4 === T2 || 3 === T2 && (Z2 & 130023424) === Z2 && 500 > B2() - gk ? Lk(a2, 0) : sk |= c2);
    Ek(a2, b2);
  }
  function Zk(a2, b2) {
    0 === b2 && (0 === (a2.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
    var c2 = L2();
    a2 = Zg(a2, b2);
    null !== a2 && (Ac(a2, b2, c2), Ek(a2, c2));
  }
  function vj(a2) {
    var b2 = a2.memoizedState, c2 = 0;
    null !== b2 && (c2 = b2.retryLane);
    Zk(a2, c2);
  }
  function ck(a2, b2) {
    var c2 = 0;
    switch (a2.tag) {
      case 13:
        var d2 = a2.stateNode;
        var e = a2.memoizedState;
        null !== e && (c2 = e.retryLane);
        break;
      case 19:
        d2 = a2.stateNode;
        break;
      default:
        throw Error(p2(314));
    }
    null !== d2 && d2.delete(b2);
    Zk(a2, c2);
  }
  var Wk;
  Wk = function(a2, b2, c2) {
    if (null !== a2)
      if (a2.memoizedProps !== b2.pendingProps || Wf.current)
        Ug = true;
      else {
        if (0 === (a2.lanes & c2) && 0 === (b2.flags & 128))
          return Ug = false, zj(a2, b2, c2);
        Ug = 0 !== (a2.flags & 131072) ? true : false;
      }
    else
      Ug = false, I2 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
    b2.lanes = 0;
    switch (b2.tag) {
      case 2:
        var d2 = b2.type;
        jj(a2, b2);
        a2 = b2.pendingProps;
        var e = Yf(b2, H2.current);
        Tg(b2, c2);
        e = Xh(null, b2, d2, a2, e, c2);
        var f2 = bi();
        b2.flags |= 1;
        "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b2), e.updater = nh, b2.stateNode = e, e._reactInternals = b2, rh(b2, d2, a2, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I2 && f2 && vg(b2), Yi(null, b2, e, c2), b2 = b2.child);
        return b2;
      case 16:
        d2 = b2.elementType;
        a: {
          jj(a2, b2);
          a2 = b2.pendingProps;
          e = d2._init;
          d2 = e(d2._payload);
          b2.type = d2;
          e = b2.tag = $k(d2);
          a2 = Lg(d2, a2);
          switch (e) {
            case 0:
              b2 = dj(null, b2, d2, a2, c2);
              break a;
            case 1:
              b2 = ij(null, b2, d2, a2, c2);
              break a;
            case 11:
              b2 = Zi(null, b2, d2, a2, c2);
              break a;
            case 14:
              b2 = aj(null, b2, d2, Lg(d2.type, a2), c2);
              break a;
          }
          throw Error(p2(
            306,
            d2,
            ""
          ));
        }
        return b2;
      case 0:
        return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), dj(a2, b2, d2, e, c2);
      case 1:
        return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), ij(a2, b2, d2, e, c2);
      case 3:
        a: {
          lj(b2);
          if (null === a2)
            throw Error(p2(387));
          d2 = b2.pendingProps;
          f2 = b2.memoizedState;
          e = f2.element;
          bh(a2, b2);
          gh(b2, d2, null, c2);
          var g2 = b2.memoizedState;
          d2 = g2.element;
          if (f2.isDehydrated)
            if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
              e = Ki(Error(p2(423)), b2);
              b2 = mj(a2, b2, d2, c2, e);
              break a;
            } else if (d2 !== e) {
              e = Ki(Error(p2(424)), b2);
              b2 = mj(a2, b2, d2, c2, e);
              break a;
            } else
              for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I2 = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
                c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
          else {
            Ig();
            if (d2 === e) {
              b2 = $i(a2, b2, c2);
              break a;
            }
            Yi(a2, b2, d2, c2);
          }
          b2 = b2.child;
        }
        return b2;
      case 5:
        return Kh(b2), null === a2 && Eg(b2), d2 = b2.type, e = b2.pendingProps, f2 = null !== a2 ? a2.memoizedProps : null, g2 = e.children, Ef(d2, e) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a2, b2), Yi(a2, b2, g2, c2), b2.child;
      case 6:
        return null === a2 && Eg(b2), null;
      case 13:
        return pj(a2, b2, c2);
      case 4:
        return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a2 ? b2.child = Bh(b2, null, d2, c2) : Yi(a2, b2, d2, c2), b2.child;
      case 11:
        return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), Zi(a2, b2, d2, e, c2);
      case 7:
        return Yi(a2, b2, b2.pendingProps, c2), b2.child;
      case 8:
        return Yi(a2, b2, b2.pendingProps.children, c2), b2.child;
      case 12:
        return Yi(a2, b2, b2.pendingProps.children, c2), b2.child;
      case 10:
        a: {
          d2 = b2.type._context;
          e = b2.pendingProps;
          f2 = b2.memoizedProps;
          g2 = e.value;
          G2(Mg, d2._currentValue);
          d2._currentValue = g2;
          if (null !== f2)
            if (He(f2.value, g2)) {
              if (f2.children === e.children && !Wf.current) {
                b2 = $i(a2, b2, c2);
                break a;
              }
            } else
              for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
                var h2 = f2.dependencies;
                if (null !== h2) {
                  g2 = f2.child;
                  for (var k2 = h2.firstContext; null !== k2; ) {
                    if (k2.context === d2) {
                      if (1 === f2.tag) {
                        k2 = ch(-1, c2 & -c2);
                        k2.tag = 2;
                        var l2 = f2.updateQueue;
                        if (null !== l2) {
                          l2 = l2.shared;
                          var m2 = l2.pending;
                          null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                          l2.pending = k2;
                        }
                      }
                      f2.lanes |= c2;
                      k2 = f2.alternate;
                      null !== k2 && (k2.lanes |= c2);
                      Sg(
                        f2.return,
                        c2,
                        b2
                      );
                      h2.lanes |= c2;
                      break;
                    }
                    k2 = k2.next;
                  }
                } else if (10 === f2.tag)
                  g2 = f2.type === b2.type ? null : f2.child;
                else if (18 === f2.tag) {
                  g2 = f2.return;
                  if (null === g2)
                    throw Error(p2(341));
                  g2.lanes |= c2;
                  h2 = g2.alternate;
                  null !== h2 && (h2.lanes |= c2);
                  Sg(g2, c2, b2);
                  g2 = f2.sibling;
                } else
                  g2 = f2.child;
                if (null !== g2)
                  g2.return = f2;
                else
                  for (g2 = f2; null !== g2; ) {
                    if (g2 === b2) {
                      g2 = null;
                      break;
                    }
                    f2 = g2.sibling;
                    if (null !== f2) {
                      f2.return = g2.return;
                      g2 = f2;
                      break;
                    }
                    g2 = g2.return;
                  }
                f2 = g2;
              }
          Yi(a2, b2, e.children, c2);
          b2 = b2.child;
        }
        return b2;
      case 9:
        return e = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e = Vg(e), d2 = d2(e), b2.flags |= 1, Yi(a2, b2, d2, c2), b2.child;
      case 14:
        return d2 = b2.type, e = Lg(d2, b2.pendingProps), e = Lg(d2.type, e), aj(a2, b2, d2, e, c2);
      case 15:
        return cj(a2, b2, b2.type, b2.pendingProps, c2);
      case 17:
        return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), jj(a2, b2), b2.tag = 1, Zf(d2) ? (a2 = true, cg(b2)) : a2 = false, Tg(b2, c2), ph(b2, d2, e), rh(b2, d2, e, c2), kj(null, b2, d2, true, a2, c2);
      case 19:
        return yj(a2, b2, c2);
      case 22:
        return ej(a2, b2, c2);
    }
    throw Error(p2(156, b2.tag));
  };
  function Gk(a2, b2) {
    return ac(a2, b2);
  }
  function al(a2, b2, c2, d2) {
    this.tag = a2;
    this.key = c2;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b2;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d2;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function Bg(a2, b2, c2, d2) {
    return new al(a2, b2, c2, d2);
  }
  function bj(a2) {
    a2 = a2.prototype;
    return !(!a2 || !a2.isReactComponent);
  }
  function $k(a2) {
    if ("function" === typeof a2)
      return bj(a2) ? 1 : 0;
    if (void 0 !== a2 && null !== a2) {
      a2 = a2.$$typeof;
      if (a2 === Da)
        return 11;
      if (a2 === Ga)
        return 14;
    }
    return 2;
  }
  function wh(a2, b2) {
    var c2 = a2.alternate;
    null === c2 ? (c2 = Bg(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.type = a2.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
    c2.flags = a2.flags & 14680064;
    c2.childLanes = a2.childLanes;
    c2.lanes = a2.lanes;
    c2.child = a2.child;
    c2.memoizedProps = a2.memoizedProps;
    c2.memoizedState = a2.memoizedState;
    c2.updateQueue = a2.updateQueue;
    b2 = a2.dependencies;
    c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
    c2.sibling = a2.sibling;
    c2.index = a2.index;
    c2.ref = a2.ref;
    return c2;
  }
  function yh(a2, b2, c2, d2, e, f2) {
    var g2 = 2;
    d2 = a2;
    if ("function" === typeof a2)
      bj(a2) && (g2 = 1);
    else if ("string" === typeof a2)
      g2 = 5;
    else
      a:
        switch (a2) {
          case ya:
            return Ah(c2.children, e, f2, b2);
          case za:
            g2 = 8;
            e |= 8;
            break;
          case Aa:
            return a2 = Bg(12, c2, b2, e | 2), a2.elementType = Aa, a2.lanes = f2, a2;
          case Ea:
            return a2 = Bg(13, c2, b2, e), a2.elementType = Ea, a2.lanes = f2, a2;
          case Fa:
            return a2 = Bg(19, c2, b2, e), a2.elementType = Fa, a2.lanes = f2, a2;
          case Ia:
            return qj(c2, e, f2, b2);
          default:
            if ("object" === typeof a2 && null !== a2)
              switch (a2.$$typeof) {
                case Ba:
                  g2 = 10;
                  break a;
                case Ca:
                  g2 = 9;
                  break a;
                case Da:
                  g2 = 11;
                  break a;
                case Ga:
                  g2 = 14;
                  break a;
                case Ha:
                  g2 = 16;
                  d2 = null;
                  break a;
              }
            throw Error(p2(130, null == a2 ? a2 : typeof a2, ""));
        }
    b2 = Bg(g2, c2, b2, e);
    b2.elementType = a2;
    b2.type = d2;
    b2.lanes = f2;
    return b2;
  }
  function Ah(a2, b2, c2, d2) {
    a2 = Bg(7, a2, d2, b2);
    a2.lanes = c2;
    return a2;
  }
  function qj(a2, b2, c2, d2) {
    a2 = Bg(22, a2, d2, b2);
    a2.elementType = Ia;
    a2.lanes = c2;
    a2.stateNode = { isHidden: false };
    return a2;
  }
  function xh(a2, b2, c2) {
    a2 = Bg(6, a2, null, b2);
    a2.lanes = c2;
    return a2;
  }
  function zh(a2, b2, c2) {
    b2 = Bg(4, null !== a2.children ? a2.children : [], a2.key, b2);
    b2.lanes = c2;
    b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
    return b2;
  }
  function bl(a2, b2, c2, d2, e) {
    this.tag = b2;
    this.containerInfo = a2;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = zc(0);
    this.expirationTimes = zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = zc(0);
    this.identifierPrefix = d2;
    this.onRecoverableError = e;
    this.mutableSourceEagerHydrationData = null;
  }
  function cl(a2, b2, c2, d2, e, f2, g2, h2, k2) {
    a2 = new bl(a2, b2, c2, h2, k2);
    1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
    f2 = Bg(3, null, null, b2);
    a2.current = f2;
    f2.stateNode = a2;
    f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
    ah(f2);
    return a2;
  }
  function dl(a2, b2, c2) {
    var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a2, containerInfo: b2, implementation: c2 };
  }
  function el(a2) {
    if (!a2)
      return Vf;
    a2 = a2._reactInternals;
    a: {
      if (Vb(a2) !== a2 || 1 !== a2.tag)
        throw Error(p2(170));
      var b2 = a2;
      do {
        switch (b2.tag) {
          case 3:
            b2 = b2.stateNode.context;
            break a;
          case 1:
            if (Zf(b2.type)) {
              b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }
        }
        b2 = b2.return;
      } while (null !== b2);
      throw Error(p2(171));
    }
    if (1 === a2.tag) {
      var c2 = a2.type;
      if (Zf(c2))
        return bg(a2, c2, b2);
    }
    return b2;
  }
  function fl(a2, b2, c2, d2, e, f2, g2, h2, k2) {
    a2 = cl(c2, d2, true, a2, e, f2, g2, h2, k2);
    a2.context = el(null);
    c2 = a2.current;
    d2 = L2();
    e = lh(c2);
    f2 = ch(d2, e);
    f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
    dh(c2, f2, e);
    a2.current.lanes = e;
    Ac(a2, e, d2);
    Ek(a2, d2);
    return a2;
  }
  function gl(a2, b2, c2, d2) {
    var e = b2.current, f2 = L2(), g2 = lh(e);
    c2 = el(c2);
    null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
    b2 = ch(f2, g2);
    b2.payload = { element: a2 };
    d2 = void 0 === d2 ? null : d2;
    null !== d2 && (b2.callback = d2);
    a2 = dh(e, b2, g2);
    null !== a2 && (mh(a2, e, g2, f2), eh(a2, e, g2));
    return g2;
  }
  function hl(a2) {
    a2 = a2.current;
    if (!a2.child)
      return null;
    switch (a2.child.tag) {
      case 5:
        return a2.child.stateNode;
      default:
        return a2.child.stateNode;
    }
  }
  function il(a2, b2) {
    a2 = a2.memoizedState;
    if (null !== a2 && null !== a2.dehydrated) {
      var c2 = a2.retryLane;
      a2.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
    }
  }
  function jl(a2, b2) {
    il(a2, b2);
    (a2 = a2.alternate) && il(a2, b2);
  }
  function kl() {
    return null;
  }
  var ll = "function" === typeof reportError ? reportError : function(a2) {
    console.error(a2);
  };
  function ml(a2) {
    this._internalRoot = a2;
  }
  nl.prototype.render = ml.prototype.render = function(a2) {
    var b2 = this._internalRoot;
    if (null === b2)
      throw Error(p2(409));
    gl(a2, b2, null, null);
  };
  nl.prototype.unmount = ml.prototype.unmount = function() {
    var a2 = this._internalRoot;
    if (null !== a2) {
      this._internalRoot = null;
      var b2 = a2.containerInfo;
      Sk(function() {
        gl(null, a2, null, null);
      });
      b2[uf] = null;
    }
  };
  function nl(a2) {
    this._internalRoot = a2;
  }
  nl.prototype.unstable_scheduleHydration = function(a2) {
    if (a2) {
      var b2 = Hc();
      a2 = { blockedOn: null, target: a2, priority: b2 };
      for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
        ;
      Qc.splice(c2, 0, a2);
      0 === c2 && Vc(a2);
    }
  };
  function ol(a2) {
    return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType);
  }
  function pl(a2) {
    return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType && (8 !== a2.nodeType || " react-mount-point-unstable " !== a2.nodeValue));
  }
  function ql() {
  }
  function rl(a2, b2, c2, d2, e) {
    if (e) {
      if ("function" === typeof d2) {
        var f2 = d2;
        d2 = function() {
          var a3 = hl(g2);
          f2.call(a3);
        };
      }
      var g2 = fl(b2, d2, a2, 0, null, false, false, "", ql);
      a2._reactRootContainer = g2;
      a2[uf] = g2.current;
      sf(8 === a2.nodeType ? a2.parentNode : a2);
      Sk();
      return g2;
    }
    for (; e = a2.lastChild; )
      a2.removeChild(e);
    if ("function" === typeof d2) {
      var h2 = d2;
      d2 = function() {
        var a3 = hl(k2);
        h2.call(a3);
      };
    }
    var k2 = cl(a2, 0, false, null, null, false, false, "", ql);
    a2._reactRootContainer = k2;
    a2[uf] = k2.current;
    sf(8 === a2.nodeType ? a2.parentNode : a2);
    Sk(function() {
      gl(b2, k2, c2, d2);
    });
    return k2;
  }
  function sl(a2, b2, c2, d2, e) {
    var f2 = c2._reactRootContainer;
    if (f2) {
      var g2 = f2;
      if ("function" === typeof e) {
        var h2 = e;
        e = function() {
          var a3 = hl(g2);
          h2.call(a3);
        };
      }
      gl(b2, g2, a2, e);
    } else
      g2 = rl(c2, b2, a2, e, d2);
    return hl(g2);
  }
  Ec = function(a2) {
    switch (a2.tag) {
      case 3:
        var b2 = a2.stateNode;
        if (b2.current.memoizedState.isDehydrated) {
          var c2 = tc(b2.pendingLanes);
          0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B2()), 0 === (K & 6) && (Hj = B2() + 500, jg()));
        }
        break;
      case 13:
        Sk(function() {
          var b3 = Zg(a2, 1);
          if (null !== b3) {
            var c3 = L2();
            mh(b3, a2, 1, c3);
          }
        }), jl(a2, 1);
    }
  };
  Fc = function(a2) {
    if (13 === a2.tag) {
      var b2 = Zg(a2, 134217728);
      if (null !== b2) {
        var c2 = L2();
        mh(b2, a2, 134217728, c2);
      }
      jl(a2, 134217728);
    }
  };
  Gc = function(a2) {
    if (13 === a2.tag) {
      var b2 = lh(a2), c2 = Zg(a2, b2);
      if (null !== c2) {
        var d2 = L2();
        mh(c2, a2, b2, d2);
      }
      jl(a2, b2);
    }
  };
  Hc = function() {
    return C2;
  };
  Ic = function(a2, b2) {
    var c2 = C2;
    try {
      return C2 = a2, b2();
    } finally {
      C2 = c2;
    }
  };
  yb = function(a2, b2, c2) {
    switch (b2) {
      case "input":
        bb(a2, c2);
        b2 = c2.name;
        if ("radio" === c2.type && null != b2) {
          for (c2 = a2; c2.parentNode; )
            c2 = c2.parentNode;
          c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
          for (b2 = 0; b2 < c2.length; b2++) {
            var d2 = c2[b2];
            if (d2 !== a2 && d2.form === a2.form) {
              var e = Db(d2);
              if (!e)
                throw Error(p2(90));
              Wa(d2);
              bb(d2, e);
            }
          }
        }
        break;
      case "textarea":
        ib(a2, c2);
        break;
      case "select":
        b2 = c2.value, null != b2 && fb(a2, !!c2.multiple, b2, false);
    }
  };
  Gb = Rk;
  Hb = Sk;
  var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
  var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
    a2 = Zb(a2);
    return null === a2 ? null : a2.stateNode;
  }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!wl.isDisabled && wl.supportsFiber)
      try {
        kc = wl.inject(vl), lc = wl;
      } catch (a2) {
      }
  }
  reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
  reactDom_production_min.createPortal = function(a2, b2) {
    var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!ol(b2))
      throw Error(p2(200));
    return dl(a2, b2, null, c2);
  };
  reactDom_production_min.createRoot = function(a2, b2) {
    if (!ol(a2))
      throw Error(p2(299));
    var c2 = false, d2 = "", e = ll;
    null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e = b2.onRecoverableError));
    b2 = cl(a2, 1, false, null, null, c2, false, d2, e);
    a2[uf] = b2.current;
    sf(8 === a2.nodeType ? a2.parentNode : a2);
    return new ml(b2);
  };
  reactDom_production_min.findDOMNode = function(a2) {
    if (null == a2)
      return null;
    if (1 === a2.nodeType)
      return a2;
    var b2 = a2._reactInternals;
    if (void 0 === b2) {
      if ("function" === typeof a2.render)
        throw Error(p2(188));
      a2 = Object.keys(a2).join(",");
      throw Error(p2(268, a2));
    }
    a2 = Zb(b2);
    a2 = null === a2 ? null : a2.stateNode;
    return a2;
  };
  reactDom_production_min.flushSync = function(a2) {
    return Sk(a2);
  };
  reactDom_production_min.hydrate = function(a2, b2, c2) {
    if (!pl(b2))
      throw Error(p2(200));
    return sl(null, a2, b2, true, c2);
  };
  reactDom_production_min.hydrateRoot = function(a2, b2, c2) {
    if (!ol(a2))
      throw Error(p2(405));
    var d2 = null != c2 && c2.hydratedSources || null, e = false, f2 = "", g2 = ll;
    null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
    b2 = fl(b2, null, a2, 1, null != c2 ? c2 : null, e, false, f2, g2);
    a2[uf] = b2.current;
    sf(a2);
    if (d2)
      for (a2 = 0; a2 < d2.length; a2++)
        c2 = d2[a2], e = c2._getVersion, e = e(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e] : b2.mutableSourceEagerHydrationData.push(
          c2,
          e
        );
    return new nl(b2);
  };
  reactDom_production_min.render = function(a2, b2, c2) {
    if (!pl(b2))
      throw Error(p2(200));
    return sl(null, a2, b2, false, c2);
  };
  reactDom_production_min.unmountComponentAtNode = function(a2) {
    if (!pl(a2))
      throw Error(p2(40));
    return a2._reactRootContainer ? (Sk(function() {
      sl(null, null, a2, false, function() {
        a2._reactRootContainer = null;
        a2[uf] = null;
      });
    }), true) : false;
  };
  reactDom_production_min.unstable_batchedUpdates = Rk;
  reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a2, b2, c2, d2) {
    if (!pl(c2))
      throw Error(p2(200));
    if (null == a2 || void 0 === a2._reactInternals)
      throw Error(p2(38));
    return sl(a2, b2, c2, false, d2);
  };
  reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
  return reactDom_production_min;
}
var hasRequiredReactDom;
function requireReactDom() {
  if (hasRequiredReactDom)
    return reactDom.exports;
  hasRequiredReactDom = 1;
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
      return;
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  {
    checkDCE();
    reactDom.exports = requireReactDom_production_min();
  }
  return reactDom.exports;
}
var hasRequiredClient;
function requireClient() {
  if (hasRequiredClient)
    return client;
  hasRequiredClient = 1;
  var m2 = requireReactDom();
  {
    client.createRoot = m2.createRoot;
    client.hydrateRoot = m2.hydrateRoot;
  }
  return client;
}
var clientExports = requireClient();
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(clientExports);
var reactExports = requireReact();
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const App$1 = "";
var t$1 = "colors", n = "sizes", r$1 = "space", i$1 = { gap: r$1, gridGap: r$1, columnGap: r$1, gridColumnGap: r$1, rowGap: r$1, gridRowGap: r$1, inset: r$1, insetBlock: r$1, insetBlockEnd: r$1, insetBlockStart: r$1, insetInline: r$1, insetInlineEnd: r$1, insetInlineStart: r$1, margin: r$1, marginTop: r$1, marginRight: r$1, marginBottom: r$1, marginLeft: r$1, marginBlock: r$1, marginBlockEnd: r$1, marginBlockStart: r$1, marginInline: r$1, marginInlineEnd: r$1, marginInlineStart: r$1, padding: r$1, paddingTop: r$1, paddingRight: r$1, paddingBottom: r$1, paddingLeft: r$1, paddingBlock: r$1, paddingBlockEnd: r$1, paddingBlockStart: r$1, paddingInline: r$1, paddingInlineEnd: r$1, paddingInlineStart: r$1, top: r$1, right: r$1, bottom: r$1, left: r$1, scrollMargin: r$1, scrollMarginTop: r$1, scrollMarginRight: r$1, scrollMarginBottom: r$1, scrollMarginLeft: r$1, scrollMarginX: r$1, scrollMarginY: r$1, scrollMarginBlock: r$1, scrollMarginBlockEnd: r$1, scrollMarginBlockStart: r$1, scrollMarginInline: r$1, scrollMarginInlineEnd: r$1, scrollMarginInlineStart: r$1, scrollPadding: r$1, scrollPaddingTop: r$1, scrollPaddingRight: r$1, scrollPaddingBottom: r$1, scrollPaddingLeft: r$1, scrollPaddingX: r$1, scrollPaddingY: r$1, scrollPaddingBlock: r$1, scrollPaddingBlockEnd: r$1, scrollPaddingBlockStart: r$1, scrollPaddingInline: r$1, scrollPaddingInlineEnd: r$1, scrollPaddingInlineStart: r$1, fontSize: "fontSizes", background: t$1, backgroundColor: t$1, backgroundImage: t$1, borderImage: t$1, border: t$1, borderBlock: t$1, borderBlockEnd: t$1, borderBlockStart: t$1, borderBottom: t$1, borderBottomColor: t$1, borderColor: t$1, borderInline: t$1, borderInlineEnd: t$1, borderInlineStart: t$1, borderLeft: t$1, borderLeftColor: t$1, borderRight: t$1, borderRightColor: t$1, borderTop: t$1, borderTopColor: t$1, caretColor: t$1, color: t$1, columnRuleColor: t$1, fill: t$1, outline: t$1, outlineColor: t$1, stroke: t$1, textDecorationColor: t$1, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: n, minBlockSize: n, maxBlockSize: n, inlineSize: n, minInlineSize: n, maxInlineSize: n, width: n, minWidth: n, maxWidth: n, height: n, minHeight: n, maxHeight: n, flexBasis: n, gridTemplateColumns: n, gridTemplateRows: n, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" }, o = (e, t2) => "function" == typeof t2 ? { "()": Function.prototype.toString.call(t2) } : t2, l = () => {
  const e = /* @__PURE__ */ Object.create(null);
  return (t2, n2, ...r2) => {
    const i = ((e2) => JSON.stringify(e2, o))(t2);
    return i in e ? e[i] : e[i] = n2(t2, ...r2);
  };
}, s = Symbol.for("sxs.internal"), a = (e, t2) => Object.defineProperties(e, Object.getOwnPropertyDescriptors(t2)), c = (e) => {
  for (const t2 in e)
    return true;
  return false;
}, { hasOwnProperty: d } = Object.prototype, g = (e) => e.includes("-") ? e : e.replace(/[A-Z]/g, (e2) => "-" + e2.toLowerCase()), p = /\s+(?![^()]*\))/, u = (e) => (t2) => e(..."string" == typeof t2 ? String(t2).split(p) : [t2]), h = { appearance: (e) => ({ WebkitAppearance: e, appearance: e }), backfaceVisibility: (e) => ({ WebkitBackfaceVisibility: e, backfaceVisibility: e }), backdropFilter: (e) => ({ WebkitBackdropFilter: e, backdropFilter: e }), backgroundClip: (e) => ({ WebkitBackgroundClip: e, backgroundClip: e }), boxDecorationBreak: (e) => ({ WebkitBoxDecorationBreak: e, boxDecorationBreak: e }), clipPath: (e) => ({ WebkitClipPath: e, clipPath: e }), content: (e) => ({ content: e.includes('"') || e.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e) ? e : `"${e}"` }), hyphens: (e) => ({ WebkitHyphens: e, hyphens: e }), maskImage: (e) => ({ WebkitMaskImage: e, maskImage: e }), maskSize: (e) => ({ WebkitMaskSize: e, maskSize: e }), tabSize: (e) => ({ MozTabSize: e, tabSize: e }), textSizeAdjust: (e) => ({ WebkitTextSizeAdjust: e, textSizeAdjust: e }), userSelect: (e) => ({ WebkitUserSelect: e, userSelect: e }), marginBlock: u((e, t2) => ({ marginBlockStart: e, marginBlockEnd: t2 || e })), marginInline: u((e, t2) => ({ marginInlineStart: e, marginInlineEnd: t2 || e })), maxSize: u((e, t2) => ({ maxBlockSize: e, maxInlineSize: t2 || e })), minSize: u((e, t2) => ({ minBlockSize: e, minInlineSize: t2 || e })), paddingBlock: u((e, t2) => ({ paddingBlockStart: e, paddingBlockEnd: t2 || e })), paddingInline: u((e, t2) => ({ paddingInlineStart: e, paddingInlineEnd: t2 || e })) }, f = /([\d.]+)([^]*)/, m = (e, t2) => e.length ? e.reduce((e2, n2) => (e2.push(...t2.map((e3) => e3.includes("&") ? e3.replace(/&/g, /[ +>|~]/.test(n2) && /&.*&/.test(e3) ? `:is(${n2})` : n2) : n2 + " " + e3)), e2), []) : t2, b = (e, t2) => e in S$1 && "string" == typeof t2 ? t2.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t3, n2, r2, i) => n2 + ("stretch" === r2 ? `-moz-available${i};${g(e)}:${n2}-webkit-fill-available` : `-moz-fit-content${i};${g(e)}:${n2}fit-content`) + i) : String(t2), S$1 = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 }, k = (e) => e ? e + "-" : "", y = (e, t2, n2) => e.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e2, r2, i, o2, l2) => "$" == o2 == !!i ? e2 : (r2 || "--" == o2 ? "calc(" : "") + "var(--" + ("$" === o2 ? k(t2) + (l2.includes("$") ? "" : k(n2)) + l2.replace(/\$/g, "-") : l2) + ")" + (r2 || "--" == o2 ? "*" + (r2 || "") + (i || "1") + ")" : "")), B = /\s*,\s*(?![^()]*\))/, $ = Object.prototype.toString, x = (e, t2, n2, r2, i) => {
  let o2, l2, s2;
  const a2 = (e2, t3, n3) => {
    let c2, d2;
    const p2 = (e3) => {
      for (c2 in e3) {
        const x2 = 64 === c2.charCodeAt(0), z2 = x2 && Array.isArray(e3[c2]) ? e3[c2] : [e3[c2]];
        for (d2 of z2) {
          const e4 = /[A-Z]/.test(S2 = c2) ? S2 : S2.replace(/-[^]/g, (e5) => e5[1].toUpperCase()), z3 = "object" == typeof d2 && d2 && d2.toString === $ && (!r2.utils[e4] || !t3.length);
          if (e4 in r2.utils && !z3) {
            const t4 = r2.utils[e4];
            if (t4 !== l2) {
              l2 = t4, p2(t4(d2)), l2 = null;
              continue;
            }
          } else if (e4 in h) {
            const t4 = h[e4];
            if (t4 !== s2) {
              s2 = t4, p2(t4(d2)), s2 = null;
              continue;
            }
          }
          if (x2 && (u2 = c2.slice(1) in r2.media ? "@media " + r2.media[c2.slice(1)] : c2, c2 = u2.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e5, t4, n4, r3, i2, o3) => {
            const l3 = f.test(t4), s3 = 0.0625 * (l3 ? -1 : 1), [a3, c3] = l3 ? [r3, t4] : [t4, r3];
            return "(" + ("=" === n4[0] ? "" : ">" === n4[0] === l3 ? "max-" : "min-") + a3 + ":" + ("=" !== n4[0] && 1 === n4.length ? c3.replace(f, (e6, t5, r4) => Number(t5) + s3 * (">" === n4 ? 1 : -1) + r4) : c3) + (i2 ? ") and (" + (">" === i2[0] ? "min-" : "max-") + a3 + ":" + (1 === i2.length ? o3.replace(f, (e6, t5, n5) => Number(t5) + s3 * (">" === i2 ? -1 : 1) + n5) : o3) : "") + ")";
          })), z3) {
            const e5 = x2 ? n3.concat(c2) : [...n3], r3 = x2 ? [...t3] : m(t3, c2.split(B));
            void 0 !== o2 && i(I(...o2)), o2 = void 0, a2(d2, r3, e5);
          } else
            void 0 === o2 && (o2 = [[], t3, n3]), c2 = x2 || 36 !== c2.charCodeAt(0) ? c2 : `--${k(r2.prefix)}${c2.slice(1).replace(/\$/g, "-")}`, d2 = z3 ? d2 : "number" == typeof d2 ? d2 && e4 in R ? String(d2) + "px" : String(d2) : y(b(e4, null == d2 ? "" : d2), r2.prefix, r2.themeMap[e4]), o2[0].push(`${x2 ? `${c2} ` : `${g(c2)}:`}${d2}`);
        }
      }
      var u2, S2;
    };
    p2(e2), void 0 !== o2 && i(I(...o2)), o2 = void 0;
  };
  a2(e, t2, n2);
}, I = (e, t2, n2) => `${n2.map((e2) => `${e2}{`).join("")}${t2.length ? `${t2.join(",")}{` : ""}${e.join(";")}${t2.length ? "}" : ""}${Array(n2.length ? n2.length + 1 : 0).join("}")}`, R = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 }, z = (e) => String.fromCharCode(e + (e > 25 ? 39 : 97)), W = (e) => ((e2) => {
  let t2, n2 = "";
  for (t2 = Math.abs(e2); t2 > 52; t2 = t2 / 52 | 0)
    n2 = z(t2 % 52) + n2;
  return z(t2 % 52) + n2;
})(((e2, t2) => {
  let n2 = t2.length;
  for (; n2; )
    e2 = 33 * e2 ^ t2.charCodeAt(--n2);
  return e2;
})(5381, JSON.stringify(e)) >>> 0), j = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"], E = (e) => {
  if (e.href && !e.href.startsWith(location.origin))
    return false;
  try {
    return !!e.cssRules;
  } catch (e2) {
    return false;
  }
}, T = (e) => {
  let t2;
  const n2 = () => {
    const { cssRules: e2 } = t2.sheet;
    return [].map.call(e2, (n3, r3) => {
      const { cssText: i } = n3;
      let o2 = "";
      if (i.startsWith("--sxs"))
        return "";
      if (e2[r3 - 1] && (o2 = e2[r3 - 1].cssText).startsWith("--sxs")) {
        if (!n3.cssRules.length)
          return "";
        for (const e3 in t2.rules)
          if (t2.rules[e3].group === n3)
            return `--sxs{--sxs:${[...t2.rules[e3].cache].join(" ")}}${i}`;
        return n3.cssRules.length ? `${o2}${i}` : "";
      }
      return i;
    }).join("");
  }, r2 = () => {
    if (t2) {
      const { rules: e2, sheet: n3 } = t2;
      if (!n3.deleteRule) {
        for (; 3 === Object(Object(n3.cssRules)[0]).type; )
          n3.cssRules.splice(0, 1);
        n3.cssRules = [];
      }
      for (const t3 in e2)
        delete e2[t3];
    }
    const i = Object(e).styleSheets || [];
    for (const e2 of i)
      if (E(e2)) {
        for (let i2 = 0, o3 = e2.cssRules; o3[i2]; ++i2) {
          const l3 = Object(o3[i2]);
          if (1 !== l3.type)
            continue;
          const s2 = Object(o3[i2 + 1]);
          if (4 !== s2.type)
            continue;
          ++i2;
          const { cssText: a2 } = l3;
          if (!a2.startsWith("--sxs"))
            continue;
          const c2 = a2.slice(14, -3).trim().split(/\s+/), d2 = j[c2[0]];
          d2 && (t2 || (t2 = { sheet: e2, reset: r2, rules: {}, toString: n2 }), t2.rules[d2] = { group: s2, index: i2, cache: new Set(c2) });
        }
        if (t2)
          break;
      }
    if (!t2) {
      const i2 = (e2, t3) => ({ type: t3, cssRules: [], insertRule(e3, t4) {
        this.cssRules.splice(t4, 0, i2(e3, { import: 3, undefined: 1 }[(e3.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
      }, get cssText() {
        return "@media{}" === e2 ? `@media{${[].map.call(this.cssRules, (e3) => e3.cssText).join("")}}` : e2;
      } });
      t2 = { sheet: e ? (e.head || e).appendChild(document.createElement("style")).sheet : i2("", "text/css"), rules: {}, reset: r2, toString: n2 };
    }
    const { sheet: o2, rules: l2 } = t2;
    for (let e2 = j.length - 1; e2 >= 0; --e2) {
      const t3 = j[e2];
      if (!l2[t3]) {
        const n3 = j[e2 + 1], r3 = l2[n3] ? l2[n3].index : o2.cssRules.length;
        o2.insertRule("@media{}", r3), o2.insertRule(`--sxs{--sxs:${e2}}`, r3), l2[t3] = { group: o2.cssRules[r3 + 1], index: r3, cache: /* @__PURE__ */ new Set([e2]) };
      }
      v(l2[t3]);
    }
  };
  return r2(), t2;
}, v = (e) => {
  const t2 = e.group;
  let n2 = t2.cssRules.length;
  e.apply = (e2) => {
    try {
      t2.insertRule(e2, n2), ++n2;
    } catch (e3) {
    }
  };
}, M = Symbol(), w = l(), C$1 = (e, t2) => w(e, () => (...n2) => {
  let r2 = { type: null, composers: /* @__PURE__ */ new Set() };
  for (const t3 of n2)
    if (null != t3)
      if (t3[s]) {
        null == r2.type && (r2.type = t3[s].type);
        for (const e2 of t3[s].composers)
          r2.composers.add(e2);
      } else
        t3.constructor !== Object || t3.$$typeof ? null == r2.type && (r2.type = t3) : r2.composers.add(P(t3, e));
  return null == r2.type && (r2.type = "span"), r2.composers.size || r2.composers.add(["PJLV", {}, [], [], {}, []]), L(e, r2, t2);
}), P = ({ variants: e, compoundVariants: t2, defaultVariants: n2, ...r2 }, i) => {
  const o2 = `${k(i.prefix)}c-${W(r2)}`, l2 = [], s2 = [], a2 = /* @__PURE__ */ Object.create(null), g2 = [];
  for (const e2 in n2)
    a2[e2] = String(n2[e2]);
  if ("object" == typeof e && e)
    for (const t3 in e) {
      p2 = a2, u2 = t3, d.call(p2, u2) || (a2[t3] = "undefined");
      const n3 = e[t3];
      for (const e2 in n3) {
        const r3 = { [t3]: String(e2) };
        "undefined" === String(e2) && g2.push(t3);
        const i2 = n3[e2], o3 = [r3, i2, !c(i2)];
        l2.push(o3);
      }
    }
  var p2, u2;
  if ("object" == typeof t2 && t2)
    for (const e2 of t2) {
      let { css: t3, ...n3 } = e2;
      t3 = "object" == typeof t3 && t3 || {};
      for (const e3 in n3)
        n3[e3] = String(n3[e3]);
      const r3 = [n3, t3, !c(t3)];
      s2.push(r3);
    }
  return [o2, r2, l2, s2, a2, g2];
}, L = (e, t2, n2) => {
  const [r2, i, o2, l2] = O(t2.composers), c2 = "function" == typeof t2.type || t2.type.$$typeof ? ((e2) => {
    function t3() {
      for (let n3 = 0; n3 < t3[M].length; n3++) {
        const [r3, i2] = t3[M][n3];
        e2.rules[r3].apply(i2);
      }
      return t3[M] = [], null;
    }
    return t3[M] = [], t3.rules = {}, j.forEach((e3) => t3.rules[e3] = { apply: (n3) => t3[M].push([e3, n3]) }), t3;
  })(n2) : null, d2 = (c2 || n2).rules, g2 = `.${r2}${i.length > 1 ? `:where(.${i.slice(1).join(".")})` : ""}`, p2 = (s2) => {
    s2 = "object" == typeof s2 && s2 || D;
    const { css: a2, ...p3 } = s2, u2 = {};
    for (const e2 in o2)
      if (delete p3[e2], e2 in s2) {
        let t3 = s2[e2];
        "object" == typeof t3 && t3 ? u2[e2] = { "@initial": o2[e2], ...t3 } : (t3 = String(t3), u2[e2] = "undefined" !== t3 || l2.has(e2) ? t3 : o2[e2]);
      } else
        u2[e2] = o2[e2];
    const h2 = /* @__PURE__ */ new Set([...i]);
    for (const [r3, i2, o3, l3] of t2.composers) {
      n2.rules.styled.cache.has(r3) || (n2.rules.styled.cache.add(r3), x(i2, [`.${r3}`], [], e, (e2) => {
        d2.styled.apply(e2);
      }));
      const t3 = A(o3, u2, e.media), s3 = A(l3, u2, e.media, true);
      for (const i3 of t3)
        if (void 0 !== i3)
          for (const [t4, o4, l4] of i3) {
            const i4 = `${r3}-${W(o4)}-${t4}`;
            h2.add(i4);
            const s4 = (l4 ? n2.rules.resonevar : n2.rules.onevar).cache, a3 = l4 ? d2.resonevar : d2.onevar;
            s4.has(i4) || (s4.add(i4), x(o4, [`.${i4}`], [], e, (e2) => {
              a3.apply(e2);
            }));
          }
      for (const t4 of s3)
        if (void 0 !== t4)
          for (const [i3, o4] of t4) {
            const t5 = `${r3}-${W(o4)}-${i3}`;
            h2.add(t5), n2.rules.allvar.cache.has(t5) || (n2.rules.allvar.cache.add(t5), x(o4, [`.${t5}`], [], e, (e2) => {
              d2.allvar.apply(e2);
            }));
          }
    }
    if ("object" == typeof a2 && a2) {
      const t3 = `${r2}-i${W(a2)}-css`;
      h2.add(t3), n2.rules.inline.cache.has(t3) || (n2.rules.inline.cache.add(t3), x(a2, [`.${t3}`], [], e, (e2) => {
        d2.inline.apply(e2);
      }));
    }
    for (const e2 of String(s2.className || "").trim().split(/\s+/))
      e2 && h2.add(e2);
    const f2 = p3.className = [...h2].join(" ");
    return { type: t2.type, className: f2, selector: g2, props: p3, toString: () => f2, deferredInjector: c2 };
  };
  return a(p2, { className: r2, selector: g2, [s]: t2, toString: () => (n2.rules.styled.cache.has(r2) || p2(), r2) });
}, O = (e) => {
  let t2 = "";
  const n2 = [], r2 = {}, i = [];
  for (const [o2, , , , l2, s2] of e) {
    "" === t2 && (t2 = o2), n2.push(o2), i.push(...s2);
    for (const e2 in l2) {
      const t3 = l2[e2];
      (void 0 === r2[e2] || "undefined" !== t3 || s2.includes(t3)) && (r2[e2] = t3);
    }
  }
  return [t2, n2, r2, new Set(i)];
}, A = (e, t2, n2, r2) => {
  const i = [];
  e:
    for (let [o2, l2, s2] of e) {
      if (s2)
        continue;
      let e2, a2 = 0, c2 = false;
      for (e2 in o2) {
        const r3 = o2[e2];
        let i2 = t2[e2];
        if (i2 !== r3) {
          if ("object" != typeof i2 || !i2)
            continue e;
          {
            let e3, t3, o3 = 0;
            for (const l3 in i2) {
              if (r3 === String(i2[l3])) {
                if ("@initial" !== l3) {
                  const e4 = l3.slice(1);
                  (t3 = t3 || []).push(e4 in n2 ? n2[e4] : l3.replace(/^@media ?/, "")), c2 = true;
                }
                a2 += o3, e3 = true;
              }
              ++o3;
            }
            if (t3 && t3.length && (l2 = { ["@media " + t3.join(", ")]: l2 }), !e3)
              continue e;
          }
        }
      }
      (i[a2] = i[a2] || []).push([r2 ? "cv" : `${e2}-${o2[e2]}`, l2, c2]);
    }
  return i;
}, D = {}, H = l(), N = (e, t2) => H(e, () => (...n2) => {
  const r2 = () => {
    for (let r3 of n2) {
      r3 = "object" == typeof r3 && r3 || {};
      let n3 = W(r3);
      if (!t2.rules.global.cache.has(n3)) {
        if (t2.rules.global.cache.add(n3), "@import" in r3) {
          let e2 = [].indexOf.call(t2.sheet.cssRules, t2.rules.themed.group) - 1;
          for (let n4 of [].concat(r3["@import"]))
            n4 = n4.includes('"') || n4.includes("'") ? n4 : `"${n4}"`, t2.sheet.insertRule(`@import ${n4};`, e2++);
          delete r3["@import"];
        }
        x(r3, [], [], e, (e2) => {
          t2.rules.global.apply(e2);
        });
      }
    }
    return "";
  };
  return a(r2, { toString: r2 });
}), V = l(), G = (e, t2) => V(e, () => (n2) => {
  const r2 = `${k(e.prefix)}k-${W(n2)}`, i = () => {
    if (!t2.rules.global.cache.has(r2)) {
      t2.rules.global.cache.add(r2);
      const i2 = [];
      x(n2, [], [], e, (e2) => i2.push(e2));
      const o2 = `@keyframes ${r2}{${i2.join("")}}`;
      t2.rules.global.apply(o2);
    }
    return r2;
  };
  return a(i, { get name() {
    return i();
  }, toString: i });
}), F = class {
  constructor(e, t2, n2, r2) {
    this.token = null == e ? "" : String(e), this.value = null == t2 ? "" : String(t2), this.scale = null == n2 ? "" : String(n2), this.prefix = null == r2 ? "" : String(r2);
  }
  get computedValue() {
    return "var(" + this.variable + ")";
  }
  get variable() {
    return "--" + k(this.prefix) + k(this.scale) + this.token;
  }
  toString() {
    return this.computedValue;
  }
}, J = l(), U = (e, t2) => J(e, () => (n2, r2) => {
  r2 = "object" == typeof n2 && n2 || Object(r2);
  const i = `.${n2 = (n2 = "string" == typeof n2 ? n2 : "") || `${k(e.prefix)}t-${W(r2)}`}`, o2 = {}, l2 = [];
  for (const t3 in r2) {
    o2[t3] = {};
    for (const n3 in r2[t3]) {
      const i2 = `--${k(e.prefix)}${t3}-${n3}`, s3 = y(String(r2[t3][n3]), e.prefix, t3);
      o2[t3][n3] = new F(n3, s3, t3, e.prefix), l2.push(`${i2}:${s3}`);
    }
  }
  const s2 = () => {
    if (l2.length && !t2.rules.themed.cache.has(n2)) {
      t2.rules.themed.cache.add(n2);
      const i2 = `${r2 === e.theme ? ":root," : ""}.${n2}{${l2.join(";")}}`;
      t2.rules.themed.apply(i2);
    }
    return n2;
  };
  return { ...o2, get className() {
    return s2();
  }, selector: i, toString: s2 };
}), Z = l(), X = (e) => {
  let t2 = false;
  const n2 = Z(e, (e2) => {
    t2 = true;
    const n3 = "prefix" in (e2 = "object" == typeof e2 && e2 || {}) ? String(e2.prefix) : "", r2 = "object" == typeof e2.media && e2.media || {}, o2 = "object" == typeof e2.root ? e2.root || null : globalThis.document || null, l2 = "object" == typeof e2.theme && e2.theme || {}, s2 = { prefix: n3, media: r2, theme: l2, themeMap: "object" == typeof e2.themeMap && e2.themeMap || { ...i$1 }, utils: "object" == typeof e2.utils && e2.utils || {} }, a2 = T(o2), c2 = { css: C$1(s2, a2), globalCss: N(s2, a2), keyframes: G(s2, a2), createTheme: U(s2, a2), reset() {
      a2.reset(), c2.theme.toString();
    }, theme: {}, sheet: a2, config: s2, prefix: n3, getCssText: a2.toString, toString: a2.toString };
    return String(c2.theme = c2.createTheme(l2)), c2;
  });
  return t2 || n2.reset(), n2;
};
var has = Object.prototype.hasOwnProperty;
function find$1(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar))
      return key;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find$1(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!bar.has(tmp))
          return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find$1(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len))
          ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len])
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/statetree-language/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  const links = document.getElementsByTagName("link");
  return Promise.all(deps.map((dep) => {
    dep = assetsURL(dep);
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    const isBaseRelative = !!importerUrl;
    if (isBaseRelative) {
      for (let i = links.length - 1; i >= 0; i--) {
        const link2 = links[i];
        if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
          return;
        }
      }
    } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link = document.createElement("link");
    link.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link.as = "script";
      link.crossOrigin = "";
    }
    link.href = dep;
    document.head.appendChild(link);
    if (isCss) {
      return new Promise((res, rej) => {
        link.addEventListener("load", res);
        link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule()).catch((err) => {
    const e = new Event("vite:preloadError", { cancelable: true });
    e.payload = err;
    window.dispatchEvent(e);
    if (!e.defaultPrevented) {
      throw err;
    }
  });
};
var POSITIONALS_EXP = /(%?)(%([sdjo]))/g;
function serializePositional(positional, flag) {
  switch (flag) {
    case "s":
      return positional;
    case "d":
    case "i":
      return Number(positional);
    case "j":
      return JSON.stringify(positional);
    case "o": {
      if (typeof positional === "string") {
        return positional;
      }
      const json = JSON.stringify(positional);
      if (json === "{}" || json === "[]" || /^\[object .+?\]$/.test(json)) {
        return positional;
      }
      return json;
    }
  }
}
function format(message, ...positionals) {
  if (positionals.length === 0) {
    return message;
  }
  let positionalIndex = 0;
  let formattedMessage = message.replace(
    POSITIONALS_EXP,
    (match, isEscaped, _, flag) => {
      const positional = positionals[positionalIndex];
      const value = serializePositional(positional, flag);
      if (!isEscaped) {
        positionalIndex++;
        return value;
      }
      return match;
    }
  );
  if (positionalIndex < positionals.length) {
    formattedMessage += ` ${positionals.slice(positionalIndex).join(" ")}`;
  }
  formattedMessage = formattedMessage.replace(/%{2,2}/g, "%");
  return formattedMessage;
}
var STACK_FRAMES_TO_IGNORE = 2;
function cleanErrorStack(error) {
  if (!error.stack) {
    return;
  }
  const nextStack = error.stack.split("\n");
  nextStack.splice(1, STACK_FRAMES_TO_IGNORE);
  error.stack = nextStack.join("\n");
}
var InvariantError = class extends Error {
  constructor(message, ...positionals) {
    super(message);
    this.message = message;
    this.name = "Invariant Violation";
    this.message = format(message, ...positionals);
    cleanErrorStack(this);
  }
};
var invariant = (predicate, message, ...positionals) => {
  if (!predicate) {
    throw new InvariantError(message, ...positionals);
  }
};
invariant.as = (ErrorConstructor, predicate, message, ...positionals) => {
  if (!predicate) {
    const isConstructor = ErrorConstructor.prototype.name != null;
    const error = isConstructor ? new ErrorConstructor(format(message, positionals)) : ErrorConstructor(format(message, positionals));
    throw error;
  }
};
var extendStatics = function(d2, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p2))
        d3[p2] = b3[p2];
  };
  return extendStatics(d2, b2);
};
function __extends(d2, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign$1 = function() {
  __assign$1 = Object.assign || function __assign2(t2) {
    for (var s2, i = 1, n2 = arguments.length; i < n2; i++) {
      s2 = arguments[i];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign$1.apply(this, arguments);
};
function __awaiter$1(thisArg, _arguments, P2, generator2) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator2.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator2["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
  });
}
function __generator$1(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray$2(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var createError = function(message) {
  return "[sandpack-client]: " + message;
};
function nullthrows(value, err) {
  if (err === void 0) {
    err = "Value is nullish";
  }
  invariant(value != null, createError(err));
  return value;
}
var DEPENDENCY_ERROR_MESSAGE = '"dependencies" was not specified - provide either a package.json or a "dependencies" value';
var ENTRY_ERROR_MESSAGE = '"entry" was not specified - provide either a package.json with the "main" field or an "entry" value';
function createPackageJSON(dependencies, devDependencies, entry) {
  if (dependencies === void 0) {
    dependencies = {};
  }
  if (devDependencies === void 0) {
    devDependencies = {};
  }
  if (entry === void 0) {
    entry = "/index.js";
  }
  return JSON.stringify({
    name: "sandpack-project",
    main: entry,
    dependencies,
    devDependencies
  }, null, 2);
}
function addPackageJSONIfNeeded(files, dependencies, devDependencies, entry) {
  var _a2, _b2;
  var normalizedFilesPath = normalizePath(files);
  var packageJsonFile = normalizedFilesPath["/package.json"];
  if (!packageJsonFile) {
    nullthrows(dependencies, DEPENDENCY_ERROR_MESSAGE);
    nullthrows(entry, ENTRY_ERROR_MESSAGE);
    normalizedFilesPath["/package.json"] = {
      code: createPackageJSON(dependencies, devDependencies, entry)
    };
    return normalizedFilesPath;
  }
  if (packageJsonFile) {
    var packageJsonContent = JSON.parse(packageJsonFile.code);
    nullthrows(!(!dependencies && !packageJsonContent.dependencies), ENTRY_ERROR_MESSAGE);
    if (dependencies) {
      packageJsonContent.dependencies = __assign$1(__assign$1({}, (_a2 = packageJsonContent.dependencies) !== null && _a2 !== void 0 ? _a2 : {}), dependencies !== null && dependencies !== void 0 ? dependencies : {});
    }
    if (devDependencies) {
      packageJsonContent.devDependencies = __assign$1(__assign$1({}, (_b2 = packageJsonContent.devDependencies) !== null && _b2 !== void 0 ? _b2 : {}), devDependencies !== null && devDependencies !== void 0 ? devDependencies : {});
    }
    if (entry) {
      packageJsonContent.main = entry;
    }
    normalizedFilesPath["/package.json"] = {
      code: JSON.stringify(packageJsonContent, null, 2)
    };
  }
  return normalizedFilesPath;
}
function extractErrorDetails(msg) {
  var _a2;
  if (msg.title === "SyntaxError") {
    var title = msg.title, path = msg.path, message = msg.message, line = msg.line, column = msg.column;
    return { title, path, message, line, column };
  }
  var relevantStackFrame = getRelevantStackFrame((_a2 = msg.payload) === null || _a2 === void 0 ? void 0 : _a2.frames);
  if (!relevantStackFrame) {
    return { message: msg.message };
  }
  var errorInCode = getErrorInOriginalCode(relevantStackFrame);
  var errorLocation = getErrorLocation(relevantStackFrame);
  var errorMessage = formatErrorMessage(relevantStackFrame._originalFileName, msg.message, errorLocation, errorInCode);
  return {
    message: errorMessage,
    title: msg.title,
    path: relevantStackFrame._originalFileName,
    line: relevantStackFrame._originalLineNumber,
    column: relevantStackFrame._originalColumnNumber
  };
}
function getRelevantStackFrame(frames) {
  if (!frames) {
    return;
  }
  return frames.find(function(frame) {
    return !!frame._originalFileName;
  });
}
function getErrorLocation(errorFrame) {
  return errorFrame ? " (" + errorFrame._originalLineNumber + ":" + errorFrame._originalColumnNumber + ")" : "";
}
function getErrorInOriginalCode(errorFrame) {
  var lastScriptLine = errorFrame._originalScriptCode[errorFrame._originalScriptCode.length - 1];
  var numberOfLineNumberCharacters = lastScriptLine.lineNumber.toString().length;
  var leadingCharacterOffset = 2;
  var barSeparatorCharacterOffset = 3;
  var extraLineLeadingSpaces = leadingCharacterOffset + numberOfLineNumberCharacters + barSeparatorCharacterOffset + errorFrame._originalColumnNumber;
  return errorFrame._originalScriptCode.reduce(function(result, scriptLine) {
    var leadingChar = scriptLine.highlight ? ">" : " ";
    var lineNumber = scriptLine.lineNumber.toString().length === numberOfLineNumberCharacters ? "" + scriptLine.lineNumber : " " + scriptLine.lineNumber;
    var extraLine = scriptLine.highlight ? "\n" + " ".repeat(extraLineLeadingSpaces) + "^" : "";
    return result + // accumulator
    "\n" + leadingChar + // > or " "
    " " + lineNumber + // line number on equal number of characters
    " | " + scriptLine.content + // code
    extraLine;
  }, "");
}
function formatErrorMessage(filePath, message, location2, errorInCode) {
  return filePath + ": " + message + location2 + "\n" + errorInCode;
}
var normalizePath = function(path) {
  if (typeof path === "string") {
    return path.startsWith("/") ? path : "/" + path;
  }
  if (Array.isArray(path)) {
    return path.map(function(p2) {
      return p2.startsWith("/") ? p2 : "/" + p2;
    });
  }
  if (typeof path === "object" && path !== null) {
    return Object.entries(path).reduce(function(acc, _a2) {
      var key = _a2[0], content2 = _a2[1];
      var fileName = key.startsWith("/") ? key : "/" + key;
      acc[fileName] = content2;
      return acc;
    }, {});
  }
  return null;
};
var SandpackLogLevel;
(function(SandpackLogLevel2) {
  SandpackLogLevel2[SandpackLogLevel2["None"] = 0] = "None";
  SandpackLogLevel2[SandpackLogLevel2["Error"] = 10] = "Error";
  SandpackLogLevel2[SandpackLogLevel2["Warning"] = 20] = "Warning";
  SandpackLogLevel2[SandpackLogLevel2["Info"] = 30] = "Info";
  SandpackLogLevel2[SandpackLogLevel2["Debug"] = 40] = "Debug";
})(SandpackLogLevel || (SandpackLogLevel = {}));
function loadSandpackClient(iframeSelector, sandboxSetup, options) {
  var _a2;
  if (options === void 0) {
    options = {};
  }
  return __awaiter$1(this, void 0, void 0, function() {
    var template, Client, _b2;
    return __generator$1(this, function(_c2) {
      switch (_c2.label) {
        case 0:
          template = (_a2 = sandboxSetup.template) !== null && _a2 !== void 0 ? _a2 : "parcel";
          _b2 = template;
          switch (_b2) {
            case "node":
              return [3, 1];
            case "static":
              return [3, 3];
          }
          return [3, 5];
        case 1:
          return [4, __vitePreload(() => import("./index-ebfdb2b6.js"), true ? ["assets/index-ebfdb2b6.js","assets/base-80a1f760-e754c4a5.js","assets/consoleHook-7a68abbd-d8f3a613.js"] : void 0).then(function(m2) {
            return m2.SandpackNode;
          })];
        case 2:
          Client = _c2.sent();
          return [3, 7];
        case 3:
          return [4, __vitePreload(() => import("./index-fc68d414-980916b1.js"), true ? ["assets/index-fc68d414-980916b1.js","assets/consoleHook-7a68abbd-d8f3a613.js","assets/base-80a1f760-e754c4a5.js"] : void 0).then(function(m2) {
            return m2.SandpackStatic;
          })];
        case 4:
          Client = _c2.sent();
          return [3, 7];
        case 5:
          return [4, __vitePreload(() => import("./index-7c6d69b9.js"), true ? ["assets/index-7c6d69b9.js","assets/base-80a1f760-e754c4a5.js"] : void 0).then(function(m2) {
            return m2.SandpackRuntime;
          })];
        case 6:
          Client = _c2.sent();
          _c2.label = 7;
        case 7:
          return [2, new Client(iframeSelector, sandboxSetup, options)];
      }
    });
  });
}
class Text {
  /**
  Get the line description around the given position.
  */
  lineAt(pos) {
    if (pos < 0 || pos > this.length)
      throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
    return this.lineInner(pos, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(n2) {
    if (n2 < 1 || n2 > this.lines)
      throw new RangeError(`Invalid line number ${n2} in ${this.lines}-line document`);
    return this.lineInner(n2, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(from, to, text) {
    let parts = [];
    this.decompose(
      0,
      from,
      parts,
      2
      /* Open.To */
    );
    if (text.length)
      text.decompose(
        0,
        text.length,
        parts,
        1 | 2
        /* Open.To */
      );
    this.decompose(
      to,
      this.length,
      parts,
      1
      /* Open.From */
    );
    return TextNode.from(parts, this.length - (to - from) + text.length);
  }
  /**
  Append another document to this one.
  */
  append(other) {
    return this.replace(this.length, this.length, other);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(from, to = this.length) {
    let parts = [];
    this.decompose(from, to, parts, 0);
    return TextNode.from(parts, to - from);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(other) {
    if (other == this)
      return true;
    if (other.length != this.length || other.lines != this.lines)
      return false;
    let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
    let a2 = new RawTextCursor(this), b2 = new RawTextCursor(other);
    for (let skip = start, pos = start; ; ) {
      a2.next(skip);
      b2.next(skip);
      skip = 0;
      if (a2.lineBreak != b2.lineBreak || a2.done != b2.done || a2.value != b2.value)
        return false;
      pos += a2.value.length;
      if (a2.done || pos >= end)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(dir = 1) {
    return new RawTextCursor(this, dir);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(from, to = this.length) {
    return new PartialTextCursor(this, from, to);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(from, to) {
    let inner;
    if (from == null) {
      inner = this.iter();
    } else {
      if (to == null)
        to = this.lines + 1;
      let start = this.line(from).from;
      inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
    }
    return new LineCursor(inner);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let lines = [];
    this.flatten(lines);
    return lines;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(text) {
    if (text.length == 0)
      throw new RangeError("A document must have at least one line");
    if (text.length == 1 && !text[0])
      return Text.empty;
    return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
  }
}
class TextLeaf extends Text {
  constructor(text, length = textLength(text)) {
    super();
    this.text = text;
    this.length = length;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(target, isLine, line, offset) {
    for (let i = 0; ; i++) {
      let string2 = this.text[i], end = offset + string2.length;
      if ((isLine ? line : end) >= target)
        return new Line(offset, end, line, string2);
      offset = end + 1;
      line++;
    }
  }
  decompose(from, to, target, open) {
    let text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
    if (open & 1) {
      let prev = target.pop();
      let joined = appendText(text.text, prev.text.slice(), 0, text.length);
      if (joined.length <= 32) {
        target.push(new TextLeaf(joined, prev.length + text.length));
      } else {
        let mid = joined.length >> 1;
        target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
      }
    } else {
      target.push(text);
    }
  }
  replace(from, to, text) {
    if (!(text instanceof TextLeaf))
      return super.replace(from, to, text);
    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
    let newLen = this.length + text.length - (to - from);
    if (lines.length <= 32)
      return new TextLeaf(lines, newLen);
    return TextNode.from(TextLeaf.split(lines, []), newLen);
  }
  sliceString(from, to = this.length, lineSep = "\n") {
    let result = "";
    for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
      let line = this.text[i], end = pos + line.length;
      if (pos > from && i)
        result += lineSep;
      if (from < end && to > pos)
        result += line.slice(Math.max(0, from - pos), to - pos);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let line of this.text)
      target.push(line);
  }
  scanIdentical() {
    return 0;
  }
  static split(text, target) {
    let part = [], len = -1;
    for (let line of text) {
      part.push(line);
      len += line.length + 1;
      if (part.length == 32) {
        target.push(new TextLeaf(part, len));
        part = [];
        len = -1;
      }
    }
    if (len > -1)
      target.push(new TextLeaf(part, len));
    return target;
  }
}
class TextNode extends Text {
  constructor(children, length) {
    super();
    this.children = children;
    this.length = length;
    this.lines = 0;
    for (let child of children)
      this.lines += child.lines;
  }
  lineInner(target, isLine, line, offset) {
    for (let i = 0; ; i++) {
      let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
      if ((isLine ? endLine : end) >= target)
        return child.lineInner(target, isLine, line, offset);
      offset = end + 1;
      line = endLine + 1;
    }
  }
  decompose(from, to, target, open) {
    for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (from <= end && to >= pos) {
        let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to ? 2 : 0));
        if (pos >= from && end <= to && !childOpen)
          target.push(child);
        else
          child.decompose(from - pos, to - pos, target, childOpen);
      }
      pos = end + 1;
    }
  }
  replace(from, to, text) {
    if (text.lines < this.lines)
      for (let i = 0, pos = 0; i < this.children.length; i++) {
        let child = this.children[i], end = pos + child.length;
        if (from >= pos && to <= end) {
          let updated = child.replace(from - pos, to - pos, text);
          let totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
            let copy = this.children.slice();
            copy[i] = updated;
            return new TextNode(copy, this.length - (to - from) + text.length);
          }
          return super.replace(pos, end, updated);
        }
        pos = end + 1;
      }
    return super.replace(from, to, text);
  }
  sliceString(from, to = this.length, lineSep = "\n") {
    let result = "";
    for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
      let child = this.children[i], end = pos + child.length;
      if (pos > from && i)
        result += lineSep;
      if (from < end && to > pos)
        result += child.sliceString(from - pos, to - pos, lineSep);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let child of this.children)
      child.flatten(target);
  }
  scanIdentical(other, dir) {
    if (!(other instanceof TextNode))
      return 0;
    let length = 0;
    let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
    for (; ; iA += dir, iB += dir) {
      if (iA == eA || iB == eB)
        return length;
      let chA = this.children[iA], chB = other.children[iB];
      if (chA != chB)
        return length + chA.scanIdentical(chB, dir);
      length += chA.length + 1;
    }
  }
  static from(children, length = children.reduce((l2, ch) => l2 + ch.length + 1, -1)) {
    let lines = 0;
    for (let ch of children)
      lines += ch.lines;
    if (lines < 32) {
      let flat = [];
      for (let ch of children)
        ch.flatten(flat);
      return new TextLeaf(flat, length);
    }
    let chunk = Math.max(
      32,
      lines >> 5
      /* Tree.BranchShift */
    ), maxChunk = chunk << 1, minChunk = chunk >> 1;
    let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
    function add(child) {
      let last2;
      if (child.lines > maxChunk && child instanceof TextNode) {
        for (let node of child.children)
          add(node);
      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
        flush();
        chunked.push(child);
      } else if (child instanceof TextLeaf && currentLines && (last2 = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last2.lines <= 32) {
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk[currentChunk.length - 1] = new TextLeaf(last2.text.concat(child.text), last2.length + 1 + child.length);
      } else {
        if (currentLines + child.lines > chunk)
          flush();
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk.push(child);
      }
    }
    function flush() {
      if (currentLines == 0)
        return;
      chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
      currentLen = -1;
      currentLines = currentChunk.length = 0;
    }
    for (let child of children)
      add(child);
    flush();
    return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
  }
}
Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
function textLength(text) {
  let length = -1;
  for (let line of text)
    length += line.length + 1;
  return length;
}
function appendText(text, target, from = 0, to = 1e9) {
  for (let pos = 0, i = 0, first2 = true; i < text.length && pos <= to; i++) {
    let line = text[i], end = pos + line.length;
    if (end >= from) {
      if (end > to)
        line = line.slice(0, to - pos);
      if (pos < from)
        line = line.slice(from - pos);
      if (first2) {
        target[target.length - 1] += line;
        first2 = false;
      } else
        target.push(line);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}
class RawTextCursor {
  constructor(text, dir = 1) {
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  nextInner(skip, dir) {
    this.done = this.lineBreak = false;
    for (; ; ) {
      let last2 = this.nodes.length - 1;
      let top2 = this.nodes[last2], offsetValue = this.offsets[last2], offset = offsetValue >> 1;
      let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
      if (offset == (dir > 0 ? size : 0)) {
        if (last2 == 0) {
          this.done = true;
          this.value = "";
          return this;
        }
        if (dir > 0)
          this.offsets[last2 - 1]++;
        this.nodes.pop();
        this.offsets.pop();
      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
        this.offsets[last2] += dir;
        if (skip == 0) {
          this.lineBreak = true;
          this.value = "\n";
          return this;
        }
        skip--;
      } else if (top2 instanceof TextLeaf) {
        let next = top2.text[offset + (dir < 0 ? -1 : 0)];
        this.offsets[last2] += dir;
        if (next.length > Math.max(0, skip)) {
          this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
          return this;
        }
        skip -= next.length;
      } else {
        let next = top2.children[offset + (dir < 0 ? -1 : 0)];
        if (skip > next.length) {
          skip -= next.length;
          this.offsets[last2] += dir;
        } else {
          if (dir < 0)
            this.offsets[last2]--;
          this.nodes.push(next);
          this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
        }
      }
    }
  }
  next(skip = 0) {
    if (skip < 0) {
      this.nextInner(-skip, -this.dir);
      skip = this.value.length;
    }
    return this.nextInner(skip, this.dir);
  }
}
class PartialTextCursor {
  constructor(text, start, end) {
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  nextInner(skip, dir) {
    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
      this.value = "";
      this.done = true;
      return this;
    }
    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
    if (skip > limit)
      skip = limit;
    limit -= skip;
    let { value } = this.cursor.next(skip);
    this.pos += (value.length + skip) * dir;
    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
    this.done = !this.value;
    return this;
  }
  next(skip = 0) {
    if (skip < 0)
      skip = Math.max(skip, this.from - this.pos);
    else if (skip > 0)
      skip = Math.min(skip, this.to - this.pos);
    return this.nextInner(skip, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class LineCursor {
  constructor(inner) {
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  next(skip = 0) {
    let { done, lineBreak, value } = this.inner.next(skip);
    if (done) {
      this.done = true;
      this.value = "";
    } else if (lineBreak) {
      if (this.afterBreak) {
        this.value = "";
      } else {
        this.afterBreak = true;
        this.next();
      }
    } else {
      this.value = value;
      this.afterBreak = false;
    }
    return this;
  }
  get lineBreak() {
    return false;
  }
}
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function() {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
class Line {
  /**
  @internal
  */
  constructor(from, to, number2, text) {
    this.from = from;
    this.to = to;
    this.number = number2;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
}
let extend = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s2) => s2 ? parseInt(s2, 36) : 1);
for (let i = 1; i < extend.length; i++)
  extend[i] += extend[i - 1];
function isExtendingChar(code2) {
  for (let i = 1; i < extend.length; i += 2)
    if (extend[i] > code2)
      return extend[i - 1] <= code2;
  return false;
}
function isRegionalIndicator(code2) {
  return code2 >= 127462 && code2 <= 127487;
}
const ZWJ = 8205;
function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length)
    return pos;
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
    pos--;
  let prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    let next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      let countBefore = 0, i = pos - 2;
      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
        countBefore++;
        i -= 2;
      }
      if (countBefore % 2 == 0)
        break;
      else
        pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos)
      return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch) {
  return ch >= 56320 && ch < 57344;
}
function surrogateHigh(ch) {
  return ch >= 55296 && ch < 56320;
}
function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length)
    return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1))
    return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function fromCodePoint(code2) {
  if (code2 <= 65535)
    return String.fromCharCode(code2);
  code2 -= 65536;
  return String.fromCharCode((code2 >> 10) + 55296, (code2 & 1023) + 56320);
}
function codePointSize(code2) {
  return code2 < 65536 ? 1 : 2;
}
const DefaultSplit = /\r\n?|\n/;
var MapMode = /* @__PURE__ */ function(MapMode2) {
  MapMode2[MapMode2["Simple"] = 0] = "Simple";
  MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
  MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
  MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
  return MapMode2;
}(MapMode || (MapMode = {}));
class ChangeDesc {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(sections) {
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let result = 0;
    for (let i = 0; i < this.sections.length; i += 2)
      result += this.sections[i];
    return result;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let result = 0;
    for (let i = 0; i < this.sections.length; i += 2) {
      let ins = this.sections[i + 1];
      result += ins < 0 ? this.sections[i] : ins;
    }
    return result;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(f2) {
    for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      if (ins < 0) {
        f2(posA, posB, len);
        posB += len;
      } else {
        posB += ins;
      }
      posA += len;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(f2, individual = false) {
    iterChanges(this, f2, individual);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let sections = [];
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      if (ins < 0)
        sections.push(len, ins);
      else
        sections.push(ins, len);
    }
    return new ChangeDesc(sections);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(other, before = false) {
    return other.empty ? this : mapSet(this, other, before);
  }
  mapPos(pos, assoc = -1, mode = MapMode.Simple) {
    let posA = 0, posB = 0;
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
      if (ins < 0) {
        if (endA > pos)
          return posB + (pos - posA);
        posB += len;
      } else {
        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
          return null;
        if (endA > pos || endA == pos && assoc < 0 && !len)
          return pos == posA || assoc < 0 ? posB : posB + ins;
        posB += ins;
      }
      posA = endA;
    }
    if (pos > posA)
      throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
    return posB;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(from, to = from) {
    for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
      let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
      if (ins >= 0 && pos <= to && end >= from)
        return pos < from && end > to ? "cover" : true;
      pos = end;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let result = "";
    for (let i = 0; i < this.sections.length; ) {
      let len = this.sections[i++], ins = this.sections[i++];
      result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
    }
    return result;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json) || json.length % 2 || json.some((a2) => typeof a2 != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new ChangeDesc(json);
  }
  /**
  @internal
  */
  static create(sections) {
    return new ChangeDesc(sections);
  }
}
class ChangeSet extends ChangeDesc {
  constructor(sections, inserted) {
    super(sections);
    this.inserted = inserted;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(doc2) {
    if (this.length != doc2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
    return doc2;
  }
  mapDesc(other, before = false) {
    return mapSet(this, other, before, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(doc2) {
    let sections = this.sections.slice(), inserted = [];
    for (let i = 0, pos = 0; i < sections.length; i += 2) {
      let len = sections[i], ins = sections[i + 1];
      if (ins >= 0) {
        sections[i] = ins;
        sections[i + 1] = len;
        let index = i >> 1;
        while (inserted.length < index)
          inserted.push(Text.empty);
        inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
      }
      pos += len;
    }
    return new ChangeSet(sections, inserted);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(other, before = false) {
    return other.empty ? this : mapSet(this, other, before, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(f2, individual = false) {
    iterChanges(this, f2, individual);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return ChangeDesc.create(this.sections);
  }
  /**
  @internal
  */
  filter(ranges) {
    let resultSections = [], resultInserted = [], filteredSections = [];
    let iter = new SectionIter(this);
    done:
      for (let i = 0, pos = 0; ; ) {
        let next = i == ranges.length ? 1e9 : ranges[i++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0)
            addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        let end = ranges[i++];
        while (pos < end) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, end - pos);
          addSection(resultSections, len, -1);
          addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(len);
          pos += len;
        }
      }
    return {
      changes: new ChangeSet(resultSections, resultInserted),
      filtered: ChangeDesc.create(filteredSections)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let parts = [];
    for (let i = 0; i < this.sections.length; i += 2) {
      let len = this.sections[i], ins = this.sections[i + 1];
      if (ins < 0)
        parts.push(len);
      else if (ins == 0)
        parts.push([len]);
      else
        parts.push([len].concat(this.inserted[i >> 1].toJSON()));
    }
    return parts;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(changes, length, lineSep) {
    let sections = [], inserted = [], pos = 0;
    let total = null;
    function flush(force = false) {
      if (!force && !sections.length)
        return;
      if (pos < length)
        addSection(sections, length - pos, -1);
      let set = new ChangeSet(sections, inserted);
      total = total ? total.compose(set.map(total)) : set;
      sections = [];
      inserted = [];
      pos = 0;
    }
    function process2(spec) {
      if (Array.isArray(spec)) {
        for (let sub of spec)
          process2(sub);
      } else if (spec instanceof ChangeSet) {
        if (spec.length != length)
          throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
        flush();
        total = total ? total.compose(spec.map(total)) : spec;
      } else {
        let { from, to = from, insert: insert2 } = spec;
        if (from > to || from < 0 || to > length)
          throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
        let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
        let insLen = insText.length;
        if (from == to && insLen == 0)
          return;
        if (from < pos)
          flush();
        if (from > pos)
          addSection(sections, from - pos, -1);
        addSection(sections, to - from, insLen);
        addInsert(inserted, sections, insText);
        pos = to;
      }
    }
    process2(changes);
    flush(!total);
    return total;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(length) {
    return new ChangeSet(length ? [length, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let sections = [], inserted = [];
    for (let i = 0; i < json.length; i++) {
      let part = json[i];
      if (typeof part == "number") {
        sections.push(part, -1);
      } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
        throw new RangeError("Invalid JSON representation of ChangeSet");
      } else if (part.length == 1) {
        sections.push(part[0], 0);
      } else {
        while (inserted.length < i)
          inserted.push(Text.empty);
        inserted[i] = Text.of(part.slice(1));
        sections.push(part[0], inserted[i].length);
      }
    }
    return new ChangeSet(sections, inserted);
  }
  /**
  @internal
  */
  static createSet(sections, inserted) {
    return new ChangeSet(sections, inserted);
  }
}
function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0)
    return;
  let last2 = sections.length - 2;
  if (last2 >= 0 && ins <= 0 && ins == sections[last2 + 1])
    sections[last2] += len;
  else if (len == 0 && sections[last2] == 0)
    sections[last2 + 1] += ins;
  else if (forceJoin) {
    sections[last2] += len;
    sections[last2 + 1] += ins;
  } else
    sections.push(len, ins);
}
function addInsert(values2, sections, value) {
  if (value.length == 0)
    return;
  let index = sections.length - 2 >> 1;
  if (index < values2.length) {
    values2[values2.length - 1] = values2[values2.length - 1].append(value);
  } else {
    while (values2.length < index)
      values2.push(Text.empty);
    values2.push(value);
  }
}
function iterChanges(desc, f2, individual) {
  let inserted = desc.inserted;
  for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
    let len = desc.sections[i++], ins = desc.sections[i++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA, endB = posB, text = Text.empty;
      for (; ; ) {
        endA += len;
        endB += ins;
        if (ins && inserted)
          text = text.append(inserted[i - 2 >> 1]);
        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
          break;
        len = desc.sections[i++];
        ins = desc.sections[i++];
      }
      f2(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before, mkSet = false) {
  let sections = [], insert2 = mkSet ? [] : null;
  let a2 = new SectionIter(setA), b2 = new SectionIter(setB);
  for (let inserted = -1; ; ) {
    if (a2.ins == -1 && b2.ins == -1) {
      let len = Math.min(a2.len, b2.len);
      addSection(sections, len, -1);
      a2.forward(len);
      b2.forward(len);
    } else if (b2.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b2.len < a2.len || b2.len == a2.len && !before))) {
      let len = b2.len;
      addSection(sections, b2.ins, -1);
      while (len) {
        let piece = Math.min(a2.len, len);
        if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
          addSection(sections, 0, a2.ins);
          if (insert2)
            addInsert(insert2, sections, a2.text);
          inserted = a2.i;
        }
        a2.forward(piece);
        len -= piece;
      }
      b2.next();
    } else if (a2.ins >= 0) {
      let len = 0, left = a2.len;
      while (left) {
        if (b2.ins == -1) {
          let piece = Math.min(left, b2.len);
          len += piece;
          left -= piece;
          b2.forward(piece);
        } else if (b2.ins == 0 && b2.len < left) {
          left -= b2.len;
          b2.next();
        } else {
          break;
        }
      }
      addSection(sections, len, inserted < a2.i ? a2.ins : 0);
      if (insert2 && inserted < a2.i)
        addInsert(insert2, sections, a2.text);
      inserted = a2.i;
      a2.forward(a2.len - left);
    } else if (a2.done && b2.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert2 = mkSet ? [] : null;
  let a2 = new SectionIter(setA), b2 = new SectionIter(setB);
  for (let open = false; ; ) {
    if (a2.done && b2.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else if (a2.ins == 0) {
      addSection(sections, a2.len, 0, open);
      a2.next();
    } else if (b2.len == 0 && !b2.done) {
      addSection(sections, 0, b2.ins, open);
      if (insert2)
        addInsert(insert2, sections, b2.text);
      b2.next();
    } else if (a2.done || b2.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a2.len2, b2.len), sectionLen = sections.length;
      if (a2.ins == -1) {
        let insB = b2.ins == -1 ? -1 : b2.off ? 0 : b2.ins;
        addSection(sections, len, insB, open);
        if (insert2 && insB)
          addInsert(insert2, sections, b2.text);
      } else if (b2.ins == -1) {
        addSection(sections, a2.off ? 0 : a2.len, len, open);
        if (insert2)
          addInsert(insert2, sections, a2.textBit(len));
      } else {
        addSection(sections, a2.off ? 0 : a2.len, b2.off ? 0 : b2.ins, open);
        if (insert2 && !b2.off)
          addInsert(insert2, sections, b2.text);
      }
      open = (a2.ins > len || b2.ins >= 0 && b2.len > len) && (open || sections.length > sectionLen);
      a2.forward2(len);
      b2.forward(len);
    }
  }
}
class SectionIter {
  constructor(set) {
    this.set = set;
    this.i = 0;
    this.next();
  }
  next() {
    let { sections } = this.set;
    if (this.i < sections.length) {
      this.len = sections[this.i++];
      this.ins = sections[this.i++];
    } else {
      this.len = 0;
      this.ins = -2;
    }
    this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length ? Text.empty : inserted[index];
  }
  textBit(len) {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
  }
  forward(len) {
    if (len == this.len)
      this.next();
    else {
      this.len -= len;
      this.off += len;
    }
  }
  forward2(len) {
    if (this.ins == -1)
      this.forward(len);
    else if (len == this.ins)
      this.next();
    else {
      this.ins -= len;
      this.off += len;
    }
  }
}
let SelectionRange$1 = class SelectionRange {
  constructor(from, to, flags) {
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 16 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 16 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let level = this.flags & 3;
    return level == 3 ? null : level;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let value = this.flags >> 5;
    return value == 33554431 ? void 0 : value;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(change, assoc = -1) {
    let from, to;
    if (this.empty) {
      from = to = change.mapPos(this.from, assoc);
    } else {
      from = change.mapPos(this.from, 1);
      to = change.mapPos(this.to, -1);
    }
    return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(from, to = from) {
    if (from <= this.anchor && to >= this.anchor)
      return EditorSelection.range(from, to);
    let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
    return EditorSelection.range(this.anchor, head);
  }
  /**
  Compare this range to another range.
  */
  eq(other) {
    return this.anchor == other.anchor && this.head == other.head;
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(json) {
    if (!json || typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return EditorSelection.range(json.anchor, json.head);
  }
  /**
  @internal
  */
  static create(from, to, flags) {
    return new SelectionRange(from, to, flags);
  }
};
class EditorSelection {
  constructor(ranges, mainIndex) {
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(change, assoc = -1) {
    if (change.empty)
      return this;
    return EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
  }
  /**
  Compare this selection to another selection.
  */
  eq(other) {
    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
      return false;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(other.ranges[i]))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(range2, main2 = true) {
    return EditorSelection.create([range2].concat(this.ranges), main2 ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(range2, which = this.mainIndex) {
    let ranges = this.ranges.slice();
    ranges[which] = range2;
    return EditorSelection.create(ranges, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(json) {
    if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new EditorSelection(json.ranges.map((r2) => SelectionRange$1.fromJSON(r2)), json.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(anchor, head = anchor) {
    return new EditorSelection([EditorSelection.range(anchor, head)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(ranges, mainIndex = 0) {
    if (ranges.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let pos = 0, i = 0; i < ranges.length; i++) {
      let range2 = ranges[i];
      if (range2.empty ? range2.from <= pos : range2.from < pos)
        return EditorSelection.normalized(ranges.slice(), mainIndex);
      pos = range2.to;
    }
    return new EditorSelection(ranges, mainIndex);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
    return SelectionRange$1.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 : 8) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431) << 5);
  }
  /**
  Create a selection range.
  */
  static range(anchor, head, goalColumn, bidiLevel) {
    let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431) << 5 | (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
    return head < anchor ? SelectionRange$1.create(head, anchor, 16 | 8 | flags) : SelectionRange$1.create(anchor, head, (head > anchor ? 4 : 0) | flags);
  }
  /**
  @internal
  */
  static normalized(ranges, mainIndex = 0) {
    let main2 = ranges[mainIndex];
    ranges.sort((a2, b2) => a2.from - b2.from);
    mainIndex = ranges.indexOf(main2);
    for (let i = 1; i < ranges.length; i++) {
      let range2 = ranges[i], prev = ranges[i - 1];
      if (range2.empty ? range2.from <= prev.to : range2.from < prev.to) {
        let from = prev.from, to = Math.max(range2.to, prev.to);
        if (i <= mainIndex)
          mainIndex--;
        ranges.splice(--i, 2, range2.anchor > range2.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
      }
    }
    return new EditorSelection(ranges, mainIndex);
  }
}
function checkSelection(selection, docLength) {
  for (let range2 of selection.ranges)
    if (range2.to > docLength)
      throw new RangeError("Selection points outside of document");
}
let nextID = 0;
class Facet {
  constructor(combine, compareInput, compare2, isStatic, enables) {
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare2;
    this.isStatic = isStatic;
    this.id = nextID++;
    this.default = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Define a new facet.
  */
  static define(config2 = {}) {
    return new Facet(config2.combine || ((a2) => a2), config2.compareInput || ((a2, b2) => a2 === b2), config2.compare || (!config2.combine ? sameArray$1 : (a2, b2) => a2 === b2), !!config2.static, config2.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(value) {
    return new FacetProvider([], this, 0, value);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(deps, get) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 1, get);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(deps, get) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 2, get);
  }
  from(field, get) {
    if (!get)
      get = (x2) => x2;
    return this.compute([field], (state) => get(state.field(field)));
  }
}
function sameArray$1(a2, b2) {
  return a2 == b2 || a2.length == b2.length && a2.every((e, i) => e === b2[i]);
}
class FacetProvider {
  constructor(dependencies, facet, type, value) {
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  dynamicSlot(addresses) {
    var _a2;
    let getter = this.value;
    let compare2 = this.facet.compareInput;
    let id2 = this.id, idx = addresses[id2] >> 1, multi = this.type == 2;
    let depDoc = false, depSel = false, depAddrs = [];
    for (let dep of this.dependencies) {
      if (dep == "doc")
        depDoc = true;
      else if (dep == "selection")
        depSel = true;
      else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
        depAddrs.push(addresses[dep.id]);
    }
    return {
      create(state) {
        state.values[idx] = getter(state);
        return 1;
      },
      update(state, tr) {
        if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
          let newVal = getter(state);
          if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
            state.values[idx] = newVal;
            return 1;
          }
        }
        return 0;
      },
      reconfigure: (state, oldState) => {
        let newVal, oldAddr = oldState.config.address[id2];
        if (oldAddr != null) {
          let oldVal = getAddr(oldState, oldAddr);
          if (this.dependencies.every((dep) => {
            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
          }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
            state.values[idx] = oldVal;
            return 0;
          }
        } else {
          newVal = getter(state);
        }
        state.values[idx] = newVal;
        return 1;
      }
    };
  }
}
function compareArray(a2, b2, compare2) {
  if (a2.length != b2.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (!compare2(a2[i], b2[i]))
      return false;
  return true;
}
function ensureAll(state, addrs) {
  let changed = false;
  for (let addr of addrs)
    if (ensureAddr(state, addr) & 1)
      changed = true;
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  let providerAddrs = providers.map((p2) => addresses[p2.id]);
  let providerTypes = providers.map((p2) => p2.type);
  let dynamic = providerAddrs.filter((p2) => !(p2 & 1));
  let idx = addresses[facet.id] >> 1;
  function get(state) {
    let values2 = [];
    for (let i = 0; i < providerAddrs.length; i++) {
      let value = getAddr(state, providerAddrs[i]);
      if (providerTypes[i] == 2)
        for (let val of value)
          values2.push(val);
      else
        values2.push(value);
    }
    return facet.combine(values2);
  }
  return {
    create(state) {
      for (let addr of providerAddrs)
        ensureAddr(state, addr);
      state.values[idx] = get(state);
      return 1;
    },
    update(state, tr) {
      if (!ensureAll(state, dynamic))
        return 0;
      let value = get(state);
      if (facet.compare(value, state.values[idx]))
        return 0;
      state.values[idx] = value;
      return 1;
    },
    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      let value = get(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1;
    }
  };
}
const initField = /* @__PURE__ */ Facet.define({ static: true });
class StateField {
  constructor(id2, createF, updateF, compareF, spec) {
    this.id = id2;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(config2) {
    let field = new StateField(nextID++, config2.create, config2.update, config2.compare || ((a2, b2) => a2 === b2), config2);
    if (config2.provide)
      field.provides = config2.provide(field);
    return field;
  }
  create(state) {
    let init = state.facet(initField).find((i) => i.field == this);
    return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
  }
  /**
  @internal
  */
  slot(addresses) {
    let idx = addresses[this.id] >> 1;
    return {
      create: (state) => {
        state.values[idx] = this.create(state);
        return 1;
      },
      update: (state, tr) => {
        let oldVal = state.values[idx];
        let value = this.updateF(oldVal, tr);
        if (this.compareF(oldVal, value))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure: (state, oldState) => {
        if (oldState.config.address[this.id] != null) {
          state.values[idx] = oldState.field(this);
          return 0;
        }
        state.values[idx] = this.create(state);
        return 1;
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(create) {
    return [this, initField.of({ field: this, create })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function prec(value) {
  return (ext) => new PrecExtension(ext, value);
}
const Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ prec(Prec_.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ prec(Prec_.lowest)
};
class PrecExtension {
  constructor(inner, prec2) {
    this.inner = inner;
    this.prec = prec2;
  }
}
class Compartment {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(ext) {
    return new CompartmentInstance(this, ext);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(content2) {
    return Compartment.reconfigure.of({ compartment: this, extension: content2 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(state) {
    return state.config.compartments.get(this);
  }
}
class CompartmentInstance {
  constructor(compartment, inner) {
    this.compartment = compartment;
    this.inner = inner;
  }
}
class Configuration {
  constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
    this.base = base2;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length)
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(facet) {
    let addr = this.address[facet.id];
    return addr == null ? facet.default : this.staticValues[addr >> 1];
  }
  static resolve(base2, compartments, oldState) {
    let fields = [];
    let facets = /* @__PURE__ */ Object.create(null);
    let newCompartments = /* @__PURE__ */ new Map();
    for (let ext of flatten(base2, compartments, newCompartments)) {
      if (ext instanceof StateField)
        fields.push(ext);
      else
        (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
    }
    let address = /* @__PURE__ */ Object.create(null);
    let staticValues = [];
    let dynamicSlots = [];
    for (let field of fields) {
      address[field.id] = dynamicSlots.length << 1;
      dynamicSlots.push((a2) => field.slot(a2));
    }
    let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
    for (let id2 in facets) {
      let providers = facets[id2], facet = providers[0].facet;
      let oldProviders = oldFacets && oldFacets[id2] || [];
      if (providers.every(
        (p2) => p2.type == 0
        /* Provider.Static */
      )) {
        address[facet.id] = staticValues.length << 1 | 1;
        if (sameArray$1(oldProviders, providers)) {
          staticValues.push(oldState.facet(facet));
        } else {
          let value = facet.combine(providers.map((p2) => p2.value));
          staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
        }
      } else {
        for (let p2 of providers) {
          if (p2.type == 0) {
            address[p2.id] = staticValues.length << 1 | 1;
            staticValues.push(p2.value);
          } else {
            address[p2.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a2) => p2.dynamicSlot(a2));
          }
        }
        address[facet.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet, providers));
      }
    }
    let dynamic = dynamicSlots.map((f2) => f2(address));
    return new Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
  }
}
function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen2 = /* @__PURE__ */ new Map();
  function inner(ext, prec2) {
    let known = seen2.get(ext);
    if (known != null) {
      if (known <= prec2)
        return;
      let found = result[known].indexOf(ext);
      if (found > -1)
        result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance)
        newCompartments.delete(ext.compartment);
    }
    seen2.set(ext, prec2);
    if (Array.isArray(ext)) {
      for (let e of ext)
        inner(e, prec2);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment))
        throw new RangeError(`Duplicate use of compartment in extensions`);
      let content2 = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content2);
      inner(content2, prec2);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec2].push(ext);
      if (ext.provides)
        inner(ext.provides, prec2);
    } else if (ext instanceof FacetProvider) {
      result[prec2].push(ext);
      if (ext.facet.extensions)
        inner(ext.facet.extensions, Prec_.default);
    } else {
      let content2 = ext.extension;
      if (!content2)
        throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content2, prec2);
    }
  }
  inner(extension, Prec_.default);
  return result.reduce((a2, b2) => a2.concat(b2));
}
function ensureAddr(state, addr) {
  if (addr & 1)
    return 2;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2)
    return status;
  state.status[idx] = 4;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
const languageData = /* @__PURE__ */ Facet.define();
const allowMultipleSelections = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((v2) => v2),
  static: true
});
const lineSeparator = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : void 0,
  static: true
});
const changeFilter = /* @__PURE__ */ Facet.define();
const transactionFilter = /* @__PURE__ */ Facet.define();
const transactionExtender = /* @__PURE__ */ Facet.define();
const readOnly = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : false
});
class Annotation {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new AnnotationType();
  }
}
class AnnotationType {
  /**
  Create an instance of this annotation.
  */
  of(value) {
    return new Annotation(this, value);
  }
}
class StateEffectType {
  /**
  @internal
  */
  constructor(map2) {
    this.map = map2;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(value) {
    return new StateEffect(this, value);
  }
}
class StateEffect {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(mapping) {
    let mapped = this.type.map(this.value, mapping);
    return mapped === void 0 ? void 0 : mapped == this.value ? this : new StateEffect(this.type, mapped);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(type) {
    return this.type == type;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(spec = {}) {
    return new StateEffectType(spec.map || ((v2) => v2));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(effects, mapping) {
    if (!effects.length)
      return effects;
    let result = [];
    for (let effect of effects) {
      let mapped = effect.map(mapping);
      if (mapped)
        result.push(mapped);
    }
    return result;
  }
}
StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
class Transaction {
  constructor(startState, changes, selection, effects, annotations, scrollIntoView2) {
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView2;
    this._doc = null;
    this._state = null;
    if (selection)
      checkSelection(selection, changes.newLength);
    if (!annotations.some((a2) => a2.type == Transaction.time))
      this.annotations = annotations.concat(Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  static create(startState, changes, selection, effects, annotations, scrollIntoView2) {
    return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView2);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    if (!this._state)
      this.startState.applyTransaction(this);
    return this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(type) {
    for (let ann of this.annotations)
      if (ann.type == type)
        return ann.value;
    return void 0;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(event) {
    let e = this.annotation(Transaction.userEvent);
    return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
  }
}
Transaction.time = /* @__PURE__ */ Annotation.define();
Transaction.userEvent = /* @__PURE__ */ Annotation.define();
Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
Transaction.remote = /* @__PURE__ */ Annotation.define();
function joinRanges(a2, b2) {
  let result = [];
  for (let iA = 0, iB = 0; ; ) {
    let from, to;
    if (iA < a2.length && (iB == b2.length || b2[iB] >= a2[iA])) {
      from = a2[iA++];
      to = a2[iA++];
    } else if (iB < b2.length) {
      from = b2[iB++];
      to = b2[iB++];
    } else
      return result;
    if (!result.length || result[result.length - 1] < from)
      result.push(from, to);
    else if (result[result.length - 1] < to)
      result[result.length - 1] = to;
  }
}
function mergeTransaction(a2, b2, sequential) {
  var _a2;
  let mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b2.changes;
    mapForB = ChangeSet.empty(b2.changes.length);
    changes = a2.changes.compose(b2.changes);
  } else {
    mapForA = b2.changes.map(a2.changes);
    mapForB = a2.changes.mapDesc(b2.changes, true);
    changes = a2.changes.compose(mapForA);
  }
  return {
    changes,
    selection: b2.selection ? b2.selection.map(mapForB) : (_a2 = a2.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
    effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b2.effects, mapForB)),
    annotations: a2.annotations.length ? a2.annotations.concat(b2.annotations) : b2.annotations,
    scrollIntoView: a2.scrollIntoView || b2.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection, annotations = asArray$1(spec.annotations);
  if (spec.userEvent)
    annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray$1(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  let s2 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false)
    filter = false;
  for (let i = 1; i < specs.length; i++) {
    if (specs[i].filter === false)
      filter = false;
    let seq = !!specs[i].sequential;
    s2 = mergeTransaction(s2, resolveTransactionInner(state, specs[i], seq ? s2.changes.newLength : state.doc.length), seq);
  }
  let tr = Transaction.create(state, s2.changes, s2.selection, s2.effects, s2.annotations, s2.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr) : tr);
}
function filterTransaction(tr) {
  let state = tr.startState;
  let result = true;
  for (let filter of state.facet(changeFilter)) {
    let value = filter(tr);
    if (value === false) {
      result = false;
      break;
    }
    if (Array.isArray(value))
      result = result === true ? value : joinRanges(result, value);
  }
  if (result !== true) {
    let changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  let filters = state.facet(transactionFilter);
  for (let i = filters.length - 1; i >= 0; i--) {
    let filtered = filters[i](tr);
    if (filtered instanceof Transaction)
      tr = filtered;
    else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
      tr = filtered[0];
    else
      tr = resolveTransaction(state, asArray$1(filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
  for (let i = extenders.length - 1; i >= 0; i--) {
    let extension = extenders[i](tr);
    if (extension && Object.keys(extension).length)
      spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
const none$1 = [];
function asArray$1(value) {
  return value == null ? none$1 : Array.isArray(value) ? value : [value];
}
var CharCategory = /* @__PURE__ */ function(CharCategory2) {
  CharCategory2[CharCategory2["Word"] = 0] = "Word";
  CharCategory2[CharCategory2["Space"] = 1] = "Space";
  CharCategory2[CharCategory2["Other"] = 2] = "Other";
  return CharCategory2;
}(CharCategory || (CharCategory = {}));
const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let wordChar;
try {
  wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {
}
function hasWordChar(str) {
  if (wordChar)
    return wordChar.test(str);
  for (let i = 0; i < str.length; i++) {
    let ch = str[i];
    if (/\w/.test(ch) || ch > "" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
      return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return (char) => {
    if (!/\S/.test(char))
      return CharCategory.Space;
    if (hasWordChar(char))
      return CharCategory.Word;
    for (let i = 0; i < wordChars.length; i++)
      if (char.indexOf(wordChars[i]) > -1)
        return CharCategory.Word;
    return CharCategory.Other;
  };
}
class EditorState {
  constructor(config2, doc2, selection, values2, computeSlot, tr) {
    this.config = config2;
    this.doc = doc2;
    this.selection = selection;
    this.values = values2;
    this.status = config2.statusTemplate.slice();
    this.computeSlot = computeSlot;
    if (tr)
      tr._state = this;
    for (let i = 0; i < this.config.dynamicSlots.length; i++)
      ensureAddr(this, i << 1);
    this.computeSlot = null;
  }
  field(field, require2 = true) {
    let addr = this.config.address[field.id];
    if (addr == null) {
      if (require2)
        throw new RangeError("Field is not present in this state");
      return void 0;
    }
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...specs) {
    return resolveTransaction(this, specs, true);
  }
  /**
  @internal
  */
  applyTransaction(tr) {
    let conf = this.config, { base: base2, compartments } = conf;
    for (let effect of tr.effects) {
      if (effect.is(Compartment.reconfigure)) {
        if (conf) {
          compartments = /* @__PURE__ */ new Map();
          conf.compartments.forEach((val, key) => compartments.set(key, val));
          conf = null;
        }
        compartments.set(effect.value.compartment, effect.value.extension);
      } else if (effect.is(StateEffect.reconfigure)) {
        conf = null;
        base2 = effect.value;
      } else if (effect.is(StateEffect.appendConfig)) {
        conf = null;
        base2 = asArray$1(base2).concat(effect.value);
      }
    }
    let startValues;
    if (!conf) {
      conf = Configuration.resolve(base2, compartments, this);
      let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
      startValues = intermediateState.values;
    } else {
      startValues = tr.startState.values.slice();
    }
    new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(text) {
    if (typeof text == "string")
      text = this.toText(text);
    return this.changeByRange((range2) => ({
      changes: { from: range2.from, to: range2.to, insert: text },
      range: EditorSelection.cursor(range2.from + text.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(f2) {
    let sel = this.selection;
    let result1 = f2(sel.ranges[0]);
    let changes = this.changes(result1.changes), ranges = [result1.range];
    let effects = asArray$1(result1.effects);
    for (let i = 1; i < sel.ranges.length; i++) {
      let result = f2(sel.ranges[i]);
      let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
      for (let j2 = 0; j2 < i; j2++)
        ranges[j2] = ranges[j2].map(newMapped);
      let mapBy = changes.mapDesc(newChanges, true);
      ranges.push(result.range.map(mapBy));
      changes = changes.compose(newMapped);
      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
    }
    return {
      changes,
      selection: EditorSelection.create(ranges, sel.mainIndex),
      effects
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(spec = []) {
    if (spec instanceof ChangeSet)
      return spec;
    return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(string2) {
    return Text.of(string2.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(from = 0, to = this.doc.length) {
    return this.doc.sliceString(from, to, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(facet) {
    let addr = this.config.address[facet.id];
    if (addr == null)
      return facet.default;
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(fields) {
    let result = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (fields)
      for (let prop in fields) {
        let value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null)
          result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
    return result;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(json, config2 = {}, fields) {
    if (!json || typeof json.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let fieldInit = [];
    if (fields)
      for (let prop in fields) {
        if (Object.prototype.hasOwnProperty.call(json, prop)) {
          let field = fields[prop], value = json[prop];
          fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
        }
      }
    return EditorState.create({
      doc: json.doc,
      selection: EditorSelection.fromJSON(json.selection),
      extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(config2 = {}) {
    let configuration2 = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
    let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration2.staticFacet(EditorState.lineSeparator) || DefaultSplit));
    let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
    checkSelection(selection, doc2.length);
    if (!configuration2.staticFacet(allowMultipleSelections))
      selection = selection.asSingle();
    return new EditorState(configuration2, doc2, selection, configuration2.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(EditorState.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(EditorState.lineSeparator) || "\n";
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(readOnly);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(phrase, ...insert2) {
    for (let map2 of this.facet(EditorState.phrases))
      if (Object.prototype.hasOwnProperty.call(map2, phrase)) {
        phrase = map2[phrase];
        break;
      }
    if (insert2.length)
      phrase = phrase.replace(/\$(\$|\d*)/g, (m2, i) => {
        if (i == "$")
          return "$";
        let n2 = +(i || 1);
        return !n2 || n2 > insert2.length ? m2 : insert2[n2 - 1];
      });
    return phrase;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(name2, pos, side = -1) {
    let values2 = [];
    for (let provider of this.facet(languageData)) {
      for (let result of provider(this, pos, side)) {
        if (Object.prototype.hasOwnProperty.call(result, name2))
          values2.push(result[name2]);
      }
    }
    return values2;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(at) {
    return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(pos) {
    let { text, from, length } = this.doc.lineAt(pos);
    let cat = this.charCategorizer(pos);
    let start = pos - from, end = pos - from;
    while (start > 0) {
      let prev = findClusterBreak(text, start, false);
      if (cat(text.slice(prev, start)) != CharCategory.Word)
        break;
      start = prev;
    }
    while (end < length) {
      let next = findClusterBreak(text, end);
      if (cat(text.slice(end, next)) != CharCategory.Word)
        break;
      end = next;
    }
    return start == end ? null : EditorSelection.range(start + from, end + from);
  }
}
EditorState.allowMultipleSelections = allowMultipleSelections;
EditorState.tabSize = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : 4
});
EditorState.lineSeparator = lineSeparator;
EditorState.readOnly = readOnly;
EditorState.phrases = /* @__PURE__ */ Facet.define({
  compare(a2, b2) {
    let kA = Object.keys(a2), kB = Object.keys(b2);
    return kA.length == kB.length && kA.every((k2) => a2[k2] == b2[k2]);
  }
});
EditorState.languageData = languageData;
EditorState.changeFilter = changeFilter;
EditorState.transactionFilter = transactionFilter;
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
function combineConfig(configs, defaults2, combine = {}) {
  let result = {};
  for (let config2 of configs)
    for (let key of Object.keys(config2)) {
      let value = config2[key], current = result[key];
      if (current === void 0)
        result[key] = value;
      else if (current === value || value === void 0)
        ;
      else if (Object.hasOwnProperty.call(combine, key))
        result[key] = combine[key](current, value);
      else
        throw new Error("Config merge conflict for field " + key);
    }
  for (let key in defaults2)
    if (result[key] === void 0)
      result[key] = defaults2[key];
  return result;
}
class RangeValue {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(other) {
    return this == other;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(from, to = from) {
    return Range$2.create(from, to, this);
  }
}
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
let Range$2 = class Range {
  constructor(from, to, value) {
    this.from = from;
    this.to = to;
    this.value = value;
  }
  /**
  @internal
  */
  static create(from, to, value) {
    return new Range(from, to, value);
  }
};
function cmpRange(a2, b2) {
  return a2.from - b2.from || a2.value.startSide - b2.value.startSide;
}
class Chunk {
  constructor(from, to, value, maxPoint) {
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(pos, side, end, startAt = 0) {
    let arr = end ? this.to : this.from;
    for (let lo = startAt, hi = arr.length; ; ) {
      if (lo == hi)
        return lo;
      let mid = lo + hi >> 1;
      let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
      if (mid == lo)
        return diff >= 0 ? lo : hi;
      if (diff >= 0)
        hi = mid;
      else
        lo = mid + 1;
    }
  }
  between(offset, from, to, f2) {
    for (let i = this.findIndex(from, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
      if (f2(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
        return false;
  }
  map(offset, changes) {
    let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
    for (let i = 0; i < this.value.length; i++) {
      let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
      if (curFrom == curTo) {
        let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
        if (mapped == null)
          continue;
        newFrom = newTo = mapped;
        if (val.startSide != val.endSide) {
          newTo = changes.mapPos(curFrom, val.endSide);
          if (newTo < newFrom)
            continue;
        }
      } else {
        newFrom = changes.mapPos(curFrom, val.startSide);
        newTo = changes.mapPos(curTo, val.endSide);
        if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
          continue;
      }
      if ((newTo - newFrom || val.endSide - val.startSide) < 0)
        continue;
      if (newPos < 0)
        newPos = newFrom;
      if (val.point)
        maxPoint = Math.max(maxPoint, newTo - newFrom);
      value.push(val);
      from.push(newFrom - newPos);
      to.push(newTo - newPos);
    }
    return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
  }
}
class RangeSet {
  constructor(chunkPos, chunk, nextLayer, maxPoint) {
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  static create(chunkPos, chunk, nextLayer, maxPoint) {
    return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
  }
  /**
  @internal
  */
  get length() {
    let last2 = this.chunk.length - 1;
    return last2 < 0 ? 0 : Math.max(this.chunkEnd(last2), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let size = this.nextLayer.size;
    for (let chunk of this.chunk)
      size += chunk.value.length;
    return size;
  }
  /**
  @internal
  */
  chunkEnd(index) {
    return this.chunkPos[index] + this.chunk[index].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(updateSpec) {
    let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
    let filter = updateSpec.filter;
    if (add.length == 0 && !filter)
      return this;
    if (sort)
      add = add.slice().sort(cmpRange);
    if (this.isEmpty)
      return add.length ? RangeSet.of(add) : this;
    let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
    let builder = new RangeSetBuilder();
    while (cur.value || i < add.length) {
      if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
        let range2 = add[i++];
        if (!builder.addInner(range2.from, range2.to, range2.value))
          spill.push(range2);
      } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
        cur.nextChunk();
      } else {
        if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
          if (!builder.addInner(cur.from, cur.to, cur.value))
            spill.push(Range$2.create(cur.from, cur.to, cur.value));
        }
        cur.next();
      }
    }
    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(changes) {
    if (changes.empty || this.isEmpty)
      return this;
    let chunks = [], chunkPos = [], maxPoint = -1;
    for (let i = 0; i < this.chunk.length; i++) {
      let start = this.chunkPos[i], chunk = this.chunk[i];
      let touch = changes.touchesRange(start, start + chunk.length);
      if (touch === false) {
        maxPoint = Math.max(maxPoint, chunk.maxPoint);
        chunks.push(chunk);
        chunkPos.push(changes.mapPos(start));
      } else if (touch === true) {
        let { mapped, pos } = chunk.map(start, changes);
        if (mapped) {
          maxPoint = Math.max(maxPoint, mapped.maxPoint);
          chunks.push(mapped);
          chunkPos.push(pos);
        }
      }
    }
    let next = this.nextLayer.map(changes);
    return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(from, to, f2) {
    if (this.isEmpty)
      return;
    for (let i = 0; i < this.chunk.length; i++) {
      let start = this.chunkPos[i], chunk = this.chunk[i];
      if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f2) === false)
        return;
    }
    this.nextLayer.between(from, to, f2);
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(from = 0) {
    return HeapCursor.from([this]).goto(from);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(sets, from = 0) {
    return HeapCursor.from(sets).goto(from);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
    let a2 = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let b2 = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let sharedChunks = findSharedChunks(a2, b2, textDiff);
    let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
    let sideB = new SpanCursor(b2, sharedChunks, minPointSize);
    textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
    if (textDiff.empty && textDiff.length == 0)
      compare(sideA, 0, sideB, 0, 0, comparator);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(oldSets, newSets, from = 0, to) {
    if (to == null)
      to = 1e9 - 1;
    let a2 = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
    let b2 = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
    if (a2.length != b2.length)
      return false;
    if (!a2.length)
      return true;
    let sharedChunks = findSharedChunks(a2, b2);
    let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from), sideB = new SpanCursor(b2, sharedChunks, 0).goto(from);
    for (; ; ) {
      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
        return false;
      if (sideA.to > to)
        return true;
      sideA.next();
      sideB.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(sets, from, to, iterator, minPointSize = -1) {
    let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
    let openRanges = cursor.openStart;
    for (; ; ) {
      let curTo = Math.min(cursor.to, to);
      if (cursor.point) {
        let active = cursor.activeForPoint(cursor.to);
        let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
        iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
        openRanges = Math.min(cursor.openEnd(curTo), active.length);
      } else if (curTo > pos) {
        iterator.span(pos, curTo, cursor.active, openRanges);
        openRanges = cursor.openEnd(curTo);
      }
      if (cursor.to > to)
        return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
      pos = cursor.to;
      cursor.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(ranges, sort = false) {
    let build = new RangeSetBuilder();
    for (let range2 of ranges instanceof Range$2 ? [ranges] : sort ? lazySort(ranges) : ranges)
      build.add(range2.from, range2.to, range2.value);
    return build.finish();
  }
}
RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1)
    for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
      let cur = ranges[i];
      if (cmpRange(prev, cur) > 0)
        return ranges.slice().sort(cmpRange);
      prev = cur;
    }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
class RangeSetBuilder {
  finishChunk(newArrays) {
    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
    this.chunkPos.push(this.chunkStart);
    this.chunkStart = -1;
    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
    this.maxPoint = -1;
    if (newArrays) {
      this.from = [];
      this.to = [];
      this.value = [];
    }
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1e9;
    this.lastTo = -1e9;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(from, to, value) {
    if (!this.addInner(from, to, value))
      (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
  }
  /**
  @internal
  */
  addInner(from, to, value) {
    let diff = from - this.lastTo || value.startSide - this.last.endSide;
    if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    if (diff < 0)
      return false;
    if (this.from.length == 250)
      this.finishChunk(true);
    if (this.chunkStart < 0)
      this.chunkStart = from;
    this.from.push(from - this.chunkStart);
    this.to.push(to - this.chunkStart);
    this.last = value;
    this.lastFrom = from;
    this.lastTo = to;
    this.value.push(value);
    if (value.point)
      this.maxPoint = Math.max(this.maxPoint, to - from);
    return true;
  }
  /**
  @internal
  */
  addChunk(from, chunk) {
    if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
      return false;
    if (this.from.length)
      this.finishChunk(true);
    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
    this.chunks.push(chunk);
    this.chunkPos.push(from);
    let last2 = chunk.value.length - 1;
    this.last = chunk.value[last2];
    this.lastFrom = chunk.from[last2] + from;
    this.lastTo = chunk.to[last2] + from;
    return true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(RangeSet.empty);
  }
  /**
  @internal
  */
  finishInner(next) {
    if (this.from.length)
      this.finishChunk(false);
    if (this.chunks.length == 0)
      return next;
    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
    this.from = null;
    return result;
  }
}
function findSharedChunks(a2, b2, textDiff) {
  let inA = /* @__PURE__ */ new Map();
  for (let set of a2)
    for (let i = 0; i < set.chunk.length; i++)
      if (set.chunk[i].maxPoint <= 0)
        inA.set(set.chunk[i], set.chunkPos[i]);
  let shared = /* @__PURE__ */ new Set();
  for (let set of b2)
    for (let i = 0; i < set.chunk.length; i++) {
      let known = inA.get(set.chunk[i]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
        shared.add(set.chunk[i]);
    }
  return shared;
}
class LayerCursor {
  constructor(layer, skip, minPoint, rank = 0) {
    this.layer = layer;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(pos, side = -1e9) {
    this.chunkIndex = this.rangeIndex = 0;
    this.gotoInner(pos, side, false);
    return this;
  }
  gotoInner(pos, side, forward) {
    while (this.chunkIndex < this.layer.chunk.length) {
      let next = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
        break;
      this.chunkIndex++;
      forward = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex)
        this.setRangeIndex(rangeIndex);
    }
    this.next();
  }
  forward(pos, side) {
    if ((this.to - pos || this.endSide - side) < 0)
      this.gotoInner(pos, side, true);
  }
  next() {
    for (; ; ) {
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9;
        this.value = null;
        break;
      } else {
        let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
        let from = chunkPos + chunk.from[this.rangeIndex];
        this.from = from;
        this.to = chunkPos + chunk.to[this.rangeIndex];
        this.value = chunk.value[this.rangeIndex];
        this.setRangeIndex(this.rangeIndex + 1);
        if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
    }
  }
  setRangeIndex(index) {
    if (index == this.layer.chunk[this.chunkIndex].value.length) {
      this.chunkIndex++;
      if (this.skip) {
        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
          this.chunkIndex++;
      }
      this.rangeIndex = 0;
    } else {
      this.rangeIndex = index;
    }
  }
  nextChunk() {
    this.chunkIndex++;
    this.rangeIndex = 0;
    this.next();
  }
  compare(other) {
    return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
  }
}
class HeapCursor {
  constructor(heap) {
    this.heap = heap;
  }
  static from(sets, skip = null, minPoint = -1) {
    let heap = [];
    for (let i = 0; i < sets.length; i++) {
      for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
        if (cur.maxPoint >= minPoint)
          heap.push(new LayerCursor(cur, skip, minPoint, i));
      }
    }
    return heap.length == 1 ? heap[0] : new HeapCursor(heap);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(pos, side = -1e9) {
    for (let cur of this.heap)
      cur.goto(pos, side);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      heapBubble(this.heap, i);
    this.next();
    return this;
  }
  forward(pos, side) {
    for (let cur of this.heap)
      cur.forward(pos, side);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      heapBubble(this.heap, i);
    if ((this.to - pos || this.value.endSide - side) < 0)
      this.next();
  }
  next() {
    if (this.heap.length == 0) {
      this.from = this.to = 1e9;
      this.value = null;
      this.rank = -1;
    } else {
      let top2 = this.heap[0];
      this.from = top2.from;
      this.to = top2.to;
      this.value = top2.value;
      this.rank = top2.rank;
      if (top2.value)
        top2.next();
      heapBubble(this.heap, 0);
    }
  }
}
function heapBubble(heap, index) {
  for (let cur = heap[index]; ; ) {
    let childIndex = (index << 1) + 1;
    if (childIndex >= heap.length)
      break;
    let child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur.compare(child) < 0)
      break;
    heap[childIndex] = cur;
    heap[index] = child;
    index = childIndex;
  }
}
class SpanCursor {
  constructor(sets, skip, minPoint) {
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1e9;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  goto(pos, side = -1e9) {
    this.cursor.goto(pos, side);
    this.active.length = this.activeTo.length = this.activeRank.length = 0;
    this.minActive = -1;
    this.to = pos;
    this.endSide = side;
    this.openStart = -1;
    this.next();
    return this;
  }
  forward(pos, side) {
    while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
      this.removeActive(this.minActive);
    this.cursor.forward(pos, side);
  }
  removeActive(index) {
    remove(this.active, index);
    remove(this.activeTo, index);
    remove(this.activeRank, index);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  addActive(trackOpen) {
    let i = 0, { value, to, rank } = this.cursor;
    while (i < this.activeRank.length && this.activeRank[i] <= rank)
      i++;
    insert(this.active, i, value);
    insert(this.activeTo, i, to);
    insert(this.activeRank, i, rank);
    if (trackOpen)
      insert(trackOpen, i, this.cursor.from);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let from = this.to, wasPoint = this.point;
    this.point = null;
    let trackOpen = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let a2 = this.minActive;
      if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[a2] > from) {
          this.to = this.activeTo[a2];
          this.endSide = this.active[a2].endSide;
          break;
        }
        this.removeActive(a2);
        if (trackOpen)
          remove(trackOpen, a2);
      } else if (!this.cursor.value) {
        this.to = this.endSide = 1e9;
        break;
      } else if (this.cursor.from > from) {
        this.to = this.cursor.from;
        this.endSide = this.cursor.startSide;
        break;
      } else {
        let nextVal = this.cursor.value;
        if (!nextVal.point) {
          this.addActive(trackOpen);
          this.cursor.next();
        } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
          this.cursor.next();
        } else {
          this.point = nextVal;
          this.pointFrom = this.cursor.from;
          this.pointRank = this.cursor.rank;
          this.to = this.cursor.to;
          this.endSide = nextVal.endSide;
          this.cursor.next();
          this.forward(this.to, this.endSide);
          break;
        }
      }
    }
    if (trackOpen) {
      this.openStart = 0;
      for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
        this.openStart++;
    }
  }
  activeForPoint(to) {
    if (!this.active.length)
      return this.active;
    let active = [];
    for (let i = this.active.length - 1; i >= 0; i--) {
      if (this.activeRank[i] < this.pointRank)
        break;
      if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
        active.push(this.active[i]);
    }
    return active.reverse();
  }
  openEnd(to) {
    let open = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
      open++;
    return open;
  }
}
function compare(a2, startA, b2, startB, length, comparator) {
  a2.goto(startA);
  b2.goto(startB);
  let endB = startB + length;
  let pos = startB, dPos = startB - startA;
  for (; ; ) {
    let diff = a2.to + dPos - b2.to || a2.endSide - b2.endSide;
    let end = diff < 0 ? a2.to + dPos : b2.to, clipEnd = Math.min(end, endB);
    if (a2.point || b2.point) {
      if (!(a2.point && b2.point && (a2.point == b2.point || a2.point.eq(b2.point)) && sameValues(a2.activeForPoint(a2.to), b2.activeForPoint(b2.to))))
        comparator.comparePoint(pos, clipEnd, a2.point, b2.point);
    } else {
      if (clipEnd > pos && !sameValues(a2.active, b2.active))
        comparator.compareRange(pos, clipEnd, a2.active, b2.active);
    }
    if (end > endB)
      break;
    pos = end;
    if (diff <= 0)
      a2.next();
    if (diff >= 0)
      b2.next();
  }
}
function sameValues(a2, b2) {
  if (a2.length != b2.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (a2[i] != b2[i] && !a2[i].eq(b2[i]))
      return false;
  return true;
}
function remove(array, index) {
  for (let i = index, e = array.length - 1; i < e; i++)
    array[i] = array[i + 1];
  array.pop();
}
function insert(array, index, value) {
  for (let i = array.length - 1; i >= index; i--)
    array[i + 1] = array[i];
  array[index] = value;
}
function findMinIndex(value, array) {
  let found = -1, foundPos = 1e9;
  for (let i = 0; i < array.length; i++)
    if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array[i];
    }
  return found;
}
function countColumn(string2, tabSize, to = string2.length) {
  let n2 = 0;
  for (let i = 0; i < to; ) {
    if (string2.charCodeAt(i) == 9) {
      n2 += tabSize - n2 % tabSize;
      i++;
    } else {
      n2++;
      i = findClusterBreak(string2, i);
    }
  }
  return n2;
}
function findColumn(string2, col, tabSize, strict) {
  for (let i = 0, n2 = 0; ; ) {
    if (n2 >= col)
      return i;
    if (i == string2.length)
      break;
    n2 += string2.charCodeAt(i) == 9 ? tabSize - n2 % tabSize : 1;
    i = findClusterBreak(string2, i);
  }
  return strict === true ? -1 : string2.length;
}
const C = "ͼ";
const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
class StyleModule {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(spec, options) {
    this.rules = [];
    let { finish } = options || {};
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec2, target, isKeyframes) {
      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes2 = isAt && isAt[1] == "keyframes";
      if (isAt && spec2 == null)
        return target.push(selectors[0] + ";");
      for (let prop in spec2) {
        let value = spec2[prop];
        if (/&/.test(prop)) {
          render(
            prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b2) => a2.concat(b2)),
            value,
            target
          );
        } else if (value && typeof value == "object") {
          if (!isAt)
            throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes2);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l2) => "-" + l2.toLowerCase()) + ": " + value + ";");
        }
      }
      if (local.length || keyframes2) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (let prop in spec)
      render(splitSelector(prop), spec[prop], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join("\n");
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let id2 = top[COUNT] || 1;
    top[COUNT] = id2 + 1;
    return C + id2.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  static mount(root, modules) {
    (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
  }
}
let adoptedSet = /* @__PURE__ */ new Map();
class StyleSet {
  constructor(root) {
    let doc2 = root.ownerDocument || root, win = doc2.defaultView;
    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
      let adopted = adoptedSet.get(doc2);
      if (adopted) {
        root.adoptedStyleSheets = [adopted.sheet, ...root.adoptedStyleSheets];
        return root[SET] = adopted;
      }
      this.sheet = new win.CSSStyleSheet();
      root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      adoptedSet.set(doc2, this);
    } else {
      this.styleTag = doc2.createElement("style");
      let target = root.head || root;
      target.insertBefore(this.styleTag, target.firstChild);
    }
    this.modules = [];
    root[SET] = this;
  }
  mount(modules) {
    let sheet = this.sheet;
    let pos = 0, j2 = 0;
    for (let i = 0; i < modules.length; i++) {
      let mod = modules[i], index = this.modules.indexOf(mod);
      if (index < j2 && index > -1) {
        this.modules.splice(index, 1);
        j2--;
        index = -1;
      }
      if (index == -1) {
        this.modules.splice(j2++, 0, mod);
        if (sheet)
          for (let k2 = 0; k2 < mod.rules.length; k2++)
            sheet.insertRule(mod.rules[k2], pos++);
      } else {
        while (j2 < index)
          pos += this.modules[j2++].rules.length;
        pos += mod.rules.length;
        j2++;
      }
    }
    if (!sheet) {
      let text = "";
      for (let i = 0; i < this.modules.length; i++)
        text += this.modules[i].getRules() + "\n";
      this.styleTag.textContent = text;
    }
  }
}
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var i = 0; i < 10; i++)
  base[48 + i] = base[96 + i] = String(i);
for (var i = 1; i <= 24; i++)
  base[i + 111] = "F" + i;
for (var i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}
for (var code$1 in base)
  if (!shift.hasOwnProperty(code$1))
    shift[code$1] = base[code$1];
function keyName(event) {
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie$1 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name2 == "Esc")
    name2 = "Escape";
  if (name2 == "Del")
    name2 = "Delete";
  if (name2 == "Left")
    name2 = "ArrowLeft";
  if (name2 == "Up")
    name2 = "ArrowUp";
  if (name2 == "Right")
    name2 = "ArrowRight";
  if (name2 == "Down")
    name2 = "ArrowDown";
  return name2;
}
function getSelection(root) {
  let target;
  if (root.nodeType == 11) {
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function deepActiveElement(doc2) {
  let elt = doc2.activeElement;
  while (elt && elt.shadowRoot)
    elt = elt.shadowRoot.activeElement;
  return elt;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode)
    return false;
  try {
    return contains(dom, selection.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3)
    return textRange(dom, 0, dom.nodeValue.length).getClientRects();
  else if (dom.nodeType == 1)
    return dom.getClientRects();
  else
    return [];
}
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0; ; index++) {
    node = node.previousSibling;
    if (!node)
      return index;
  }
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV")
        return false;
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1)
        return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false")
        return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect, left) {
  let x2 = left ? rect.left : rect.right;
  return { left: x2, right: x2, top: rect.top, bottom: rect.bottom };
}
function windowRect(win) {
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function scrollRectIntoView(dom, rect, side, x2, y2, xMargin, yMargin, ltr) {
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  for (let cur = dom; cur; ) {
    if (cur.nodeType == 1) {
      let bounding, top2 = cur == doc2.body;
      if (top2) {
        bounding = windowRect(win);
      } else {
        if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
          cur = cur.assignedSlot || cur.parentNode;
          continue;
        }
        let rect2 = cur.getBoundingClientRect();
        bounding = {
          left: rect2.left,
          right: rect2.left + cur.clientWidth,
          top: rect2.top,
          bottom: rect2.top + cur.clientHeight
        };
      }
      let moveX = 0, moveY = 0;
      if (y2 == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY)
            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top)
            moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y2 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y2 == "start" || y2 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x2 == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX)
            moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX)
            moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        let targetLeft = x2 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x2 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top2) {
          win.scrollBy(moveX, moveY);
        } else {
          let movedX = 0, movedY = 0;
          if (moveY) {
            let start = cur.scrollTop;
            cur.scrollTop += moveY;
            movedY = cur.scrollTop - start;
          }
          if (moveX) {
            let start = cur.scrollLeft;
            cur.scrollLeft += moveX;
            movedX = cur.scrollLeft - start;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1)
            x2 = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1)
            y2 = "nearest";
        }
      }
      if (top2)
        break;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      cur = cur.host;
    } else {
      break;
    }
  }
}
function scrollableParent(dom) {
  let doc2 = dom.ownerDocument;
  for (let cur = dom.parentNode; cur; ) {
    if (cur == doc2.body) {
      break;
    } else if (cur.nodeType == 1) {
      if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
        return cur;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      cur = cur.host;
    } else {
      break;
    }
  }
  return null;
}
class DOMSelectionState {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  eq(domSel) {
    return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
  }
  setRange(range2) {
    let { anchorNode, focusNode } = range2;
    this.set(anchorNode, Math.min(range2.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range2.focusOffset, focusNode ? maxOffset(focusNode) : 0));
  }
  set(anchorNode, anchorOffset, focusNode, focusOffset) {
    this.anchorNode = anchorNode;
    this.anchorOffset = anchorOffset;
    this.focusNode = focusNode;
    this.focusOffset = focusOffset;
  }
}
let preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stack = [];
  for (let cur = dom; cur; cur = cur.parentNode) {
    stack.push(cur, cur.scrollTop, cur.scrollLeft);
    if (cur == cur.ownerDocument)
      break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (let i = 0; i < stack.length; ) {
      let elt = stack[i++], top2 = stack[i++], left = stack[i++];
      if (elt.scrollTop != top2)
        elt.scrollTop = top2;
      if (elt.scrollLeft != left)
        elt.scrollLeft = left;
    }
  }
}
let scratchRange;
function textRange(node, from, to = from) {
  let range2 = scratchRange || (scratchRange = document.createRange());
  range2.setEnd(node, to);
  range2.setStart(node, from);
  return range2;
}
function dispatchKey(elt, name2, code2) {
  let options = { key: name2, code: name2, keyCode: code2, which: code2, cancelable: true };
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  let up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
      return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length)
    node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc2, selection) {
  let node = selection.focusNode, offset = selection.focusOffset;
  if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
    return false;
  offset = Math.min(offset, maxOffset(node));
  for (; ; ) {
    if (offset) {
      if (node.nodeType != 1)
        return false;
      let prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false")
        offset--;
      else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc2) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
class DOMPos {
  constructor(node, offset, precise = true) {
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  static before(dom, precise) {
    return new DOMPos(dom.parentNode, domIndex(dom), precise);
  }
  static after(dom, precise) {
    return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
  }
}
const noChildren = [];
class ContentView {
  constructor() {
    this.parent = null;
    this.dom = null;
    this.dirty = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(view) {
    let pos = this.posAtStart;
    for (let child of this.children) {
      if (child == view)
        return pos;
      pos += child.length + child.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(view) {
    return this.posBefore(view) + view.length;
  }
  sync(view, track) {
    if (this.dirty & 2) {
      let parent = this.dom;
      let prev = null, next;
      for (let child of this.children) {
        if (child.dirty) {
          if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
            let contentView = ContentView.get(next);
            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
              child.reuseDOM(next);
          }
          child.sync(view, track);
          child.dirty = 0;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (track && !track.written && track.node == parent && next != child.dom)
          track.written = true;
        if (child.dom.parentNode == parent) {
          while (next && next != child.dom)
            next = rm$1(next);
        } else {
          parent.insertBefore(child.dom, next);
        }
        prev = child.dom;
      }
      next = prev ? prev.nextSibling : parent.firstChild;
      if (next && track && track.node == parent)
        track.written = true;
      while (next)
        next = rm$1(next);
    } else if (this.dirty & 1) {
      for (let child of this.children)
        if (child.dirty) {
          child.sync(view, track);
          child.dirty = 0;
        }
    }
  }
  reuseDOM(_dom) {
  }
  localPosFromDOM(node, offset) {
    let after;
    if (node == this.dom) {
      after = this.dom.childNodes[offset];
    } else {
      let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
      for (; ; ) {
        let parent = node.parentNode;
        if (parent == this.dom)
          break;
        if (bias == 0 && parent.firstChild != parent.lastChild) {
          if (node == parent.firstChild)
            bias = -1;
          else
            bias = 1;
        }
        node = parent;
      }
      if (bias < 0)
        after = node;
      else
        after = node.nextSibling;
    }
    if (after == this.dom.firstChild)
      return 0;
    while (after && !ContentView.get(after))
      after = after.nextSibling;
    if (!after)
      return this.length;
    for (let i = 0, pos = 0; ; i++) {
      let child = this.children[i];
      if (child.dom == after)
        return pos;
      pos += child.length + child.breakAfter;
    }
  }
  domBoundsAround(from, to, offset = 0) {
    let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
    for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (pos < from && end > to)
        return child.domBoundsAround(from, to, pos);
      if (end >= from && fromI == -1) {
        fromI = i;
        fromStart = pos;
      }
      if (pos > to && child.dom.parentNode == this.dom) {
        toI = i;
        toEnd = prevEnd;
        break;
      }
      prevEnd = end;
      pos = end + child.breakAfter;
    }
    return {
      from: fromStart,
      to: toEnd < 0 ? offset + this.length : toEnd,
      startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
    };
  }
  markDirty(andParent = false) {
    this.dirty |= 2;
    this.markParentsDirty(andParent);
  }
  markParentsDirty(childList) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      if (childList)
        parent.dirty |= 2;
      if (parent.dirty & 1)
        return;
      parent.dirty |= 1;
      childList = false;
    }
  }
  setParent(parent) {
    if (this.parent != parent) {
      this.parent = parent;
      if (this.dirty)
        this.markParentsDirty(true);
    }
  }
  setDOM(dom) {
    if (this.dom)
      this.dom.cmView = null;
    this.dom = dom;
    dom.cmView = this;
  }
  get rootView() {
    for (let v2 = this; ; ) {
      let parent = v2.parent;
      if (!parent)
        return v2;
      v2 = parent;
    }
  }
  replaceChildren(from, to, children = noChildren) {
    this.markDirty();
    for (let i = from; i < to; i++) {
      let child = this.children[i];
      if (child.parent == this)
        child.destroy();
    }
    this.children.splice(from, to - from, ...children);
    for (let i = 0; i < children.length; i++)
      children[i].setParent(this);
  }
  ignoreMutation(_rec) {
    return false;
  }
  ignoreEvent(_event) {
    return false;
  }
  childCursor(pos = this.length) {
    return new ChildCursor(this.children, pos, this.children.length);
  }
  childPos(pos, bias = 1) {
    return this.childCursor().findPos(pos, bias);
  }
  toString() {
    let name2 = this.constructor.name.replace("View", "");
    return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(node) {
    return node.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(from, to, source, hasStart, openStart, openEnd) {
    return false;
  }
  become(other) {
    return false;
  }
  canReuseDOM(other) {
    return other.constructor == this.constructor;
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    this.parent = null;
  }
}
ContentView.prototype.breakAfter = 0;
function rm$1(dom) {
  let next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
class ChildCursor {
  constructor(children, pos, i) {
    this.children = children;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }
  findPos(pos, bias = 1) {
    for (; ; ) {
      if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
        this.off = pos - this.pos;
        return this;
      }
      let next = this.children[--this.i];
      this.pos -= next.length + next.breakAfter;
    }
  }
}
function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
  let { children } = parent;
  let before = children.length ? children[fromI] : null;
  let last2 = insert2.length ? insert2[insert2.length - 1] : null;
  let breakAtEnd = last2 ? last2.breakAfter : breakAtStart;
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last2 : null, fromOff == 0, openStart, openEnd))
    return;
  if (toI < children.length) {
    let after = children[toI];
    if (after && toOff < after.length) {
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      if (!breakAtEnd && last2 && after.merge(0, toOff, last2, true, 0, openEnd)) {
        insert2[insert2.length - 1] = after;
      } else {
        if (toOff)
          after.merge(0, toOff, null, false, 0, openEnd);
        insert2.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      if (last2)
        last2.breakAfter = 1;
      else
        breakAtStart = 1;
    }
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
        before.breakAfter = insert2.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  while (fromI < toI && insert2.length) {
    if (children[toI - 1].become(insert2[insert2.length - 1])) {
      toI--;
      insert2.pop();
      openEnd = insert2.length ? 0 : openStart;
    } else if (children[fromI].become(insert2[0])) {
      fromI++;
      insert2.shift();
      openStart = insert2.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
    fromI--;
  if (fromI < toI || insert2.length)
    parent.replaceChildren(fromI, toI, insert2);
}
function mergeChildrenInto(parent, from, to, insert2, openStart, openEnd) {
  let cur = parent.childCursor();
  let { i: toI, off: toOff } = cur.findPos(to, 1);
  let { i: fromI, off: fromOff } = cur.findPos(from, -1);
  let dLen = from - to;
  for (let view of insert2)
    dLen += view.length;
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
}
let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
const ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
const ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
const ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
const ie = !!(ie_upto10 || ie_11up || ie_edge);
const gecko = !ie && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
const chrome = !ie && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
const webkit = "webkitFontSmoothing" in doc.documentElement.style;
const safari = !ie && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
const ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser$2 = {
  mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
  windows: /* @__PURE__ */ /Win/.test(nav.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
  ie,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko,
  gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios,
  android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
  webkit,
  safari,
  webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const MaxJoinLen = 256;
class TextView extends ContentView {
  constructor(text) {
    super();
    this.text = text;
  }
  get length() {
    return this.text.length;
  }
  createDOM(textDOM) {
    this.setDOM(textDOM || document.createTextNode(this.text));
  }
  sync(view, track) {
    if (!this.dom)
      this.createDOM();
    if (this.dom.nodeValue != this.text) {
      if (track && track.node == this.dom)
        track.written = true;
      this.dom.nodeValue = this.text;
    }
  }
  reuseDOM(dom) {
    if (dom.nodeType == 3)
      this.createDOM(dom);
  }
  merge(from, to, source) {
    if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
      return false;
    this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = new TextView(this.text.slice(from));
    this.text = this.text.slice(0, from);
    this.markDirty();
    return result;
  }
  localPosFromDOM(node, offset) {
    return node == this.dom ? offset : offset ? this.text.length : 0;
  }
  domAtPos(pos) {
    return new DOMPos(this.dom, pos);
  }
  domBoundsAround(_from, _to, offset) {
    return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(pos, side) {
    return textCoords(this.dom, pos, side);
  }
}
class MarkView extends ContentView {
  constructor(mark, children = [], length = 0) {
    super();
    this.mark = mark;
    this.children = children;
    this.length = length;
    for (let ch of children)
      ch.setParent(this);
  }
  setAttrs(dom) {
    clearAttributes(dom);
    if (this.mark.class)
      dom.className = this.mark.class;
    if (this.mark.attrs)
      for (let name2 in this.mark.attrs)
        dom.setAttribute(name2, this.mark.attrs[name2]);
    return dom;
  }
  reuseDOM(node) {
    if (node.nodeName == this.mark.tagName.toUpperCase()) {
      this.setDOM(node);
      this.dirty |= 4 | 2;
    }
  }
  sync(view, track) {
    if (!this.dom)
      this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
    else if (this.dirty & 4)
      this.setAttrs(this.dom);
    super.sync(view, track);
  }
  merge(from, to, source, _hasStart, openStart, openEnd) {
    if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = [], off = 0, detachFrom = -1, i = 0;
    for (let elt of this.children) {
      let end = off + elt.length;
      if (end > from)
        result.push(off < from ? elt.split(from - off) : elt);
      if (detachFrom < 0 && off >= from)
        detachFrom = i;
      off = end;
      i++;
    }
    let length = this.length - from;
    this.length = from;
    if (detachFrom > -1) {
      this.children.length = detachFrom;
      this.markDirty();
    }
    return new MarkView(this.mark, result, length);
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }
}
function textCoords(text, pos, side) {
  let length = text.nodeValue.length;
  if (pos > length)
    pos = length;
  let from = pos, to = pos, flatten2 = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser$2.chrome || browser$2.gecko)) {
      if (pos) {
        from--;
        flatten2 = 1;
      } else if (to < length) {
        to++;
        flatten2 = -1;
      }
    }
  } else {
    if (side < 0)
      from--;
    else if (to < length)
      to++;
  }
  let rects = textRange(text, from, to).getClientRects();
  if (!rects.length)
    return null;
  let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser$2.safari && !flatten2 && rect.width == 0)
    rect = Array.prototype.find.call(rects, (r2) => r2.width) || rect;
  return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
}
class WidgetView extends ContentView {
  constructor(widget, length, side) {
    super();
    this.widget = widget;
    this.length = length;
    this.side = side;
    this.prevWidget = null;
  }
  static create(widget, length, side) {
    return new (widget.customView || WidgetView)(widget, length, side);
  }
  split(from) {
    let result = WidgetView.create(this.widget, this.length - from, this.side);
    this.length -= from;
    return result;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      this.dom.contentEditable = "false";
    }
  }
  getSide() {
    return this.side;
  }
  merge(from, to, source, hasStart, openStart, openEnd) {
    if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    this.length = from + (source ? source.length : 0) + (this.length - to);
    return true;
  }
  become(other) {
    if (other instanceof WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
      if (!this.widget.compare(other.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Text.empty;
    let top2 = this;
    while (top2.parent)
      top2 = top2.parent;
    let { view } = top2, text = view && view.state.doc, start = this.posAtStart;
    return text ? text.slice(start, start + this.length) : Text.empty;
  }
  domAtPos(pos) {
    return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    let rects = this.dom.getClientRects(), rect = null;
    if (!rects.length)
      return null;
    let fromBack = this.side ? this.side < 0 : pos > 0;
    for (let i = fromBack ? rects.length - 1 : 0; ; i += fromBack ? -1 : 1) {
      rect = rects[i];
      if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
        break;
    }
    return flattenRect(rect, !fromBack);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
}
class CompositionView extends WidgetView {
  domAtPos(pos) {
    let { topView, text } = this.widget;
    if (!topView)
      return new DOMPos(text, Math.min(pos, text.nodeValue.length));
    return scanCompositionTree(pos, 0, topView, text, this.length - topView.length, (v2, p2) => v2.domAtPos(p2), (text2, p2) => new DOMPos(text2, Math.min(p2, text2.nodeValue.length)));
  }
  sync() {
    this.setDOM(this.widget.toDOM());
  }
  localPosFromDOM(node, offset) {
    let { topView, text } = this.widget;
    if (!topView)
      return Math.min(offset, this.length);
    return posFromDOMInCompositionTree(node, offset, topView, text, this.length - topView.length);
  }
  ignoreMutation() {
    return false;
  }
  get overrideDOMText() {
    return null;
  }
  coordsAt(pos, side) {
    let { topView, text } = this.widget;
    if (!topView)
      return textCoords(text, pos, side);
    return scanCompositionTree(pos, side, topView, text, this.length - topView.length, (v2, pos2, side2) => v2.coordsAt(pos2, side2), (text2, pos2, side2) => textCoords(text2, pos2, side2));
  }
  destroy() {
    var _a2;
    super.destroy();
    (_a2 = this.widget.topView) === null || _a2 === void 0 ? void 0 : _a2.destroy();
  }
  get isEditable() {
    return true;
  }
  canReuseDOM() {
    return true;
  }
}
function scanCompositionTree(pos, side, view, text, dLen, enterView, fromText) {
  if (view instanceof MarkView) {
    for (let child = view.dom.firstChild; child; child = child.nextSibling) {
      let desc = ContentView.get(child);
      if (!desc) {
        let inner = scanCompositionNode(pos, side, child, fromText);
        if (typeof inner != "number")
          return inner;
        pos = inner;
      } else {
        let hasComp = contains(child, text);
        let len = desc.length + (hasComp ? dLen : 0);
        if (pos < len || pos == len && desc.getSide() <= 0)
          return hasComp ? scanCompositionTree(pos, side, desc, text, dLen, enterView, fromText) : enterView(desc, pos, side);
        pos -= len;
      }
    }
    return enterView(view, view.length, -1);
  } else if (view.dom == text) {
    return fromText(text, pos, side);
  } else {
    return enterView(view, pos, side);
  }
}
function scanCompositionNode(pos, side, node, fromText) {
  if (node.nodeType == 3) {
    let len = node.nodeValue.length;
    if (pos <= len)
      return fromText(node, pos, side);
    pos -= len;
  } else if (node.nodeType == 1 && node.contentEditable != "false") {
    for (let child = node.firstChild; child; child = child.nextSibling) {
      let inner = scanCompositionNode(pos, side, child, fromText);
      if (typeof inner != "number")
        return inner;
      pos = inner;
    }
  }
  return pos;
}
function posFromDOMInCompositionTree(node, offset, view, text, dLen) {
  if (view instanceof MarkView) {
    let pos = 0;
    for (let child = view.dom.firstChild; child; child = child.nextSibling) {
      let childView = ContentView.get(child);
      if (childView) {
        let hasComp = contains(child, text);
        if (contains(child, node))
          return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, childView, text, dLen) : childView.localPosFromDOM(node, offset));
        pos += childView.length + (hasComp ? dLen : 0);
      } else {
        let inner = posFromDOMInOpaqueNode(node, offset, child);
        if (inner.result != null)
          return pos + inner.result;
        pos += inner.size;
      }
    }
  } else if (view.dom == text) {
    return Math.min(offset, text.nodeValue.length);
  }
  return view.localPosFromDOM(node, offset);
}
function posFromDOMInOpaqueNode(node, offset, target) {
  if (target.nodeType == 3) {
    return node == target ? { result: offset } : { size: target.nodeValue.length };
  } else if (target.nodeType == 1 && target.contentEditable != "false") {
    let pos = 0;
    for (let child = target.firstChild, i = 0; ; child = child.nextSibling, i++) {
      if (node == target && i == offset)
        return { result: pos };
      if (!child)
        return { size: pos };
      let inner = posFromDOMInOpaqueNode(node, offset, child);
      if (inner.result != null)
        return { result: offset + inner.result };
      pos += inner.size;
    }
  } else {
    return target.contains(node) ? { result: 0 } : { size: 0 };
  }
}
class WidgetBufferView extends ContentView {
  constructor(side) {
    super();
    this.side = side;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(other) {
    return other instanceof WidgetBufferView && other.side == this.side;
  }
  split() {
    return new WidgetBufferView(this.side);
  }
  sync() {
    if (!this.dom) {
      let dom = document.createElement("img");
      dom.className = "cm-widgetBuffer";
      dom.setAttribute("aria-hidden", "true");
      this.setDOM(dom);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(pos) {
    return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Text.empty;
  }
  get isHidden() {
    return true;
  }
}
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  let dom = parent.dom, { children } = parent, i = 0;
  for (let off = 0; i < children.length; i++) {
    let child = children[i], end = off + child.length;
    if (end == off && child.getSide() <= 0)
      continue;
    if (pos > off && pos < end && child.dom.parentNode == dom)
      return child.domAtPos(pos - off);
    if (pos <= off)
      break;
    off = end;
  }
  for (let j2 = i; j2 > 0; j2--) {
    let prev = children[j2 - 1];
    if (prev.dom.parentNode == dom)
      return prev.domAtPos(prev.length);
  }
  for (let j2 = i; j2 < children.length; j2++) {
    let next = children[j2];
    if (next.dom.parentNode == dom)
      return next.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
function joinInlineInto(parent, view, open) {
  let last2, { children } = parent;
  if (open > 0 && view instanceof MarkView && children.length && (last2 = children[children.length - 1]) instanceof MarkView && last2.mark.eq(view.mark)) {
    joinInlineInto(last2, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  let before = null, beforePos = -1, after = null, afterPos = -1;
  function scan(view2, pos2) {
    for (let i = 0, off = 0; i < view2.children.length && off <= pos2; i++) {
      let child = view2.children[i], end = off + child.length;
      if (end >= pos2) {
        if (child.children.length) {
          scan(child, pos2 - off);
        } else if ((!after || after.isHidden && side > 0) && (end > pos2 || off == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos2 - off;
        } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos2 - off;
        }
      }
      off = end;
    }
  }
  scan(view, pos);
  let target = (side < 0 ? before : after) || before || after;
  if (target)
    return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  let last2 = view.dom.lastChild;
  if (!last2)
    return view.dom.getBoundingClientRect();
  let rects = clientRectsFor(last2);
  return rects[rects.length - 1] || null;
}
function combineAttrs(source, target) {
  for (let name2 in source) {
    if (name2 == "class" && target.class)
      target.class += " " + source.class;
    else if (name2 == "style" && target.style)
      target.style += ";" + source.style;
    else
      target[name2] = source[name2];
  }
  return target;
}
function attrsEq(a2, b2) {
  if (a2 == b2)
    return true;
  if (!a2 || !b2)
    return false;
  let keysA = Object.keys(a2), keysB = Object.keys(b2);
  if (keysA.length != keysB.length)
    return false;
  for (let key of keysA) {
    if (keysB.indexOf(key) == -1 || a2[key] !== b2[key])
      return false;
  }
  return true;
}
function updateAttrs(dom, prev, attrs) {
  let changed = null;
  if (prev) {
    for (let name2 in prev)
      if (!(attrs && name2 in attrs))
        dom.removeAttribute(changed = name2);
  }
  if (attrs) {
    for (let name2 in attrs)
      if (!(prev && prev[name2] == attrs[name2]))
        dom.setAttribute(changed = name2, attrs[name2]);
  }
  return !!changed;
}
class WidgetType {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(widget) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(dom, view) {
    return false;
  }
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(event) {
    return true;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(dom, pos, side) {
    return null;
  }
  /**
  @internal
  */
  get customView() {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return false;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(dom) {
  }
}
var BlockType = /* @__PURE__ */ function(BlockType2) {
  BlockType2[BlockType2["Text"] = 0] = "Text";
  BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
  BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
  BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
  return BlockType2;
}(BlockType || (BlockType = {}));
class Decoration extends RangeValue {
  constructor(startSide, endSide, widget, spec) {
    super();
    this.startSide = startSide;
    this.endSide = endSide;
    this.widget = widget;
    this.spec = spec;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(spec) {
    return new MarkDecoration(spec);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(spec) {
    let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
    side += block ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
    return new PointDecoration(spec, side, side, block, spec.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(spec) {
    let block = !!spec.block, startSide, endSide;
    if (spec.isBlockGap) {
      startSide = -5e8;
      endSide = 4e8;
    } else {
      let { start, end } = getInclusive(spec, block);
      startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
      endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
    }
    return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(spec) {
    return new LineDecoration(spec);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(of, sort = false) {
    return RangeSet.of(of, sort);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
}
Decoration.none = RangeSet.empty;
class MarkDecoration extends Decoration {
  constructor(spec) {
    let { start, end } = getInclusive(spec);
    super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
    this.tagName = spec.tagName || "span";
    this.class = spec.class || "";
    this.attrs = spec.attributes || null;
  }
  eq(other) {
    return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this.class == other.class && attrsEq(this.attrs, other.attrs);
  }
  range(from, to = from) {
    if (from >= to)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(from, to);
  }
}
MarkDecoration.prototype.point = false;
class LineDecoration extends Decoration {
  constructor(spec) {
    super(-2e8, -2e8, null, spec);
  }
  eq(other) {
    return other instanceof LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
  }
  range(from, to = from) {
    if (to != from)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(from, to);
  }
}
LineDecoration.prototype.mapMode = MapMode.TrackBefore;
LineDecoration.prototype.point = true;
class PointDecoration extends Decoration {
  constructor(spec, startSide, endSide, block, widget, isReplace) {
    super(startSide, endSide, widget, spec);
    this.block = block;
    this.isReplace = isReplace;
    this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(other) {
    return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
  }
  range(from, to = from) {
    if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && to != from)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(from, to);
  }
}
PointDecoration.prototype.point = true;
function getInclusive(spec, block = false) {
  let { inclusiveStart: start, inclusiveEnd: end } = spec;
  if (start == null)
    start = spec.inclusive;
  if (end == null)
    end = spec.inclusive;
  return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
}
function widgetsEq(a2, b2) {
  return a2 == b2 || !!(a2 && b2 && a2.compare(b2));
}
function addRange(from, to, ranges, margin = 0) {
  let last2 = ranges.length - 1;
  if (last2 >= 0 && ranges[last2] + margin >= from)
    ranges[last2] = Math.max(ranges[last2], to);
  else
    ranges.push(from, to);
}
class LineView extends ContentView {
  constructor() {
    super(...arguments);
    this.children = [];
    this.length = 0;
    this.prevAttrs = void 0;
    this.attrs = null;
    this.breakAfter = 0;
  }
  // Consumes source
  merge(from, to, source, hasStart, openStart, openEnd) {
    if (source) {
      if (!(source instanceof LineView))
        return false;
      if (!this.dom)
        source.transferDOM(this);
    }
    if (hasStart)
      this.setDeco(source ? source.attrs : null);
    mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
    return true;
  }
  split(at) {
    let end = new LineView();
    end.breakAfter = this.breakAfter;
    if (this.length == 0)
      return end;
    let { i, off } = this.childPos(at);
    if (off) {
      end.append(this.children[i].split(off), 0);
      this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
      i++;
    }
    for (let j2 = i; j2 < this.children.length; j2++)
      end.append(this.children[j2], 0);
    while (i > 0 && this.children[i - 1].length == 0)
      this.children[--i].destroy();
    this.children.length = i;
    this.markDirty();
    this.length = at;
    return end;
  }
  transferDOM(other) {
    if (!this.dom)
      return;
    this.markDirty();
    other.setDOM(this.dom);
    other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
    this.prevAttrs = void 0;
    this.dom = null;
  }
  setDeco(attrs) {
    if (!attrsEq(this.attrs, attrs)) {
      if (this.dom) {
        this.prevAttrs = this.attrs;
        this.markDirty();
      }
      this.attrs = attrs;
    }
  }
  append(child, openStart) {
    joinInlineInto(this, child, openStart);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(deco) {
    let attrs = deco.spec.attributes, cls = deco.spec.class;
    if (attrs)
      this.attrs = combineAttrs(attrs, this.attrs || {});
    if (cls)
      this.attrs = combineAttrs({ class: cls }, this.attrs || {});
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  reuseDOM(node) {
    if (node.nodeName == "DIV") {
      this.setDOM(node);
      this.dirty |= 4 | 2;
    }
  }
  sync(view, track) {
    var _a2;
    if (!this.dom) {
      this.setDOM(document.createElement("div"));
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    } else if (this.dirty & 4) {
      clearAttributes(this.dom);
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    }
    if (this.prevAttrs !== void 0) {
      updateAttrs(this.dom, this.prevAttrs, this.attrs);
      this.dom.classList.add("cm-line");
      this.prevAttrs = void 0;
    }
    super.sync(view, track);
    let last2 = this.dom.lastChild;
    while (last2 && ContentView.get(last2) instanceof MarkView)
      last2 = last2.lastChild;
    if (!last2 || !this.length || last2.nodeName != "BR" && ((_a2 = ContentView.get(last2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser$2.ios || !this.children.some((ch) => ch instanceof TextView))) {
      let hack = document.createElement("BR");
      hack.cmIgnore = true;
      this.dom.appendChild(hack);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let totalWidth = 0, textHeight;
    for (let child of this.children) {
      if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
        return null;
      let rects = clientRectsFor(child.dom);
      if (rects.length != 1)
        return null;
      totalWidth += rects[0].width;
      textHeight = rects[0].height;
    }
    return !totalWidth ? null : {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: totalWidth / this.length,
      textHeight
    };
  }
  coordsAt(pos, side) {
    let rect = coordsInChildren(this, pos, side);
    if (!this.children.length && rect && this.parent) {
      let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
      if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
        let dist = (height - heightOracle.textHeight) / 2;
        return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
      }
    }
    return rect;
  }
  become(_other) {
    return false;
  }
  get type() {
    return BlockType.Text;
  }
  static find(docView, pos) {
    for (let i = 0, off = 0; i < docView.children.length; i++) {
      let block = docView.children[i], end = off + block.length;
      if (end >= pos) {
        if (block instanceof LineView)
          return block;
        if (end > pos)
          break;
      }
      off = end + block.breakAfter;
    }
    return null;
  }
}
class BlockWidgetView extends ContentView {
  constructor(widget, length, type) {
    super();
    this.widget = widget;
    this.length = length;
    this.type = type;
    this.breakAfter = 0;
    this.prevWidget = null;
  }
  merge(from, to, source, _takeDeco, openStart, openEnd) {
    if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
      return false;
    this.length = from + (source ? source.length : 0) + (this.length - to);
    return true;
  }
  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  split(at) {
    let len = this.length - at;
    this.length = at;
    let end = new BlockWidgetView(this.widget, len, this.type);
    end.breakAfter = this.breakAfter;
    return end;
  }
  get children() {
    return noChildren;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      this.dom.contentEditable = "false";
    }
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(other) {
    if (other instanceof BlockWidgetView && other.widget.constructor == this.widget.constructor) {
      if (!other.widget.compare(this.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      this.type = other.type;
      this.breakAfter = other.breakAfter;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(pos, side) {
    return this.widget.coordsAt(this.dom, pos, side);
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
}
class ContentBuilder {
  constructor(doc2, pos, end, disallowBlockEffectsFor) {
    this.doc = doc2;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0;
    this.bufferMarks = [];
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc2.iter();
    this.skip = pos;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let last2 = this.content[this.content.length - 1];
    return !last2.breakAfter && !(last2 instanceof BlockWidgetView && last2.type == BlockType.WidgetBefore);
  }
  getLine() {
    if (!this.curLine) {
      this.content.push(this.curLine = new LineView());
      this.atCursorPos = true;
    }
    return this.curLine;
  }
  flushBuffer(active = this.bufferMarks) {
    if (this.pendingBuffer) {
      this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
      this.pendingBuffer = 0;
    }
  }
  addBlockWidget(view) {
    this.flushBuffer();
    this.curLine = null;
    this.content.push(view);
  }
  finish(openEnd) {
    if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
      this.flushBuffer();
    else
      this.pendingBuffer = 0;
    if (!this.posCovered())
      this.getLine();
  }
  buildText(length, active, openStart) {
    while (length > 0) {
      if (this.textOff == this.text.length) {
        let { value, lineBreak, done } = this.cursor.next(this.skip);
        this.skip = 0;
        if (done)
          throw new Error("Ran out of text content when drawing inline views");
        if (lineBreak) {
          if (!this.posCovered())
            this.getLine();
          if (this.content.length)
            this.content[this.content.length - 1].breakAfter = 1;
          else
            this.breakAtStart = 1;
          this.flushBuffer();
          this.curLine = null;
          this.atCursorPos = true;
          length--;
          continue;
        } else {
          this.text = value;
          this.textOff = 0;
        }
      }
      let take = Math.min(
        this.text.length - this.textOff,
        length,
        512
        /* Chunk */
      );
      this.flushBuffer(active.slice(active.length - openStart));
      this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
      this.atCursorPos = true;
      this.textOff += take;
      length -= take;
      openStart = 0;
    }
  }
  span(from, to, active, openStart) {
    this.buildText(to - from, active, openStart);
    this.pos = to;
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  point(from, to, deco, active, openStart, index) {
    if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
      if (deco.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (to > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let len = to - from;
    if (deco instanceof PointDecoration) {
      if (deco.block) {
        let { type } = deco;
        if (type == BlockType.WidgetAfter && !this.posCovered())
          this.getLine();
        this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
      } else {
        let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
        let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
        let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
        let line = this.getLine();
        if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
          this.pendingBuffer = 0;
        this.flushBuffer(active);
        if (cursorBefore) {
          line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
          openStart = active.length + Math.max(0, openStart - active.length);
        }
        line.append(wrapMarks(view, active), openStart);
        this.atCursorPos = cursorAfter;
        this.pendingBuffer = !cursorAfter ? 0 : from < to || openStart > active.length ? 1 : 2;
        if (this.pendingBuffer)
          this.bufferMarks = active.slice();
      }
    } else if (this.doc.lineAt(this.pos).from == this.pos) {
      this.getLine().addLineDeco(deco);
    }
    if (len) {
      if (this.textOff + len <= this.text.length) {
        this.textOff += len;
      } else {
        this.skip += len - (this.text.length - this.textOff);
        this.text = "";
        this.textOff = 0;
      }
      this.pos = to;
    }
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  static build(text, from, to, decorations2, dynamicDecorationMap) {
    let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
    builder.openEnd = RangeSet.spans(decorations2, from, to, builder);
    if (builder.openStart < 0)
      builder.openStart = builder.openEnd;
    builder.finish(builder.openEnd);
    return builder;
  }
}
function wrapMarks(view, active) {
  for (let mark of active)
    view = new MarkView(mark, [view], view.length);
  return view;
}
class NullWidget extends WidgetType {
  constructor(tag) {
    super();
    this.tag = tag;
  }
  eq(other) {
    return other.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(elt) {
    return elt.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
}
const clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
const dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
const mouseSelectionStyle = /* @__PURE__ */ Facet.define();
const exceptionSink = /* @__PURE__ */ Facet.define();
const updateListener = /* @__PURE__ */ Facet.define();
const inputHandler$1 = /* @__PURE__ */ Facet.define();
const focusChangeEffect = /* @__PURE__ */ Facet.define();
const perLineTextDirection = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
const nativeSelectionHidden = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
class ScrollTarget {
  constructor(range2, y2 = "nearest", x2 = "nearest", yMargin = 5, xMargin = 5) {
    this.range = range2;
    this.y = y2;
    this.x = x2;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
  }
  map(changes) {
    return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
  }
}
const scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t2, ch) => t2.map(ch) });
function logException(state, exception, context) {
  let handler = state.facet(exceptionSink);
  if (handler.length)
    handler[0](exception);
  else if (window.onerror)
    window.onerror(String(exception), context, void 0, void 0, exception);
  else if (context)
    console.error(context + ":", exception);
  else
    console.error(exception);
}
const editable = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : true });
let nextPluginID = 0;
const viewPlugin = /* @__PURE__ */ Facet.define();
class ViewPlugin {
  constructor(id2, create, domEventHandlers, buildExtensions) {
    this.id = id2;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(create, spec) {
    const { eventHandlers, provide, decorations: deco } = spec || {};
    return new ViewPlugin(nextPluginID++, create, eventHandlers, (plugin) => {
      let ext = [viewPlugin.of(plugin)];
      if (deco)
        ext.push(decorations.of((view) => {
          let pluginInst = view.plugin(plugin);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
      if (provide)
        ext.push(provide(plugin));
      return ext;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(cls, spec) {
    return ViewPlugin.define((view) => new cls(view), spec);
  }
}
class PluginInstance {
  constructor(spec) {
    this.spec = spec;
    this.mustUpdate = null;
    this.value = null;
  }
  update(view) {
    if (!this.value) {
      if (this.spec) {
        try {
          this.value = this.spec.create(view);
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
          this.deactivate();
        }
      }
    } else if (this.mustUpdate) {
      let update = this.mustUpdate;
      this.mustUpdate = null;
      if (this.value.update) {
        try {
          this.value.update(update);
        } catch (e) {
          logException(update.state, e, "CodeMirror plugin crashed");
          if (this.value.destroy)
            try {
              this.value.destroy();
            } catch (_) {
            }
          this.deactivate();
        }
      }
    }
    return this;
  }
  destroy(view) {
    var _a2;
    if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
      try {
        this.value.destroy();
      } catch (e) {
        logException(view.state, e, "CodeMirror plugin crashed");
      }
    }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const editorAttributes = /* @__PURE__ */ Facet.define();
const contentAttributes = /* @__PURE__ */ Facet.define();
const decorations = /* @__PURE__ */ Facet.define();
const atomicRanges = /* @__PURE__ */ Facet.define();
const scrollMargins = /* @__PURE__ */ Facet.define();
function getScrollMargins(view) {
  let left = 0, right = 0, top2 = 0, bottom = 0;
  for (let source of view.state.facet(scrollMargins)) {
    let m2 = source(view);
    if (m2) {
      if (m2.left != null)
        left = Math.max(left, m2.left);
      if (m2.right != null)
        right = Math.max(right, m2.right);
      if (m2.top != null)
        top2 = Math.max(top2, m2.top);
      if (m2.bottom != null)
        bottom = Math.max(bottom, m2.bottom);
    }
  }
  return { left, right, top: top2, bottom };
}
const styleModule = /* @__PURE__ */ Facet.define();
class ChangedRange {
  constructor(fromA, toA, fromB, toB) {
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  join(other) {
    return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
  }
  addToSet(set) {
    let i = set.length, me = this;
    for (; i > 0; i--) {
      let range2 = set[i - 1];
      if (range2.fromA > me.toA)
        continue;
      if (range2.toA < me.fromA)
        break;
      me = me.join(range2);
      set.splice(i - 1, 1);
    }
    set.splice(i, 0, me);
    return set;
  }
  static extendWithRanges(diff, ranges) {
    if (ranges.length == 0)
      return diff;
    let result = [];
    for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
      let next = dI == diff.length ? null : diff[dI], off = posA - posB;
      let end = next ? next.fromB : 1e9;
      while (rI < ranges.length && ranges[rI] < end) {
        let from = ranges[rI], to = ranges[rI + 1];
        let fromB = Math.max(posB, from), toB = Math.min(end, to);
        if (fromB <= toB)
          new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
        if (to > end)
          break;
        else
          rI += 2;
      }
      if (!next)
        return result;
      new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
      posA = next.toA;
      posB = next.toB;
    }
  }
}
class ViewUpdate {
  constructor(view, state, transactions) {
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    this.flags = 0;
    this.startState = view.state;
    this.changes = ChangeSet.empty(this.startState.doc.length);
    for (let tr of transactions)
      this.changes = this.changes.compose(tr.changes);
    let changedRanges = [];
    this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  static create(view, state, transactions) {
    return new ViewUpdate(view, state, transactions);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & (8 | 2)) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((tr) => tr.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
var Direction = /* @__PURE__ */ function(Direction2) {
  Direction2[Direction2["LTR"] = 0] = "LTR";
  Direction2[Direction2["RTL"] = 1] = "RTL";
  return Direction2;
}(Direction || (Direction = {}));
const LTR = Direction.LTR, RTL = Direction.RTL;
function dec(str) {
  let result = [];
  for (let i = 0; i < str.length; i++)
    result.push(1 << +str[i]);
  return result;
}
const LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
const ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
const Brackets = /* @__PURE__ */ Object.create(null), BracketStack = [];
for (let p2 of ["()", "[]", "{}"]) {
  let l2 = /* @__PURE__ */ p2.charCodeAt(0), r2 = /* @__PURE__ */ p2.charCodeAt(1);
  Brackets[l2] = r2;
  Brackets[r2] = -l2;
}
function charType(ch) {
  return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8203 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : ch == 8204 ? 256 : 1;
}
const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class BidiSpan {
  /**
  @internal
  */
  constructor(from, to, level) {
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? RTL : LTR;
  }
  /**
  @internal
  */
  side(end, dir) {
    return this.dir == dir == end ? this.to : this.from;
  }
  /**
  @internal
  */
  static find(order, index, level, assoc) {
    let maybe = -1;
    for (let i = 0; i < order.length; i++) {
      let span = order[i];
      if (span.from <= index && span.to >= index) {
        if (span.level == level)
          return i;
        if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
          maybe = i;
      }
    }
    if (maybe < 0)
      throw new RangeError("Index out of range");
    return maybe;
  }
}
const types$1 = [];
function computeOrder(line, direction) {
  let len = line.length, outerType = direction == LTR ? 1 : 2, oppositeType = direction == LTR ? 2 : 1;
  if (!line || outerType == 1 && !BidiRE.test(line))
    return trivialOrder(len);
  for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    let type = charType(line.charCodeAt(i));
    if (type == 512)
      type = prev;
    else if (type == 8 && prevStrong == 4)
      type = 16;
    types$1[i] = type == 4 ? 2 : type;
    if (type & 7)
      prevStrong = type;
    prev = type;
  }
  for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    let type = types$1[i];
    if (type == 128) {
      if (i < len - 1 && prev == types$1[i + 1] && prev & 24)
        type = types$1[i] = prev;
      else
        types$1[i] = 256;
    } else if (type == 64) {
      let end = i + 1;
      while (end < len && types$1[end] == 64)
        end++;
      let replace = i && prev == 8 || end < len && types$1[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
      for (let j2 = i; j2 < end; j2++)
        types$1[j2] = replace;
      i = end - 1;
    } else if (type == 8 && prevStrong == 1) {
      types$1[i] = 1;
    }
    prev = type;
    if (type & 7)
      prevStrong = type;
  }
  for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
    if (br = Brackets[ch = line.charCodeAt(i)]) {
      if (br < 0) {
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          if (BracketStack[sJ + 1] == -br) {
            let flags = BracketStack[sJ + 2];
            let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
            if (type2)
              types$1[i] = types$1[BracketStack[sJ]] = type2;
            sI = sJ;
            break;
          }
        }
      } else if (BracketStack.length == 189) {
        break;
      } else {
        BracketStack[sI++] = i;
        BracketStack[sI++] = ch;
        BracketStack[sI++] = context;
      }
    } else if ((type = types$1[i]) == 2 || type == 1) {
      let embed = type == outerType;
      context = embed ? 0 : 1;
      for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
        let cur = BracketStack[sJ + 2];
        if (cur & 2)
          break;
        if (embed) {
          BracketStack[sJ + 2] |= 2;
        } else {
          if (cur & 4)
            break;
          BracketStack[sJ + 2] |= 4;
        }
      }
    }
  }
  for (let i = 0; i < len; i++) {
    if (types$1[i] == 256) {
      let end = i + 1;
      while (end < len && types$1[end] == 256)
        end++;
      let beforeL = (i ? types$1[i - 1] : outerType) == 1;
      let afterL = (end < len ? types$1[end] : outerType) == 1;
      let replace = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
      for (let j2 = i; j2 < end; j2++)
        types$1[j2] = replace;
      i = end - 1;
    }
  }
  let order = [];
  if (outerType == 1) {
    for (let i = 0; i < len; ) {
      let start = i, rtl = types$1[i++] != 1;
      while (i < len && rtl == (types$1[i] != 1))
        i++;
      if (rtl) {
        for (let j2 = i; j2 > start; ) {
          let end = j2, l2 = types$1[--j2] != 2;
          while (j2 > start && l2 == (types$1[j2 - 1] != 2))
            j2--;
          order.push(new BidiSpan(j2, end, l2 ? 2 : 1));
        }
      } else {
        order.push(new BidiSpan(start, i, 0));
      }
    }
  } else {
    for (let i = 0; i < len; ) {
      let start = i, rtl = types$1[i++] == 2;
      while (i < len && rtl == (types$1[i] == 2))
        i++;
      order.push(new BidiSpan(start, i, rtl ? 1 : 2));
    }
  }
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
let movedOver = "";
function moveVisually(line, order, dir, start, forward) {
  var _a2;
  let startIndex = start.head - line.from, spanI = -1;
  if (startIndex == 0) {
    if (!forward || !line.length)
      return null;
    if (order[0].level != dir) {
      startIndex = order[0].side(false, dir);
      spanI = 0;
    }
  } else if (startIndex == line.length) {
    if (forward)
      return null;
    let last2 = order[order.length - 1];
    if (last2.level != dir) {
      startIndex = last2.side(true, dir);
      spanI = order.length - 1;
    }
  }
  if (spanI < 0)
    spanI = BidiSpan.find(order, startIndex, (_a2 = start.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start.assoc);
  let span = order[spanI];
  if (startIndex == span.side(forward, dir)) {
    span = order[spanI += forward ? 1 : -1];
    startIndex = span.side(!forward, dir);
  }
  let indexForward = forward == (span.dir == dir);
  let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  if (nextIndex != span.side(forward, dir))
    return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (!nextSpan && span.level != dir)
    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
  if (nextSpan && nextSpan.level < span.level)
    return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
}
const LineBreakPlaceholder = "￿";
class DOMReader {
  constructor(points, state) {
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(EditorState.lineSeparator);
  }
  append(text) {
    this.text += text;
  }
  lineBreak() {
    this.text += LineBreakPlaceholder;
  }
  readRange(start, end) {
    if (!start)
      return this;
    let parent = start.parentNode;
    for (let cur = start; ; ) {
      this.findPointBefore(parent, cur);
      let oldLen = this.text.length;
      this.readNode(cur);
      let next = cur.nextSibling;
      if (next == end)
        break;
      let view = ContentView.get(cur), nextView = ContentView.get(next);
      if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen)
        this.lineBreak();
      cur = next;
    }
    this.findPointBefore(parent, end);
    return this;
  }
  readTextNode(node) {
    let text = node.nodeValue;
    for (let point of this.points)
      if (point.node == node)
        point.pos = this.text.length + Math.min(point.offset, text.length);
    for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let nextBreak = -1, breakSize = 1, m2;
      if (this.lineSeparator) {
        nextBreak = text.indexOf(this.lineSeparator, off);
        breakSize = this.lineSeparator.length;
      } else if (m2 = re.exec(text)) {
        nextBreak = m2.index;
        breakSize = m2[0].length;
      }
      this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
      if (nextBreak < 0)
        break;
      this.lineBreak();
      if (breakSize > 1) {
        for (let point of this.points)
          if (point.node == node && point.pos > this.text.length)
            point.pos -= breakSize - 1;
      }
      off = nextBreak + breakSize;
    }
  }
  readNode(node) {
    if (node.cmIgnore)
      return;
    let view = ContentView.get(node);
    let fromView = view && view.overrideDOMText;
    if (fromView != null) {
      this.findPointInside(node, fromView.length);
      for (let i = fromView.iter(); !i.next().done; ) {
        if (i.lineBreak)
          this.lineBreak();
        else
          this.append(i.value);
      }
    } else if (node.nodeType == 3) {
      this.readTextNode(node);
    } else if (node.nodeName == "BR") {
      if (node.nextSibling)
        this.lineBreak();
    } else if (node.nodeType == 1) {
      this.readRange(node.firstChild, null);
    }
  }
  findPointBefore(node, next) {
    for (let point of this.points)
      if (point.node == node && node.childNodes[point.offset] == next)
        point.pos = this.text.length;
  }
  findPointInside(node, maxLen) {
    for (let point of this.points)
      if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
        point.pos = this.text.length + Math.min(maxLen, point.offset);
  }
}
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
class DOMPoint {
  constructor(node, offset) {
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  }
}
class DocView extends ContentView {
  constructor(view) {
    super();
    this.view = view;
    this.compositionDeco = Decoration.none;
    this.decorations = [];
    this.dynamicDecorationMap = [];
    this.minWidth = 0;
    this.minWidthFrom = 0;
    this.minWidthTo = 0;
    this.impreciseAnchor = null;
    this.impreciseHead = null;
    this.forceSelection = false;
    this.lastUpdate = Date.now();
    this.setDOM(view.contentDOM);
    this.children = [new LineView()];
    this.children[0].setParent(this);
    this.updateDeco();
    this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
  }
  get length() {
    return this.view.state.doc.length;
  }
  // Update the document view to a given state.
  update(update) {
    let changedRanges = update.changedRanges;
    if (this.minWidth > 0 && changedRanges.length) {
      if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
        this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
      } else {
        this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
        this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
      }
    }
    if (this.view.inputState.composing < 0)
      this.compositionDeco = Decoration.none;
    else if (update.transactions.length || this.dirty)
      this.compositionDeco = computeCompositionDeco(this.view, update.changes);
    if ((browser$2.ie || browser$2.chrome) && !this.compositionDeco.size && update && update.state.doc.lines != update.startState.doc.lines)
      this.forceSelection = true;
    let prevDeco = this.decorations, deco = this.updateDeco();
    let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
    changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
    if (this.dirty == 0 && changedRanges.length == 0) {
      return false;
    } else {
      this.updateInner(changedRanges, update.startState.doc.length);
      if (update.transactions.length)
        this.lastUpdate = Date.now();
      return true;
    }
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(changes, oldLength) {
    this.view.viewState.mustMeasureContent = true;
    this.updateChildren(changes, oldLength);
    let { observer } = this.view;
    observer.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight + "px";
      this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let track = browser$2.chrome || browser$2.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, track);
      this.dirty = 0;
      if (track && (track.written || observer.selectionRange.focusNode != track.node))
        this.forceSelection = true;
      this.dom.style.height = "";
    });
    let gaps = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
      for (let child of this.children)
        if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
          gaps.push(child.dom);
    }
    observer.updateGaps(gaps);
  }
  updateChildren(changes, oldLength) {
    let cursor = this.childCursor(oldLength);
    for (let i = changes.length - 1; ; i--) {
      let next = i >= 0 ? changes[i] : null;
      if (!next)
        break;
      let { fromA, toA, fromB, toB } = next;
      let { content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
      let { i: toI, off: toOff } = cursor.findPos(toA, 1);
      let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
      replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(mustRead = false, fromPointer = false) {
    if (mustRead || !this.view.observer.selectionRange.focusNode)
      this.view.observer.readSelectionRange();
    let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
    let selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
    if (!(focused || fromPointer || selectionNotFocus))
      return;
    let force = this.forceSelection;
    this.forceSelection = false;
    let main2 = this.view.state.selection.main;
    let anchor = this.domAtPos(main2.anchor);
    let head = main2.empty ? anchor : this.domAtPos(main2.head);
    if (browser$2.gecko && main2.empty && !this.compositionDeco.size && betweenUneditable(anchor)) {
      let dummy = document.createTextNode("");
      this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
      anchor = head = new DOMPos(dummy, 0);
      force = true;
    }
    let domSel = this.view.observer.selectionRange;
    if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
      this.view.observer.ignore(() => {
        if (browser$2.android && browser$2.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
          this.dom.blur();
          this.dom.focus({ preventScroll: true });
        }
        let rawSel = getSelection(this.view.root);
        if (!rawSel)
          ;
        else if (main2.empty) {
          if (browser$2.gecko) {
            let nextTo = nextToUneditable(anchor.node, anchor.offset);
            if (nextTo && nextTo != (1 | 2)) {
              let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 ? 1 : -1);
              if (text)
                anchor = new DOMPos(text, nextTo == 1 ? 0 : text.nodeValue.length);
            }
          }
          rawSel.collapse(anchor.node, anchor.offset);
          if (main2.bidiLevel != null && domSel.cursorBidiLevel != null)
            domSel.cursorBidiLevel = main2.bidiLevel;
        } else if (rawSel.extend) {
          rawSel.collapse(anchor.node, anchor.offset);
          try {
            rawSel.extend(head.node, head.offset);
          } catch (_) {
          }
        } else {
          let range2 = document.createRange();
          if (main2.anchor > main2.head)
            [anchor, head] = [head, anchor];
          range2.setEnd(head.node, head.offset);
          range2.setStart(anchor.node, anchor.offset);
          rawSel.removeAllRanges();
          rawSel.addRange(range2);
        }
        if (selectionNotFocus && this.view.root.activeElement == this.dom) {
          this.dom.blur();
          if (activeElt)
            activeElt.focus();
        }
      });
      this.view.observer.setSelectionRange(anchor, head);
    }
    this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
    this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
  }
  enforceCursorAssoc() {
    if (this.compositionDeco.size)
      return;
    let { view } = this, cursor = view.state.selection.main;
    let sel = getSelection(view.root);
    let { anchorNode, anchorOffset } = view.observer.selectionRange;
    if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
      return;
    let line = LineView.find(this, cursor.head);
    if (!line)
      return;
    let lineStart = line.posAtStart;
    if (cursor.head == lineStart || cursor.head == lineStart + line.length)
      return;
    let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
    if (!before || !after || before.bottom > after.top)
      return;
    let dom = this.domAtPos(cursor.head + cursor.assoc);
    sel.collapse(dom.node, dom.offset);
    sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
    view.observer.readSelectionRange();
    let newRange = view.observer.selectionRange;
    if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
      sel.collapse(anchorNode, anchorOffset);
  }
  nearest(dom) {
    for (let cur = dom; cur; ) {
      let domView = ContentView.get(cur);
      if (domView && domView.rootView == this)
        return domView;
      cur = cur.parentNode;
    }
    return null;
  }
  posFromDOM(node, offset) {
    let view = this.nearest(node);
    if (!view)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return view.localPosFromDOM(node, offset) + view.posAtStart;
  }
  domAtPos(pos) {
    let { i, off } = this.childCursor().findPos(pos, -1);
    for (; i < this.children.length - 1; ) {
      let child = this.children[i];
      if (off < child.length || child instanceof LineView)
        break;
      i++;
      off = 0;
    }
    return this.children[i].domAtPos(off);
  }
  coordsAt(pos, side) {
    for (let off = this.length, i = this.children.length - 1; ; i--) {
      let child = this.children[i], start = off - child.breakAfter - child.length;
      if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2))
        return child.coordsAt(pos - start, side);
      off = start;
    }
  }
  measureVisibleLineHeights(viewport) {
    let result = [], { from, to } = viewport;
    let contentWidth = this.view.contentDOM.clientWidth;
    let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
    let widest = -1, ltr = this.view.textDirection == Direction.LTR;
    for (let pos = 0, i = 0; i < this.children.length; i++) {
      let child = this.children[i], end = pos + child.length;
      if (end > to)
        break;
      if (pos >= from) {
        let childRect = child.dom.getBoundingClientRect();
        result.push(childRect.height);
        if (isWider) {
          let last2 = child.dom.lastChild;
          let rects = last2 ? clientRectsFor(last2) : [];
          if (rects.length) {
            let rect = rects[rects.length - 1];
            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
            if (width > widest) {
              widest = width;
              this.minWidth = contentWidth;
              this.minWidthFrom = pos;
              this.minWidthTo = end;
            }
          }
        }
      }
      pos = end + child.breakAfter;
    }
    return result;
  }
  textDirectionAt(pos) {
    let { i } = this.childPos(pos, 1);
    return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
  }
  measureTextSize() {
    for (let child of this.children) {
      if (child instanceof LineView) {
        let measure = child.measureTextSize();
        if (measure)
          return measure;
      }
    }
    let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
    dummy.className = "cm-line";
    dummy.style.width = "99999px";
    dummy.textContent = "abc def ghi jkl mno pqr stu";
    this.view.observer.ignore(() => {
      this.dom.appendChild(dummy);
      let rect = clientRectsFor(dummy.firstChild)[0];
      lineHeight = dummy.getBoundingClientRect().height;
      charWidth = rect ? rect.width / 27 : 7;
      textHeight = rect ? rect.height : lineHeight;
      dummy.remove();
    });
    return { lineHeight, charWidth, textHeight };
  }
  childCursor(pos = this.length) {
    let i = this.children.length;
    if (i)
      pos -= this.children[--i].length;
    return new ChildCursor(this.children, pos, i);
  }
  computeBlockGapDeco() {
    let deco = [], vs = this.view.viewState;
    for (let pos = 0, i = 0; ; i++) {
      let next = i == vs.viewports.length ? null : vs.viewports[i];
      let end = next ? next.from - 1 : this.length;
      if (end > pos) {
        let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
        deco.push(Decoration.replace({
          widget: new BlockGapWidget(height),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(pos, end));
      }
      if (!next)
        break;
      pos = next.to + 1;
    }
    return Decoration.set(deco);
  }
  updateDeco() {
    let allDeco = this.view.state.facet(decorations).map((d2, i) => {
      let dynamic = this.dynamicDecorationMap[i] = typeof d2 == "function";
      return dynamic ? d2(this.view) : d2;
    });
    for (let i = allDeco.length; i < allDeco.length + 3; i++)
      this.dynamicDecorationMap[i] = false;
    return this.decorations = [
      ...allDeco,
      this.compositionDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(target) {
    let { range: range2 } = target;
    let rect = this.coordsAt(range2.head, range2.empty ? range2.assoc : range2.head > range2.anchor ? -1 : 1), other;
    if (!rect)
      return;
    if (!range2.empty && (other = this.coordsAt(range2.anchor, range2.anchor > range2.head ? -1 : 1)))
      rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
    let margins = getScrollMargins(this.view);
    let targetRect = {
      left: rect.left - margins.left,
      top: rect.top - margins.top,
      right: rect.right + margins.right,
      bottom: rect.bottom + margins.bottom
    };
    scrollRectIntoView(this.view.scrollDOM, targetRect, range2.head < range2.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
  }
}
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
class BlockGapWidget extends WidgetType {
  constructor(height) {
    super();
    this.height = height;
  }
  toDOM() {
    let elt = document.createElement("div");
    this.updateDOM(elt);
    return elt;
  }
  eq(other) {
    return other.height == this.height;
  }
  updateDOM(elt) {
    elt.style.height = this.height + "px";
    return true;
  }
  get estimatedHeight() {
    return this.height;
  }
}
function compositionSurroundingNode(view) {
  let sel = view.observer.selectionRange;
  let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
  if (!textNode)
    return null;
  let cView = view.docView.nearest(textNode);
  if (!cView)
    return null;
  if (cView instanceof LineView) {
    let topNode = textNode;
    while (topNode.parentNode != cView.dom)
      topNode = topNode.parentNode;
    let prev = topNode.previousSibling;
    while (prev && !ContentView.get(prev))
      prev = prev.previousSibling;
    let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
    return { from: pos, to: pos, node: topNode, text: textNode };
  } else {
    for (; ; ) {
      let { parent } = cView;
      if (!parent)
        return null;
      if (parent instanceof LineView)
        break;
      cView = parent;
    }
    let from = cView.posAtStart;
    return { from, to: from + cView.length, node: cView.dom, text: textNode };
  }
}
function computeCompositionDeco(view, changes) {
  let surrounding = compositionSurroundingNode(view);
  if (!surrounding)
    return Decoration.none;
  let { from, to, node, text: textNode } = surrounding;
  let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
  let { state } = view, reader = new DOMReader([], state);
  if (node.nodeType == 3)
    reader.readTextNode(node);
  else
    reader.readRange(node.firstChild, null);
  let { text } = reader;
  if (text.indexOf(LineBreakPlaceholder) > -1)
    return Decoration.none;
  if (newTo - newFrom < text.length) {
    if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
      newTo = newFrom + text.length;
    else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo) == text)
      newFrom = newTo - text.length;
    else
      return Decoration.none;
  } else if (state.doc.sliceString(newFrom, newTo) != text) {
    return Decoration.none;
  }
  let topView = ContentView.get(node);
  if (topView instanceof CompositionView)
    topView = topView.widget.topView;
  else if (topView)
    topView.parent = null;
  return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true }).range(newFrom, newTo));
}
class CompositionWidget extends WidgetType {
  constructor(top2, text, topView) {
    super();
    this.top = top2;
    this.text = text;
    this.topView = topView;
  }
  eq(other) {
    return this.top == other.top && this.text == other.text;
  }
  toDOM() {
    return this.top;
  }
  ignoreEvent() {
    return false;
  }
  get customView() {
    return CompositionView;
  }
}
function nearbyTextNode(startNode, startOffset, side) {
  if (side <= 0)
    for (let node = startNode, offset = startOffset; ; ) {
      if (node.nodeType == 3)
        return node;
      if (node.nodeType == 1 && offset > 0) {
        node = node.childNodes[offset - 1];
        offset = maxOffset(node);
      } else {
        break;
      }
    }
  if (side >= 0)
    for (let node = startNode, offset = startOffset; ; ) {
      if (node.nodeType == 3)
        return node;
      if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
        node = node.childNodes[offset];
        offset = 0;
      } else {
        break;
      }
    }
  return null;
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1)
    return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
}
class DecorationComparator$1 {
  constructor() {
    this.changes = [];
  }
  compareRange(from, to) {
    addRange(from, to, this.changes);
  }
  comparePoint(from, to) {
    addRange(from, to, this.changes);
  }
}
function findChangedDeco(a2, b2, diff) {
  let comp = new DecorationComparator$1();
  RangeSet.compare(a2, b2, diff, comp);
  return comp.changes;
}
function inUneditable(node, inside2) {
  for (let cur = node; cur && cur != inside2; cur = cur.assignedSlot || cur.parentNode) {
    if (cur.nodeType == 1 && cur.contentEditable == "false") {
      return true;
    }
  }
  return false;
}
function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line = state.doc.lineAt(pos), linePos = pos - line.from;
  if (line.length == 0)
    return EditorSelection.cursor(pos);
  if (linePos == 0)
    bias = 1;
  else if (linePos == line.length)
    bias = -1;
  let from = linePos, to = linePos;
  if (bias < 0)
    from = findClusterBreak(line.text, linePos, false);
  else
    to = findClusterBreak(line.text, linePos);
  let cat = categorize(line.text.slice(from, to));
  while (from > 0) {
    let prev = findClusterBreak(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat)
      break;
    from = prev;
  }
  while (to < line.length) {
    let next = findClusterBreak(line.text, to);
    if (categorize(line.text.slice(to, next)) != cat)
      break;
    to = next;
  }
  return EditorSelection.range(from + line.from, to + line.from);
}
function getdx(x2, rect) {
  return rect.left > x2 ? rect.left - x2 : Math.max(0, x2 - rect.right);
}
function getdy(y2, rect) {
  return rect.top > y2 ? rect.top - y2 : Math.max(0, y2 - rect.bottom);
}
function yOverlap(a2, b2) {
  return a2.top < b2.bottom - 1 && a2.bottom > b2.top + 1;
}
function upTop(rect, top2) {
  return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
}
function domPosAtCoords(parent, x2, y2) {
  let closest, closestRect, closestX, closestY, closestOverlap = false;
  let above, below, aboveRect, belowRect;
  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect))
        rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      let dx = getdx(x2, rect), dy = getdy(y2, rect);
      if (dx == 0 && dy == 0)
        return child.nodeType == 3 ? domPosInText(child, x2, y2) : domPosAtCoords(child, x2, y2);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        let side = dy ? y2 < rect.top ? -1 : 1 : dx ? x2 < rect.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
      }
      if (dx == 0) {
        if (y2 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y2 < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y2) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y2) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest)
    return { node: parent, offset: 0 };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x2));
  if (closest.nodeType == 3)
    return domPosInText(closest, clipX, y2);
  if (closestOverlap && closest.contentEditable != "false")
    return domPosAtCoords(closest, clipX, y2);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x2 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return { node: parent, offset };
}
function domPosInText(node, x2, y2) {
  let len = node.nodeValue.length;
  let closestOffset = -1, closestDY = 1e9, generalSide = 0;
  for (let i = 0; i < len; i++) {
    let rects = textRange(node, i, i + 1).getClientRects();
    for (let j2 = 0; j2 < rects.length; j2++) {
      let rect = rects[j2];
      if (rect.top == rect.bottom)
        continue;
      if (!generalSide)
        generalSide = x2 - rect.left;
      let dy = (rect.top > y2 ? rect.top - y2 : y2 - rect.bottom) - 1;
      if (rect.left - 1 <= x2 && rect.right + 1 >= x2 && dy < closestDY) {
        let right = x2 >= (rect.left + rect.right) / 2, after = right;
        if (browser$2.chrome || browser$2.gecko) {
          let rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right)
            after = !right;
        }
        if (dy <= 0)
          return { node, offset: i + (after ? 1 : 0) };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
}
function posAtCoords(view, coords, precise, bias = -1) {
  var _a2, _b2;
  let content2 = view.contentDOM.getBoundingClientRect(), docTop = content2.top + view.viewState.paddingTop;
  let block, { docHeight } = view.viewState;
  let { x: x2, y: y2 } = coords, yOffset = y2 - docTop;
  if (yOffset < 0)
    return 0;
  if (yOffset > docHeight)
    return view.state.doc.length;
  for (let halfLine = view.defaultLineHeight / 2, bounced = false; ; ) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text)
      break;
    for (; ; ) {
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight)
        break;
      if (bounced)
        return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y2 = docTop + yOffset;
  let lineStart = block.from;
  if (lineStart < view.viewport.from)
    return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content2, block, x2, y2);
  if (lineStart > view.viewport.to)
    return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content2, block, x2, y2);
  let doc2 = view.dom.ownerDocument;
  let root = view.root.elementFromPoint ? view.root : doc2;
  let element = root.elementFromPoint(x2, y2);
  if (element && !view.contentDOM.contains(element))
    element = null;
  if (!element) {
    x2 = Math.max(content2.left + 1, Math.min(content2.right - 1, x2));
    element = root.elementFromPoint(x2, y2);
    if (element && !view.contentDOM.contains(element))
      element = null;
  }
  let node, offset = -1;
  if (element && ((_a2 = view.docView.nearest(element)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
    if (doc2.caretPositionFromPoint) {
      let pos = doc2.caretPositionFromPoint(x2, y2);
      if (pos)
        ({ offsetNode: node, offset } = pos);
    } else if (doc2.caretRangeFromPoint) {
      let range2 = doc2.caretRangeFromPoint(x2, y2);
      if (range2) {
        ({ startContainer: node, startOffset: offset } = range2);
        if (!view.contentDOM.contains(node) || browser$2.safari && isSuspiciousSafariCaretResult(node, offset, x2) || browser$2.chrome && isSuspiciousChromeCaretResult(node, offset, x2))
          node = void 0;
      }
    }
  }
  if (!node || !view.docView.dom.contains(node)) {
    let line = LineView.find(view.docView, lineStart);
    if (!line)
      return yOffset > block.top + block.height / 2 ? block.to : block.from;
    ({ node, offset } = domPosAtCoords(line.dom, x2, y2));
  }
  let nearest = view.docView.nearest(node);
  if (!nearest)
    return null;
  if (nearest.isWidget && ((_b2 = nearest.dom) === null || _b2 === void 0 ? void 0 : _b2.nodeType) == 1) {
    let rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block, x2, y2) {
  let into = Math.round((x2 - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    let line = Math.floor((y2 - block.top) / view.defaultLineHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  let content2 = view.state.sliceDoc(block.from, block.to);
  return block.from + findColumn(content2, into, view.state.tabSize);
}
function isSuspiciousSafariCaretResult(node, offset, x2) {
  let len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
    return false;
  for (let next = node.nextSibling; next; next = next.nextSibling)
    if (next.nodeType != 1 || next.nodeName != "BR")
      return false;
  return textRange(node, len - 1, len).getBoundingClientRect().left > x2;
}
function isSuspiciousChromeCaretResult(node, offset, x2) {
  if (offset != 0)
    return false;
  for (let cur = node; ; ) {
    let parent = cur.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
      return false;
    if (parent.classList.contains("cm-line"))
      break;
    cur = parent;
  }
  let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x2 - rect.left > 5;
}
function blockAt(view, pos) {
  let line = view.lineBlockAt(pos);
  if (Array.isArray(line.type))
    for (let l2 of line.type) {
      if (l2.to > pos || l2.to == pos && (l2.to == line.to || l2.type == BlockType.Text))
        return l2;
    }
  return line;
}
function moveToLineBoundary(view, start, forward, includeWrap) {
  let line = blockAt(view, start.head);
  let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
  if (coords) {
    let editorRect = view.dom.getBoundingClientRect();
    let direction = view.textDirectionAt(line.from);
    let pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null)
      return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
}
function moveByChar(view, start, forward, by) {
  let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
  let direction = view.textDirectionAt(line.from);
  for (let cur = start, check = null; ; ) {
    let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1))
        return cur;
      char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = EditorSelection.cursor(forward ? line.from : line.to);
    }
    if (!check) {
      if (!by)
        return next;
      check = by(char);
    } else if (!check(char)) {
      return cur;
    }
    cur = next;
  }
}
function byGroup(view, pos, start) {
  let categorize = view.state.charCategorizer(pos);
  let cat = categorize(start);
  return (next) => {
    let nextCat = categorize(next);
    if (cat == CharCategory.Space)
      cat = nextCat;
    return cat == nextCat;
  };
}
function moveVertically(view, start, forward, distance) {
  let startPos = start.head, dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0))
    return EditorSelection.cursor(startPos, start.assoc);
  let goal = start.goalColumn, startY;
  let rect = view.contentDOM.getBoundingClientRect();
  let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
  if (startCoords) {
    if (goal == null)
      goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line = view.viewState.lineBlockAt(startPos);
    if (goal == null)
      goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }
  let resolvedGoal = rect.left + goal;
  let dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
  for (let extra = 0; ; extra += 10) {
    let curY = startY + (dist + extra) * dir;
    let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
      return EditorSelection.cursor(pos, start.assoc, void 0, goal);
  }
}
function skipAtomicRanges(atoms, pos, bias) {
  for (; ; ) {
    let moved = 0;
    for (let set of atoms) {
      set.between(pos - 1, pos + 1, (from, to, value) => {
        if (pos > from && pos < to) {
          let side = moved || bias || (pos - from < to - pos ? -1 : 1);
          pos = side < 0 ? from : to;
          moved = side;
        }
      });
    }
    if (!moved)
      return pos;
  }
}
function skipAtoms(view, oldPos, pos) {
  let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f2) => f2(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}
class InputState {
  constructor(view) {
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.chromeScrollHack = -1;
    this.pendingIOSKey = void 0;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastEscPress = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.registeredEvents = [];
    this.customHandlers = [];
    this.composing = -1;
    this.compositionFirstChange = null;
    this.compositionEndedAt = 0;
    this.compositionPendingKey = false;
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    let handleEvent = (handler, event) => {
      if (this.ignoreDuringComposition(event))
        return;
      if (event.type == "keydown" && this.keydown(view, event))
        return;
      if (this.mustFlushObserver(event))
        view.observer.forceFlush();
      if (this.runCustomHandlers(event.type, view, event))
        event.preventDefault();
      else
        handler(view, event);
    };
    for (let type in handlers) {
      let handler = handlers[type];
      view.contentDOM.addEventListener(type, (event) => {
        if (eventBelongsToEditor(view, event))
          handleEvent(handler, event);
      }, handlerOptions[type]);
      this.registeredEvents.push(type);
    }
    view.scrollDOM.addEventListener("mousedown", (event) => {
      if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
        handleEvent(handlers.mousedown, event);
        if (!event.defaultPrevented && event.button == 2) {
          let start = view.contentDOM.style.minHeight;
          view.contentDOM.style.minHeight = "100%";
          setTimeout(() => view.contentDOM.style.minHeight = start, 200);
        }
      }
    });
    view.scrollDOM.addEventListener("drop", (event) => {
      if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom)
        handleEvent(handlers.drop, event);
    });
    if (browser$2.chrome && browser$2.chrome_version == 102) {
      view.scrollDOM.addEventListener("wheel", () => {
        if (this.chromeScrollHack < 0)
          view.contentDOM.style.pointerEvents = "none";
        else
          window.clearTimeout(this.chromeScrollHack);
        this.chromeScrollHack = setTimeout(() => {
          this.chromeScrollHack = -1;
          view.contentDOM.style.pointerEvents = "";
        }, 100);
      }, { passive: true });
    }
    this.notifiedFocused = view.hasFocus;
    if (browser$2.safari)
      view.contentDOM.addEventListener("input", () => null);
  }
  setSelectionOrigin(origin) {
    this.lastSelectionOrigin = origin;
    this.lastSelectionTime = Date.now();
  }
  ensureHandlers(view, plugins) {
    var _a2;
    let handlers2;
    this.customHandlers = [];
    for (let plugin of plugins)
      if (handlers2 = (_a2 = plugin.update(view).spec) === null || _a2 === void 0 ? void 0 : _a2.domEventHandlers) {
        this.customHandlers.push({ plugin: plugin.value, handlers: handlers2 });
        for (let type in handlers2)
          if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
            this.registeredEvents.push(type);
            view.contentDOM.addEventListener(type, (event) => {
              if (!eventBelongsToEditor(view, event))
                return;
              if (this.runCustomHandlers(type, view, event))
                event.preventDefault();
            });
          }
      }
  }
  runCustomHandlers(type, view, event) {
    for (let set of this.customHandlers) {
      let handler = set.handlers[type];
      if (handler) {
        try {
          if (handler.call(set.plugin, event, view) || event.defaultPrevented)
            return true;
        } catch (e) {
          logException(view.state, e);
        }
      }
    }
    return false;
  }
  runScrollHandlers(view, event) {
    this.lastScrollTop = view.scrollDOM.scrollTop;
    this.lastScrollLeft = view.scrollDOM.scrollLeft;
    for (let set of this.customHandlers) {
      let handler = set.handlers.scroll;
      if (handler) {
        try {
          handler.call(set.plugin, event, view);
        } catch (e) {
          logException(view.state, e);
        }
      }
    }
  }
  keydown(view, event) {
    this.lastKeyCode = event.keyCode;
    this.lastKeyTime = Date.now();
    if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return true;
    if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
      view.inputState.lastEscPress = 0;
    if (browser$2.android && browser$2.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
      view.observer.delayAndroidKey(event.key, event.keyCode);
      return true;
    }
    let pending;
    if (browser$2.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
      this.pendingIOSKey = pending || event;
      setTimeout(() => this.flushIOSKey(view), 250);
      return true;
    }
    return false;
  }
  flushIOSKey(view) {
    let key = this.pendingIOSKey;
    if (!key)
      return false;
    this.pendingIOSKey = void 0;
    return dispatchKey(view.contentDOM, key.key, key.keyCode);
  }
  ignoreDuringComposition(event) {
    if (!/^key/.test(event.type))
      return false;
    if (this.composing > 0)
      return true;
    if (browser$2.safari && !browser$2.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
      this.compositionPendingKey = false;
      return true;
    }
    return false;
  }
  mustFlushObserver(event) {
    return event.type == "keydown" && event.keyCode != 229;
  }
  startMouseSelection(mouseSelection) {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
    this.mouseSelection = mouseSelection;
  }
  update(update) {
    if (this.mouseSelection)
      this.mouseSelection.update(update);
    if (update.transactions.length)
      this.lastKeyCode = this.lastSelectionTime = 0;
  }
  destroy() {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
  }
}
const PendingKeys = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
];
const EmacsyPendingKeys = "dthko";
const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
const dragScrollMargin = 6;
function dragScrollSpeed(dist) {
  return Math.max(0, dist) * 0.7 + 8;
}
class MouseSelection {
  constructor(view, startEvent, style, mustSelect) {
    this.view = view;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = { x: 0, y: 0 };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParent = scrollableParent(view.contentDOM);
    this.atoms = view.state.facet(atomicRanges).map((f2) => f2(view));
    let doc2 = view.contentDOM.ownerDocument;
    doc2.addEventListener("mousemove", this.move = this.move.bind(this));
    doc2.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragMove = dragMovesSelection(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  start(event) {
    if (this.dragging === false) {
      event.preventDefault();
      this.select(event);
    }
  }
  move(event) {
    var _a2;
    if (event.buttons == 0)
      return this.destroy();
    if (this.dragging !== false)
      return;
    this.select(this.lastEvent = event);
    let sx = 0, sy = 0;
    let rect = ((_a2 = this.scrollParent) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
    let margins = getScrollMargins(this.view);
    if (event.clientX - margins.left <= rect.left + dragScrollMargin)
      sx = -dragScrollSpeed(rect.left - event.clientX);
    else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
      sx = dragScrollSpeed(event.clientX - rect.right);
    if (event.clientY - margins.top <= rect.top + dragScrollMargin)
      sy = -dragScrollSpeed(rect.top - event.clientY);
    else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
      sy = dragScrollSpeed(event.clientY - rect.bottom);
    this.setScrollSpeed(sx, sy);
  }
  up(event) {
    if (this.dragging == null)
      this.select(this.lastEvent);
    if (!this.dragging)
      event.preventDefault();
    this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let doc2 = this.view.contentDOM.ownerDocument;
    doc2.removeEventListener("mousemove", this.move);
    doc2.removeEventListener("mouseup", this.up);
    this.view.inputState.mouseSelection = null;
  }
  setScrollSpeed(sx, sy) {
    this.scrollSpeed = { x: sx, y: sy };
    if (sx || sy) {
      if (this.scrolling < 0)
        this.scrolling = setInterval(() => this.scroll(), 50);
    } else if (this.scrolling > -1) {
      clearInterval(this.scrolling);
      this.scrolling = -1;
    }
  }
  scroll() {
    if (this.scrollParent) {
      this.scrollParent.scrollLeft += this.scrollSpeed.x;
      this.scrollParent.scrollTop += this.scrollSpeed.y;
    } else {
      this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
    }
    if (this.dragging === false)
      this.select(this.lastEvent);
  }
  skipAtoms(sel) {
    let ranges = null;
    for (let i = 0; i < sel.ranges.length; i++) {
      let range2 = sel.ranges[i], updated = null;
      if (range2.empty) {
        let pos = skipAtomicRanges(this.atoms, range2.from, 0);
        if (pos != range2.from)
          updated = EditorSelection.cursor(pos, -1);
      } else {
        let from = skipAtomicRanges(this.atoms, range2.from, -1);
        let to = skipAtomicRanges(this.atoms, range2.to, 1);
        if (from != range2.from || to != range2.to)
          updated = EditorSelection.range(range2.from == range2.anchor ? from : to, range2.from == range2.head ? from : to);
      }
      if (updated) {
        if (!ranges)
          ranges = sel.ranges.slice();
        ranges[i] = updated;
      }
    }
    return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
  }
  select(event) {
    let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
    if (this.mustSelect || !selection.eq(view.state.selection) || selection.main.assoc != view.state.selection.main.assoc)
      this.view.dispatch({
        selection,
        userEvent: "select.pointer"
      });
    this.mustSelect = false;
  }
  update(update) {
    if (update.docChanged && this.dragging)
      this.dragging = this.dragging.map(update.changes);
    if (this.style.update(update))
      setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function addsSelectionRange(view, event) {
  let facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser$2.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  let facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser$2.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  let { main: main2 } = view.state.selection;
  if (main2.empty)
    return false;
  let sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0)
    return true;
  let rects = sel.getRangeAt(0).getClientRects();
  for (let i = 0; i < rects.length; i++) {
    let rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
      return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
    if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
      return false;
  return true;
}
const handlers = /* @__PURE__ */ Object.create(null);
const handlerOptions = /* @__PURE__ */ Object.create(null);
const brokenClipboardAPI = browser$2.ie && browser$2.ie_version < 15 || browser$2.ios && browser$2.webkit_version < 604;
function capturePaste(view) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function doPaste(view, input) {
  let { state } = view, changes, i = 1, text = state.toText(input);
  let byLine = text.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text.toString();
  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange((range2) => {
      let line = state.doc.lineAt(range2.from);
      if (line.from == lastLine)
        return { range: range2 };
      lastLine = line.from;
      let insert2 = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: { from: line.from, insert: insert2 },
        range: EditorSelection.cursor(range2.from + insert2.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange((range2) => {
      let line = text.line(i++);
      return {
        changes: { from: range2.from, to: range2.to, insert: line.text },
        range: EditorSelection.cursor(range2.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
handlers.keydown = (view, event) => {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27)
    view.inputState.lastEscPress = Date.now();
};
handlers.touchstart = (view, e) => {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};
handlers.touchmove = (view) => {
  view.inputState.setSelectionOrigin("select.pointer");
};
handlerOptions.touchstart = handlerOptions.touchmove = { passive: true };
handlers.mousedown = (view, event) => {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2e3)
    return;
  let style = null;
  for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
    style = makeStyle(view, event);
    if (style)
      break;
  }
  if (!style && event.button == 0)
    style = basicMouseSelection(view, event);
  if (style) {
    let mustFocus = view.root.activeElement != view.contentDOM;
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    if (mustFocus)
      view.observer.ignore(() => focusPreventScroll(view.contentDOM));
    if (view.inputState.mouseSelection)
      view.inputState.mouseSelection.start(event);
  }
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    return EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    return groupAt(view.state, pos, bias);
  } else {
    let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to)
      to++;
    return EditorSelection.range(from, to);
  }
}
let insideY = (y2, rect) => y2 >= rect.top && y2 <= rect.bottom;
let inside = (x2, y2, rect) => insideY(y2, rect) && x2 >= rect.left && x2 <= rect.right;
function findPositionSide(view, pos, x2, y2) {
  let line = LineView.find(view.docView, pos);
  if (!line)
    return 1;
  let off = pos - line.posAtStart;
  if (off == 0)
    return 1;
  if (off == line.length)
    return -1;
  let before = line.coordsAt(off, -1);
  if (before && inside(x2, y2, before))
    return -1;
  let after = line.coordsAt(off, 1);
  if (after && inside(x2, y2, after))
    return 1;
  return before && insideY(y2, before) ? -1 : 1;
}
function queryPos(view, event) {
  let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
}
const BadMouseDetail = browser$2.ie && browser$2.ie_version <= 11;
let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail)
    return event.detail;
  let last2 = lastMouseDown, lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last2 || lastTime > Date.now() - 400 && Math.abs(last2.clientX - event.clientX) < 2 && Math.abs(last2.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  let start = queryPos(view, event), type = getClickType(event);
  let startSel = view.state.selection;
  return {
    update(update) {
      if (update.docChanged) {
        start.pos = update.changes.mapPos(start.pos);
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, extend2, multiple) {
      let cur = queryPos(view, event2), removed;
      let range2 = rangeForClick(view, cur.pos, cur.bias, type);
      if (start.pos != cur.pos && !extend2) {
        let startRange = rangeForClick(view, start.pos, start.bias, type);
        let from = Math.min(startRange.from, range2.from), to = Math.max(startRange.to, range2.to);
        range2 = from < range2.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
      }
      if (extend2)
        return startSel.replaceRange(startSel.main.extend(range2.from, range2.to));
      else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
        return removed;
      else if (multiple)
        return startSel.addRange(range2);
      else
        return EditorSelection.create([range2]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (let i = 0; i < sel.ranges.length; i++) {
    let { from, to } = sel.ranges[i];
    if (from <= pos && to >= pos)
      return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
  return null;
}
handlers.dragstart = (view, event) => {
  let { selection: { main: main2 } } = view.state;
  let { mouseSelection } = view.inputState;
  if (mouseSelection)
    mouseSelection.dragging = main2;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(main2.from, main2.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
};
function dropText(view, event, text, direct) {
  if (!text)
    return;
  let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  event.preventDefault();
  let { mouseSelection } = view.inputState;
  let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
  let ins = { from: dropPos, insert: text };
  let changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes,
    selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
    userEvent: del ? "move.drop" : "input.drop"
  });
}
handlers.drop = (view, event) => {
  if (!event.dataTransfer)
    return;
  if (view.state.readOnly)
    return event.preventDefault();
  let files = event.dataTransfer.files;
  if (files && files.length) {
    event.preventDefault();
    let text = Array(files.length), read = 0;
    let finishFile = () => {
      if (++read == files.length)
        dropText(view, event, text.filter((s2) => s2 != null).join(view.state.lineBreak), false);
    };
    for (let i = 0; i < files.length; i++) {
      let reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = () => {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
          text[i] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i]);
    }
  } else {
    dropText(view, event, event.dataTransfer.getData("Text"), true);
  }
};
handlers.paste = (view, event) => {
  if (view.state.readOnly)
    return event.preventDefault();
  view.observer.flush();
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
    event.preventDefault();
  } else {
    capturePaste(view);
  }
};
function captureCopy(view, text) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  let content2 = [], ranges = [], linewise = false;
  for (let range2 of state.selection.ranges)
    if (!range2.empty) {
      content2.push(state.sliceDoc(range2.from, range2.to));
      ranges.push(range2);
    }
  if (!content2.length) {
    let upto = -1;
    for (let { from } of state.selection.ranges) {
      let line = state.doc.lineAt(from);
      if (line.number > upto) {
        content2.push(line.text);
        ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
      }
      upto = line.number;
    }
    linewise = true;
  }
  return { text: content2.join(state.lineBreak), ranges, linewise };
}
let lastLinewiseCopy = null;
handlers.copy = handlers.cut = (view, event) => {
  let { text, ranges, linewise } = copiedRange(view.state);
  if (!text && !linewise)
    return;
  lastLinewiseCopy = linewise ? text : null;
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/plain", text);
  } else {
    captureCopy(view, text);
  }
  if (event.type == "cut" && !view.state.readOnly)
    view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
};
const isFocusChange = /* @__PURE__ */ Annotation.define();
function focusChangeTransaction(state, focus) {
  let effects = [];
  for (let getEffect of state.facet(focusChangeEffect)) {
    let effect = getEffect(state, focus);
    if (effect)
      effects.push(effect);
  }
  return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
}
function updateForFocusChange(view) {
  setTimeout(() => {
    let focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      let tr = focusChangeTransaction(view.state, focus);
      if (tr)
        view.dispatch(tr);
      else
        view.update([]);
    }
  }, 10);
}
handlers.focus = (view) => {
  view.inputState.lastFocusTime = Date.now();
  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }
  updateForFocusChange(view);
};
handlers.blur = (view) => {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};
handlers.compositionstart = handlers.compositionupdate = (view) => {
  if (view.inputState.compositionFirstChange == null)
    view.inputState.compositionFirstChange = true;
  if (view.inputState.composing < 0) {
    view.inputState.composing = 0;
  }
};
handlers.compositionend = (view) => {
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionPendingKey = true;
  view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
  view.inputState.compositionFirstChange = null;
  if (browser$2.chrome && browser$2.android) {
    view.observer.flushSoon();
  } else if (view.inputState.compositionPendingChange) {
    Promise.resolve().then(() => view.observer.flush());
  } else {
    setTimeout(() => {
      if (view.inputState.composing < 0 && view.docView.compositionDeco.size)
        view.update([]);
    }, 50);
  }
};
handlers.contextmenu = (view) => {
  view.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = (view, event) => {
  var _a2;
  let pending;
  if (browser$2.chrome && browser$2.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      let startViewHeight = ((_a2 = window.visualViewport) === null || _a2 === void 0 ? void 0 : _a2.height) || 0;
      setTimeout(() => {
        var _a3;
        if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
};
const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class HeightOracle {
  constructor(lineWrapping) {
    this.lineWrapping = lineWrapping;
    this.doc = Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.textHeight = 14;
    this.lineLength = 30;
    this.heightChanged = false;
  }
  heightForGap(from, to) {
    let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
    if (this.lineWrapping)
      lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
    return this.lineHeight * lines;
  }
  heightForLine(length) {
    if (!this.lineWrapping)
      return this.lineHeight;
    let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
    return lines * this.lineHeight;
  }
  setDoc(doc2) {
    this.doc = doc2;
    return this;
  }
  mustRefreshForWrapping(whiteSpace) {
    return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(lineHeights) {
    let newHeight = false;
    for (let i = 0; i < lineHeights.length; i++) {
      let h2 = lineHeights[i];
      if (h2 < 0) {
        i++;
      } else if (!this.heightSamples[Math.floor(h2 * 10)]) {
        newHeight = true;
        this.heightSamples[Math.floor(h2 * 10)] = true;
      }
    }
    return newHeight;
  }
  refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
    let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
    let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
    this.lineWrapping = lineWrapping;
    this.lineHeight = lineHeight;
    this.charWidth = charWidth;
    this.textHeight = textHeight;
    this.lineLength = lineLength;
    if (changed) {
      this.heightSamples = {};
      for (let i = 0; i < knownHeights.length; i++) {
        let h2 = knownHeights[i];
        if (h2 < 0)
          i++;
        else
          this.heightSamples[Math.floor(h2 * 10)] = true;
      }
    }
    return changed;
  }
}
class MeasuredHeights {
  constructor(from, heights) {
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class BlockInfo {
  /**
  @internal
  */
  constructor(from, length, top2, height, _content) {
    this.from = from;
    this.length = length;
    this.top = top2;
    this.height = height;
    this._content = _content;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof PointDecoration ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(other) {
    let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
    return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
  }
}
var QueryType = /* @__PURE__ */ function(QueryType2) {
  QueryType2[QueryType2["ByPos"] = 0] = "ByPos";
  QueryType2[QueryType2["ByHeight"] = 1] = "ByHeight";
  QueryType2[QueryType2["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType2;
}(QueryType || (QueryType = {}));
const Epsilon = 1e-3;
class HeightMap {
  constructor(length, height, flags = 2) {
    this.length = length;
    this.height = height;
    this.flags = flags;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(value) {
    this.flags = (value ? 2 : 0) | this.flags & ~2;
  }
  setHeight(oracle, height) {
    if (this.height != height) {
      if (Math.abs(this.height - height) > Epsilon)
        oracle.heightChanged = true;
      this.height = height;
    }
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(_from, _to, nodes) {
    return HeightMap.of(nodes);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(_to, result) {
    result.push(this);
  }
  decomposeRight(_from, result) {
    result.push(this);
  }
  applyChanges(decorations2, oldDoc, oracle, changes) {
    let me = this, doc2 = oracle.doc;
    for (let i = changes.length - 1; i >= 0; i--) {
      let { fromA, toA, fromB, toB } = changes[i];
      let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
      let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
      toB += end.to - toA;
      toA = end.to;
      while (i > 0 && start.from <= changes[i - 1].toA) {
        fromA = changes[i - 1].fromA;
        fromB = changes[i - 1].fromB;
        i--;
        if (fromA < start.from)
          start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
      }
      fromB += start.from - fromA;
      fromA = start.from;
      let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
      me = me.replace(fromA, toA, nodes);
    }
    return me.updateHeight(oracle, 0);
  }
  static empty() {
    return new HeightMapText(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(nodes) {
    if (nodes.length == 1)
      return nodes[0];
    let i = 0, j2 = nodes.length, before = 0, after = 0;
    for (; ; ) {
      if (i == j2) {
        if (before > after * 2) {
          let split = nodes[i - 1];
          if (split.break)
            nodes.splice(--i, 1, split.left, null, split.right);
          else
            nodes.splice(--i, 1, split.left, split.right);
          j2 += 1 + split.break;
          before -= split.size;
        } else if (after > before * 2) {
          let split = nodes[j2];
          if (split.break)
            nodes.splice(j2, 1, split.left, null, split.right);
          else
            nodes.splice(j2, 1, split.left, split.right);
          j2 += 2 + split.break;
          after -= split.size;
        } else {
          break;
        }
      } else if (before < after) {
        let next = nodes[i++];
        if (next)
          before += next.size;
      } else {
        let next = nodes[--j2];
        if (next)
          after += next.size;
      }
    }
    let brk = 0;
    if (nodes[i - 1] == null) {
      brk = 1;
      i--;
    } else if (nodes[i] == null) {
      brk = 1;
      j2++;
    }
    return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j2)));
  }
}
HeightMap.prototype.size = 1;
class HeightMapBlock extends HeightMap {
  constructor(length, height, deco) {
    super(length, height);
    this.deco = deco;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
  }
  lineAt(_value, _type, oracle, top2, offset) {
    return this.blockAt(0, oracle, top2, offset);
  }
  forEachLine(from, to, oracle, top2, offset, f2) {
    if (from <= offset + this.length && to >= offset)
      f2(this.blockAt(0, oracle, top2, offset));
  }
  updateHeight(oracle, offset = 0, _force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(oracle, measured.heights[measured.index++]);
    this.outdated = false;
    return this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class HeightMapText extends HeightMapBlock {
  constructor(length, height) {
    super(length, height, null);
    this.collapsed = 0;
    this.widgetHeight = 0;
    this.breaks = 0;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
  }
  replace(_from, _to, nodes) {
    let node = nodes[0];
    if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
      if (node instanceof HeightMapGap)
        node = new HeightMapText(node.length, this.height);
      else
        node.height = this.height;
      if (!this.outdated)
        node.outdated = false;
      return node;
    } else {
      return HeightMap.of(nodes);
    }
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(oracle, measured.heights[measured.index++]);
    else if (force || this.outdated)
      this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
    this.outdated = false;
    return this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class HeightMapGap extends HeightMap {
  constructor(length) {
    super(length, 0);
  }
  heightMetrics(oracle, offset) {
    let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
    let lines = lastLine - firstLine + 1;
    let perLine, perChar = 0;
    if (oracle.lineWrapping) {
      let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
      perLine = totalPerLine / lines;
      if (this.length > lines + 1)
        perChar = (this.height - totalPerLine) / (this.length - lines - 1);
    } else {
      perLine = this.height / lines;
    }
    return { firstLine, lastLine, perLine, perChar };
  }
  blockAt(height, oracle, top2, offset) {
    let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    if (oracle.lineWrapping) {
      let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length);
      let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
      let lineTop = Math.max(top2, height - lineHeight / 2);
      return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
    } else {
      let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
      let { from, length } = oracle.doc.line(firstLine + line);
      return new BlockInfo(from, length, top2 + perLine * line, perLine, 0);
    }
  }
  lineAt(value, type, oracle, top2, offset) {
    if (type == QueryType.ByHeight)
      return this.blockAt(value, oracle, top2, offset);
    if (type == QueryType.ByPosNoHeight) {
      let { from, to } = oracle.doc.lineAt(value);
      return new BlockInfo(from, to - from, 0, 0, 0);
    }
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
    let linesAbove = line.number - firstLine;
    let lineTop = top2 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
    return new BlockInfo(line.from, line.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
  }
  forEachLine(from, to, oracle, top2, offset, f2) {
    from = Math.max(from, offset);
    to = Math.min(to, offset + this.length);
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    for (let pos = from, lineTop = top2; pos <= to; ) {
      let line = oracle.doc.lineAt(pos);
      if (pos == from) {
        let linesAbove = line.number - firstLine;
        lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
      }
      let lineHeight = perLine + perChar * line.length;
      f2(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
      lineTop += lineHeight;
      pos = line.to + 1;
    }
  }
  replace(from, to, nodes) {
    let after = this.length - to;
    if (after > 0) {
      let last2 = nodes[nodes.length - 1];
      if (last2 instanceof HeightMapGap)
        nodes[nodes.length - 1] = new HeightMapGap(last2.length + after);
      else
        nodes.push(null, new HeightMapGap(after - 1));
    }
    if (from > 0) {
      let first2 = nodes[0];
      if (first2 instanceof HeightMapGap)
        nodes[0] = new HeightMapGap(from + first2.length);
      else
        nodes.unshift(new HeightMapGap(from - 1), null);
    }
    return HeightMap.of(nodes);
  }
  decomposeLeft(to, result) {
    result.push(new HeightMapGap(to - 1), null);
  }
  decomposeRight(from, result) {
    result.push(null, new HeightMapGap(this.length - from - 1));
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let end = offset + this.length;
    if (measured && measured.from <= offset + this.length && measured.more) {
      let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
      if (measured.from > offset)
        nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
      while (pos <= end && measured.more) {
        let len = oracle.doc.lineAt(pos).length;
        if (nodes.length)
          nodes.push(null);
        let height = measured.heights[measured.index++];
        if (singleHeight == -1)
          singleHeight = height;
        else if (Math.abs(height - singleHeight) >= Epsilon)
          singleHeight = -2;
        let line = new HeightMapText(len, height);
        line.outdated = false;
        nodes.push(line);
        pos += len + 1;
      }
      if (pos <= end)
        nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
      let result = HeightMap.of(nodes);
      if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
        oracle.heightChanged = true;
      return result;
    } else if (force || this.outdated) {
      this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
      this.outdated = false;
    }
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class HeightMapBranch extends HeightMap {
  constructor(left, brk, right) {
    super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
    this.left = left;
    this.right = right;
    this.size = left.size + right.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(height, oracle, top2, offset) {
    let mid = top2 + this.left.height;
    return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
  }
  lineAt(value, type, oracle, top2, offset) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
    let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
    if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
      return base2;
    let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
    if (left)
      return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
    else
      return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
  }
  forEachLine(from, to, oracle, top2, offset, f2) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    if (this.break) {
      if (from < rightOffset)
        this.left.forEachLine(from, to, oracle, top2, offset, f2);
      if (to >= rightOffset)
        this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f2);
    } else {
      let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
      if (from < mid.from)
        this.left.forEachLine(from, mid.from - 1, oracle, top2, offset, f2);
      if (mid.to >= from && mid.from <= to)
        f2(mid);
      if (to > mid.to)
        this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f2);
    }
  }
  replace(from, to, nodes) {
    let rightStart = this.left.length + this.break;
    if (to < rightStart)
      return this.balanced(this.left.replace(from, to, nodes), this.right);
    if (from > this.left.length)
      return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
    let result = [];
    if (from > 0)
      this.decomposeLeft(from, result);
    let left = result.length;
    for (let node of nodes)
      result.push(node);
    if (from > 0)
      mergeGaps(result, left - 1);
    if (to < this.length) {
      let right = result.length;
      this.decomposeRight(to, result);
      mergeGaps(result, right);
    }
    return HeightMap.of(result);
  }
  decomposeLeft(to, result) {
    let left = this.left.length;
    if (to <= left)
      return this.left.decomposeLeft(to, result);
    result.push(this.left);
    if (this.break) {
      left++;
      if (to >= left)
        result.push(null);
    }
    if (to > left)
      this.right.decomposeLeft(to - left, result);
  }
  decomposeRight(from, result) {
    let left = this.left.length, right = left + this.break;
    if (from >= right)
      return this.right.decomposeRight(from - right, result);
    if (from < left)
      this.left.decomposeRight(from, result);
    if (this.break && from < right)
      result.push(null);
    result.push(this.right);
  }
  balanced(left, right) {
    if (left.size > 2 * right.size || right.size > 2 * left.size)
      return HeightMap.of(this.break ? [left, null, right] : [left, right]);
    this.left = left;
    this.right = right;
    this.height = left.height + right.height;
    this.outdated = left.outdated || right.outdated;
    this.size = left.size + right.size;
    this.length = left.length + this.break + right.length;
    return this;
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
    if (measured && measured.from <= offset + left.length && measured.more)
      rebalance = left = left.updateHeight(oracle, offset, force, measured);
    else
      left.updateHeight(oracle, offset, force);
    if (measured && measured.from <= rightStart + right.length && measured.more)
      rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
    else
      right.updateHeight(oracle, rightStart, force);
    if (rebalance)
      return this.balanced(left, right);
    this.height = this.left.height + this.right.height;
    this.outdated = false;
    return this;
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
    nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
const relevantWidgetHeight = 5;
class NodeBuilder {
  constructor(pos, oracle) {
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(_from, to) {
    if (this.lineStart > -1) {
      let end = Math.min(to, this.lineEnd), last2 = this.nodes[this.nodes.length - 1];
      if (last2 instanceof HeightMapText)
        last2.length += end - this.pos;
      else if (end > this.pos || !this.isCovered)
        this.nodes.push(new HeightMapText(end - this.pos, -1));
      this.writtenTo = end;
      if (to > end) {
        this.nodes.push(null);
        this.writtenTo++;
        this.lineStart = -1;
      }
    }
    this.pos = to;
  }
  point(from, to, deco) {
    if (from < to || deco.heightRelevant) {
      let height = deco.widget ? deco.widget.estimatedHeight : 0;
      let breaks = deco.widget ? deco.widget.lineBreaks : 0;
      if (height < 0)
        height = this.oracle.lineHeight;
      let len = to - from;
      if (deco.block) {
        this.addBlock(new HeightMapBlock(len, height, deco));
      } else if (len || breaks || height >= relevantWidgetHeight) {
        this.addLineDeco(height, breaks, len);
      }
    } else if (to > from) {
      this.span(from, to);
    }
    if (this.lineEnd > -1 && this.lineEnd < this.pos)
      this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from, to } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = from;
    this.lineEnd = to;
    if (this.writtenTo < from) {
      if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
        this.nodes.push(this.blankContent(this.writtenTo, from - 1));
      this.nodes.push(null);
    }
    if (this.pos > from)
      this.nodes.push(new HeightMapText(this.pos - from, -1));
    this.writtenTo = this.pos;
  }
  blankContent(from, to) {
    let gap = new HeightMapGap(to - from);
    if (this.oracle.doc.lineAt(from).to == to)
      gap.flags |= 4;
    return gap;
  }
  ensureLine() {
    this.enterLine();
    let last2 = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (last2 instanceof HeightMapText)
      return last2;
    let line = new HeightMapText(0, -1);
    this.nodes.push(line);
    return line;
  }
  addBlock(block) {
    var _a2;
    this.enterLine();
    let type = (_a2 = block.deco) === null || _a2 === void 0 ? void 0 : _a2.type;
    if (type == BlockType.WidgetAfter && !this.isCovered)
      this.ensureLine();
    this.nodes.push(block);
    this.writtenTo = this.pos = this.pos + block.length;
    if (type != BlockType.WidgetBefore)
      this.covering = block;
  }
  addLineDeco(height, breaks, length) {
    let line = this.ensureLine();
    line.length += length;
    line.collapsed += length;
    line.widgetHeight = Math.max(line.widgetHeight, height);
    line.breaks += breaks;
    this.writtenTo = this.pos = this.pos + length;
  }
  finish(from) {
    let last2 = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    if (this.lineStart > -1 && !(last2 instanceof HeightMapText) && !this.isCovered)
      this.nodes.push(new HeightMapText(0, -1));
    else if (this.writtenTo < this.pos || last2 == null)
      this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let pos = from;
    for (let node of this.nodes) {
      if (node instanceof HeightMapText)
        node.updateHeight(this.oracle, pos);
      pos += node ? node.length : 1;
    }
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(oracle, decorations2, from, to) {
    let builder = new NodeBuilder(from, oracle);
    RangeSet.spans(decorations2, from, to, builder, 0);
    return builder.finish(from);
  }
}
function heightRelevantDecoChanges(a2, b2, diff) {
  let comp = new DecorationComparator();
  RangeSet.compare(a2, b2, diff, comp, 0);
  return comp.changes;
}
class DecorationComparator {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(from, to, a2, b2) {
    if (from < to || a2 && a2.heightRelevant || b2 && b2.heightRelevant)
      addRange(from, to, this.changes, 5);
  }
}
function visiblePixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
  let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
  for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
    if (parent.nodeType == 1) {
      let elt = parent;
      let style = window.getComputedStyle(elt);
      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        let parentRect = elt.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top2 = Math.max(top2, parentRect.top);
        bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top2 - (rect.top + paddingTop),
    bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
  };
}
function fullPixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
class LineGap {
  constructor(from, to, size) {
    this.from = from;
    this.to = to;
    this.size = size;
  }
  static same(a2, b2) {
    if (a2.length != b2.length)
      return false;
    for (let i = 0; i < a2.length; i++) {
      let gA = a2[i], gB = b2[i];
      if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
        return false;
    }
    return true;
  }
  draw(wrapping) {
    return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
  }
}
class LineGapWidget extends WidgetType {
  constructor(size, vertical) {
    super();
    this.size = size;
    this.vertical = vertical;
  }
  eq(other) {
    return other.size == this.size && other.vertical == this.vertical;
  }
  toDOM() {
    let elt = document.createElement("div");
    if (this.vertical) {
      elt.style.height = this.size + "px";
    } else {
      elt.style.width = this.size + "px";
      elt.style.height = "2px";
      elt.style.display = "inline-block";
    }
    return elt;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class ViewState {
  constructor(state) {
    this.state = state;
    this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.scrollTop = 0;
    this.scrolledToBottom = true;
    this.scrollAnchorPos = 0;
    this.scrollAnchorHeight = -1;
    this.scaler = IdScaler;
    this.scrollTarget = null;
    this.printing = false;
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    this.mustEnforceCursorAssoc = false;
    let guessWrapping = state.facet(contentAttributes).some((v2) => typeof v2 != "function" && v2.class == "cm-lineWrapping");
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter((d2) => typeof d2 != "function");
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    this.viewport = this.getViewport(0, null);
    this.updateViewportLines();
    this.updateForViewport();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(false)));
    this.computeVisibleRanges();
  }
  updateForViewport() {
    let viewports = [this.viewport], { main: main2 } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let pos = i ? main2.head : main2.anchor;
      if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
        let { from, to } = this.lineBlockAt(pos);
        viewports.push(new Viewport(from, to));
      }
    }
    this.viewports = viewports.sort((a2, b2) => a2.from - b2.from);
    this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [];
    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
      this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
    });
  }
  update(update, scrollTarget = null) {
    this.state = update.state;
    let prevDeco = this.stateDeco;
    this.stateDeco = this.state.facet(decorations).filter((d2) => typeof d2 != "function");
    let contentChanges = update.changedRanges;
    let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
    let prevHeight = this.heightMap.height;
    let scrollAnchor = this.scrolledToBottom ? null : this.lineBlockAtHeight(this.scrollTop);
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
    if (this.heightMap.height != prevHeight)
      update.flags |= 2;
    if (scrollAnchor) {
      this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
      this.scrollAnchorHeight = scrollAnchor.top;
    } else {
      this.scrollAnchorPos = -1;
      this.scrollAnchorHeight = this.heightMap.height;
    }
    let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
    if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
      viewport = this.getViewport(0, scrollTarget);
    let updateLines = !update.changes.empty || update.flags & 2 || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
    this.viewport = viewport;
    this.updateForViewport();
    if (updateLines)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
    update.flags |= this.computeVisibleRanges();
    if (scrollTarget)
      this.scrollTarget = scrollTarget;
    if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
      this.mustEnforceCursorAssoc = true;
  }
  measure(view) {
    let dom = view.contentDOM, style = window.getComputedStyle(dom);
    let oracle = this.heightOracle;
    let whiteSpace = style.whiteSpace;
    this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
    let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
    let domRect = dom.getBoundingClientRect();
    let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
    this.contentDOMHeight = domRect.height;
    this.mustMeasureContent = false;
    let result = 0, bias = 0;
    let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
    if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
      this.paddingTop = paddingTop;
      this.paddingBottom = paddingBottom;
      result |= 8 | 2;
    }
    if (this.editorWidth != view.scrollDOM.clientWidth) {
      if (oracle.lineWrapping)
        measureContent = true;
      this.editorWidth = view.scrollDOM.clientWidth;
      result |= 8;
    }
    if (this.scrollTop != view.scrollDOM.scrollTop) {
      this.scrollAnchorHeight = -1;
      this.scrollTop = view.scrollDOM.scrollTop;
    }
    this.scrolledToBottom = this.scrollTop > view.scrollDOM.scrollHeight - view.scrollDOM.clientHeight - 4;
    let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
    let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
    this.pixelViewport = pixelViewport;
    let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (inView != this.inView) {
      this.inView = inView;
      if (inView)
        measureContent = true;
    }
    if (!this.inView && !this.scrollTarget)
      return 0;
    let contentWidth = domRect.width;
    if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
      this.contentDOMWidth = domRect.width;
      this.editorHeight = view.scrollDOM.clientHeight;
      result |= 8;
    }
    if (measureContent) {
      let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
      if (oracle.mustRefreshForHeights(lineHeights))
        refresh = true;
      if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
        let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
        refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
        if (refresh) {
          view.docView.minWidth = 0;
          result |= 8;
        }
      }
      if (dTop > 0 && dBottom > 0)
        bias = Math.max(dTop, dBottom);
      else if (dTop < 0 && dBottom < 0)
        bias = Math.min(dTop, dBottom);
      oracle.heightChanged = false;
      for (let vp of this.viewports) {
        let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
        this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
      }
      if (oracle.heightChanged)
        result |= 2;
    }
    let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    if (viewportChange)
      this.viewport = this.getViewport(bias, this.scrollTarget);
    this.updateForViewport();
    if (result & 2 || viewportChange)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
    result |= this.computeVisibleRanges();
    if (this.mustEnforceCursorAssoc) {
      this.mustEnforceCursorAssoc = false;
      view.docView.enforceCursorAssoc();
    }
    return result;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(bias, scrollTarget) {
    let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
    let map2 = this.heightMap, oracle = this.heightOracle;
    let { visibleTop, visibleBottom } = this;
    let viewport = new Viewport(map2.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map2.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
    if (scrollTarget) {
      let { head } = scrollTarget.range;
      if (head < viewport.from || head > viewport.to) {
        let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
        let block = map2.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
        if (scrollTarget.y == "center")
          topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
        else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
          topPos = block.top;
        else
          topPos = block.bottom - viewHeight;
        viewport = new Viewport(map2.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map2.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
      }
    }
    return viewport;
  }
  mapViewport(viewport, changes) {
    let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
    return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from, to }, bias = 0) {
    if (!this.inView)
      return true;
    let { top: top2 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
    let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
    let { visibleTop, visibleBottom } = this;
    return (from == 0 || top2 <= visibleTop - Math.max(10, Math.min(
      -bias,
      250
      /* MaxCoverMargin */
    ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
      bias,
      250
      /* MaxCoverMargin */
    ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
  }
  mapLineGaps(gaps, changes) {
    if (!gaps.length || changes.empty)
      return gaps;
    let mapped = [];
    for (let gap of gaps)
      if (!changes.touchesRange(gap.from, gap.to))
        mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
    return mapped;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(current, mayMeasure) {
    let wrapping = this.heightOracle.lineWrapping;
    let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
    if (this.defaultTextDirection != Direction.LTR && !wrapping)
      return [];
    let gaps = [];
    let addGap = (from, to, line, structure) => {
      if (to - from < halfMargin)
        return;
      let sel = this.state.selection.main, avoid = [sel.from];
      if (!sel.empty)
        avoid.push(sel.to);
      for (let pos of avoid) {
        if (pos > from && pos < to) {
          addGap(from, pos - 10, line, structure);
          addGap(pos + 10, to, line, structure);
          return;
        }
      }
      let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
      if (!gap) {
        if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to && r2.to >= to)) {
          let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
          if (lineStart > from)
            to = lineStart;
        }
        gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
      }
      gaps.push(gap);
    };
    for (let line of this.viewportLines) {
      if (line.length < doubleMargin)
        continue;
      let structure = lineStructure(line.from, line.to, this.stateDeco);
      if (structure.total < doubleMargin)
        continue;
      let target = this.scrollTarget ? this.scrollTarget.range.head : null;
      let viewFrom, viewTo;
      if (wrapping) {
        let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        let top2, bot;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
          top2 = targetFrac - spaceFrac;
          bot = targetFrac + spaceFrac;
        } else {
          top2 = (this.visibleTop - line.top - marginHeight) / line.height;
          bot = (this.visibleBottom - line.top + marginHeight) / line.height;
        }
        viewFrom = findPosition(structure, top2);
        viewTo = findPosition(structure, bot);
      } else {
        let totalWidth = structure.total * this.heightOracle.charWidth;
        let marginWidth = margin * this.heightOracle.charWidth;
        let left, right;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
          left = targetFrac - spaceFrac;
          right = targetFrac + spaceFrac;
        } else {
          left = (this.pixelViewport.left - marginWidth) / totalWidth;
          right = (this.pixelViewport.right + marginWidth) / totalWidth;
        }
        viewFrom = findPosition(structure, left);
        viewTo = findPosition(structure, right);
      }
      if (viewFrom > line.from)
        addGap(line.from, viewFrom, line, structure);
      if (viewTo < line.to)
        addGap(viewTo, line.to, line, structure);
    }
    return gaps;
  }
  gapSize(line, from, to, structure) {
    let fraction = findFraction(structure, to) - findFraction(structure, from);
    if (this.heightOracle.lineWrapping) {
      return line.height * fraction;
    } else {
      return structure.total * this.heightOracle.charWidth * fraction;
    }
  }
  updateLineGaps(gaps) {
    if (!LineGap.same(gaps, this.lineGaps)) {
      this.lineGaps = gaps;
      this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this.heightOracle.lineWrapping)));
    }
  }
  computeVisibleRanges() {
    let deco = this.stateDeco;
    if (this.lineGaps.length)
      deco = deco.concat(this.lineGapDeco);
    let ranges = [];
    RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
      span(from, to) {
        ranges.push({ from, to });
      },
      point() {
      }
    }, 20);
    let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r2, i) => r2.from != ranges[i].from || r2.to != ranges[i].to);
    this.visibleRanges = ranges;
    return changed ? 4 : 0;
  }
  lineBlockAt(pos) {
    return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b2) => b2.from <= pos && b2.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(height) {
    return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  elementAtHeight(height) {
    return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class Viewport {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }
}
function lineStructure(from, to, stateDeco) {
  let ranges = [], pos = from, total = 0;
  RangeSet.spans(stateDeco, from, to, {
    span() {
    },
    point(from2, to2) {
      if (from2 > pos) {
        ranges.push({ from: pos, to: from2 });
        total += from2 - pos;
      }
      pos = to2;
    }
  }, 20);
  if (pos < to) {
    ranges.push({ from: pos, to });
    total += to - pos;
  }
  return { total, ranges };
}
function findPosition({ total, ranges }, ratio) {
  if (ratio <= 0)
    return ranges[0].from;
  if (ratio >= 1)
    return ranges[ranges.length - 1].to;
  let dist = Math.floor(total * ratio);
  for (let i = 0; ; i++) {
    let { from, to } = ranges[i], size = to - from;
    if (dist <= size)
      return from + dist;
    dist -= size;
  }
}
function findFraction(structure, pos) {
  let counted = 0;
  for (let { from, to } of structure.ranges) {
    if (pos <= to) {
      counted += pos - from;
      break;
    }
    counted += to - from;
  }
  return counted / structure.total;
}
function find(array, f2) {
  for (let val of array)
    if (f2(val))
      return val;
  return void 0;
}
const IdScaler = {
  toDOM(n2) {
    return n2;
  },
  fromDOM(n2) {
    return n2;
  },
  scale: 1
};
class BigScaler {
  constructor(oracle, heightMap, viewports) {
    let vpHeight = 0, base2 = 0, domBase = 0;
    this.viewports = viewports.map(({ from, to }) => {
      let top2 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
      let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom - top2;
      return { from, to, top: top2, bottom, domTop: 0, domBottom: 0 };
    });
    this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
    for (let obj of this.viewports) {
      obj.domTop = domBase + (obj.top - base2) * this.scale;
      domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
      base2 = obj.bottom;
    }
  }
  toDOM(n2) {
    for (let i = 0, base2 = 0, domBase = 0; ; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n2 < vp.top)
        return domBase + (n2 - base2) * this.scale;
      if (n2 <= vp.bottom)
        return vp.domTop + (n2 - vp.top);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
  fromDOM(n2) {
    for (let i = 0, base2 = 0, domBase = 0; ; i++) {
      let vp = i < this.viewports.length ? this.viewports[i] : null;
      if (!vp || n2 < vp.domTop)
        return base2 + (n2 - domBase) / this.scale;
      if (n2 <= vp.domBottom)
        return vp.top + (n2 - vp.domTop);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
}
function scaleBlock(block, scaler) {
  if (scaler.scale == 1)
    return block;
  let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b2) => scaleBlock(b2, scaler)) : block._content);
}
const theme$2 = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
const darkTheme = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.indexOf(true) > -1 });
const baseThemeID = /* @__PURE__ */ StyleModule.newName(), baseLightID = /* @__PURE__ */ StyleModule.newName(), baseDarkID = /* @__PURE__ */ StyleModule.newName();
const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
function buildTheme(main2, spec, scopes) {
  return new StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, (m2) => {
        if (m2 == "&")
          return main2;
        if (!scopes || !scopes[m2])
          throw new RangeError(`Unsupported selector: ${m2}`);
        return scopes[m2];
      }) : main2 + " " + sel;
    }
  });
}
const baseTheme$1$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
class DOMChange {
  constructor(view, start, end, typeOver) {
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
    if (view.state.readOnly && start > -1) {
      this.newSel = null;
    } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
      let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
      let reader = new DOMReader(selPoints, view.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      let domSel = view.observer.selectionRange;
      let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      this.newSel = EditorSelection.single(anchor, head);
    }
  }
}
function applyDOMChange(view, domChange) {
  let change;
  let { newSel } = domChange, sel = view.state.selection.main;
  let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    let { from, to } = domChange.bounds;
    let preferredPos = sel.from, preferredSide = null;
    if (lastKey === 8 || browser$2.android && domChange.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
    if (diff) {
      if (browser$2.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
        diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel)
    return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if ((browser$2.mac || browser$2.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    if (newSel && change.insert.length == 2)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  } else if (browser$2.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    if (newSel)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  }
  if (change) {
    let startState = view.state;
    if (browser$2.ios && view.inputState.flushIOSKey(view))
      return true;
    if (browser$2.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
      return true;
    let text = change.insert.toString();
    if (view.state.facet(inputHandler$1).some((h2) => h2(view, change.from, change.to, text)))
      return true;
    if (view.inputState.composing >= 0)
      view.inputState.composing++;
    let tr;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
    } else {
      let changes = startState.changes(change);
      let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        let replaced = view.state.sliceDoc(change.from, change.to);
        let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
        let offset = sel.to - change.to, size = sel.to - sel.from;
        tr = startState.changeByRange((range2) => {
          if (range2.from == sel.from && range2.to == sel.to)
            return { changes, range: mainSel || range2.map(changes) };
          let to = range2.to - offset, from = to - replaced.length;
          if (range2.to - range2.from != size || view.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          compositionRange && range2.to >= compositionRange.from && range2.from <= compositionRange.to)
            return { range: range2 };
          let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range2.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range2.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    let userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    view.dispatch(tr, { scrollIntoView: true, userEvent });
    return true;
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView2 = false, userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select")
        scrollIntoView2 = true;
      userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView2, userEvent });
    return true;
  } else {
    return false;
  }
}
function findDiff(a2, b2, preferredPos, preferredSide) {
  let minLen = Math.min(a2.length, b2.length);
  let from = 0;
  while (from < minLen && a2.charCodeAt(from) == b2.charCodeAt(from))
    from++;
  if (from == minLen && a2.length == b2.length)
    return null;
  let toA = a2.length, toB = b2.length;
  while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b2.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    let adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a2.length < b2.length) {
    let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= move;
    toA = from + (toA - toB);
    toB = from;
  }
  return { from, toA, toB };
}
function selectionPoints(view) {
  let result = [];
  if (view.root.activeElement != view.contentDOM)
    return result;
  let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset)
      result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base2) {
  if (points.length == 0)
    return null;
  let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
}
const observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
const useCharData = browser$2.ie && browser$2.ie_version <= 11;
class DOMObserver {
  constructor(view) {
    this.view = view;
    this.active = false;
    this.selectionRange = new DOMSelectionState();
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.resizeContent = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver((mutations) => {
      for (let mut of mutations)
        this.queue.push(mut);
      if ((browser$2.ie && browser$2.ie_version <= 11 || browser$2.ios && view.composing) && mutations.some((m2) => m2.type == "childList" && m2.removedNodes.length || m2.type == "characterData" && m2.oldValue.length > m2.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (useCharData)
      this.onCharData = (event) => {
        this.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        this.flushSoon();
      };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(() => {
        var _a2;
        if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
          this.onResize();
      });
      this.resizeScroll.observe(view.scrollDOM);
      this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
      this.resizeContent.observe(view.contentDOM);
    }
    this.addWindowListeners(this.win = view.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver((entries) => {
        if (this.parentCheck < 0)
          this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
          this.intersecting = !this.intersecting;
          if (this.intersecting != this.view.inView)
            this.onScrollChanged(document.createEvent("Event"));
        }
      }, { threshold: [0, 1e-3] });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver((entries) => {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
          this.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runScrollHandlers(this.view, e);
    if (this.intersecting)
      this.view.measure();
  }
  onScroll(e) {
    if (this.intersecting)
      this.flush(false);
    this.onScrollChanged(e);
  }
  onResize() {
    if (this.resizeTimeout < 0)
      this.resizeTimeout = setTimeout(() => {
        this.resizeTimeout = -1;
        this.view.requestMeasure();
      }, 50);
  }
  onPrint() {
    this.view.viewState.printing = true;
    this.view.measure();
    setTimeout(() => {
      this.view.viewState.printing = false;
      this.view.requestMeasure();
    }, 500);
  }
  updateGaps(gaps) {
    if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g2, i) => g2 != gaps[i]))) {
      this.gapIntersection.disconnect();
      for (let gap of gaps)
        this.gapIntersection.observe(gap);
      this.gaps = gaps;
    }
  }
  onSelectionChange(event) {
    let wasChanged = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view } = this, sel = this.selectionRange;
    if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
      return;
    let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
    if (context && context.ignoreEvent(event)) {
      if (!wasChanged)
        this.selectionChanged = false;
      return;
    }
    if ((browser$2.ie && browser$2.ie_version <= 11 || browser$2.android && browser$2.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
      this.flushSoon();
    else
      this.flush(false);
  }
  readSelectionRange() {
    let { view } = this;
    let range2 = browser$2.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view) || getSelection(view.root);
    if (!range2 || this.selectionRange.eq(range2))
      return false;
    let local = hasSelection(this.dom, range2);
    if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range2)) {
      this.view.inputState.lastFocusTime = 0;
      view.docView.updateSelection();
      return false;
    }
    this.selectionRange.setRange(range2);
    if (local)
      this.selectionChanged = true;
    return true;
  }
  setSelectionRange(anchor, head) {
    this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
    this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let i = 0, changed = null;
    for (let dom = this.dom; dom; ) {
      if (dom.nodeType == 1) {
        if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
          i++;
        else if (!changed)
          changed = this.scrollTargets.slice(0, i);
        if (changed)
          changed.push(dom);
        dom = dom.assignedSlot || dom.parentNode;
      } else if (dom.nodeType == 11) {
        dom = dom.host;
      } else {
        break;
      }
    }
    if (i < this.scrollTargets.length && !changed)
      changed = this.scrollTargets.slice(0, i);
    if (changed) {
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      for (let dom of this.scrollTargets = changed)
        dom.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(f2) {
    if (!this.active)
      return f2();
    try {
      this.stop();
      return f2();
    } finally {
      this.start();
      this.clear();
    }
  }
  start() {
    if (this.active)
      return;
    this.observer.observe(this.dom, observeOptions);
    if (useCharData)
      this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.active = true;
  }
  stop() {
    if (!this.active)
      return;
    this.active = false;
    this.observer.disconnect();
    if (useCharData)
      this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
  }
  // Throw away any pending changes
  clear() {
    this.processRecords();
    this.queue.length = 0;
    this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(key, keyCode) {
    var _a2;
    if (!this.delayedAndroidKey) {
      let flush = () => {
        let key2 = this.delayedAndroidKey;
        if (key2) {
          this.clearDelayedAndroidKey();
          this.view.inputState.lastKeyCode = key2.keyCode;
          this.view.inputState.lastKeyTime = Date.now();
          let flushed = this.flush();
          if (!flushed && key2.force)
            dispatchKey(this.dom, key2.key, key2.keyCode);
        }
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
    }
    if (!this.delayedAndroidKey || key == "Enter")
      this.delayedAndroidKey = {
        key,
        keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
      };
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
  }
  flushSoon() {
    if (this.delayedFlush < 0)
      this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        this.delayedFlush = -1;
        this.flush();
      });
  }
  forceFlush() {
    if (this.delayedFlush >= 0) {
      this.view.win.cancelAnimationFrame(this.delayedFlush);
      this.delayedFlush = -1;
    }
    this.flush();
  }
  pendingRecords() {
    for (let mut of this.observer.takeRecords())
      this.queue.push(mut);
    return this.queue;
  }
  processRecords() {
    let records = this.pendingRecords();
    if (records.length)
      this.queue = [];
    let from = -1, to = -1, typeOver = false;
    for (let record of records) {
      let range2 = this.readMutation(record);
      if (!range2)
        continue;
      if (range2.typeOver)
        typeOver = true;
      if (from == -1) {
        ({ from, to } = range2);
      } else {
        from = Math.min(range2.from, from);
        to = Math.max(range2.to, to);
      }
    }
    return { from, to, typeOver };
  }
  readChange() {
    let { from, to, typeOver } = this.processRecords();
    let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
    if (from < 0 && !newSel)
      return null;
    if (from > -1)
      this.lastChange = Date.now();
    this.view.inputState.lastFocusTime = 0;
    this.selectionChanged = false;
    return new DOMChange(this.view, from, to, typeOver);
  }
  // Apply pending changes, if any
  flush(readSelection = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    if (readSelection)
      this.readSelectionRange();
    let domChange = this.readChange();
    if (!domChange)
      return false;
    let startState = this.view.state;
    let handled = applyDOMChange(this.view, domChange);
    if (this.view.state == startState)
      this.view.update([]);
    return handled;
  }
  readMutation(rec) {
    let cView = this.view.docView.nearest(rec.target);
    if (!cView || cView.ignoreMutation(rec))
      return null;
    cView.markDirty(rec.type == "attributes");
    if (rec.type == "attributes")
      cView.dirty |= 4;
    if (rec.type == "childList") {
      let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
      let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
      return {
        from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
        to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
        typeOver: false
      };
    } else if (rec.type == "characterData") {
      return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
    } else {
      return null;
    }
  }
  setWindow(win) {
    if (win != this.win) {
      this.removeWindowListeners(this.win);
      this.win = win;
      this.addWindowListeners(this.win);
    }
  }
  addWindowListeners(win) {
    win.addEventListener("resize", this.onResize);
    win.addEventListener("beforeprint", this.onPrint);
    win.addEventListener("scroll", this.onScroll);
    win.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(win) {
    win.removeEventListener("scroll", this.onScroll);
    win.removeEventListener("resize", this.onResize);
    win.removeEventListener("beforeprint", this.onPrint);
    win.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var _a2, _b2, _c2, _d;
    this.stop();
    (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
    (_b2 = this.gapIntersection) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
    (_c2 = this.resizeScroll) === null || _c2 === void 0 ? void 0 : _c2.disconnect();
    (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
    for (let dom of this.scrollTargets)
      dom.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win);
    clearTimeout(this.parentCheck);
    clearTimeout(this.resizeTimeout);
    this.win.cancelAnimationFrame(this.delayedFlush);
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
}
function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView)
      return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function safariSelectionRangeHack(view) {
  let found = null;
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  if (!found)
    return null;
  let anchorNode = found.startContainer, anchorOffset = found.startOffset;
  let focusNode = found.endContainer, focusOffset = found.endOffset;
  let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
class EditorView {
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(config2 = {}) {
    this.plugins = [];
    this.pluginMap = /* @__PURE__ */ new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    this.updateState = 2;
    this.measureScheduled = -1;
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.style.cssText = "position: fixed; top: -10000px";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    this._dispatch = config2.dispatch || ((tr) => this.update([tr]));
    this.dispatch = this.dispatch.bind(this);
    this._root = config2.root || getRoot(config2.parent) || document;
    this.viewState = new ViewState(config2.state || EditorState.create(config2));
    this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
    for (let plugin of this.plugins)
      plugin.update(this);
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this, this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0;
    this.requestMeasure();
    if (config2.parent)
      config2.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  dispatch(...input) {
    let tr = input.length == 1 && input[0] instanceof Transaction ? input[0] : this.state.update(...input);
    this._dispatch(tr, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(transactions) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let redrawn = false, attrsChanged = false, update;
    let state = this.state;
    for (let tr of transactions) {
      if (tr.startState != state)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      state = tr.state;
    }
    if (this.destroyed) {
      this.viewState.state = state;
      return;
    }
    let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
    if (transactions.some((tr) => tr.annotation(isFocusChange))) {
      this.inputState.notifiedFocused = focus;
      focusFlag = 1;
    } else if (focus != this.inputState.notifiedFocused) {
      this.inputState.notifiedFocused = focus;
      dispatchFocus = focusChangeTransaction(state, focus);
      if (!dispatchFocus)
        focusFlag = 1;
    }
    let pendingKey = this.observer.delayedAndroidKey, domChange = null;
    if (pendingKey) {
      this.observer.clearDelayedAndroidKey();
      domChange = this.observer.readChange();
      if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
        domChange = null;
    } else {
      this.observer.clear();
    }
    if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
      return this.setState(state);
    update = ViewUpdate.create(this, state, transactions);
    update.flags |= focusFlag;
    let scrollTarget = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let tr of transactions) {
        if (scrollTarget)
          scrollTarget = scrollTarget.map(tr.changes);
        if (tr.scrollIntoView) {
          let { main: main2 } = tr.state.selection;
          scrollTarget = new ScrollTarget(main2.empty ? main2 : EditorSelection.cursor(main2.head, main2.head > main2.anchor ? -1 : 1));
        }
        for (let e of tr.effects)
          if (e.is(scrollIntoView))
            scrollTarget = e.value;
      }
      this.viewState.update(update, scrollTarget);
      this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
      if (!update.empty) {
        this.updatePlugins(update);
        this.inputState.update(update);
      }
      redrawn = this.docView.update(update);
      if (this.state.facet(styleModule) != this.styleModules)
        this.mountStyles();
      attrsChanged = this.updateAttrs();
      this.showAnnouncements(transactions);
      this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (update.startState.facet(theme$2) != update.state.facet(theme$2))
      this.viewState.mustMeasureContent = true;
    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
      this.requestMeasure();
    if (!update.empty)
      for (let listener of this.state.facet(updateListener))
        listener(update);
    if (dispatchFocus || domChange)
      Promise.resolve().then(() => {
        if (dispatchFocus && this.state == dispatchFocus.startState)
          this.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(this, domChange) && pendingKey.force)
            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(newState) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = newState;
      return;
    }
    this.updateState = 2;
    let hadFocus = this.hasFocus;
    try {
      for (let plugin of this.plugins)
        plugin.destroy(this);
      this.viewState = new ViewState(newState);
      this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      this.pluginMap.clear();
      for (let plugin of this.plugins)
        plugin.update(this);
      this.docView = new DocView(this);
      this.inputState.ensureHandlers(this, this.plugins);
      this.mountStyles();
      this.updateAttrs();
      this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    if (hadFocus)
      this.focus();
    this.requestMeasure();
  }
  updatePlugins(update) {
    let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
    if (prevSpecs != specs) {
      let newPlugins = [];
      for (let spec of specs) {
        let found = prevSpecs.indexOf(spec);
        if (found < 0) {
          newPlugins.push(new PluginInstance(spec));
        } else {
          let plugin = this.plugins[found];
          plugin.mustUpdate = update;
          newPlugins.push(plugin);
        }
      }
      for (let plugin of this.plugins)
        if (plugin.mustUpdate != update)
          plugin.destroy(this);
      this.plugins = newPlugins;
      this.pluginMap.clear();
      this.inputState.ensureHandlers(this, this.plugins);
    } else {
      for (let p2 of this.plugins)
        p2.mustUpdate = update;
    }
    for (let i = 0; i < this.plugins.length; i++)
      this.plugins[i].update(this);
  }
  /**
  @internal
  */
  measure(flush = true) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    this.measureScheduled = 0;
    if (flush)
      this.observer.forceFlush();
    let updated = null;
    let sDOM = this.scrollDOM, { scrollTop } = sDOM;
    let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
    this.viewState.scrollAnchorHeight = -1;
    if (scrollAnchorHeight < 0 || scrollTop != this.viewState.scrollTop) {
      if (scrollTop > sDOM.scrollHeight - sDOM.clientHeight - 4) {
        scrollAnchorPos = -1;
        scrollAnchorHeight = this.viewState.heightMap.height;
      } else {
        let block = this.viewState.lineBlockAtHeight(scrollTop);
        scrollAnchorPos = block.from;
        scrollAnchorHeight = block.top;
      }
    }
    try {
      for (let i = 0; ; i++) {
        this.updateState = 1;
        let oldViewport = this.viewport;
        let changed = this.viewState.measure(this);
        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (i > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let measuring = [];
        if (!(changed & 4))
          [this.measureRequests, measuring] = [measuring, this.measureRequests];
        let measured = measuring.map((m2) => {
          try {
            return m2.read(this);
          } catch (e) {
            logException(this.state, e);
            return BadMeasure;
          }
        });
        let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
        update.flags |= changed;
        if (!updated)
          updated = update;
        else
          updated.flags |= changed;
        this.updateState = 2;
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
          this.updateAttrs();
          redrawn = this.docView.update(update);
        }
        for (let i2 = 0; i2 < measuring.length; i2++)
          if (measured[i2] != BadMeasure) {
            try {
              let m2 = measuring[i2];
              if (m2.write)
                m2.write(measured[i2], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
        if (this.viewState.editorHeight) {
          if (this.viewState.scrollTarget) {
            this.docView.scrollIntoView(this.viewState.scrollTarget);
            this.viewState.scrollTarget = null;
            scrolled = true;
          } else if (scrollAnchorHeight > -1) {
            let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
            let diff = newAnchorHeight - scrollAnchorHeight;
            if (diff > 1 || diff < -1) {
              sDOM.scrollTop = scrollTop + diff;
              scrolled = true;
            }
          }
        }
        if (redrawn)
          this.docView.updateSelection(true);
        if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && !scrolled && this.measureRequests.length == 0)
          break;
        scrollAnchorHeight = -1;
      }
    } finally {
      this.updateState = 0;
      this.measureScheduled = -1;
    }
    if (updated && !updated.empty)
      for (let listener of this.state.facet(updateListener))
        listener(updated);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme$2);
  }
  updateAttrs() {
    let editorAttrs = attrsFromFacet(this, editorAttributes, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    });
    let contentAttrs = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: !this.state.facet(editable) ? "false" : "true",
      class: "cm-content",
      style: `${browser$2.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    if (this.state.readOnly)
      contentAttrs["aria-readonly"] = "true";
    attrsFromFacet(this, contentAttributes, contentAttrs);
    let changed = this.observer.ignore(() => {
      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      return changedContent || changedEditor;
    });
    this.editorAttrs = editorAttrs;
    this.contentAttrs = contentAttrs;
    return changed;
  }
  showAnnouncements(trs) {
    let first2 = true;
    for (let tr of trs)
      for (let effect of tr.effects)
        if (effect.is(EditorView.announce)) {
          if (first2)
            this.announceDOM.textContent = "";
          first2 = false;
          let div = this.announceDOM.appendChild(document.createElement("div"));
          div.textContent = effect.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(styleModule);
    StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse());
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    if (this.updateState == 0 && this.measureScheduled > -1)
      this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(request) {
    if (this.measureScheduled < 0)
      this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
    if (request) {
      if (this.measureRequests.indexOf(request) > -1)
        return;
      if (request.key != null)
        for (let i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request.key) {
            this.measureRequests[i] = request;
            return;
          }
        }
      this.measureRequests.push(request);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(plugin) {
    let known = this.pluginMap.get(plugin);
    if (known === void 0 || known && known.spec != plugin)
      this.pluginMap.set(plugin, known = this.plugins.find((p2) => p2.spec == plugin) || null);
    return known && known.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(height) {
    this.readMeasured();
    return this.viewState.elementAtHeight(height);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(height) {
    this.readMeasured();
    return this.viewState.lineBlockAtHeight(height);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(pos) {
    return this.viewState.lineBlockAt(pos);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(start, forward, by) {
    return skipAtoms(this, start, moveByChar(this, start, forward, by));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(start, forward) {
    return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(start, forward, includeWrap = true) {
    return moveToLineBoundary(this, start, forward, includeWrap);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(start, forward, distance) {
    return skipAtoms(this, start, moveVertically(this, start, forward, distance));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(pos) {
    return this.docView.domAtPos(pos);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(node, offset = 0) {
    return this.docView.posFromDOM(node, offset);
  }
  posAtCoords(coords, precise = true) {
    this.readMeasured();
    return posAtCoords(this, coords, precise);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(pos, side = 1) {
    this.readMeasured();
    let rect = this.docView.coordsAt(pos, side);
    if (!rect || rect.left == rect.right)
      return rect;
    let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
    let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
    return flattenRect(rect, span.dir == Direction.LTR == side > 0);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(pos) {
    let perLine = this.state.facet(perLineTextDirection);
    if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
      return this.textDirection;
    this.readMeasured();
    return this.docView.textDirectionAt(pos);
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(line) {
    if (line.length > MaxBidiLine)
      return trivialOrder(line.length);
    let dir = this.textDirectionAt(line.from);
    for (let entry of this.bidiCache)
      if (entry.from == line.from && entry.dir == dir)
        return entry.order;
    let order = computeOrder(line.text, dir);
    this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
    return order;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var _a2;
    return (this.dom.ownerDocument.hasFocus() || browser$2.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      focusPreventScroll(this.contentDOM);
      this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(root) {
    if (this._root != root) {
      this._root = root;
      this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
      this.mountStyles();
    }
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let plugin of this.plugins)
      plugin.destroy(this);
    this.plugins = [];
    this.inputState.destroy();
    this.dom.remove();
    this.observer.destroy();
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(pos, options = {}) {
    return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(handlers2) {
    return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(spec, options) {
    let prefix = StyleModule.newName();
    let result = [theme$2.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
    if (options && options.dark)
      result.push(darkTheme.of(true));
    return result;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(spec) {
    return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(dom) {
    var _a2;
    let content2 = dom.querySelector(".cm-content");
    let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
    return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
  }
}
EditorView.styleModule = styleModule;
EditorView.inputHandler = inputHandler$1;
EditorView.focusChangeEffect = focusChangeEffect;
EditorView.perLineTextDirection = perLineTextDirection;
EditorView.exceptionSink = exceptionSink;
EditorView.updateListener = updateListener;
EditorView.editable = editable;
EditorView.mouseSelectionStyle = mouseSelectionStyle;
EditorView.dragMovesSelection = dragMovesSelection$1;
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
EditorView.decorations = decorations;
EditorView.atomicRanges = atomicRanges;
EditorView.scrollMargins = scrollMargins;
EditorView.darkTheme = darkTheme;
EditorView.contentAttributes = contentAttributes;
EditorView.editorAttributes = editorAttributes;
EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
EditorView.announce = /* @__PURE__ */ StateEffect.define();
const MaxBidiLine = 4096;
const BadMeasure = {};
class CachedOrder {
  constructor(from, to, dir, order) {
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.order = order;
  }
  static update(cache2, changes) {
    if (changes.empty)
      return cache2;
    let result = [], lastDir = cache2.length ? cache2[cache2.length - 1].dir : Direction.LTR;
    for (let i = Math.max(0, cache2.length - 10); i < cache2.length; i++) {
      let entry = cache2[i];
      if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
        result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
    }
    return result;
  }
}
function attrsFromFacet(view, facet, base2) {
  for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    let source = sources[i], value = typeof source == "function" ? source(view) : source;
    if (value)
      combineAttrs(value, base2);
  }
  return base2;
}
const currentPlatform = browser$2.mac ? "mac" : browser$2.windows ? "win" : browser$2.linux ? "linux" : "key";
function normalizeKeyName(name2, platform) {
  const parts = name2.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift2, meta2;
  for (let i = 0; i < parts.length - 1; ++i) {
    const mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (platform == "mac")
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function modifiers(name2, event, shift2) {
  if (event.altKey)
    name2 = "Alt-" + name2;
  if (event.ctrlKey)
    name2 = "Ctrl-" + name2;
  if (event.metaKey)
    name2 = "Meta-" + name2;
  if (shift2 !== false && event.shiftKey)
    name2 = "Shift-" + name2;
  return name2;
}
const handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
  keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
}));
const keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
const Keymaps = /* @__PURE__ */ new WeakMap();
function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map2 = Keymaps.get(bindings);
  if (!map2)
    Keymaps.set(bindings, map2 = buildKeymap(bindings.reduce((a2, b2) => a2.concat(b2), [])));
  return map2;
}
let storedPrefix = null;
const PrefixTimeout = 4e3;
function buildKeymap(bindings, platform = currentPlatform) {
  let bound = /* @__PURE__ */ Object.create(null);
  let isPrefix = /* @__PURE__ */ Object.create(null);
  let checkPrefix = (name2, is2) => {
    let current = isPrefix[name2];
    if (current == null)
      isPrefix[name2] = is2;
    else if (current != is2)
      throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
  };
  let add = (scope, key, command2, preventDefault) => {
    var _a2, _b2;
    let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
    let parts = key.split(/ (?!$)/).map((k2) => normalizeKeyName(k2, platform));
    for (let i = 1; i < parts.length; i++) {
      let prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix])
        scopeObj[prefix] = {
          preventDefault: true,
          run: [(view) => {
            let ourObj = storedPrefix = { view, prefix, scope };
            setTimeout(() => {
              if (storedPrefix == ourObj)
                storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
    }
    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, run: ((_b2 = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b2 === void 0 ? void 0 : _b2.slice()) || [] });
    if (command2)
      binding.run.push(command2);
    if (preventDefault)
      binding.preventDefault = true;
  };
  for (let b2 of bindings) {
    let scopes = b2.scope ? b2.scope.split(" ") : ["editor"];
    if (b2.any)
      for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        if (!scopeObj._any)
          scopeObj._any = { preventDefault: false, run: [] };
        for (let key in scopeObj)
          scopeObj[key].run.push(b2.any);
      }
    let name2 = b2[platform] || b2.key;
    if (!name2)
      continue;
    for (let scope of scopes) {
      add(scope, name2, b2.run, b2.preventDefault);
      if (b2.shift)
        add(scope, "Shift-" + name2, b2.shift, b2.preventDefault);
    }
  }
  return bound;
}
function runHandlers(map2, event, view, scope) {
  let name2 = keyName(event);
  let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
  let prefix = "", fallthrough = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
      storedPrefix = null;
  }
  let ran = /* @__PURE__ */ new Set();
  let runFor = (binding) => {
    if (binding) {
      for (let cmd2 of binding.run)
        if (!ran.has(cmd2)) {
          ran.add(cmd2);
          if (cmd2(view, event))
            return true;
        }
      if (binding.preventDefault)
        fallthrough = true;
    }
    return false;
  };
  let scopeObj = map2[scope], baseName, shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)]))
      return true;
    if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(browser$2.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
        return true;
      else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)]))
        return true;
    } else if (isChar && event.shiftKey) {
      if (runFor(scopeObj[prefix + modifiers(name2, event, true)]))
        return true;
    }
    if (runFor(scopeObj._any))
      return true;
  }
  return fallthrough;
}
const CanHidePrimary = !browser$2.ios;
const themeSpec = {
  ".cm-line": {
    "& ::selection": { backgroundColor: "transparent !important" },
    "&::selection": { backgroundColor: "transparent !important" }
  }
};
if (CanHidePrimary)
  themeSpec[".cm-line"].caretColor = "transparent !important";
function iterMatches(doc2, re, from, to, f2) {
  re.lastIndex = 0;
  for (let cursor = doc2.iterRange(from, to), pos = from, m2; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak)
      while (m2 = re.exec(cursor.value))
        f2(pos + m2.index, m2);
  }
}
function matchRanges(view, maxLength) {
  let visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
    return visible;
  let result = [];
  for (let { from, to } of visible) {
    from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
    to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
    if (result.length && result[result.length - 1].to >= from)
      result[result.length - 1].to = to;
    else
      result.push({ from, to });
  }
  return result;
}
class MatchDecorator {
  /**
  Create a decorator.
  */
  constructor(config2) {
    const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
    if (!regexp.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    if (decorate) {
      this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
    } else if (typeof decoration == "function") {
      this.addMatch = (match, view, from, add) => {
        let deco = decoration(match, view, from);
        if (deco)
          add(from, from + match[0].length, deco);
      };
    } else if (decoration) {
      this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }
    this.boundary = boundary;
    this.maxLength = maxLength;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(view) {
    let build = new RangeSetBuilder(), add = build.add.bind(build);
    for (let { from, to } of matchRanges(view, this.maxLength))
      iterMatches(view.state.doc, this.regexp, from, to, (from2, m2) => this.addMatch(m2, view, from2, add));
    return build.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(update, deco) {
    let changeFrom = 1e9, changeTo = -1;
    if (update.docChanged)
      update.changes.iterChanges((_f, _t, from, to) => {
        if (to > update.view.viewport.from && from < update.view.viewport.to) {
          changeFrom = Math.min(from, changeFrom);
          changeTo = Math.max(to, changeTo);
        }
      });
    if (update.viewportChanged || changeTo - changeFrom > 1e3)
      return this.createDeco(update.view);
    if (changeTo > -1)
      return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
    return deco;
  }
  updateRange(view, deco, updateFrom, updateTo) {
    for (let r2 of view.visibleRanges) {
      let from = Math.max(r2.from, updateFrom), to = Math.min(r2.to, updateTo);
      if (to > from) {
        let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
        let start = Math.max(r2.from, fromLine.from), end = Math.min(r2.to, toLine.to);
        if (this.boundary) {
          for (; from > fromLine.from; from--)
            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
              start = from;
              break;
            }
          for (; to < toLine.to; to++)
            if (this.boundary.test(toLine.text[to - toLine.from])) {
              end = to;
              break;
            }
        }
        let ranges = [], m2;
        let add = (from2, to2, deco2) => ranges.push(deco2.range(from2, to2));
        if (fromLine == toLine) {
          this.regexp.lastIndex = start - fromLine.from;
          while ((m2 = this.regexp.exec(fromLine.text)) && m2.index < end - fromLine.from)
            this.addMatch(m2, view, m2.index + fromLine.from, add);
        } else {
          iterMatches(view.state.doc, this.regexp, start, end, (from2, m3) => this.addMatch(m3, view, from2, add));
        }
        deco = deco.update({ filterFrom: start, filterTo: end, filter: (from2, to2) => from2 < start || to2 > end, add: ranges });
      }
    }
    return deco;
  }
}
const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
const Specials = /* @__PURE__ */ new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]", UnicodeRegexpSupport);
const Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let _supportsTabSize = null;
function supportsTabSize() {
  var _a2;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    let styles = document.body.style;
    _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
const specialCharConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    let config2 = combineConfig(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config2.replaceTabs = !supportsTabSize())
      config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
    if (config2.addSpecialChars)
      config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
    return config2;
  }
});
function highlightSpecialChars(config2 = {}) {
  return [specialCharConfig.of(config2), specialCharPlugin()];
}
let _plugin = null;
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = /* @__PURE__ */ Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    makeDecorator(conf) {
      return new MatchDecorator({
        regexp: conf.specialChars,
        decoration: (m2, view, pos) => {
          let { doc: doc2 } = view.state;
          let code2 = codePointAt(m2[0], 0);
          if (code2 == 9) {
            let line = doc2.lineAt(pos);
            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
            return Decoration.replace({ widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth) });
          }
          return this.decorationCache[code2] || (this.decorationCache[code2] = Decoration.replace({ widget: new SpecialCharWidget(conf, code2) }));
        },
        boundary: conf.replaceTabs ? void 0 : /[^]/
      });
    }
    update(update) {
      let conf = update.state.facet(specialCharConfig);
      if (update.startState.facet(specialCharConfig) != conf) {
        this.decorator = this.makeDecorator(conf);
        this.decorations = this.decorator.createDeco(update.view);
      } else {
        this.decorations = this.decorator.updateDeco(update, this.decorations);
      }
    }
  }, {
    decorations: (v2) => v2.decorations
  }));
}
const DefaultPlaceholder = "•";
function placeholder$1(code2) {
  if (code2 >= 32)
    return DefaultPlaceholder;
  if (code2 == 10)
    return "␤";
  return String.fromCharCode(9216 + code2);
}
class SpecialCharWidget extends WidgetType {
  constructor(options, code2) {
    super();
    this.options = options;
    this.code = code2;
  }
  eq(other) {
    return other.code == this.code;
  }
  toDOM(view) {
    let ph = placeholder$1(this.code);
    let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
    let custom = this.options.render && this.options.render(this.code, desc, ph);
    if (custom)
      return custom;
    let span = document.createElement("span");
    span.textContent = ph;
    span.title = desc;
    span.setAttribute("aria-label", desc);
    span.className = "cm-specialChar";
    return span;
  }
  ignoreEvent() {
    return false;
  }
}
class TabWidget extends WidgetType {
  constructor(width) {
    super();
    this.width = width;
  }
  eq(other) {
    return other.width == this.width;
  }
  toDOM() {
    let span = document.createElement("span");
    span.textContent = "	";
    span.className = "cm-tab";
    span.style.width = this.width + "px";
    return span;
  }
  ignoreEvent() {
    return false;
  }
}
function highlightActiveLine() {
  return activeLineHighlighter$1;
}
const lineDeco$1 = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
const activeLineHighlighter$1 = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.docChanged || update.selectionSet)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let lastLineStart = -1, deco = [];
    for (let r2 of view.state.selection.ranges) {
      let line = view.lineBlockAt(r2.head);
      if (line.from > lastLineStart) {
        deco.push(lineDeco$1.range(line.from));
        lastLineStart = line.from;
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v2) => v2.decorations
});
class GutterMarker extends RangeValue {
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(other) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(dom) {
  }
}
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = void 0;
GutterMarker.prototype.mapMode = MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
const gutterLineClass = /* @__PURE__ */ Facet.define();
const activeGutters = /* @__PURE__ */ Facet.define();
const unfixGutters = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
function gutters(config2) {
  let result = [
    gutterView
  ];
  if (config2 && config2.fixed === false)
    result.push(unfixGutters.of(true));
  return result;
}
const gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight + "px";
    this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
    for (let gutter of this.gutters)
      this.dom.appendChild(gutter.dom);
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }
  update(update) {
    if (this.updateGutters(update)) {
      let vpA = this.prevViewport, vpB = update.view.viewport;
      let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
      this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
    }
    if (update.geometryChanged)
      this.dom.style.minHeight = this.view.contentHeight + "px";
    if (this.view.state.facet(unfixGutters) != !this.fixed) {
      this.fixed = !this.fixed;
      this.dom.style.position = this.fixed ? "sticky" : "";
    }
    this.prevViewport = update.view.viewport;
  }
  syncGutters(detach) {
    let after = this.dom.nextSibling;
    if (detach)
      this.dom.remove();
    let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
    let classSet = [];
    let contexts = this.gutters.map((gutter) => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
    for (let line of this.view.viewportLineBlocks) {
      if (classSet.length)
        classSet = [];
      if (Array.isArray(line.type)) {
        let first2 = true;
        for (let b2 of line.type) {
          if (b2.type == BlockType.Text && first2) {
            advanceCursor(lineClasses, classSet, b2.from);
            for (let cx of contexts)
              cx.line(this.view, b2, classSet);
            first2 = false;
          } else if (b2.widget) {
            for (let cx of contexts)
              cx.widget(this.view, b2);
          }
        }
      } else if (line.type == BlockType.Text) {
        advanceCursor(lineClasses, classSet, line.from);
        for (let cx of contexts)
          cx.line(this.view, line, classSet);
      }
    }
    for (let cx of contexts)
      cx.finish();
    if (detach)
      this.view.scrollDOM.insertBefore(this.dom, after);
  }
  updateGutters(update) {
    let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
    let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
    if (prev == cur) {
      for (let gutter of this.gutters)
        if (gutter.update(update))
          change = true;
    } else {
      change = true;
      let gutters2 = [];
      for (let conf of cur) {
        let known = prev.indexOf(conf);
        if (known < 0) {
          gutters2.push(new SingleGutterView(this.view, conf));
        } else {
          this.gutters[known].update(update);
          gutters2.push(this.gutters[known]);
        }
      }
      for (let g2 of this.gutters) {
        g2.dom.remove();
        if (gutters2.indexOf(g2) < 0)
          g2.destroy();
      }
      for (let g2 of gutters2)
        this.dom.appendChild(g2.dom);
      this.gutters = gutters2;
    }
    return change;
  }
  destroy() {
    for (let view of this.gutters)
      view.destroy();
    this.dom.remove();
  }
}, {
  provide: (plugin) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin);
    if (!value || value.gutters.length == 0 || !value.fixed)
      return null;
    return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
  })
});
function asArray(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos)
      collect.push(cursor.value);
    cursor.next();
  }
}
class UpdateContext {
  constructor(gutter, viewport, height) {
    this.gutter = gutter;
    this.height = height;
    this.i = 0;
    this.cursor = RangeSet.iter(gutter.markers, viewport.from);
  }
  addElement(view, block, markers) {
    let { gutter } = this, above = block.top - this.height;
    if (this.i == gutter.elements.length) {
      let newElt = new GutterElement(view, block.height, above, markers);
      gutter.elements.push(newElt);
      gutter.dom.appendChild(newElt.dom);
    } else {
      gutter.elements[this.i].update(view, block.height, above, markers);
    }
    this.height = block.bottom;
    this.i++;
  }
  line(view, line, extraMarkers) {
    let localMarkers = [];
    advanceCursor(this.cursor, localMarkers, line.from);
    if (extraMarkers.length)
      localMarkers = localMarkers.concat(extraMarkers);
    let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
    if (forLine)
      localMarkers.unshift(forLine);
    let gutter = this.gutter;
    if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
      return;
    this.addElement(view, line, localMarkers);
  }
  widget(view, block) {
    let marker = this.gutter.config.widgetMarker(view, block.widget, block);
    if (marker)
      this.addElement(view, block, [marker]);
  }
  finish() {
    let gutter = this.gutter;
    while (gutter.elements.length > this.i) {
      let last2 = gutter.elements.pop();
      gutter.dom.removeChild(last2.dom);
      last2.destroy();
    }
  }
}
class SingleGutterView {
  constructor(view, config2) {
    this.view = view;
    this.config = config2;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let prop in config2.domEventHandlers) {
      this.dom.addEventListener(prop, (event) => {
        let target = event.target, y2;
        if (target != this.dom && this.dom.contains(target)) {
          while (target.parentNode != this.dom)
            target = target.parentNode;
          let rect = target.getBoundingClientRect();
          y2 = (rect.top + rect.bottom) / 2;
        } else {
          y2 = event.clientY;
        }
        let line = view.lineBlockAtHeight(y2 - view.documentTop);
        if (config2.domEventHandlers[prop](view, line, event))
          event.preventDefault();
      });
    }
    this.markers = asArray(config2.markers(view));
    if (config2.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  update(update) {
    let prevMarkers = this.markers;
    this.markers = asArray(this.config.markers(update.view));
    if (this.spacer && this.config.updateSpacer) {
      let updated = this.config.updateSpacer(this.spacer.markers[0], update);
      if (updated != this.spacer.markers[0])
        this.spacer.update(update.view, 0, 0, [updated]);
    }
    let vp = update.view.viewport;
    return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
  }
  destroy() {
    for (let elt of this.elements)
      elt.destroy();
  }
}
class GutterElement {
  constructor(view, height, above, markers) {
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }
  update(view, height, above, markers) {
    if (this.height != height)
      this.dom.style.height = (this.height = height) + "px";
    if (this.above != above)
      this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
    if (!sameMarkers(this.markers, markers))
      this.setMarkers(view, markers);
  }
  setMarkers(view, markers) {
    let cls = "cm-gutterElement", domPos = this.dom.firstChild;
    for (let iNew = 0, iOld = 0; ; ) {
      let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
      if (marker) {
        let c2 = marker.elementClass;
        if (c2)
          cls += " " + c2;
        for (let i = iOld; i < this.markers.length; i++)
          if (this.markers[i].compare(marker)) {
            skipTo = i;
            matched = true;
            break;
          }
      } else {
        skipTo = this.markers.length;
      }
      while (iOld < skipTo) {
        let next = this.markers[iOld++];
        if (next.toDOM) {
          next.destroy(domPos);
          let after = domPos.nextSibling;
          domPos.remove();
          domPos = after;
        }
      }
      if (!marker)
        break;
      if (marker.toDOM) {
        if (matched)
          domPos = domPos.nextSibling;
        else
          this.dom.insertBefore(marker.toDOM(view), domPos);
      }
      if (matched)
        iOld++;
    }
    this.dom.className = cls;
    this.markers = markers;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function sameMarkers(a2, b2) {
  if (a2.length != b2.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (!a2[i].compare(b2[i]))
      return false;
  return true;
}
const lineNumberMarkers = /* @__PURE__ */ Facet.define();
const lineNumberConfig = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return combineConfig(values2, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(a2, b2) {
        let result = Object.assign({}, a2);
        for (let event in b2) {
          let exists = result[event], add = b2[event];
          result[event] = exists ? (view, line, event2) => exists(view, line, event2) || add(view, line, event2) : add;
        }
        return result;
      }
    });
  }
});
class NumberMarker extends GutterMarker {
  constructor(number2) {
    super();
    this.number = number2;
  }
  eq(other) {
    return this.number == other.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function formatNumber(view, number2) {
  return view.state.facet(lineNumberConfig).formatNumber(number2, view.state);
}
const lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: false,
  markers(view) {
    return view.state.facet(lineNumberMarkers);
  },
  lineMarker(view, line, others) {
    if (others.some((m2) => m2.toDOM))
      return null;
    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
  },
  widgetMarker: () => null,
  lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
  initialSpacer(view) {
    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
  },
  updateSpacer(spacer, update) {
    let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
    return max == spacer.number ? spacer : new NumberMarker(max);
  },
  domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
}));
function lineNumbers(config2 = {}) {
  return [
    lineNumberConfig.of(config2),
    gutters(),
    lineNumberGutter
  ];
}
function maxLineNumber(lines) {
  let last2 = 9;
  while (last2 < lines)
    last2 = last2 * 10 + 9;
  return last2;
}
const DefaultBufferLength = 1024;
let nextPropID = 0;
let Range$1 = class Range2 {
  constructor(from, to) {
    this.from = from;
    this.to = to;
  }
};
class NodeProp {
  /// Create a new node prop type.
  constructor(config2 = {}) {
    this.id = nextPropID++;
    this.perNode = !!config2.perNode;
    this.deserialize = config2.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /// This is meant to be used with
  /// [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
  /// prop values for each node type in the set. Takes a [match
  /// object](#common.NodeType^match) or function that returns undefined
  /// if the node type doesn't get this prop, and the prop's value if
  /// it does.
  add(match) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    if (typeof match != "function")
      match = NodeType.match(match);
    return (type) => {
      let result = match(type);
      return result === void 0 ? null : [this, result];
    };
  }
}
NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.contextHash = new NodeProp({ perNode: true });
NodeProp.lookAhead = new NodeProp({ perNode: true });
NodeProp.mounted = new NodeProp({ perNode: true });
class MountedTree {
  constructor(tree, overlay, parser2) {
    this.tree = tree;
    this.overlay = overlay;
    this.parser = parser2;
  }
}
const noProps = /* @__PURE__ */ Object.create(null);
class NodeType {
  /// @internal
  constructor(name2, props, id2, flags = 0) {
    this.name = name2;
    this.props = props;
    this.id = id2;
    this.flags = flags;
  }
  /// Define a node type.
  static define(spec) {
    let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
    let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
    let type = new NodeType(spec.name || "", props, spec.id, flags);
    if (spec.props)
      for (let src of spec.props) {
        if (!Array.isArray(src))
          src = src(type);
        if (src) {
          if (src[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          props[src[0].id] = src[1];
        }
      }
    return type;
  }
  /// Retrieves a node prop for this type. Will return `undefined` if
  /// the prop isn't present on this node.
  prop(prop) {
    return this.props[prop.id];
  }
  /// True when this is the top node of a grammar.
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /// True when this node is produced by a skip rule.
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /// Indicates whether this is an error node.
  get isError() {
    return (this.flags & 4) > 0;
  }
  /// When true, this node type doesn't correspond to a user-declared
  /// named node, for example because it is used to cache repetition.
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /// Returns true when this node's name or one of its
  /// [groups](#common.NodeProp^group) matches the given string.
  is(name2) {
    if (typeof name2 == "string") {
      if (this.name == name2)
        return true;
      let group = this.prop(NodeProp.group);
      return group ? group.indexOf(name2) > -1 : false;
    }
    return this.id == name2;
  }
  /// Create a function from node types to arbitrary values by
  /// specifying an object whose property names are node or
  /// [group](#common.NodeProp^group) names. Often useful with
  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  /// names, separated by spaces, in a single property name to map
  /// multiple node names to a single value.
  static match(map2) {
    let direct = /* @__PURE__ */ Object.create(null);
    for (let prop in map2)
      for (let name2 of prop.split(" "))
        direct[name2] = map2[prop];
    return (node) => {
      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
        let found = direct[i < 0 ? node.name : groups[i]];
        if (found)
          return found;
      }
    };
  }
}
NodeType.none = new NodeType(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class NodeSet {
  /// Create a set with the given types. The `id` property of each
  /// type should correspond to its position within the array.
  constructor(types2) {
    this.types = types2;
    for (let i = 0; i < types2.length; i++)
      if (types2[i].id != i)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /// Create a copy of this set with some node properties added. The
  /// arguments to this method can be created with
  /// [`NodeProp.add`](#common.NodeProp.add).
  extend(...props) {
    let newTypes = [];
    for (let type of this.types) {
      let newProps = null;
      for (let source of props) {
        let add = source(type);
        if (add) {
          if (!newProps)
            newProps = Object.assign({}, type.props);
          newProps[add[0].id] = add[1];
        }
      }
      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
    }
    return new NodeSet(newTypes);
  }
}
const CachedNode = /* @__PURE__ */ new WeakMap(), CachedInnerNode = /* @__PURE__ */ new WeakMap();
var IterMode;
(function(IterMode2) {
  IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
  IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (IterMode = {}));
class Tree {
  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  constructor(type, children, positions, length, props) {
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length;
    this.props = null;
    if (props && props.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [prop, value] of props)
        this.props[typeof prop == "number" ? prop : prop.id] = value;
    }
  }
  /// @internal
  toString() {
    let mounted = this.prop(NodeProp.mounted);
    if (mounted && !mounted.overlay)
      return mounted.tree.toString();
    let children = "";
    for (let ch of this.children) {
      let str = ch.toString();
      if (str) {
        if (children)
          children += ",";
        children += str;
      }
    }
    return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
  }
  /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
  /// the tree. Mode can be used to [control](#common.IterMode) which
  /// nodes the cursor visits.
  cursor(mode = 0) {
    return new TreeCursor(this.topNode, mode);
  }
  /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
  /// at the given position and side (see
  /// [`moveTo`](#common.TreeCursor.moveTo).
  cursorAt(pos, side = 0, mode = 0) {
    let scope = CachedNode.get(this) || this.topNode;
    let cursor = new TreeCursor(scope);
    cursor.moveTo(pos, side);
    CachedNode.set(this, cursor._tree);
    return cursor;
  }
  /// Get a [syntax node](#common.SyntaxNode) object for the top of the
  /// tree.
  get topNode() {
    return new TreeNode$1(this, 0, 0, null);
  }
  /// Get the [syntax node](#common.SyntaxNode) at the given position.
  /// If `side` is -1, this will move into nodes that end at the
  /// position. If 1, it'll move into nodes that start at the
  /// position. With 0, it'll only enter nodes that cover the position
  /// from both sides.
  ///
  /// Note that this will not enter
  /// [overlays](#common.MountedTree.overlay), and you often want
  /// [`resolveInner`](#common.Tree.resolveInner) instead.
  resolve(pos, side = 0) {
    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
    CachedNode.set(this, node);
    return node;
  }
  /// Like [`resolve`](#common.Tree.resolve), but will enter
  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  /// pointing into the innermost overlaid tree at the given position
  /// (with parent links going through all parent structure, including
  /// the host trees).
  resolveInner(pos, side = 0) {
    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
    CachedInnerNode.set(this, node);
    return node;
  }
  /// Iterate over the tree and its children, calling `enter` for any
  /// node that touches the `from`/`to` region (if given) before
  /// running over such a node's children, and `leave` (if given) when
  /// leaving the node. When `enter` returns `false`, that node will
  /// not have its children iterated over (or `leave` called).
  iterate(spec) {
    let { enter, leave, from = 0, to = this.length } = spec;
    let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
    for (let c2 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
      let entered = false;
      if (c2.from <= to && c2.to >= from && (!anon && c2.type.isAnonymous || enter(c2) !== false)) {
        if (c2.firstChild())
          continue;
        entered = true;
      }
      for (; ; ) {
        if (entered && leave && (anon || !c2.type.isAnonymous))
          leave(c2);
        if (c2.nextSibling())
          break;
        if (!c2.parent())
          return;
        entered = true;
      }
    }
  }
  /// Get the value of the given [node prop](#common.NodeProp) for this
  /// node. Works with both per-node and per-type props.
  prop(prop) {
    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
  }
  /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
  /// format that can be passed to the [`Tree`](#common.Tree)
  /// constructor.
  get propValues() {
    let result = [];
    if (this.props)
      for (let id2 in this.props)
        result.push([+id2, this.props[id2]]);
    return result;
  }
  /// Balance the direct children of this tree, producing a copy of
  /// which may have children grouped into subtrees with type
  /// [`NodeType.none`](#common.NodeType^none).
  balance(config2 = {}) {
    return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config2.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
  }
  /// Build a tree from a postfix-ordered buffer of node information,
  /// or a cursor over such a buffer.
  static build(data) {
    return buildTree(data);
  }
}
Tree.empty = new Tree(NodeType.none, [], [], 0);
class FlatBufferCursor {
  constructor(buffer, index) {
    this.buffer = buffer;
    this.index = index;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new FlatBufferCursor(this.buffer, this.index);
  }
}
class TreeBuffer {
  /// Create a tree buffer.
  constructor(buffer, length, set) {
    this.buffer = buffer;
    this.length = length;
    this.set = set;
  }
  /// @internal
  get type() {
    return NodeType.none;
  }
  /// @internal
  toString() {
    let result = [];
    for (let index = 0; index < this.buffer.length; ) {
      result.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result.join(",");
  }
  /// @internal
  childString(index) {
    let id2 = this.buffer[index], endIndex = this.buffer[index + 3];
    let type = this.set.types[id2], result = type.name;
    if (/\W/.test(result) && !type.isError)
      result = JSON.stringify(result);
    index += 4;
    if (endIndex == index)
      return result;
    let children = [];
    while (index < endIndex) {
      children.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result + "(" + children.join(",") + ")";
  }
  /// @internal
  findChild(startIndex, endIndex, dir, pos, side) {
    let { buffer } = this, pick = -1;
    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
        pick = i;
        if (dir > 0)
          break;
      }
    }
    return pick;
  }
  /// @internal
  slice(startI, endI, from) {
    let b2 = this.buffer;
    let copy = new Uint16Array(endI - startI), len = 0;
    for (let i = startI, j2 = 0; i < endI; ) {
      copy[j2++] = b2[i++];
      copy[j2++] = b2[i++] - from;
      let to = copy[j2++] = b2[i++] - from;
      copy[j2++] = b2[i++] - startI;
      len = Math.max(len, to);
    }
    return new TreeBuffer(copy, len, this.set);
  }
}
function checkSide(side, pos, from, to) {
  switch (side) {
    case -2:
      return from < pos;
    case -1:
      return to >= pos && from < pos;
    case 0:
      return from < pos && to > pos;
    case 1:
      return from <= pos && to > pos;
    case 2:
      return to > pos;
    case 4:
      return true;
  }
}
function enterUnfinishedNodesBefore(node, pos) {
  let scan = node.childBefore(pos);
  while (scan) {
    let last2 = scan.lastChild;
    if (!last2 || last2.to != scan.to)
      break;
    if (last2.type.isError && last2.from == last2.to) {
      node = scan;
      scan = last2.prevSibling;
    } else {
      scan = last2;
    }
  }
  return node;
}
function resolveNode(node, pos, side, overlays) {
  var _a2;
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    let parent = !overlays && node instanceof TreeNode$1 && node.index < 0 ? null : node.parent;
    if (!parent)
      return node;
    node = parent;
  }
  let mode = overlays ? 0 : IterMode.IgnoreOverlays;
  if (overlays)
    for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode$1 && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
        node = parent;
    }
  for (; ; ) {
    let inner = node.enter(pos, side, mode);
    if (!inner)
      return node;
    node = inner;
  }
}
let TreeNode$1 = class TreeNode {
  constructor(_tree, from, index, _parent) {
    this._tree = _tree;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(i, dir, pos, side, mode = 0) {
    for (let parent = this; ; ) {
      for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
        let next = children[i], start = positions[i] + parent.from;
        if (!checkSide(side, pos, start, start + next.length))
          continue;
        if (next instanceof TreeBuffer) {
          if (mode & IterMode.ExcludeBuffers)
            continue;
          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
          if (index > -1)
            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
        } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
          let mounted;
          if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
            return new TreeNode(mounted.tree, start, i, parent);
          let inner = new TreeNode(next, start, i, parent);
          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
        }
      }
      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
        return null;
      if (parent.index >= 0)
        i = parent.index + dir;
      else
        i = dir < 0 ? -1 : parent._parent._tree.children.length;
      parent = parent._parent;
      if (!parent)
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.nextChild(
      0,
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    let mounted;
    if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
      let rPos = pos - this.from;
      for (let { from, to } of mounted.overlay) {
        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
          return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
      }
    }
    return this.nextChild(0, 1, pos, side, mode);
  }
  nextSignificantParent() {
    let val = this;
    while (val.type.isAnonymous && val._parent)
      val = val._parent;
    return val;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }
  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }
  enterUnfinishedNodesBefore(pos) {
    return enterUnfinishedNodesBefore(this, pos);
  }
  getChild(type, before = null, after = null) {
    let r2 = getChildren(this, type, before, after);
    return r2.length ? r2[0] : null;
  }
  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  }
  /// @internal
  toString() {
    return this._tree.toString();
  }
  get node() {
    return this;
  }
  matchContext(context) {
    return matchNodeContext(this, context);
  }
};
function getChildren(node, type, before, after) {
  let cur = node.cursor(), result = [];
  if (!cur.firstChild())
    return result;
  if (before != null) {
    while (!cur.type.is(before))
      if (!cur.nextSibling())
        return result;
  }
  for (; ; ) {
    if (after != null && cur.type.is(after))
      return result;
    if (cur.type.is(type))
      result.push(cur.node);
    if (!cur.nextSibling())
      return after == null ? result : [];
  }
}
function matchNodeContext(node, context, i = context.length - 1) {
  for (let p2 = node.parent; i >= 0; p2 = p2.parent) {
    if (!p2)
      return false;
    if (!p2.type.isAnonymous) {
      if (context[i] && context[i] != p2.name)
        return false;
      i--;
    }
  }
  return true;
}
class BufferContext {
  constructor(parent, buffer, index, start) {
    this.parent = parent;
    this.buffer = buffer;
    this.index = index;
    this.start = start;
  }
}
class BufferNode {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(context, _parent, index) {
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  child(dir, pos, side) {
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
    return index < 0 ? null : new BufferNode(this.context, this, index);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.child(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.child(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    if (mode & IterMode.ExcludeBuffers)
      return null;
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
    return index < 0 ? null : new BufferNode(this.context, this, index);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(dir) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + dir,
      dir,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer } = this.context;
    let after = buffer.buffer[this.index + 3];
    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
      return new BufferNode(this.context, this._parent, after);
    return this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer } = this.context;
    let parentStart = this._parent ? this._parent.index + 4 : 0;
    if (this.index == parentStart)
      return this.externalSibling(-1);
    return new BufferNode(this.context, this._parent, buffer.findChild(
      parentStart,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }
  get tree() {
    return null;
  }
  toTree() {
    let children = [], positions = [];
    let { buffer } = this.context;
    let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
    if (endI > startI) {
      let from = buffer.buffer[this.index + 1];
      children.push(buffer.slice(startI, endI, from));
      positions.push(0);
    }
    return new Tree(this.type, children, positions, this.to - this.from);
  }
  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }
  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }
  enterUnfinishedNodesBefore(pos) {
    return enterUnfinishedNodesBefore(this, pos);
  }
  /// @internal
  toString() {
    return this.context.buffer.childString(this.index);
  }
  getChild(type, before = null, after = null) {
    let r2 = getChildren(this, type, before, after);
    return r2.length ? r2[0] : null;
  }
  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  }
  get node() {
    return this;
  }
  matchContext(context) {
    return matchNodeContext(this, context);
  }
}
class TreeCursor {
  /// Shorthand for `.type.name`.
  get name() {
    return this.type.name;
  }
  /// @internal
  constructor(node, mode = 0) {
    this.mode = mode;
    this.buffer = null;
    this.stack = [];
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode$1) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (let n2 = node._parent; n2; n2 = n2._parent)
        this.stack.unshift(n2.index);
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  yieldNode(node) {
    if (!node)
      return false;
    this._tree = node;
    this.type = node.type;
    this.from = node.from;
    this.to = node.to;
    return true;
  }
  yieldBuf(index, type) {
    this.index = index;
    let { start, buffer } = this.buffer;
    this.type = type || buffer.set.types[buffer.buffer[index]];
    this.from = start + buffer.buffer[index + 1];
    this.to = start + buffer.buffer[index + 2];
    return true;
  }
  yield(node) {
    if (!node)
      return false;
    if (node instanceof TreeNode$1) {
      this.buffer = null;
      return this.yieldNode(node);
    }
    this.buffer = node.context;
    return this.yieldBuf(node.index, node.type);
  }
  /// @internal
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /// @internal
  enterChild(dir, pos, side) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
    let { buffer } = this.buffer;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
    if (index < 0)
      return false;
    this.stack.push(this.index);
    return this.yieldBuf(index);
  }
  /// Move the cursor to this node's first child. When this returns
  /// false, the node has no child, and the cursor has not been moved.
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /// Move the cursor to this node's last child.
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /// Move the cursor to the first child that ends after `pos`.
  childAfter(pos) {
    return this.enterChild(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  /// Move to the last child that starts before `pos`.
  childBefore(pos) {
    return this.enterChild(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  /// Move the cursor to the child around `pos`. If side is -1 the
  /// child may end at that position, when 1 it may start there. This
  /// will also enter [overlaid](#common.MountedTree.overlay)
  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  /// set to false.
  enter(pos, side, mode = this.mode) {
    if (!this.buffer)
      return this.yield(this._tree.enter(pos, side, mode));
    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
  }
  /// Move to the node's parent node, if this isn't the top node.
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    this.buffer = null;
    return this.yieldNode(parent);
  }
  /// @internal
  sibling(dir) {
    if (!this.buffer)
      return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
    let { buffer } = this.buffer, d2 = this.stack.length - 1;
    if (dir < 0) {
      let parentStart = d2 < 0 ? 0 : this.stack[d2] + 4;
      if (this.index != parentStart)
        return this.yieldBuf(buffer.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let after = buffer.buffer[this.index + 3];
      if (after < (d2 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d2] + 3]))
        return this.yieldBuf(after);
    }
    return d2 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
  }
  /// Move to this node's next sibling, if any.
  nextSibling() {
    return this.sibling(1);
  }
  /// Move to this node's previous sibling, if any.
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(dir) {
    let index, parent, { buffer } = this;
    if (buffer) {
      if (dir > 0) {
        if (this.index < buffer.buffer.buffer.length)
          return false;
      } else {
        for (let i = 0; i < this.index; i++)
          if (buffer.buffer.buffer[i + 3] < this.index)
            return false;
      }
      ({ index, parent } = buffer);
    } else {
      ({ index, _parent: parent } = this._tree);
    }
    for (; parent; { index, _parent: parent } = parent) {
      if (index > -1)
        for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
          let child = parent._tree.children[i];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
            return false;
        }
    }
    return true;
  }
  move(dir, enter) {
    if (enter && this.enterChild(
      dir,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(dir))
        return true;
      if (this.atLastNode(dir) || !this.parent())
        return false;
    }
  }
  /// Move to the next node in a
  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  /// traversal, going from a node to its first child or, if the
  /// current node is empty or `enter` is false, its next sibling or
  /// the next sibling of the first parent node that has one.
  next(enter = true) {
    return this.move(1, enter);
  }
  /// Move to the next node in a last-to-first pre-order traveral. A
  /// node is followed by its last child or, if it has none, its
  /// previous sibling or the previous sibling of the first parent
  /// node that has one.
  prev(enter = true) {
    return this.move(-1, enter);
  }
  /// Move the cursor to the innermost node that covers `pos`. If
  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  /// it will enter nodes that start at `pos`.
  moveTo(pos, side = 0) {
    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
      if (!this.parent())
        break;
    while (this.enterChild(1, pos, side)) {
    }
    return this;
  }
  /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
  /// position.
  get node() {
    if (!this.buffer)
      return this._tree;
    let cache2 = this.bufferNode, result = null, depth = 0;
    if (cache2 && cache2.context == this.buffer) {
      scan:
        for (let index = this.index, d2 = this.stack.length; d2 >= 0; ) {
          for (let c2 = cache2; c2; c2 = c2._parent)
            if (c2.index == index) {
              if (index == this.index)
                return c2;
              result = c2;
              depth = d2 + 1;
              break scan;
            }
          index = this.stack[--d2];
        }
    }
    for (let i = depth; i < this.stack.length; i++)
      result = new BufferNode(this.buffer, result, this.stack[i]);
    return this.bufferNode = new BufferNode(this.buffer, result, this.index);
  }
  /// Get the [tree](#common.Tree) that represents the current node, if
  /// any. Will return null when the node is in a [tree
  /// buffer](#common.TreeBuffer).
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /// Iterate over the current node and all its descendants, calling
  /// `enter` when entering a node and `leave`, if given, when leaving
  /// one. When `enter` returns `false`, any children of that node are
  /// skipped, and `leave` isn't called for it.
  iterate(enter, leave) {
    for (let depth = 0; ; ) {
      let mustLeave = false;
      if (this.type.isAnonymous || enter(this) !== false) {
        if (this.firstChild()) {
          depth++;
          continue;
        }
        if (!this.type.isAnonymous)
          mustLeave = true;
      }
      for (; ; ) {
        if (mustLeave && leave)
          leave(this);
        mustLeave = this.type.isAnonymous;
        if (this.nextSibling())
          break;
        if (!depth)
          return;
        this.parent();
        depth--;
        mustLeave = true;
      }
    }
  }
  /// Test whether the current node matches a given context—a sequence
  /// of direct parent node names. Empty strings in the context array
  /// are treated as wildcards.
  matchContext(context) {
    if (!this.buffer)
      return matchNodeContext(this.node, context);
    let { buffer } = this.buffer, { types: types2 } = buffer.set;
    for (let i = context.length - 1, d2 = this.stack.length - 1; i >= 0; d2--) {
      if (d2 < 0)
        return matchNodeContext(this.node, context, i);
      let type = types2[buffer.buffer[this.stack[d2]]];
      if (!type.isAnonymous) {
        if (context[i] && context[i] != type.name)
          return false;
        i--;
      }
    }
    return true;
  }
}
function hasChild(tree) {
  return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
}
function buildTree(data) {
  var _a2;
  let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types2 = nodeSet.types;
  let contextHash = 0, lookAhead = 0;
  function takeNode(parentStart, minPos, children2, positions2, inRepeat) {
    let { id: id2, start, end, size } = cursor;
    let lookAheadAtStart = lookAhead;
    while (size < 0) {
      cursor.next();
      if (size == -1) {
        let node2 = reused[id2];
        children2.push(node2);
        positions2.push(start - parentStart);
        return;
      } else if (size == -3) {
        contextHash = id2;
        return;
      } else if (size == -4) {
        lookAhead = id2;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size}`);
      }
    }
    let type = types2[id2], node, buffer2;
    let startPos = start - parentStart;
    if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
      let data2 = new Uint16Array(buffer2.size - buffer2.skip);
      let endPos = cursor.pos - buffer2.size, index = data2.length;
      while (cursor.pos > endPos)
        index = copyToBuffer(buffer2.start, data2, index);
      node = new TreeBuffer(data2, end - buffer2.start, nodeSet);
      startPos = buffer2.start - parentStart;
    } else {
      let endPos = cursor.pos - size;
      cursor.next();
      let localChildren = [], localPositions = [];
      let localInRepeat = id2 >= minRepeatType ? id2 : -1;
      let lastGroup = 0, lastEnd = end;
      while (cursor.pos > endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }
          cursor.next();
        } else {
          takeNode(start, endPos, localChildren, localPositions, localInRepeat);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type);
        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
      }
    }
    children2.push(node);
    positions2.push(startPos);
  }
  function makeBalanced(type) {
    return (children2, positions2, length2) => {
      let lookAhead2 = 0, lastI = children2.length - 1, last2, lookAheadProp;
      if (lastI >= 0 && (last2 = children2[lastI]) instanceof Tree) {
        if (!lastI && last2.type == type && last2.length == length2)
          return last2;
        if (lookAheadProp = last2.prop(NodeProp.lookAhead))
          lookAhead2 = positions2[lastI] + last2.length + lookAheadProp;
      }
      return makeTree(type, children2, positions2, length2, lookAhead2);
    };
  }
  function makeRepeatLeaf(children2, positions2, base2, i, from, to, type, lookAhead2) {
    let localChildren = [], localPositions = [];
    while (children2.length > i) {
      localChildren.push(children2.pop());
      localPositions.push(positions2.pop() + base2 - from);
    }
    children2.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead2 - to));
    positions2.push(from - base2);
  }
  function makeTree(type, children2, positions2, length2, lookAhead2 = 0, props) {
    if (contextHash) {
      let pair2 = [NodeProp.contextHash, contextHash];
      props = props ? [pair2].concat(props) : [pair2];
    }
    if (lookAhead2 > 25) {
      let pair2 = [NodeProp.lookAhead, lookAhead2];
      props = props ? [pair2].concat(props) : [pair2];
    }
    return new Tree(type, children2, positions2, length2, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    let fork = cursor.fork();
    let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
    let result = { size: 0, start: 0, skip: 0 };
    scan:
      for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
        let nodeSize2 = fork.size;
        if (fork.id == inRepeat && nodeSize2 >= 0) {
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        let startPos = fork.pos - nodeSize2;
        if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
          break;
        let localSkipped = fork.id >= minRepeatType ? 4 : 0;
        let nodeStart2 = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3)
              localSkipped += 4;
            else
              break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = nodeStart2;
        size += nodeSize2;
        skip += localSkipped;
      }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : void 0;
  }
  function copyToBuffer(bufferStart, buffer2, index) {
    let { id: id2, start, end, size } = cursor;
    cursor.next();
    if (size >= 0 && id2 < minRepeatType) {
      let startIndex = index;
      if (size > 4) {
        let endPos = cursor.pos - (size - 4);
        while (cursor.pos > endPos)
          index = copyToBuffer(bufferStart, buffer2, index);
      }
      buffer2[--index] = startIndex;
      buffer2[--index] = end - bufferStart;
      buffer2[--index] = start - bufferStart;
      buffer2[--index] = id2;
    } else if (size == -3) {
      contextHash = id2;
    } else if (size == -4) {
      lookAhead = id2;
    }
    return index;
  }
  let children = [], positions = [];
  while (cursor.pos > 0)
    takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
  let length = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types2[data.topID], children.reverse(), positions.reverse(), length);
}
const nodeSizeCache = /* @__PURE__ */ new WeakMap();
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
    return 1;
  let size = nodeSizeCache.get(node);
  if (size == null) {
    size = 1;
    for (let child of node.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size = 1;
        break;
      }
      size += nodeSize(balanceType, child);
    }
    nodeSizeCache.set(node, size);
  }
  return size;
}
function balanceRange(balanceType, children, positions, from, to, start, length, mkTop, mkTree) {
  let total = 0;
  for (let i = from; i < to; i++)
    total += nodeSize(balanceType, children[i]);
  let maxChild = Math.ceil(
    total * 1.5 / 8
    /* Balance.BranchFactor */
  );
  let localChildren = [], localPositions = [];
  function divide(children2, positions2, from2, to2, offset) {
    for (let i = from2; i < to2; ) {
      let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children2[i]);
      i++;
      for (; i < to2; i++) {
        let nextSize = nodeSize(balanceType, children2[i]);
        if (groupSize + nextSize >= maxChild)
          break;
        groupSize += nextSize;
      }
      if (i == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children2[groupFrom];
          divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
          continue;
        }
        localChildren.push(children2[groupFrom]);
      } else {
        let length2 = positions2[i - 1] + children2[i - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i, groupStart, length2, null, mkTree));
      }
      localPositions.push(groupStart + offset - start);
    }
  }
  divide(children, positions, from, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
}
class NodeWeakMap {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(buffer, index, value) {
    let inner = this.map.get(buffer);
    if (!inner)
      this.map.set(buffer, inner = /* @__PURE__ */ new Map());
    inner.set(index, value);
  }
  getBuffer(buffer, index) {
    let inner = this.map.get(buffer);
    return inner && inner.get(index);
  }
  /// Set the value for this syntax node.
  set(node, value) {
    if (node instanceof BufferNode)
      this.setBuffer(node.context.buffer, node.index, value);
    else if (node instanceof TreeNode$1)
      this.map.set(node.tree, value);
  }
  /// Retrieve value for this syntax node, if it exists in the map.
  get(node) {
    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode$1 ? this.map.get(node.tree) : void 0;
  }
  /// Set the value for the node that a cursor currently points to.
  cursorSet(cursor, value) {
    if (cursor.buffer)
      this.setBuffer(cursor.buffer.buffer, cursor.index, value);
    else
      this.map.set(cursor.tree, value);
  }
  /// Retrieve the value for the node that a cursor currently points
  /// to.
  cursorGet(cursor) {
    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
  }
}
class TreeFragment {
  /// Construct a tree fragment. You'll usually want to use
  /// [`addTree`](#common.TreeFragment^addTree) and
  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  /// calling this directly.
  constructor(from, to, tree, offset, openStart = false, openEnd = false) {
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
  }
  /// Whether the start of the fragment represents the start of a
  /// parse, or the end of a change. (In the second case, it may not
  /// be safe to reuse some nodes at the start, depending on the
  /// parsing algorithm.)
  get openStart() {
    return (this.open & 1) > 0;
  }
  /// Whether the end of the fragment represents the end of a
  /// full-document parse, or the start of a change.
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /// Create a set of fragments from a freshly parsed tree, or update
  /// an existing set of fragments by replacing the ones that overlap
  /// with a tree with content from the new tree. When `partial` is
  /// true, the parse is treated as incomplete, and the resulting
  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  /// true.
  static addTree(tree, fragments = [], partial = false) {
    let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
    for (let f2 of fragments)
      if (f2.to > tree.length)
        result.push(f2);
    return result;
  }
  /// Apply a set of edits to an array of fragments, removing or
  /// splitting fragments as necessary to remove edited ranges, and
  /// adjusting offsets for fragments that moved.
  static applyChanges(fragments, changes, minGap = 128) {
    if (!changes.length)
      return fragments;
    let result = [];
    let fI = 1, nextF = fragments.length ? fragments[0] : null;
    for (let cI = 0, pos = 0, off = 0; ; cI++) {
      let nextC = cI < changes.length ? changes[cI] : null;
      let nextPos = nextC ? nextC.fromA : 1e9;
      if (nextPos - pos >= minGap)
        while (nextF && nextF.from < nextPos) {
          let cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut)
            result.push(cut);
          if (nextF.to > nextPos)
            break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
      if (!nextC)
        break;
      pos = nextC.toA;
      off = nextC.toA - nextC.toB;
    }
    return result;
  }
}
class Parser {
  /// Start a parse, returning a [partial parse](#common.PartialParse)
  /// object. [`fragments`](#common.TreeFragment) can be passed in to
  /// make the parse incremental.
  ///
  /// By default, the entire input is parsed. You can pass `ranges`,
  /// which should be a sorted array of non-empty, non-overlapping
  /// ranges, to parse only those ranges. The tree returned in that
  /// case will start at `ranges[0].from`.
  startParse(input, fragments, ranges) {
    if (typeof input == "string")
      input = new StringInput(input);
    ranges = !ranges ? [new Range$1(0, input.length)] : ranges.length ? ranges.map((r2) => new Range$1(r2.from, r2.to)) : [new Range$1(0, 0)];
    return this.createParse(input, fragments || [], ranges);
  }
  /// Run a full parse, returning the resulting tree.
  parse(input, fragments, ranges) {
    let parse = this.startParse(input, fragments, ranges);
    for (; ; ) {
      let done = parse.advance();
      if (done)
        return done;
    }
  }
}
class StringInput {
  constructor(string2) {
    this.string = string2;
  }
  get length() {
    return this.string.length;
  }
  chunk(from) {
    return this.string.slice(from);
  }
  get lineChunks() {
    return false;
  }
  read(from, to) {
    return this.string.slice(from, to);
  }
}
function parseMixed(nest) {
  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
}
class InnerParse {
  constructor(parser2, parse, overlay, target, ranges) {
    this.parser = parser2;
    this.parse = parse;
    this.overlay = overlay;
    this.target = target;
    this.ranges = ranges;
    if (!ranges.length || ranges.some((r2) => r2.from >= r2.to))
      throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
  }
}
class ActiveOverlay {
  constructor(parser2, predicate, mounts, index, start, target, prev) {
    this.parser = parser2;
    this.predicate = predicate;
    this.mounts = mounts;
    this.index = index;
    this.start = start;
    this.target = target;
    this.prev = prev;
    this.depth = 0;
    this.ranges = [];
  }
}
const stoppedInner = new NodeProp({ perNode: true });
class MixedParse {
  constructor(base2, nest, input, fragments, ranges) {
    this.nest = nest;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.inner = [];
    this.innerDone = 0;
    this.baseTree = null;
    this.stoppedAt = null;
    this.baseParse = base2;
  }
  advance() {
    if (this.baseParse) {
      let done2 = this.baseParse.advance();
      if (!done2)
        return null;
      this.baseParse = null;
      this.baseTree = done2;
      this.startInner();
      if (this.stoppedAt != null)
        for (let inner2 of this.inner)
          inner2.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let result = this.baseTree;
      if (this.stoppedAt != null)
        result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
      return result;
    }
    let inner = this.inner[this.innerDone], done = inner.parse.advance();
    if (done) {
      this.innerDone++;
      let props = Object.assign(/* @__PURE__ */ Object.create(null), inner.target.props);
      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
      inner.target.props = props;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let pos = this.input.length;
    for (let i = this.innerDone; i < this.inner.length; i++) {
      if (this.inner[i].ranges[0].from < pos)
        pos = Math.min(pos, this.inner[i].parse.parsedPos);
    }
    return pos;
  }
  stopAt(pos) {
    this.stoppedAt = pos;
    if (this.baseParse)
      this.baseParse.stopAt(pos);
    else
      for (let i = this.innerDone; i < this.inner.length; i++)
        this.inner[i].parse.stopAt(pos);
  }
  startInner() {
    let fragmentCursor = new FragmentCursor$1(this.fragments);
    let overlay = null;
    let covered = null;
    let cursor = new TreeCursor(new TreeNode$1(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
    scan:
      for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt; ) {
        let enter = true, range2;
        if (fragmentCursor.hasNode(cursor)) {
          if (overlay) {
            let match = overlay.mounts.find((m2) => m2.frag.from <= cursor.from && m2.frag.to >= cursor.to && m2.mount.overlay);
            if (match)
              for (let r2 of match.mount.overlay) {
                let from = r2.from + match.pos, to = r2.to + match.pos;
                if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some((r3) => r3.from < to && r3.to > from))
                  overlay.ranges.push({ from, to });
              }
          }
          enter = false;
        } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
          enter = isCovered != 2;
        } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
          if (!cursor.tree)
            materialize(cursor);
          let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
          if (typeof nest.overlay == "function") {
            overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
          } else {
            let ranges = punchRanges(this.ranges, nest.overlay || [new Range$1(cursor.from, cursor.to)]);
            if (ranges.length)
              this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map((r2) => new Range$1(r2.from - cursor.from, r2.to - cursor.from)) : null, cursor.tree, ranges));
            if (!nest.overlay)
              enter = false;
            else if (ranges.length)
              covered = { ranges, depth: 0, prev: covered };
          }
        } else if (overlay && (range2 = overlay.predicate(cursor))) {
          if (range2 === true)
            range2 = new Range$1(cursor.from, cursor.to);
          if (range2.from < range2.to)
            overlay.ranges.push(range2);
        }
        if (enter && cursor.firstChild()) {
          if (overlay)
            overlay.depth++;
          if (covered)
            covered.depth++;
        } else {
          for (; ; ) {
            if (cursor.nextSibling())
              break;
            if (!cursor.parent())
              break scan;
            if (overlay && !--overlay.depth) {
              let ranges = punchRanges(this.ranges, overlay.ranges);
              if (ranges.length)
                this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map((r2) => new Range$1(r2.from - overlay.start, r2.to - overlay.start)), overlay.target, ranges));
              overlay = overlay.prev;
            }
            if (covered && !--covered.depth)
              covered = covered.prev;
          }
        }
      }
  }
}
function checkCover(covered, from, to) {
  for (let range2 of covered) {
    if (range2.from >= to)
      break;
    if (range2.to > from)
      return range2.from <= from && range2.to >= to ? 2 : 1;
  }
  return 0;
}
function sliceBuf(buf, startI, endI, nodes, positions, off) {
  if (startI < endI) {
    let from = buf.buffer[startI + 1];
    nodes.push(buf.slice(startI, endI, from));
    positions.push(from - off);
  }
}
function materialize(cursor) {
  let { node } = cursor, depth = 0;
  do {
    cursor.parent();
    depth++;
  } while (!cursor.tree);
  let i = 0, base2 = cursor.tree, off = 0;
  for (; ; i++) {
    off = base2.positions[i] + cursor.from;
    if (off <= node.from && off + base2.children[i].length >= node.to)
      break;
  }
  let buf = base2.children[i], b2 = buf.buffer;
  function split(startI, endI, type, innerOffset, length) {
    let i2 = startI;
    while (b2[i2 + 2] + off <= node.from)
      i2 = b2[i2 + 3];
    let children = [], positions = [];
    sliceBuf(buf, startI, i2, children, positions, innerOffset);
    let from = b2[i2 + 1], to = b2[i2 + 2];
    let isTarget = from + off == node.from && to + off == node.to && b2[i2] == node.type.id;
    children.push(isTarget ? node.toTree() : split(i2 + 4, b2[i2 + 3], buf.set.types[b2[i2]], from, to - from));
    positions.push(from - innerOffset);
    sliceBuf(buf, b2[i2 + 3], endI, children, positions, innerOffset);
    return new Tree(type, children, positions, length);
  }
  base2.children[i] = split(0, b2.length, NodeType.none, 0, buf.length);
  for (let d2 = 0; d2 <= depth; d2++)
    cursor.childAfter(node.from);
}
class StructureCursor {
  constructor(root, offset) {
    this.offset = offset;
    this.done = false;
    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(pos) {
    let { cursor } = this, p2 = pos - this.offset;
    while (!this.done && cursor.from < p2) {
      if (cursor.to >= pos && cursor.enter(p2, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers))
        ;
      else if (!cursor.next(false))
        this.done = true;
    }
  }
  hasNode(cursor) {
    this.moveTo(cursor.from);
    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
      for (let tree = this.cursor.tree; ; ) {
        if (tree == cursor.tree)
          return true;
        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
          tree = tree.children[0];
        else
          break;
      }
    }
    return false;
  }
}
let FragmentCursor$1 = class FragmentCursor {
  constructor(fragments) {
    var _a2;
    this.fragments = fragments;
    this.curTo = 0;
    this.fragI = 0;
    if (fragments.length) {
      let first2 = this.curFrag = fragments[0];
      this.curTo = (_a2 = first2.tree.prop(stoppedInner)) !== null && _a2 !== void 0 ? _a2 : first2.to;
      this.inner = new StructureCursor(first2.tree, -first2.offset);
    } else {
      this.curFrag = this.inner = null;
    }
  }
  hasNode(node) {
    while (this.curFrag && node.from >= this.curTo)
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
  }
  nextFrag() {
    var _a2;
    this.fragI++;
    if (this.fragI == this.fragments.length) {
      this.curFrag = this.inner = null;
    } else {
      let frag = this.curFrag = this.fragments[this.fragI];
      this.curTo = (_a2 = frag.tree.prop(stoppedInner)) !== null && _a2 !== void 0 ? _a2 : frag.to;
      this.inner = new StructureCursor(frag.tree, -frag.offset);
    }
  }
  findMounts(pos, parser2) {
    var _a2;
    let result = [];
    if (this.inner) {
      this.inner.cursor.moveTo(pos, 1);
      for (let pos2 = this.inner.cursor.node; pos2; pos2 = pos2.parent) {
        let mount = (_a2 = pos2.tree) === null || _a2 === void 0 ? void 0 : _a2.prop(NodeProp.mounted);
        if (mount && mount.parser == parser2) {
          for (let i = this.fragI; i < this.fragments.length; i++) {
            let frag = this.fragments[i];
            if (frag.from >= pos2.to)
              break;
            if (frag.tree == this.curFrag.tree)
              result.push({
                frag,
                pos: pos2.from - frag.offset,
                mount
              });
          }
        }
      }
    }
    return result;
  }
};
function punchRanges(outer, ranges) {
  let copy = null, current = ranges;
  for (let i = 1, j2 = 0; i < outer.length; i++) {
    let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
    for (; j2 < current.length; j2++) {
      let r2 = current[j2];
      if (r2.from >= gapTo)
        break;
      if (r2.to <= gapFrom)
        continue;
      if (!copy)
        current = copy = ranges.slice();
      if (r2.from < gapFrom) {
        copy[j2] = new Range$1(r2.from, gapFrom);
        if (r2.to > gapTo)
          copy.splice(j2 + 1, 0, new Range$1(gapTo, r2.to));
      } else if (r2.to > gapTo) {
        copy[j2--] = new Range$1(gapTo, r2.to);
      } else {
        copy.splice(j2--, 1);
      }
    }
  }
  return current;
}
function findCoverChanges(a2, b2, from, to) {
  let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
  let result = [];
  for (; ; ) {
    let nextA = iA == a2.length ? 1e9 : inA ? a2[iA].to : a2[iA].from;
    let nextB = iB == b2.length ? 1e9 : inB ? b2[iB].to : b2[iB].from;
    if (inA != inB) {
      let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
      if (start < end)
        result.push(new Range$1(start, end));
    }
    pos = Math.min(nextA, nextB);
    if (pos == 1e9)
      break;
    if (nextA == pos) {
      if (!inA)
        inA = true;
      else {
        inA = false;
        iA++;
      }
    }
    if (nextB == pos) {
      if (!inB)
        inB = true;
      else {
        inB = false;
        iB++;
      }
    }
  }
  return result;
}
function enterFragments(mounts, ranges) {
  let result = [];
  for (let { pos, mount, frag } of mounts) {
    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
    let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
    if (mount.overlay) {
      let overlay = mount.overlay.map((r2) => new Range$1(r2.from + pos, r2.to + pos));
      let changes = findCoverChanges(ranges, overlay, from, to);
      for (let i = 0, pos2 = from; ; i++) {
        let last2 = i == changes.length, end = last2 ? to : changes[i].from;
        if (end > pos2)
          result.push(new TreeFragment(pos2, end, mount.tree, -startPos, frag.from >= pos2 || frag.openStart, frag.to <= end || frag.openEnd));
        if (last2)
          break;
        pos2 = changes[i].to;
      }
    } else {
      result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
    }
  }
  return result;
}
let nextTagID = 0;
class Tag {
  /**
  @internal
  */
  constructor(set, base2, modified) {
    this.set = set;
    this.base = base2;
    this.modified = modified;
    this.id = nextTagID++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(parent) {
    if (parent === null || parent === void 0 ? void 0 : parent.base)
      throw new Error("Can not derive from a modified tag");
    let tag = new Tag([], null, []);
    tag.set.push(tag);
    if (parent)
      for (let t2 of parent.set)
        tag.set.push(t2);
    return tag;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let mod = new Modifier();
    return (tag) => {
      if (tag.modified.indexOf(mod) > -1)
        return tag;
      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a2, b2) => a2.id - b2.id));
    };
  }
}
let nextModifierID = 0;
class Modifier {
  constructor() {
    this.instances = [];
    this.id = nextModifierID++;
  }
  static get(base2, mods) {
    if (!mods.length)
      return base2;
    let exists = mods[0].instances.find((t2) => t2.base == base2 && sameArray(mods, t2.modified));
    if (exists)
      return exists;
    let set = [], tag = new Tag(set, base2, mods);
    for (let m2 of mods)
      m2.instances.push(tag);
    let configs = powerSet(mods);
    for (let parent of base2.set)
      if (!parent.modified.length)
        for (let config2 of configs)
          set.push(Modifier.get(parent, config2));
    return tag;
  }
}
function sameArray(a2, b2) {
  return a2.length == b2.length && a2.every((x2, i) => x2 == b2[i]);
}
function powerSet(array) {
  let sets = [[]];
  for (let i = 0; i < array.length; i++) {
    for (let j2 = 0, e = sets.length; j2 < e; j2++) {
      sets.push(sets[j2].concat(array[i]));
    }
  }
  return sets.sort((a2, b2) => b2.length - a2.length);
}
function styleTags(spec) {
  let byName = /* @__PURE__ */ Object.create(null);
  for (let prop in spec) {
    let tags2 = spec[prop];
    if (!Array.isArray(tags2))
      tags2 = [tags2];
    for (let part of prop.split(" "))
      if (part) {
        let pieces = [], mode = 2, rest2 = part;
        for (let pos = 0; ; ) {
          if (rest2 == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1;
            break;
          }
          let m2 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest2);
          if (!m2)
            throw new RangeError("Invalid path: " + part);
          pieces.push(m2[0] == "*" ? "" : m2[0][0] == '"' ? JSON.parse(m2[0]) : m2[0]);
          pos += m2[0].length;
          if (pos == part.length)
            break;
          let next = part[pos++];
          if (pos == part.length && next == "!") {
            mode = 0;
            break;
          }
          if (next != "/")
            throw new RangeError("Invalid path: " + part);
          rest2 = part.slice(pos);
        }
        let last2 = pieces.length - 1, inner = pieces[last2];
        if (!inner)
          throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags2, mode, last2 > 0 ? pieces.slice(0, last2) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
  }
  return ruleNodeProp.add(byName);
}
const ruleNodeProp = new NodeProp();
class Rule {
  constructor(tags2, mode, context, next) {
    this.tags = tags2;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(other) {
    if (!other || other.depth < this.depth) {
      this.next = other;
      return this;
    }
    other.next = this.sort(other.next);
    return other;
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
Rule.empty = new Rule([], 2, null);
function tagHighlighter(tags2, options) {
  let map2 = /* @__PURE__ */ Object.create(null);
  for (let style of tags2) {
    if (!Array.isArray(style.tag))
      map2[style.tag.id] = style.class;
    else
      for (let tag of style.tag)
        map2[tag.id] = style.class;
  }
  let { scope, all = null } = options || {};
  return {
    style: (tags3) => {
      let cls = all;
      for (let tag of tags3) {
        for (let sub of tag.set) {
          let tagClass = map2[sub.id];
          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }
      return cls;
    },
    scope
  };
}
function highlightTags(highlighters, tags2) {
  let result = null;
  for (let highlighter of highlighters) {
    let value = highlighter.style(tags2);
    if (value)
      result = result ? result + " " + value : value;
  }
  return result;
}
function highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {
  let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
  builder.flush(to);
}
class HighlightBuilder {
  constructor(at, highlighters, span) {
    this.at = at;
    this.highlighters = highlighters;
    this.span = span;
    this.class = "";
  }
  startSpan(at, cls) {
    if (cls != this.class) {
      this.flush(at);
      if (at > this.at)
        this.at = at;
      this.class = cls;
    }
  }
  flush(to) {
    if (to > this.at && this.class)
      this.span(this.at, to, this.class);
  }
  highlightRange(cursor, from, to, inheritedClass, highlighters) {
    let { type, from: start, to: end } = cursor;
    if (start >= to || end <= from)
      return;
    if (type.isTop)
      highlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(type));
    let cls = inheritedClass;
    let rule = getStyleTags(cursor) || Rule.empty;
    let tagCls = highlightTags(highlighters, rule.tags);
    if (tagCls) {
      if (cls)
        cls += " ";
      cls += tagCls;
      if (rule.mode == 1)
        inheritedClass += (inheritedClass ? " " : "") + tagCls;
    }
    this.startSpan(Math.max(from, start), cls);
    if (rule.opaque)
      return;
    let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
    if (mounted && mounted.overlay) {
      let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
      let innerHighlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(mounted.tree.type));
      let hasChild2 = cursor.firstChild();
      for (let i = 0, pos = start; ; i++) {
        let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
        let nextPos = next ? next.from + start : end;
        let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
        if (rangeFrom < rangeTo && hasChild2) {
          while (cursor.from < rangeTo) {
            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
            this.startSpan(Math.min(rangeTo, cursor.to), cls);
            if (cursor.to >= nextPos || !cursor.nextSibling())
              break;
          }
        }
        if (!next || nextPos > to)
          break;
        pos = next.to + start;
        if (pos > from) {
          this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
          this.startSpan(Math.min(to, pos), cls);
        }
      }
      if (hasChild2)
        cursor.parent();
    } else if (cursor.firstChild()) {
      if (mounted)
        inheritedClass = "";
      do {
        if (cursor.to <= from)
          continue;
        if (cursor.from >= to)
          break;
        this.highlightRange(cursor, from, to, inheritedClass, highlighters);
        this.startSpan(Math.min(to, cursor.to), cls);
      } while (cursor.nextSibling());
      cursor.parent();
    }
  }
}
function getStyleTags(node) {
  let rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context))
    rule = rule.next;
  return rule || null;
}
const t = Tag.define;
const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
const tags$1 = {
  /**
  A comment.
  */
  comment,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment),
  /**
  Any kind of identifier.
  */
  name,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name),
  /**
  A literal value.
  */
  literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: t(number),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier()
};
tagHighlighter([
  { tag: tags$1.link, class: "tok-link" },
  { tag: tags$1.heading, class: "tok-heading" },
  { tag: tags$1.emphasis, class: "tok-emphasis" },
  { tag: tags$1.strong, class: "tok-strong" },
  { tag: tags$1.keyword, class: "tok-keyword" },
  { tag: tags$1.atom, class: "tok-atom" },
  { tag: tags$1.bool, class: "tok-bool" },
  { tag: tags$1.url, class: "tok-url" },
  { tag: tags$1.labelName, class: "tok-labelName" },
  { tag: tags$1.inserted, class: "tok-inserted" },
  { tag: tags$1.deleted, class: "tok-deleted" },
  { tag: tags$1.literal, class: "tok-literal" },
  { tag: tags$1.string, class: "tok-string" },
  { tag: tags$1.number, class: "tok-number" },
  { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
  { tag: tags$1.variableName, class: "tok-variableName" },
  { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
  { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
  { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
  { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
  { tag: tags$1.typeName, class: "tok-typeName" },
  { tag: tags$1.namespace, class: "tok-namespace" },
  { tag: tags$1.className, class: "tok-className" },
  { tag: tags$1.macroName, class: "tok-macroName" },
  { tag: tags$1.propertyName, class: "tok-propertyName" },
  { tag: tags$1.operator, class: "tok-operator" },
  { tag: tags$1.comment, class: "tok-comment" },
  { tag: tags$1.meta, class: "tok-meta" },
  { tag: tags$1.invalid, class: "tok-invalid" },
  { tag: tags$1.punctuation, class: "tok-punctuation" }
]);
var _a$b;
const languageDataProp = /* @__PURE__ */ new NodeProp();
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? (values2) => values2.concat(baseData) : void 0
  });
}
const sublanguageProp = /* @__PURE__ */ new NodeProp();
class Language {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(data, parser2, extraExtensions = [], name2 = "") {
    this.data = data;
    this.name = name2;
    if (!EditorState.prototype.hasOwnProperty("tree"))
      Object.defineProperty(EditorState.prototype, "tree", { get() {
        return syntaxTree$1(this);
      } });
    this.parser = parser2;
    this.extension = [
      language.of(this),
      EditorState.languageData.of((state, pos, side) => {
        let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);
        if (!data2)
          return [];
        let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);
        if (sub) {
          let innerNode = top2.resolve(pos - top2.from, side);
          for (let sublang of sub)
            if (sublang.test(innerNode, state)) {
              let data3 = state.facet(sublang.facet);
              return sublang.type == "replace" ? data3 : data3.concat(base2);
            }
        }
        return base2;
      })
    ].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(state, pos, side = -1) {
    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(state) {
    let lang = state.facet(language);
    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
      return [{ from: 0, to: state.doc.length }];
    if (!lang || !lang.allowsNesting)
      return [];
    let result = [];
    let explore = (tree, from) => {
      if (tree.prop(languageDataProp) == this.data) {
        result.push({ from, to: from + tree.length });
        return;
      }
      let mount = tree.prop(NodeProp.mounted);
      if (mount) {
        if (mount.tree.prop(languageDataProp) == this.data) {
          if (mount.overlay)
            for (let r2 of mount.overlay)
              result.push({ from: r2.from + from, to: r2.to + from });
          else
            result.push({ from, to: from + tree.length });
          return;
        } else if (mount.overlay) {
          let size = result.length;
          explore(mount.tree, mount.overlay[0].from + from);
          if (result.length > size)
            return;
        }
      }
      for (let i = 0; i < tree.children.length; i++) {
        let ch = tree.children[i];
        if (ch instanceof Tree)
          explore(ch, tree.positions[i] + from);
      }
    };
    explore(syntaxTree$1(state), 0);
    return result;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
}
Language.setState = /* @__PURE__ */ StateEffect.define();
function topNodeAt(state, pos, side) {
  let topLang = state.facet(language), tree = syntaxTree$1(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
      if (node.type.isTop)
        tree = node;
  }
  return tree;
}
class LRLanguage extends Language {
  constructor(data, parser2, name2) {
    super(data, parser2, [], name2);
    this.parser = parser2;
  }
  /**
  Define a language from a parser.
  */
  static define(spec) {
    let data = defineLanguageFacet(spec.languageData);
    return new LRLanguage(data, spec.parser.configure({
      props: [languageDataProp.add((type) => type.isTop ? data : void 0)]
    }), spec.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(options, name2) {
    return new LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function syntaxTree$1(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
class DocInput {
  /**
  Create an input object for the given document.
  */
  constructor(doc2) {
    this.doc = doc2;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc2.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(pos) {
    this.string = this.cursor.next(pos - this.cursorPos).value;
    this.cursorPos = pos + this.string.length;
    return this.cursorPos - this.string.length;
  }
  chunk(pos) {
    this.syncTo(pos);
    return this.string;
  }
  get lineChunks() {
    return true;
  }
  read(from, to) {
    let stringStart = this.cursorPos - this.string.length;
    if (from < stringStart || to >= this.cursorPos)
      return this.doc.sliceString(from, to);
    else
      return this.string.slice(from - stringStart, to - stringStart);
  }
}
let currentContext = null;
class ParseContext {
  constructor(parser2, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
    this.parser = parser2;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(parser2, state, viewport) {
    return new ParseContext(parser2, state, [], Tree.empty, 0, viewport, [], null);
  }
  startParse() {
    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(until, upto) {
    if (upto != null && upto >= this.state.doc.length)
      upto = void 0;
    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
      this.takeTree();
      return true;
    }
    return this.withContext(() => {
      var _a2;
      if (typeof until == "number") {
        let endTime = Date.now() + until;
        until = () => Date.now() > endTime;
      }
      if (!this.parse)
        this.parse = this.startParse();
      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
        this.parse.stopAt(upto);
      for (; ; ) {
        let done = this.parse.advance();
        if (done) {
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
          this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
          this.tree = done;
          this.parse = null;
          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        }
        if (until())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let pos, tree;
    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
        this.parse.stopAt(pos);
      this.withContext(() => {
        while (!(tree = this.parse.advance())) {
        }
      });
      this.treeLen = pos;
      this.tree = tree;
      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
      this.parse = null;
    }
  }
  withContext(f2) {
    let prev = currentContext;
    currentContext = this;
    try {
      return f2();
    } finally {
      currentContext = prev;
    }
  }
  withoutTempSkipped(fragments) {
    for (let r2; r2 = this.tempSkipped.pop(); )
      fragments = cutFragments(fragments, r2.from, r2.to);
    return fragments;
  }
  /**
  @internal
  */
  changes(changes, newState) {
    let { fragments, tree, treeLen, viewport, skipped } = this;
    this.takeTree();
    if (!changes.empty) {
      let ranges = [];
      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
      fragments = TreeFragment.applyChanges(fragments, ranges);
      tree = Tree.empty;
      treeLen = 0;
      viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
      if (this.skipped.length) {
        skipped = [];
        for (let r2 of this.skipped) {
          let from = changes.mapPos(r2.from, 1), to = changes.mapPos(r2.to, -1);
          if (from < to)
            skipped.push({ from, to });
        }
      }
    }
    return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(viewport) {
    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
      return false;
    this.viewport = viewport;
    let startLen = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from, to } = this.skipped[i];
      if (from < viewport.to && to > viewport.from) {
        this.fragments = cutFragments(this.fragments, from, to);
        this.skipped.splice(i--, 1);
      }
    }
    if (this.skipped.length >= startLen)
      return false;
    this.reset();
    return true;
  }
  /**
  @internal
  */
  reset() {
    if (this.parse) {
      this.takeTree();
      this.parse = null;
    }
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(from, to) {
    this.skipped.push({ from, to });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(until) {
    return new class extends Parser {
      createParse(input, fragments, ranges) {
        let from = ranges[0].from, to = ranges[ranges.length - 1].to;
        let parser2 = {
          parsedPos: from,
          advance() {
            let cx = currentContext;
            if (cx) {
              for (let r2 of ranges)
                cx.tempSkipped.push(r2);
              if (until)
                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
            }
            this.parsedPos = to;
            return new Tree(NodeType.none, [], [], to - from);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
        return parser2;
      }
    }();
  }
  /**
  @internal
  */
  isDone(upto) {
    upto = Math.min(upto, this.state.doc.length);
    let frags = this.fragments;
    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return currentContext;
  }
}
function cutFragments(fragments, from, to) {
  return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
}
class LanguageState {
  constructor(context) {
    this.context = context;
    this.tree = context.tree;
  }
  apply(tr) {
    if (!tr.docChanged && this.tree == this.context.tree)
      return this;
    let newCx = this.context.changes(tr.changes, tr.state);
    let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
    if (!newCx.work(20, upto))
      newCx.takeTree();
    return new LanguageState(newCx);
  }
  static init(state) {
    let vpTo = Math.min(3e3, state.doc.length);
    let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
    if (!parseState.work(20, vpTo))
      parseState.takeTree();
    return new LanguageState(parseState);
  }
}
Language.state = /* @__PURE__ */ StateField.define({
  create: LanguageState.init,
  update(value, tr) {
    for (let e of tr.effects)
      if (e.is(Language.setState))
        return e.value;
    if (tr.startState.facet(language) != tr.state.facet(language))
      return LanguageState.init(tr.state);
    return value.apply(tr);
  }
});
let requestIdle = (callback) => {
  let timeout = setTimeout(
    () => callback(),
    500
    /* MaxPause */
  );
  return () => clearTimeout(timeout);
};
if (typeof requestIdleCallback != "undefined")
  requestIdle = (callback) => {
    let idle = -1, timeout = setTimeout(
      () => {
        idle = requestIdleCallback(callback, {
          timeout: 500 - 100
          /* MinPause */
        });
      },
      100
      /* MinPause */
    );
    return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
const isInputPending = typeof navigator != "undefined" && ((_a$b = navigator.scheduling) === null || _a$b === void 0 ? void 0 : _a$b.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
const parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
  constructor(view) {
    this.view = view;
    this.working = null;
    this.workScheduled = 0;
    this.chunkEnd = -1;
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  update(update) {
    let cx = this.view.state.field(Language.state).context;
    if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
      this.scheduleWork();
    if (update.docChanged) {
      if (this.view.hasFocus)
        this.chunkBudget += 50;
      this.scheduleWork();
    }
    this.checkAsyncSchedule(cx);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state } = this.view, field = state.field(Language.state);
    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
      this.working = requestIdle(this.work);
  }
  work(deadline) {
    this.working = null;
    let now = Date.now();
    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
      this.chunkEnd = now + 3e4;
      this.chunkBudget = 3e3;
    }
    if (this.chunkBudget <= 0)
      return;
    let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
    if (field.tree == field.context.tree && field.context.isDone(
      vpTo + 1e5
      /* MaxParseAhead */
    ))
      return;
    let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
    let done = field.context.work(() => {
      return isInputPending && isInputPending() || Date.now() > endTime;
    }, vpTo + (viewportFirst ? 0 : 1e5));
    this.chunkBudget -= Date.now() - now;
    if (done || this.chunkBudget <= 0) {
      field.context.takeTree();
      this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
    }
    if (this.chunkBudget > 0 && !(done && !viewportFirst))
      this.scheduleWork();
    this.checkAsyncSchedule(field.context);
  }
  checkAsyncSchedule(cx) {
    if (cx.scheduleOn) {
      this.workScheduled++;
      cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
      cx.scheduleOn = null;
    }
  }
  destroy() {
    if (this.working)
      this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
});
const language = /* @__PURE__ */ Facet.define({
  combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: (language2) => [
    Language.state,
    parseWorker,
    EditorView.contentAttributes.compute([language2], (state) => {
      let lang = state.facet(language2);
      return lang && lang.name ? { "data-language": lang.name } : {};
    })
  ]
});
class LanguageSupport {
  /**
  Create a language support object.
  */
  constructor(language2, support = []) {
    this.language = language2;
    this.support = support;
    this.extension = [language2, support];
  }
}
const indentService = /* @__PURE__ */ Facet.define();
const indentUnit = /* @__PURE__ */ Facet.define({
  combine: (values2) => {
    if (!values2.length)
      return "  ";
    let unit = values2[0];
    if (!unit || /\S/.test(unit) || Array.from(unit).some((e) => e != unit[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(values2[0]));
    return unit;
  }
});
function getIndentUnit(state) {
  let unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
function indentString(state, cols) {
  let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
  if (ch == "	") {
    while (cols >= ts) {
      result += "	";
      cols -= ts;
    }
    ch = " ";
  }
  for (let i = 0; i < cols; i++)
    result += ch;
  return result;
}
function getIndentation(context, pos) {
  if (context instanceof EditorState)
    context = new IndentContext(context);
  for (let service of context.state.facet(indentService)) {
    let result = service(context, pos);
    if (result !== void 0)
      return result;
  }
  let tree = syntaxTree$1(context.state);
  return tree ? syntaxIndentation(context, tree, pos) : null;
}
class IndentContext {
  /**
  Create an indent context.
  */
  constructor(state, options = {}) {
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(pos, bias = 1) {
    let line = this.state.doc.lineAt(pos);
    let { simulateBreak, simulateDoubleBreak } = this.options;
    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
      if (simulateDoubleBreak && simulateBreak == pos)
        return { text: "", from: pos };
      else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
        return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
      else
        return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
    }
    return line;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(pos, bias = 1) {
    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
      return "";
    let { text, from } = this.lineAt(pos, bias);
    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
  }
  /**
  Find the column for the given position.
  */
  column(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let result = this.countColumn(text, pos - from);
    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
    if (override > -1)
      result += override - this.countColumn(text, text.search(/\S|$/));
    return result;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(line, pos = line.length) {
    return countColumn(line, this.state.tabSize, pos);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let override = this.options.overrideIndentation;
    if (override) {
      let overriden = override(from);
      if (overriden > -1)
        return overriden;
    }
    return this.countColumn(text, text.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const indentNodeProp = /* @__PURE__ */ new NodeProp();
function syntaxIndentation(cx, ast2, pos) {
  return indentFrom(ast2.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
}
function ignoreClosed(cx) {
  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy)
    return strategy;
  let first2 = tree.firstChild, close;
  if (first2 && (close = first2.type.prop(NodeProp.closedBy))) {
    let last2 = tree.lastChild, closed = last2 && close.indexOf(last2.name) > -1;
    return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last2.from : void 0);
  }
  return tree.parent == null ? topIndent : null;
}
function indentFrom(node, pos, base2) {
  for (; node; node = node.parent) {
    let strategy = indentStrategy(node);
    if (strategy)
      return strategy(TreeIndentContext.create(base2, pos, node));
  }
  return null;
}
function topIndent() {
  return 0;
}
class TreeIndentContext extends IndentContext {
  constructor(base2, pos, node) {
    super(base2.state, base2.options);
    this.base = base2;
    this.pos = pos;
    this.node = node;
  }
  /**
  @internal
  */
  static create(base2, pos, node) {
    return new TreeIndentContext(base2, pos, node);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(node) {
    let line = this.state.doc.lineAt(node.from);
    for (; ; ) {
      let atBreak = node.resolve(line.from);
      while (atBreak.parent && atBreak.parent.from == atBreak.from)
        atBreak = atBreak.parent;
      if (isParent(atBreak, node))
        break;
      line = this.state.doc.lineAt(atBreak.from);
    }
    return this.lineIndent(line.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    let parent = this.node.parent;
    return parent ? indentFrom(parent, this.pos, this.base) : 0;
  }
}
function isParent(parent, of) {
  for (let cur = of; cur; cur = cur.parent)
    if (parent == cur)
      return true;
  return false;
}
function bracketedAligned(context) {
  let tree = context.node;
  let openToken = tree.childAfter(tree.from), last2 = tree.lastChild;
  if (!openToken)
    return null;
  let sim = context.options.simulateBreak;
  let openLine = context.state.doc.lineAt(openToken.from);
  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (let pos = openToken.to; ; ) {
    let next = tree.childAfter(pos);
    if (!next || next == last2)
      return null;
    if (!next.type.isSkipped)
      return next.from < lineEnd ? openToken : null;
    pos = next.to;
  }
}
function delimitedIndent({ closing: closing2, align = true, units = 1 }) {
  return (context) => delimitedStrategy(context, align, units, closing2);
}
function delimitedStrategy(context, align, units, closing2, closedAt) {
  let after = context.textAfter, space2 = after.match(/^\s*/)[0].length;
  let closed = closing2 && after.slice(space2, space2 + closing2.length) == closing2 || closedAt == context.pos + space2;
  let aligned = align ? bracketedAligned(context) : null;
  if (aligned)
    return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
const flatIndent = (context) => context.baseIndent;
function continuedIndent({ except, units = 1 } = {}) {
  return (context) => {
    let matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
const foldNodeProp = /* @__PURE__ */ new NodeProp();
function foldInside(node) {
  let first2 = node.firstChild, last2 = node.lastChild;
  return first2 && first2.to < last2.from ? { from: first2.to, to: last2.type.isError ? node.to : last2.from } : null;
}
class HighlightStyle {
  constructor(specs, options) {
    this.specs = specs;
    let modSpec;
    function def(spec) {
      let cls = StyleModule.newName();
      (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
      return cls;
    }
    const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
    const scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
    this.style = tagHighlighter(specs.map((style) => ({
      tag: style.tag,
      class: style.class || def(Object.assign({}, style, { tag: null }))
    })), {
      all
    }).style;
    this.module = modSpec ? new StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(specs, options) {
    return new HighlightStyle(specs, options || {});
  }
}
const highlighterFacet = /* @__PURE__ */ Facet.define();
const fallbackHighlighter = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return values2.length ? [values2[0]] : null;
  }
});
function getHighlighters(state) {
  let main2 = state.facet(highlighterFacet);
  return main2.length ? main2 : state.facet(fallbackHighlighter);
}
function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter], themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module)
      ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback)
    ext.push(fallbackHighlighter.of(highlighter));
  else if (themeType)
    ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));
  else
    ext.push(highlighterFacet.of(highlighter));
  return ext;
}
class TreeHighlighter {
  constructor(view) {
    this.markCache = /* @__PURE__ */ Object.create(null);
    this.tree = syntaxTree$1(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
  }
  update(update) {
    let tree = syntaxTree$1(update.state), highlighters = getHighlighters(update.state);
    let styleChange = highlighters != getHighlighters(update.startState);
    if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
      this.decorations = this.decorations.map(update.changes);
    } else if (tree != this.tree || update.viewportChanged || styleChange) {
      this.tree = tree;
      this.decorations = this.buildDeco(update.view, highlighters);
    }
  }
  buildDeco(view, highlighters) {
    if (!highlighters || !this.tree.length)
      return Decoration.none;
    let builder = new RangeSetBuilder();
    for (let { from, to } of view.visibleRanges) {
      highlightTree(this.tree, highlighters, (from2, to2, style) => {
        builder.add(from2, to2, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
      }, from, to);
    }
    return builder.finish();
  }
}
const treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
  decorations: (v2) => v2.decorations
}));
const baseTheme$1 = /* @__PURE__ */ EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
});
const DefaultScanDist = 1e4, DefaultBrackets = "()[]{}";
const bracketMatchingConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }
});
const matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
function defaultRenderMatch(match) {
  let decorations2 = [];
  let mark = match.matched ? matchingMark : nonmatchingMark;
  decorations2.push(mark.range(match.start.from, match.start.to));
  if (match.end)
    decorations2.push(mark.range(match.end.from, match.end.to));
  return decorations2;
}
const bracketMatchingState = /* @__PURE__ */ StateField.define({
  create() {
    return Decoration.none;
  },
  update(deco, tr) {
    if (!tr.docChanged && !tr.selection)
      return deco;
    let decorations2 = [];
    let config2 = tr.state.facet(bracketMatchingConfig);
    for (let range2 of tr.state.selection.ranges) {
      if (!range2.empty)
        continue;
      let match = matchBrackets(tr.state, range2.head, -1, config2) || range2.head > 0 && matchBrackets(tr.state, range2.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr.state, range2.head, 1, config2) || range2.head < tr.state.doc.length && matchBrackets(tr.state, range2.head + 1, -1, config2));
      if (match)
        decorations2 = decorations2.concat(config2.renderMatch(match, tr.state));
    }
    return Decoration.set(decorations2, true);
  },
  provide: (f2) => EditorView.decorations.from(f2)
});
const bracketMatchingUnique = [
  bracketMatchingState,
  baseTheme$1
];
function bracketMatching(config2 = {}) {
  return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
}
const bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
function matchingNodes(node, dir, brackets) {
  let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp)
    return byProp;
  if (node.name.length == 1) {
    let index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
      return [brackets[index + dir]];
  }
  return null;
}
function findHandle(node) {
  let hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
function matchBrackets(state, pos, dir, config2 = {}) {
  let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
  let tree = syntaxTree$1(state), node = tree.resolveInner(pos, dir);
  for (let cur = node; cur; cur = cur.parent) {
    let matches = matchingNodes(cur.type, dir, brackets);
    if (matches && cur.from < cur.to) {
      let handle = findHandle(cur);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
        return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
  let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
  let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
    do {
      if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
        if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          let endHandle = findHandle(cursor);
          return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth == 0) {
            let endHandle = findHandle(cursor);
            return {
              start: firstToken,
              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return { start: firstToken, matched: false };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket2 = brackets.indexOf(startCh);
  if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
    return null;
  let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
  for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
    let text = iter.value;
    if (dir < 0)
      distance += text.length;
    let basePos = pos + distance * dir;
    for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
      let found = brackets.indexOf(text[pos2]);
      if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
        continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
      } else {
        depth--;
      }
    }
    if (dir > 0)
      distance += text.length;
  }
  return iter.done ? { start: startToken, matched: false } : null;
}
const noTokens = /* @__PURE__ */ Object.create(null);
const typeArray = [NodeType.none];
const warned = [];
const defaultTable = /* @__PURE__ */ Object.create(null);
for (let [legacyName, name2] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1)
    return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  let tag = null;
  for (let part of tagStr.split(".")) {
    let value = extra[part] || tags$1[part];
    if (!value) {
      warnForPart(part, `Unknown highlighting tag ${part}`);
    } else if (typeof value == "function") {
      if (!tag)
        warnForPart(part, `Modifier ${part} used at start of tag`);
      else
        tag = value(tag);
    } else {
      if (tag)
        warnForPart(part, `Tag ${part} used as modifier`);
      else
        tag = value;
    }
  }
  if (!tag)
    return 0;
  let name2 = tagStr.replace(/ /g, "_"), type = NodeType.define({
    id: typeArray.length,
    name: name2,
    props: [styleTags({ [name2]: tag })]
  });
  typeArray.push(type);
  return type.id;
}
function toSet(chars) {
  let flat = Object.keys(chars).join("");
  let words = /\w/.test(flat);
  if (words)
    flat = flat.replace(/\w/g, "");
  return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}
function prefixMatch(options) {
  let first2 = /* @__PURE__ */ Object.create(null), rest2 = /* @__PURE__ */ Object.create(null);
  for (let { label } of options) {
    first2[label[0]] = true;
    for (let i = 1; i < label.length; i++)
      rest2[label[i]] = true;
  }
  let source = toSet(first2) + toSet(rest2) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
function completeFromList(list) {
  let options = list.map((o2) => typeof o2 == "string" ? { label: o2 } : o2);
  let [validFor, match] = options.every((o2) => /^\w+$/.test(o2.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return (context) => {
    let token = context.matchBefore(match);
    return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
  };
}
function ifNotIn(nodes, source) {
  return (context) => {
    for (let pos = syntaxTree$1(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1)
        return null;
      if (pos.type.isTop)
        break;
    }
    return source(context);
  };
}
const pickedCompletion = /* @__PURE__ */ Annotation.define();
const baseTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: `${400}px`,
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class FieldPos {
  constructor(field, line, from, to) {
    this.field = field;
    this.line = line;
    this.from = from;
    this.to = to;
  }
}
class FieldRange {
  constructor(field, from, to) {
    this.field = field;
    this.from = from;
    this.to = to;
  }
  map(changes) {
    let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
    let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
    return from == null || to == null ? null : new FieldRange(this.field, from, to);
  }
}
class Snippet {
  constructor(lines, fieldPositions) {
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  instantiate(state, pos) {
    let text = [], lineStart = [pos];
    let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
    for (let line of this.lines) {
      if (text.length) {
        let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
        for (let i = 0; i < tabs; i++)
          indent += state.facet(indentUnit);
        lineStart.push(pos + indent.length - tabs);
        line = indent + line.slice(tabs);
      }
      text.push(line);
      pos += line.length + 1;
    }
    let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
    return { text, ranges };
  }
  static parse(template) {
    let fields = [];
    let lines = [], positions = [], m2;
    for (let line of template.split(/\r\n?|\n/)) {
      while (m2 = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
        let seq = m2[1] ? +m2[1] : null, name2 = m2[2] || m2[3] || "", found = -1;
        for (let i = 0; i < fields.length; i++) {
          if (seq != null ? fields[i].seq == seq : name2 ? fields[i].name == name2 : false)
            found = i;
        }
        if (found < 0) {
          let i = 0;
          while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq))
            i++;
          fields.splice(i, 0, { seq, name: name2 });
          found = i;
          for (let pos of positions)
            if (pos.field >= found)
              pos.field++;
        }
        positions.push(new FieldPos(found, lines.length, m2.index, m2.index + name2.length));
        line = line.slice(0, m2.index) + name2 + line.slice(m2.index + m2[0].length);
      }
      for (let esc; esc = /\\([{}])/.exec(line); ) {
        line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
        for (let pos of positions)
          if (pos.line == lines.length && pos.from > esc.index) {
            pos.from--;
            pos.to--;
          }
      }
      lines.push(line);
    }
    return new Snippet(lines, positions);
  }
}
let fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
  toDOM() {
    let span = document.createElement("span");
    span.className = "cm-snippetFieldPosition";
    return span;
  }
  ignoreEvent() {
    return false;
  }
}() });
let fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
class ActiveSnippet {
  constructor(ranges, active) {
    this.ranges = ranges;
    this.active = active;
    this.deco = Decoration.set(ranges.map((r2) => (r2.from == r2.to ? fieldMarker : fieldRange).range(r2.from, r2.to)));
  }
  map(changes) {
    let ranges = [];
    for (let r2 of this.ranges) {
      let mapped = r2.map(changes);
      if (!mapped)
        return null;
      ranges.push(mapped);
    }
    return new ActiveSnippet(ranges, this.active);
  }
  selectionInsideField(sel) {
    return sel.ranges.every((range2) => this.ranges.some((r2) => r2.field == this.active && r2.from <= range2.from && r2.to >= range2.to));
  }
}
const setActive = /* @__PURE__ */ StateEffect.define({
  map(value, changes) {
    return value && value.map(changes);
  }
});
const moveToField = /* @__PURE__ */ StateEffect.define();
const snippetState = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setActive))
        return effect.value;
      if (effect.is(moveToField) && value)
        return new ActiveSnippet(value.ranges, effect.value);
    }
    if (value && tr.docChanged)
      value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection))
      value = null;
    return value;
  },
  provide: (f2) => EditorView.decorations.from(f2, (val) => val ? val.deco : Decoration.none)
});
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter((r2) => r2.field == field).map((r2) => EditorSelection.range(r2.from, r2.to)));
}
function snippet(template) {
  let snippet2 = Snippet.parse(template);
  return (editor, completion, from, to) => {
    let { text, ranges } = snippet2.instantiate(editor.state, from);
    let spec = {
      changes: { from, to, insert: Text.of(text) },
      scrollIntoView: true,
      annotations: completion ? pickedCompletion.of(completion) : void 0
    };
    if (ranges.length)
      spec.selection = fieldSelection(ranges, 0);
    if (ranges.length > 1) {
      let active = new ActiveSnippet(ranges, 0);
      let effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === void 0)
        effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0)
      return false;
    let next = active.active + dir, last2 = dir > 0 && !active.ranges.some((r2) => r2.field == next + dir);
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last2 ? null : new ActiveSnippet(active.ranges, next))
    }));
    return true;
  };
}
const clearSnippet = ({ state, dispatch }) => {
  let active = state.field(snippetState, false);
  if (!active)
    return false;
  dispatch(state.update({ effects: setActive.of(null) }));
  return true;
};
const nextSnippetField = /* @__PURE__ */ moveField(1);
const prevSnippetField = /* @__PURE__ */ moveField(-1);
const defaultSnippetKeymap = [
  { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
  { key: "Escape", run: clearSnippet }
];
const snippetKeymap = /* @__PURE__ */ Facet.define({
  combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
const addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
}
const snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
  mousedown(event, view) {
    let active = view.state.field(snippetState, false), pos;
    if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
      return false;
    let match = active.ranges.find((r2) => r2.from <= pos && r2.to >= pos);
    if (!match || match.field == active.active)
      return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some((r2) => r2.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
    });
    return true;
  }
});
const defaults = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
};
const closeBracketEffect = /* @__PURE__ */ StateEffect.define({
  map(value, mapping) {
    let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
    return mapped == null ? void 0 : mapped;
  }
});
const closedBracket = /* @__PURE__ */ new class extends RangeValue {
}();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
const bracketState = /* @__PURE__ */ StateField.define({
  create() {
    return RangeSet.empty;
  },
  update(value, tr) {
    if (tr.selection) {
      let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
      let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
      if (lineStart != tr.changes.mapPos(prevLineStart, -1))
        value = RangeSet.empty;
    }
    value = value.map(tr.changes);
    for (let effect of tr.effects)
      if (effect.is(closeBracketEffect))
        value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
    return value;
  }
});
function closeBrackets() {
  return [inputHandler, bracketState];
}
const definedClosing = "()[]{}<>";
function closing(ch) {
  for (let i = 0; i < definedClosing.length; i += 2)
    if (definedClosing.charCodeAt(i) == ch)
      return definedClosing.charAt(i + 1);
  return fromCodePoint(ch < 128 ? ch : ch + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults;
}
const android$1 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
const inputHandler = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to, insert2) => {
  if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly)
    return false;
  let sel = view.state.selection.main;
  if (insert2.length > 2 || insert2.length == 2 && codePointSize(codePointAt(insert2, 0)) == 1 || from != sel.from || to != sel.to)
    return false;
  let tr = insertBracket(view.state, insert2);
  if (!tr)
    return false;
  view.dispatch(tr);
  return true;
});
const deleteBracketPair = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let conf = config(state, state.selection.main.head);
  let tokens2 = conf.brackets || defaults.brackets;
  let dont = null, changes = state.changeByRange((range2) => {
    if (range2.empty) {
      let before = prevChar(state.doc, range2.head);
      for (let token of tokens2) {
        if (token == before && nextChar(state.doc, range2.head) == closing(codePointAt(token, 0)))
          return {
            changes: { from: range2.head - token.length, to: range2.head + token.length },
            range: EditorSelection.cursor(range2.head - token.length)
          };
      }
    }
    return { range: dont = range2 };
  });
  if (!dont)
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
  return !dont;
};
const closeBracketsKeymap = [
  { key: "Backspace", run: deleteBracketPair }
];
function insertBracket(state, bracket2) {
  let conf = config(state, state.selection.main.head);
  let tokens2 = conf.brackets || defaults.brackets;
  for (let tok of tokens2) {
    let closed = closing(codePointAt(tok, 0));
    if (bracket2 == tok)
      return closed == tok ? handleSame(state, tok, tokens2.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);
    if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
      return handleClose(state, tok, closed);
  }
  return null;
}
function closedBracketAt(state, pos) {
  let found = false;
  state.field(bracketState).between(0, state.doc.length, (from) => {
    if (from == pos)
      found = true;
  });
  return found;
}
function nextChar(doc2, pos) {
  let next = doc2.sliceString(pos, pos + 2);
  return next.slice(0, codePointSize(codePointAt(next, 0)));
}
function prevChar(doc2, pos) {
  let prev = doc2.sliceString(pos - 2, pos);
  return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  let dont = null, changes = state.changeByRange((range2) => {
    if (!range2.empty)
      return {
        changes: [{ insert: open, from: range2.from }, { insert: close, from: range2.to }],
        effects: closeBracketEffect.of(range2.to + open.length),
        range: EditorSelection.range(range2.anchor + open.length, range2.head + open.length)
      };
    let next = nextChar(state.doc, range2.head);
    if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
      return {
        changes: { insert: open + close, from: range2.head },
        effects: closeBracketEffect.of(range2.head + open.length),
        range: EditorSelection.cursor(range2.head + open.length)
      };
    return { range: dont = range2 };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close) {
  let dont = null, changes = state.changeByRange((range2) => {
    if (range2.empty && nextChar(state.doc, range2.head) == close)
      return {
        changes: { from: range2.head, to: range2.head + close.length, insert: close },
        range: EditorSelection.cursor(range2.head + close.length)
      };
    return dont = { range: range2 };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleSame(state, token, allowTriple, config2) {
  let stringPrefixes = config2.stringPrefixes || defaults.stringPrefixes;
  let dont = null, changes = state.changeByRange((range2) => {
    if (!range2.empty)
      return {
        changes: [{ insert: token, from: range2.from }, { insert: token, from: range2.to }],
        effects: closeBracketEffect.of(range2.to + token.length),
        range: EditorSelection.range(range2.anchor + token.length, range2.head + token.length)
      };
    let pos = range2.head, next = nextChar(state.doc, pos), start;
    if (next == token) {
      if (nodeStart(state, pos)) {
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (closedBracketAt(state, pos)) {
        let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
        let content2 = isTriple ? token + token + token : token;
        return {
          changes: { from: pos, to: pos + content2.length, insert: content2 },
          range: EditorSelection.cursor(pos + content2.length)
        };
      }
    } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
      return {
        changes: { insert: token + token + token + token, from: pos },
        effects: closeBracketEffect.of(pos + token.length),
        range: EditorSelection.cursor(pos + token.length)
      };
    } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
      if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
    }
    return { range: dont = range2 };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  let tree = syntaxTree$1(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes) {
  let node = syntaxTree$1(state).resolveInner(pos, -1);
  let maxPrefix = prefixes.reduce((m2, p2) => Math.max(m2, p2.length), 0);
  for (let i = 0; i < 5; i++) {
    let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
    let quotePos = start.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
      let first2 = node.firstChild;
      while (first2 && first2.from == node.from && first2.to - first2.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first2.to - quoteToken.length, first2.to) == quoteToken)
          return false;
        first2 = first2.firstChild;
      }
      return true;
    }
    let parent = node.to == pos && node.parent;
    if (!parent)
      break;
    node = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes) {
  let charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
    return pos;
  for (let prefix of prefixes) {
    let start = pos - prefix.length;
    if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
      return start;
  }
  return -1;
}
const toggleComment = (target) => {
  let { state } = target, line = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line.from);
  return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
};
function command(f2, option) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let tr = f2(option, state);
    if (!tr)
      return false;
    dispatch(state.update(tr));
    return true;
  };
}
const toggleLineComment = /* @__PURE__ */ command(
  changeLineComment,
  0
  /* CommentOption.Toggle */
);
const toggleBlockComment = /* @__PURE__ */ command(
  changeBlockComment,
  0
  /* CommentOption.Toggle */
);
const toggleBlockCommentByLine = /* @__PURE__ */ command(
  (o2, s2) => changeBlockComment(o2, s2, selectedLineRanges(s2)),
  0
  /* CommentOption.Toggle */
);
function getConfig(state, pos) {
  let data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}
const SearchMargin = 50;
function findBlockComment(state, { open, close }, from, to) {
  let textBefore = state.sliceDoc(from - SearchMargin, from);
  let textAfter = state.sliceDoc(to, to + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
    };
  }
  let startText, endText;
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  let ranges = [];
  for (let r2 of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r2.from);
    let toLine = r2.to <= fromLine.to ? fromLine : state.doc.lineAt(r2.to);
    let last2 = ranges.length - 1;
    if (last2 >= 0 && ranges[last2].to > fromLine.from)
      ranges[last2].to = toLine.to;
    else
      ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
  }
  return ranges;
}
function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens2 = ranges.map((r2) => getConfig(state, r2.from).block);
  if (!tokens2.every((c2) => c2))
    return null;
  let comments = ranges.map((r2, i) => findBlockComment(state, tokens2[i], r2.from, r2.to));
  if (option != 2 && !comments.every((c2) => c2)) {
    return { changes: state.changes(ranges.map((range2, i) => {
      if (comments[i])
        return [];
      return [{ from: range2.from, insert: tokens2[i].open + " " }, { from: range2.to, insert: " " + tokens2[i].close }];
    })) };
  } else if (option != 1 && comments.some((c2) => c2)) {
    let changes = [];
    for (let i = 0, comment2; i < comments.length; i++)
      if (comment2 = comments[i]) {
        let token = tokens2[i], { open, close } = comment2;
        changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
      }
    return { changes };
  }
  return null;
}
function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;
  for (let { from, to } of ranges) {
    let startI = lines.length, minIndent = 1e9;
    let token = getConfig(state, from).line;
    if (!token)
      continue;
    for (let pos = from; pos <= to; ) {
      let line = state.doc.lineAt(pos);
      if (line.from > prevLine && (from == to || to > line.from)) {
        prevLine = line.from;
        let indent = /^\s*/.exec(line.text)[0].length;
        let empty = indent == line.length;
        let comment2 = line.text.slice(indent, indent + token.length) == token ? indent : -1;
        if (indent < line.text.length && indent < minIndent)
          minIndent = indent;
        lines.push({ line, comment: comment2, token, indent, empty, single: false });
      }
      pos = line.to + 1;
    }
    if (minIndent < 1e9) {
      for (let i = startI; i < lines.length; i++)
        if (lines[i].indent < lines[i].line.text.length)
          lines[i].indent = minIndent;
    }
    if (lines.length == startI + 1)
      lines[startI].single = true;
  }
  if (option != 2 && lines.some((l2) => l2.comment < 0 && (!l2.empty || l2.single))) {
    let changes = [];
    for (let { line, token, indent, empty, single } of lines)
      if (single || !empty)
        changes.push({ from: line.from + indent, insert: token + " " });
    let changeSet = state.changes(changes);
    return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
  } else if (option != 1 && lines.some((l2) => l2.comment >= 0)) {
    let changes = [];
    for (let { line, comment: comment2, token } of lines)
      if (comment2 >= 0) {
        let from = line.from + comment2, to = from + token.length;
        if (line.text[to - line.from] == " ")
          to++;
        changes.push({ from, to });
      }
    return { changes };
  }
  return null;
}
const fromHistory = /* @__PURE__ */ Annotation.define();
const isolateHistory = /* @__PURE__ */ Annotation.define();
const invertedEffects = /* @__PURE__ */ Facet.define();
const historyConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (_t, isAdjacent2) => isAdjacent2
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (a2, b2) => (tr, adj) => a2(tr, adj) || b2(tr, adj)
    });
  }
});
function changeEnd(changes) {
  let end = 0;
  changes.iterChangedRanges((_, to) => end = to);
  return end;
}
const historyField_ = /* @__PURE__ */ StateField.define({
  create() {
    return HistoryState.empty;
  },
  update(state, tr) {
    let config2 = tr.state.facet(historyConfig);
    let fromHist = tr.annotation(fromHistory);
    if (fromHist) {
      let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : void 0;
      let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;
      let other = from == 0 ? state.undone : state.done;
      if (item)
        other = updateBranch(other, other.length, config2.minDepth, item);
      else
        other = addSelection(other, tr.startState.selection);
      return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
    }
    let isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before")
      state = state.isolate();
    if (tr.annotation(Transaction.addToHistory) === false)
      return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    let event = HistEvent.fromTransaction(tr);
    let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
    if (event)
      state = state.addChanges(event, time, userEvent, config2, tr);
    else if (tr.selection)
      state = state.addSelection(tr.startState.selection, time, userEvent, config2.newGroupDelay);
    if (isolate == "full" || isolate == "after")
      state = state.isolate();
    return state;
  },
  toJSON(value) {
    return { done: value.done.map((e) => e.toJSON()), undone: value.undone.map((e) => e.toJSON()) };
  },
  fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
function history(config2 = {}) {
  return [
    historyField_,
    historyConfig.of(config2),
    EditorView.domEventHandlers({
      beforeinput(e, view) {
        let command2 = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
        if (!command2)
          return false;
        e.preventDefault();
        return command2(view);
      }
    })
  ];
}
function cmd(side, selection) {
  return function({ state, dispatch }) {
    if (!selection && state.readOnly)
      return false;
    let historyState = state.field(historyField_, false);
    if (!historyState)
      return false;
    let tr = historyState.pop(side, state, selection);
    if (!tr)
      return false;
    dispatch(tr);
    return true;
  };
}
const undo = /* @__PURE__ */ cmd(0, false);
const redo = /* @__PURE__ */ cmd(1, false);
const undoSelection = /* @__PURE__ */ cmd(0, true);
const redoSelection = /* @__PURE__ */ cmd(1, true);
class HistEvent {
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  setSelAfter(after) {
    return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }
  toJSON() {
    var _a2, _b2, _c2;
    return {
      changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
      mapped: (_b2 = this.mapped) === null || _b2 === void 0 ? void 0 : _b2.toJSON(),
      startSelection: (_c2 = this.startSelection) === null || _c2 === void 0 ? void 0 : _c2.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s2) => s2.toJSON())
    };
  }
  static fromJSON(json) {
    return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr, selection) {
    let effects = none;
    for (let invert of tr.startState.facet(invertedEffects)) {
      let result = invert(tr);
      if (result.length)
        effects = effects.concat(result);
    }
    if (!effects.length && tr.changes.empty)
      return null;
    return new HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection || tr.startState.selection, none);
  }
  static selection(selections) {
    return new HistEvent(void 0, none, void 0, void 0, selections);
  }
}
function updateBranch(branch, to, maxLen, newEvent) {
  let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  let newBranch = branch.slice(start, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a2, b2) {
  let ranges = [], isAdjacent2 = false;
  a2.iterChangedRanges((f2, t2) => ranges.push(f2, t2));
  b2.iterChangedRanges((_f, _t, f2, t2) => {
    for (let i = 0; i < ranges.length; ) {
      let from = ranges[i++], to = ranges[i++];
      if (t2 >= from && f2 <= to)
        isAdjacent2 = true;
    }
  });
  return isAdjacent2;
}
function eqSelectionShape(a2, b2) {
  return a2.ranges.length == b2.ranges.length && a2.ranges.filter((r2, i) => r2.empty != b2.ranges[i].empty).length === 0;
}
function conc(a2, b2) {
  return !a2.length ? b2 : !b2.length ? a2 : a2.concat(b2);
}
const none = [];
const MaxSelectionsPerEvent = 200;
function addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection))
      return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
function popSelection(branch) {
  let last2 = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last2.setSelAfter(last2.selectionsAfter.slice(0, last2.selectionsAfter.length - 1));
  return newBranch;
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length)
    return branch;
  let length = branch.length, selections = none;
  while (length) {
    let event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      let result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none;
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s2) => s2.map(mapping)) : none, extraSelections);
  if (!event.changes)
    return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
const joinableUserEvent = /^(input\.type|delete)($|\.)/;
class HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  isolate() {
    return this.prevTime ? new HistoryState(this.done, this.undone) : this;
  }
  addChanges(event, time, userEvent, config2, tr) {
    let done = this.done, lastEvent = done[done.length - 1];
    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
    } else {
      done = updateBranch(done, done.length, config2.minDepth, event);
    }
    return new HistoryState(done, none, time, userEvent);
  }
  addSelection(selection, time, userEvent, newGroupDelay) {
    let last2 = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
    if (last2.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last2[last2.length - 1], selection))
      return this;
    return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
  }
  addMapping(mapping) {
    return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }
  pop(side, state, selection) {
    let branch = side == 0 ? this.done : this.undone;
    if (branch.length == 0)
      return null;
    let event = branch[branch.length - 1];
    if (selection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({ side, rest: popSelection(branch) }),
        userEvent: side == 0 ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest2 = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
      if (event.mapped)
        rest2 = addMappingToBranch(rest2, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest: rest2 }),
        filter: false,
        userEvent: side == 0 ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }
}
HistoryState.empty = /* @__PURE__ */ new HistoryState(none, none);
const historyKeymap = [
  { key: "Mod-z", run: undo, preventDefault: true },
  { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
  { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
  { key: "Mod-u", run: undoSelection, preventDefault: true },
  { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
];
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({ selection, scrollIntoView: true, userEvent: "select" });
}
function moveSel({ state, dispatch }, how) {
  let selection = updateSel(state.selection, how);
  if (selection.eq(state.selection))
    return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range2, forward) {
  return EditorSelection.cursor(forward ? range2.to : range2.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, (range2) => range2.empty ? view.moveByChar(range2, forward) : rangeEnd(range2, forward));
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
}
const cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
const cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
function cursorByGroup(view, forward) {
  return moveSel(view, (range2) => range2.empty ? view.moveByGroup(range2, forward) : rangeEnd(range2, forward));
}
const cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
const cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp))
    return true;
  let len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start, forward) {
  let pos = syntaxTree$1(state).resolveInner(start.head);
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  for (let at = start.head; ; ) {
    let next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next)
      break;
    if (interestingNode(state, next, bracketProp))
      pos = next;
    else
      at = forward ? next.to : next.from;
  }
  let bracket2 = pos.type.prop(bracketProp), match, newPos;
  if (bracket2 && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
    newPos = forward ? match.end.to : match.end.from;
  else
    newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
const cursorSyntaxLeft = (view) => moveSel(view, (range2) => moveBySyntax(view.state, range2, !ltrAtCursor(view)));
const cursorSyntaxRight = (view) => moveSel(view, (range2) => moveBySyntax(view.state, range2, ltrAtCursor(view)));
function cursorByLine(view, forward) {
  return moveSel(view, (range2) => {
    if (!range2.empty)
      return rangeEnd(range2, forward);
    let moved = view.moveVertically(range2, forward);
    return moved.head != range2.head ? moved : view.moveToLineBoundary(range2, forward);
  });
}
const cursorLineUp = (view) => cursorByLine(view, false);
const cursorLineDown = (view) => cursorByLine(view, true);
function pageInfo(view) {
  let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  let marginTop = 0, marginBottom = 0, height;
  if (selfScroll) {
    for (let source of view.state.facet(EditorView.scrollMargins)) {
      let margins = source(view);
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  let page = pageInfo(view);
  let { state } = view, selection = updateSel(state.selection, (range2) => {
    return range2.empty ? view.moveVertically(range2, forward, page.height) : rangeEnd(range2, forward);
  });
  if (selection.eq(state.selection))
    return false;
  let effect;
  if (page.selfScroll) {
    let startPos = view.coordsAtPos(state.selection.main.head);
    let scrollRect = view.scrollDOM.getBoundingClientRect();
    let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
  }
  view.dispatch(setSel(state, selection), { effects: effect });
  return true;
}
const cursorPageUp = (view) => cursorByPage(view, false);
const cursorPageDown = (view) => cursorByPage(view, true);
function moveByLineBoundary(view, start, forward) {
  let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
    moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    let space2 = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space2 && start.head != line.from + space2)
      moved = EditorSelection.cursor(line.from + space2);
  }
  return moved;
}
const cursorLineBoundaryForward = (view) => moveSel(view, (range2) => moveByLineBoundary(view, range2, true));
const cursorLineBoundaryBackward = (view) => moveSel(view, (range2) => moveByLineBoundary(view, range2, false));
const cursorLineBoundaryLeft = (view) => moveSel(view, (range2) => moveByLineBoundary(view, range2, !ltrAtCursor(view)));
const cursorLineBoundaryRight = (view) => moveSel(view, (range2) => moveByLineBoundary(view, range2, ltrAtCursor(view)));
const cursorLineStart = (view) => moveSel(view, (range2) => EditorSelection.cursor(view.lineBlockAt(range2.head).from, 1));
const cursorLineEnd = (view) => moveSel(view, (range2) => EditorSelection.cursor(view.lineBlockAt(range2.head).to, -1));
function toMatchingBracket(state, dispatch, extend2) {
  let found = false, selection = updateSel(state.selection, (range2) => {
    let matching = matchBrackets(state, range2.head, -1) || matchBrackets(state, range2.head, 1) || range2.head > 0 && matchBrackets(state, range2.head - 1, 1) || range2.head < state.doc.length && matchBrackets(state, range2.head + 1, -1);
    if (!matching || !matching.end)
      return range2;
    found = true;
    let head = matching.start.from == range2.head ? matching.end.to : matching.end.from;
    return extend2 ? EditorSelection.range(range2.anchor, head) : EditorSelection.cursor(head);
  });
  if (!found)
    return false;
  dispatch(setSel(state, selection));
  return true;
}
const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
function extendSel(view, how) {
  let selection = updateSel(view.state.selection, (range2) => {
    let head = how(range2);
    return EditorSelection.range(range2.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
  });
  if (selection.eq(view.state.selection))
    return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, (range2) => view.moveByChar(range2, forward));
}
const selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
const selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
function selectByGroup(view, forward) {
  return extendSel(view, (range2) => view.moveByGroup(range2, forward));
}
const selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
const selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
const selectSyntaxLeft = (view) => extendSel(view, (range2) => moveBySyntax(view.state, range2, !ltrAtCursor(view)));
const selectSyntaxRight = (view) => extendSel(view, (range2) => moveBySyntax(view.state, range2, ltrAtCursor(view)));
function selectByLine(view, forward) {
  return extendSel(view, (range2) => view.moveVertically(range2, forward));
}
const selectLineUp = (view) => selectByLine(view, false);
const selectLineDown = (view) => selectByLine(view, true);
function selectByPage(view, forward) {
  return extendSel(view, (range2) => view.moveVertically(range2, forward, pageInfo(view).height));
}
const selectPageUp = (view) => selectByPage(view, false);
const selectPageDown = (view) => selectByPage(view, true);
const selectLineBoundaryForward = (view) => extendSel(view, (range2) => moveByLineBoundary(view, range2, true));
const selectLineBoundaryBackward = (view) => extendSel(view, (range2) => moveByLineBoundary(view, range2, false));
const selectLineBoundaryLeft = (view) => extendSel(view, (range2) => moveByLineBoundary(view, range2, !ltrAtCursor(view)));
const selectLineBoundaryRight = (view) => extendSel(view, (range2) => moveByLineBoundary(view, range2, ltrAtCursor(view)));
const selectLineStart = (view) => extendSel(view, (range2) => EditorSelection.cursor(view.lineBlockAt(range2.head).from));
const selectLineEnd = (view) => extendSel(view, (range2) => EditorSelection.cursor(view.lineBlockAt(range2.head).to));
const cursorDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: 0 }));
  return true;
};
const cursorDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.doc.length }));
  return true;
};
const selectDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
  return true;
};
const selectDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
  return true;
};
const selectAll = ({ state, dispatch }) => {
  dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
  return true;
};
const selectLine = ({ state, dispatch }) => {
  let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
  dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
  return true;
};
const selectParentSyntax = ({ state, dispatch }) => {
  let selection = updateSel(state.selection, (range2) => {
    var _a2;
    let context = syntaxTree$1(state).resolveInner(range2.head, 1);
    while (!(context.from < range2.from && context.to >= range2.to || context.to > range2.to && context.from <= range2.from || !((_a2 = context.parent) === null || _a2 === void 0 ? void 0 : _a2.parent)))
      context = context.parent;
    return EditorSelection.range(context.to, context.from);
  });
  dispatch(setSel(state, selection));
  return true;
};
const simplifySelection = ({ state, dispatch }) => {
  let cur = state.selection, selection = null;
  if (cur.ranges.length > 1)
    selection = EditorSelection.create([cur.main]);
  else if (!cur.main.empty)
    selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
  if (!selection)
    return false;
  dispatch(setSel(state, selection));
  return true;
};
function deleteBy(target, by) {
  if (target.state.readOnly)
    return false;
  let event = "delete.selection", { state } = target;
  let changes = state.changeByRange((range2) => {
    let { from, to } = range2;
    if (from == to) {
      let towards = by(from);
      if (towards < from) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    } else {
      from = skipAtomic(target, from, false);
      to = skipAtomic(target, to, true);
    }
    return from == to ? { range: range2 } : { changes: { from, to }, range: EditorSelection.cursor(from) };
  });
  if (changes.changes.empty)
    return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state.facet(EditorView.atomicRanges).map((f2) => f2(target)))
      ranges.between(pos, pos, (from, to) => {
        if (from < pos && to > pos)
          pos = forward ? to : from;
      });
  return pos;
}
const deleteByChar = (target, forward) => deleteBy(target, (pos) => {
  let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
  if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
    if (before[before.length - 1] == "	")
      return pos - 1;
    let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
    for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
      pos--;
    targetPos = pos;
  } else {
    targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
    if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
      targetPos += forward ? 1 : -1;
  }
  return targetPos;
});
const deleteCharBackward = (view) => deleteByChar(view, false);
const deleteCharForward = (view) => deleteByChar(view, true);
const deleteByGroup = (target, forward) => deleteBy(target, (start) => {
  let pos = start, { state } = target, line = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);
  for (let cat = null; ; ) {
    if (pos == (forward ? line.to : line.from)) {
      if (pos == start && line.number != (forward ? state.doc.lines : 1))
        pos += forward ? 1 : -1;
      break;
    }
    let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
    let nextChar2 = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
    let nextCat = categorize(nextChar2);
    if (cat != null && nextCat != cat)
      break;
    if (nextChar2 != " " || pos != start)
      cat = nextCat;
    pos = next;
  }
  return pos;
});
const deleteGroupBackward = (target) => deleteByGroup(target, false);
const deleteGroupForward = (target) => deleteByGroup(target, true);
const deleteToLineEnd = (view) => deleteBy(view, (pos) => {
  let lineEnd = view.lineBlockAt(pos).to;
  return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
});
const deleteToLineStart = (view) => deleteBy(view, (pos) => {
  let lineStart = view.lineBlockAt(pos).from;
  return pos > lineStart ? lineStart : Math.max(0, pos - 1);
});
const splitLine = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range2) => {
    return {
      changes: { from: range2.from, to: range2.to, insert: Text.of(["", ""]) },
      range: EditorSelection.cursor(range2.from)
    };
  });
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
const transposeChars = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range2) => {
    if (!range2.empty || range2.from == 0 || range2.from == state.doc.length)
      return { range: range2 };
    let pos = range2.from, line = state.doc.lineAt(pos);
    let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
    let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
    return {
      changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
      range: EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
  return true;
};
function selectedLineBlocks(state) {
  let blocks = [], upto = -1;
  for (let range2 of state.selection.ranges) {
    let startLine = state.doc.lineAt(range2.from), endLine = state.doc.lineAt(range2.to);
    if (!range2.empty && range2.to == endLine.from)
      endLine = state.doc.lineAt(range2.to - 1);
    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1];
      prev.to = endLine.to;
      prev.ranges.push(range2);
    } else {
      blocks.push({ from: startLine.from, to: endLine.to, ranges: [range2] });
    }
    upto = endLine.number + 1;
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [], ranges = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward ? block.to == state.doc.length : block.from == 0)
      continue;
    let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
    let size = nextLine.length + 1;
    if (forward) {
      changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
      for (let r2 of block.ranges)
        ranges.push(EditorSelection.range(Math.min(state.doc.length, r2.anchor + size), Math.min(state.doc.length, r2.head + size)));
    } else {
      changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
      for (let r2 of block.ranges)
        ranges.push(EditorSelection.range(r2.anchor - size, r2.head - size));
    }
  }
  if (!changes.length)
    return false;
  dispatch(state.update({
    changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
function copyLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward)
      changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
    else
      changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
  }
  dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
  return true;
}
const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
const deleteLine = (view) => {
  if (view.state.readOnly)
    return false;
  let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
    if (from > 0)
      from--;
    else if (to < state.doc.length)
      to++;
    return { from, to };
  }));
  let selection = updateSel(state.selection, (range2) => view.moveVertically(range2, true)).map(changes);
  view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos };
  let context = syntaxTree$1(state).resolveInner(pos);
  let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
    return { from: before.to, to: after.from };
  return null;
}
const insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
const insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range2) => {
      let { from, to } = range2, line = state.doc.lineAt(from);
      let explode = !atEof && from == to && isBetweenBrackets(state, from);
      if (atEof)
        from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
      let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
      let indent = getIndentation(cx, from);
      if (indent == null)
        indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
      while (to < line.to && /\s/.test(line.text[to - line.from]))
        to++;
      if (explode)
        ({ from, to } = explode);
      else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
        from = line.from;
      let insert2 = ["", indentString(state, indent)];
      if (explode)
        insert2.push(indentString(state, cx.lineIndent(line.from, -1)));
      return {
        changes: { from, to, insert: Text.of(insert2) },
        range: EditorSelection.cursor(from + 1 + insert2[1].length)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
}
function changeBySelectedLine(state, f2) {
  let atLine = -1;
  return state.changeByRange((range2) => {
    let changes = [];
    for (let pos = range2.from; pos <= range2.to; ) {
      let line = state.doc.lineAt(pos);
      if (line.number > atLine && (range2.empty || range2.to > line.from)) {
        f2(line, changes, range2);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    let changeSet = state.changes(changes);
    return {
      changes,
      range: EditorSelection.range(changeSet.mapPos(range2.anchor, 1), changeSet.mapPos(range2.head, 1))
    };
  });
}
const indentSelection = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let updated = /* @__PURE__ */ Object.create(null);
  let context = new IndentContext(state, { overrideIndentation: (start) => {
    let found = updated[start];
    return found == null ? -1 : found;
  } });
  let changes = changeBySelectedLine(state, (line, changes2, range2) => {
    let indent = getIndentation(context, line.from);
    if (indent == null)
      return;
    if (!/\S/.test(line.text))
      indent = 0;
    let cur = /^\s*/.exec(line.text)[0];
    let norm = indentString(state, indent);
    if (cur != norm || range2.from < line.from + cur.length) {
      updated[line.from] = indent;
      changes2.push({ from: line.from, to: line.from + cur.length, insert: norm });
    }
  });
  if (!changes.changes.empty)
    dispatch(state.update(changes, { userEvent: "indent" }));
  return true;
};
const indentMore = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    changes.push({ from: line.from, insert: state.facet(indentUnit) });
  }), { userEvent: "input.indent" }));
  return true;
};
const indentLess = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    let space2 = /^\s*/.exec(line.text)[0];
    if (!space2)
      return;
    let col = countColumn(space2, state.tabSize), keep = 0;
    let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space2.length && keep < insert2.length && space2.charCodeAt(keep) == insert2.charCodeAt(keep))
      keep++;
    changes.push({ from: line.from + keep, to: line.from + space2.length, insert: insert2.slice(keep) });
  }), { userEvent: "delete.dedent" }));
  return true;
};
const emacsStyleKeymap = [
  { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
  { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
  { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
  { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
  { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
  { key: "Ctrl-d", run: deleteCharForward },
  { key: "Ctrl-h", run: deleteCharBackward },
  { key: "Ctrl-k", run: deleteToLineEnd },
  { key: "Ctrl-Alt-h", run: deleteGroupBackward },
  { key: "Ctrl-o", run: splitLine },
  { key: "Ctrl-t", run: transposeChars },
  { key: "Ctrl-v", run: cursorPageDown }
];
const standardKeymap = /* @__PURE__ */ [
  { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
  { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
  { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
  { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
  { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
  { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
  { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
  { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
  { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
  { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
  { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
  { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
  { key: "Enter", run: insertNewlineAndIndent },
  { key: "Mod-a", run: selectAll },
  { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
  { key: "Delete", run: deleteCharForward },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
  { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
  { mac: "Mod-Backspace", run: deleteToLineStart },
  { mac: "Mod-Delete", run: deleteToLineEnd }
].concat(/* @__PURE__ */ emacsStyleKeymap.map((b2) => ({ mac: b2.key, run: b2.run, shift: b2.shift })));
const defaultKeymap = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
  { key: "Alt-ArrowUp", run: moveLineUp },
  { key: "Shift-Alt-ArrowUp", run: copyLineUp },
  { key: "Alt-ArrowDown", run: moveLineDown },
  { key: "Shift-Alt-ArrowDown", run: copyLineDown },
  { key: "Escape", run: simplifySelection },
  { key: "Mod-Enter", run: insertBlankLine },
  { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
  { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
  { key: "Mod-[", run: indentLess },
  { key: "Mod-]", run: indentMore },
  { key: "Mod-Alt-\\", run: indentSelection },
  { key: "Shift-Mod-k", run: deleteLine },
  { key: "Shift-Mod-\\", run: cursorMatchingBracket },
  { key: "Mod-/", run: toggleComment },
  { key: "Alt-A", run: toggleBlockComment }
].concat(standardKeymap);
var intersectionObserver = {};
var hasRequiredIntersectionObserver;
function requireIntersectionObserver() {
  if (hasRequiredIntersectionObserver)
    return intersectionObserver;
  hasRequiredIntersectionObserver = 1;
  (function() {
    if (typeof window !== "object") {
      return;
    }
    if ("IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in window.IntersectionObserverEntry.prototype) {
      if (!("isIntersecting" in window.IntersectionObserverEntry.prototype)) {
        Object.defineProperty(
          window.IntersectionObserverEntry.prototype,
          "isIntersecting",
          {
            get: function() {
              return this.intersectionRatio > 0;
            }
          }
        );
      }
      return;
    }
    var document2 = window.document;
    var registry = [];
    var crossOriginUpdater = null;
    var crossOriginRect = null;
    function IntersectionObserverEntry(entry) {
      this.time = entry.time;
      this.target = entry.target;
      this.rootBounds = ensureDOMRect(entry.rootBounds);
      this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);
      this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());
      this.isIntersecting = !!entry.intersectionRect;
      var targetRect = this.boundingClientRect;
      var targetArea = targetRect.width * targetRect.height;
      var intersectionRect = this.intersectionRect;
      var intersectionArea = intersectionRect.width * intersectionRect.height;
      if (targetArea) {
        this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
      } else {
        this.intersectionRatio = this.isIntersecting ? 1 : 0;
      }
    }
    function IntersectionObserver2(callback, opt_options) {
      var options = opt_options || {};
      if (typeof callback != "function") {
        throw new Error("callback must be a function");
      }
      if (options.root && options.root.nodeType != 1) {
        throw new Error("root must be an Element");
      }
      this._checkForIntersections = throttle(
        this._checkForIntersections.bind(this),
        this.THROTTLE_TIMEOUT
      );
      this._callback = callback;
      this._observationTargets = [];
      this._queuedEntries = [];
      this._rootMarginValues = this._parseRootMargin(options.rootMargin);
      this.thresholds = this._initThresholds(options.threshold);
      this.root = options.root || null;
      this.rootMargin = this._rootMarginValues.map(function(margin) {
        return margin.value + margin.unit;
      }).join(" ");
      this._monitoringDocuments = [];
      this._monitoringUnsubscribes = [];
    }
    IntersectionObserver2.prototype.THROTTLE_TIMEOUT = 100;
    IntersectionObserver2.prototype.POLL_INTERVAL = null;
    IntersectionObserver2.prototype.USE_MUTATION_OBSERVER = true;
    IntersectionObserver2._setupCrossOriginUpdater = function() {
      if (!crossOriginUpdater) {
        crossOriginUpdater = function(boundingClientRect, intersectionRect) {
          if (!boundingClientRect || !intersectionRect) {
            crossOriginRect = getEmptyRect();
          } else {
            crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);
          }
          registry.forEach(function(observer) {
            observer._checkForIntersections();
          });
        };
      }
      return crossOriginUpdater;
    };
    IntersectionObserver2._resetCrossOriginUpdater = function() {
      crossOriginUpdater = null;
      crossOriginRect = null;
    };
    IntersectionObserver2.prototype.observe = function(target) {
      var isTargetAlreadyObserved = this._observationTargets.some(function(item) {
        return item.element == target;
      });
      if (isTargetAlreadyObserved) {
        return;
      }
      if (!(target && target.nodeType == 1)) {
        throw new Error("target must be an Element");
      }
      this._registerInstance();
      this._observationTargets.push({ element: target, entry: null });
      this._monitorIntersections(target.ownerDocument);
      this._checkForIntersections();
    };
    IntersectionObserver2.prototype.unobserve = function(target) {
      this._observationTargets = this._observationTargets.filter(function(item) {
        return item.element != target;
      });
      this._unmonitorIntersections(target.ownerDocument);
      if (this._observationTargets.length == 0) {
        this._unregisterInstance();
      }
    };
    IntersectionObserver2.prototype.disconnect = function() {
      this._observationTargets = [];
      this._unmonitorAllIntersections();
      this._unregisterInstance();
    };
    IntersectionObserver2.prototype.takeRecords = function() {
      var records = this._queuedEntries.slice();
      this._queuedEntries = [];
      return records;
    };
    IntersectionObserver2.prototype._initThresholds = function(opt_threshold) {
      var threshold = opt_threshold || [0];
      if (!Array.isArray(threshold))
        threshold = [threshold];
      return threshold.sort().filter(function(t2, i, a2) {
        if (typeof t2 != "number" || isNaN(t2) || t2 < 0 || t2 > 1) {
          throw new Error("threshold must be a number between 0 and 1 inclusively");
        }
        return t2 !== a2[i - 1];
      });
    };
    IntersectionObserver2.prototype._parseRootMargin = function(opt_rootMargin) {
      var marginString = opt_rootMargin || "0px";
      var margins = marginString.split(/\s+/).map(function(margin) {
        var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);
        if (!parts) {
          throw new Error("rootMargin must be specified in pixels or percent");
        }
        return { value: parseFloat(parts[1]), unit: parts[2] };
      });
      margins[1] = margins[1] || margins[0];
      margins[2] = margins[2] || margins[0];
      margins[3] = margins[3] || margins[1];
      return margins;
    };
    IntersectionObserver2.prototype._monitorIntersections = function(doc2) {
      var win = doc2.defaultView;
      if (!win) {
        return;
      }
      if (this._monitoringDocuments.indexOf(doc2) != -1) {
        return;
      }
      var callback = this._checkForIntersections;
      var monitoringInterval = null;
      var domObserver = null;
      if (this.POLL_INTERVAL) {
        monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);
      } else {
        addEvent(win, "resize", callback, true);
        addEvent(doc2, "scroll", callback, true);
        if (this.USE_MUTATION_OBSERVER && "MutationObserver" in win) {
          domObserver = new win.MutationObserver(callback);
          domObserver.observe(doc2, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        }
      }
      this._monitoringDocuments.push(doc2);
      this._monitoringUnsubscribes.push(function() {
        var win2 = doc2.defaultView;
        if (win2) {
          if (monitoringInterval) {
            win2.clearInterval(monitoringInterval);
          }
          removeEvent(win2, "resize", callback, true);
        }
        removeEvent(doc2, "scroll", callback, true);
        if (domObserver) {
          domObserver.disconnect();
        }
      });
      if (doc2 != (this.root && this.root.ownerDocument || document2)) {
        var frame = getFrameElement(doc2);
        if (frame) {
          this._monitorIntersections(frame.ownerDocument);
        }
      }
    };
    IntersectionObserver2.prototype._unmonitorIntersections = function(doc2) {
      var index = this._monitoringDocuments.indexOf(doc2);
      if (index == -1) {
        return;
      }
      var rootDoc = this.root && this.root.ownerDocument || document2;
      var hasDependentTargets = this._observationTargets.some(function(item) {
        var itemDoc = item.element.ownerDocument;
        if (itemDoc == doc2) {
          return true;
        }
        while (itemDoc && itemDoc != rootDoc) {
          var frame2 = getFrameElement(itemDoc);
          itemDoc = frame2 && frame2.ownerDocument;
          if (itemDoc == doc2) {
            return true;
          }
        }
        return false;
      });
      if (hasDependentTargets) {
        return;
      }
      var unsubscribe = this._monitoringUnsubscribes[index];
      this._monitoringDocuments.splice(index, 1);
      this._monitoringUnsubscribes.splice(index, 1);
      unsubscribe();
      if (doc2 != rootDoc) {
        var frame = getFrameElement(doc2);
        if (frame) {
          this._unmonitorIntersections(frame.ownerDocument);
        }
      }
    };
    IntersectionObserver2.prototype._unmonitorAllIntersections = function() {
      var unsubscribes = this._monitoringUnsubscribes.slice(0);
      this._monitoringDocuments.length = 0;
      this._monitoringUnsubscribes.length = 0;
      for (var i = 0; i < unsubscribes.length; i++) {
        unsubscribes[i]();
      }
    };
    IntersectionObserver2.prototype._checkForIntersections = function() {
      if (!this.root && crossOriginUpdater && !crossOriginRect) {
        return;
      }
      var rootIsInDom = this._rootIsInDom();
      var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();
      this._observationTargets.forEach(function(item) {
        var target = item.element;
        var targetRect = getBoundingClientRect(target);
        var rootContainsTarget = this._rootContainsTarget(target);
        var oldEntry = item.entry;
        var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, targetRect, rootRect);
        var newEntry = item.entry = new IntersectionObserverEntry({
          time: now(),
          target,
          boundingClientRect: targetRect,
          rootBounds: crossOriginUpdater && !this.root ? null : rootRect,
          intersectionRect
        });
        if (!oldEntry) {
          this._queuedEntries.push(newEntry);
        } else if (rootIsInDom && rootContainsTarget) {
          if (this._hasCrossedThreshold(oldEntry, newEntry)) {
            this._queuedEntries.push(newEntry);
          }
        } else {
          if (oldEntry && oldEntry.isIntersecting) {
            this._queuedEntries.push(newEntry);
          }
        }
      }, this);
      if (this._queuedEntries.length) {
        this._callback(this.takeRecords(), this);
      }
    };
    IntersectionObserver2.prototype._computeTargetAndRootIntersection = function(target, targetRect, rootRect) {
      if (window.getComputedStyle(target).display == "none")
        return;
      var intersectionRect = targetRect;
      var parent = getParentNode(target);
      var atRoot = false;
      while (!atRoot && parent) {
        var parentRect = null;
        var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {};
        if (parentComputedStyle.display == "none")
          return null;
        if (parent == this.root || parent.nodeType == /* DOCUMENT */
        9) {
          atRoot = true;
          if (parent == this.root || parent == document2) {
            if (crossOriginUpdater && !this.root) {
              if (!crossOriginRect || crossOriginRect.width == 0 && crossOriginRect.height == 0) {
                parent = null;
                parentRect = null;
                intersectionRect = null;
              } else {
                parentRect = crossOriginRect;
              }
            } else {
              parentRect = rootRect;
            }
          } else {
            var frame = getParentNode(parent);
            var frameRect = frame && getBoundingClientRect(frame);
            var frameIntersect = frame && this._computeTargetAndRootIntersection(frame, frameRect, rootRect);
            if (frameRect && frameIntersect) {
              parent = frame;
              parentRect = convertFromParentRect(frameRect, frameIntersect);
            } else {
              parent = null;
              intersectionRect = null;
            }
          }
        } else {
          var doc2 = parent.ownerDocument;
          if (parent != doc2.body && parent != doc2.documentElement && parentComputedStyle.overflow != "visible") {
            parentRect = getBoundingClientRect(parent);
          }
        }
        if (parentRect) {
          intersectionRect = computeRectIntersection(parentRect, intersectionRect);
        }
        if (!intersectionRect)
          break;
        parent = parent && getParentNode(parent);
      }
      return intersectionRect;
    };
    IntersectionObserver2.prototype._getRootRect = function() {
      var rootRect;
      if (this.root) {
        rootRect = getBoundingClientRect(this.root);
      } else {
        var html2 = document2.documentElement;
        var body = document2.body;
        rootRect = {
          top: 0,
          left: 0,
          right: html2.clientWidth || body.clientWidth,
          width: html2.clientWidth || body.clientWidth,
          bottom: html2.clientHeight || body.clientHeight,
          height: html2.clientHeight || body.clientHeight
        };
      }
      return this._expandRectByRootMargin(rootRect);
    };
    IntersectionObserver2.prototype._expandRectByRootMargin = function(rect) {
      var margins = this._rootMarginValues.map(function(margin, i) {
        return margin.unit == "px" ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
      });
      var newRect = {
        top: rect.top - margins[0],
        right: rect.right + margins[1],
        bottom: rect.bottom + margins[2],
        left: rect.left - margins[3]
      };
      newRect.width = newRect.right - newRect.left;
      newRect.height = newRect.bottom - newRect.top;
      return newRect;
    };
    IntersectionObserver2.prototype._hasCrossedThreshold = function(oldEntry, newEntry) {
      var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
      var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;
      if (oldRatio === newRatio)
        return;
      for (var i = 0; i < this.thresholds.length; i++) {
        var threshold = this.thresholds[i];
        if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
          return true;
        }
      }
    };
    IntersectionObserver2.prototype._rootIsInDom = function() {
      return !this.root || containsDeep(document2, this.root);
    };
    IntersectionObserver2.prototype._rootContainsTarget = function(target) {
      return containsDeep(this.root || document2, target) && (!this.root || this.root.ownerDocument == target.ownerDocument);
    };
    IntersectionObserver2.prototype._registerInstance = function() {
      if (registry.indexOf(this) < 0) {
        registry.push(this);
      }
    };
    IntersectionObserver2.prototype._unregisterInstance = function() {
      var index = registry.indexOf(this);
      if (index != -1)
        registry.splice(index, 1);
    };
    function now() {
      return window.performance && performance.now && performance.now();
    }
    function throttle(fn, timeout) {
      var timer2 = null;
      return function() {
        if (!timer2) {
          timer2 = setTimeout(function() {
            fn();
            timer2 = null;
          }, timeout);
        }
      };
    }
    function addEvent(node, event, fn, opt_useCapture) {
      if (typeof node.addEventListener == "function") {
        node.addEventListener(event, fn, opt_useCapture || false);
      } else if (typeof node.attachEvent == "function") {
        node.attachEvent("on" + event, fn);
      }
    }
    function removeEvent(node, event, fn, opt_useCapture) {
      if (typeof node.removeEventListener == "function") {
        node.removeEventListener(event, fn, opt_useCapture || false);
      } else if (typeof node.detatchEvent == "function") {
        node.detatchEvent("on" + event, fn);
      }
    }
    function computeRectIntersection(rect1, rect2) {
      var top2 = Math.max(rect1.top, rect2.top);
      var bottom = Math.min(rect1.bottom, rect2.bottom);
      var left = Math.max(rect1.left, rect2.left);
      var right = Math.min(rect1.right, rect2.right);
      var width = right - left;
      var height = bottom - top2;
      return width >= 0 && height >= 0 && {
        top: top2,
        bottom,
        left,
        right,
        width,
        height
      } || null;
    }
    function getBoundingClientRect(el) {
      var rect;
      try {
        rect = el.getBoundingClientRect();
      } catch (err) {
      }
      if (!rect)
        return getEmptyRect();
      if (!(rect.width && rect.height)) {
        rect = {
          top: rect.top,
          right: rect.right,
          bottom: rect.bottom,
          left: rect.left,
          width: rect.right - rect.left,
          height: rect.bottom - rect.top
        };
      }
      return rect;
    }
    function getEmptyRect() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        width: 0,
        height: 0
      };
    }
    function ensureDOMRect(rect) {
      if (!rect || "x" in rect) {
        return rect;
      }
      return {
        top: rect.top,
        y: rect.top,
        bottom: rect.bottom,
        left: rect.left,
        x: rect.left,
        right: rect.right,
        width: rect.width,
        height: rect.height
      };
    }
    function convertFromParentRect(parentBoundingRect, parentIntersectionRect) {
      var top2 = parentIntersectionRect.top - parentBoundingRect.top;
      var left = parentIntersectionRect.left - parentBoundingRect.left;
      return {
        top: top2,
        left,
        height: parentIntersectionRect.height,
        width: parentIntersectionRect.width,
        bottom: top2 + parentIntersectionRect.height,
        right: left + parentIntersectionRect.width
      };
    }
    function containsDeep(parent, child) {
      var node = child;
      while (node) {
        if (node == parent)
          return true;
        node = getParentNode(node);
      }
      return false;
    }
    function getParentNode(node) {
      var parent = node.parentNode;
      if (node.nodeType == /* DOCUMENT */
      9 && node != document2) {
        return getFrameElement(node);
      }
      if (parent && parent.nodeType == 11 && parent.host) {
        return parent.host;
      }
      if (parent && parent.assignedSlot) {
        return parent.assignedSlot.parentNode;
      }
      return parent;
    }
    function getFrameElement(doc2) {
      try {
        return doc2.defaultView && doc2.defaultView.frameElement || null;
      } catch (e) {
        return null;
      }
    }
    window.IntersectionObserver = IntersectionObserver2;
    window.IntersectionObserverEntry = IntersectionObserverEntry;
  })();
  return intersectionObserver;
}
requireIntersectionObserver();
const usePassiveLayoutEffect = React[typeof document !== "undefined" && document.createElement !== void 0 ? "useLayoutEffect" : "useEffect"];
const useLayoutEffect = usePassiveLayoutEffect;
function useIntersectionObserver(target, options = {}) {
  const {
    root = null,
    pollInterval = null,
    useMutationObserver = false,
    rootMargin = "0px 0px 0px 0px",
    threshold = 0,
    initialIsIntersecting = false
  } = options;
  const [entry, setEntry] = reactExports.useState(() => ({
    boundingClientRect: null,
    intersectionRatio: 0,
    intersectionRect: null,
    isIntersecting: initialIsIntersecting,
    rootBounds: null,
    target: null,
    time: 0
  }));
  const [observer, setObserver] = reactExports.useState(() => getIntersectionObserver({
    root,
    pollInterval,
    useMutationObserver,
    rootMargin,
    threshold
  }));
  reactExports.useEffect(() => {
    const observer2 = getIntersectionObserver({
      root,
      pollInterval,
      useMutationObserver,
      rootMargin,
      threshold
    });
    setObserver(observer2);
  }, [root, rootMargin, pollInterval, useMutationObserver, JSON.stringify(threshold)]);
  useLayoutEffect(() => {
    const targetEl = target && "current" in target ? target.current : target;
    if (!observer || !targetEl)
      return;
    let didUnsubscribe = false;
    observer.observer.observe(targetEl);
    const callback = (entries) => {
      if (didUnsubscribe)
        return;
      for (let i = 0; i < entries.length; i++) {
        const entry2 = entries[i];
        if (entry2.target === targetEl) {
          setEntry(entry2);
        }
      }
    };
    observer.subscribe(callback);
    return () => {
      didUnsubscribe = true;
      observer.observer.unobserve(targetEl);
      observer.unsubscribe(callback);
    };
  }, [target, observer]);
  return entry;
}
function createIntersectionObserver({
  root = null,
  pollInterval = null,
  useMutationObserver = false,
  rootMargin = "0px 0px 0px 0px",
  threshold = 0
}) {
  const callbacks = /* @__PURE__ */ new Set();
  if (typeof IntersectionObserver === "undefined")
    return null;
  const observer = new IntersectionObserver((entries) => {
    for (const callback of callbacks)
      callback(entries, observer);
  }, {
    root,
    rootMargin,
    threshold
  });
  observer.POLL_INTERVAL = pollInterval;
  observer.USE_MUTATION_OBSERVER = useMutationObserver;
  return {
    observer,
    getListeners() {
      return callbacks;
    },
    subscribe: (callback) => callbacks.add(callback),
    unsubscribe: (callback) => callbacks.delete(callback)
  };
}
const _intersectionObserver = /* @__PURE__ */ new Map();
function getIntersectionObserver(options) {
  const {
    root,
    ...keys2
  } = options;
  const key = JSON.stringify(keys2);
  let base2 = _intersectionObserver.get(root);
  if (!base2) {
    base2 = {};
    _intersectionObserver.set(root, base2);
  }
  return !base2[key] ? base2[key] = createIntersectionObserver(options) : base2[key];
}
class Stack {
  /// @internal
  constructor(p2, stack, state, reducePos, pos, score, buffer, bufferBase, curContext, lookAhead = 0, parent) {
    this.p = p2;
    this.stack = stack;
    this.state = state;
    this.reducePos = reducePos;
    this.pos = pos;
    this.score = score;
    this.buffer = buffer;
    this.bufferBase = bufferBase;
    this.curContext = curContext;
    this.lookAhead = lookAhead;
    this.parent = parent;
  }
  /// @internal
  toString() {
    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /// @internal
  static start(p2, state, pos = 0) {
    let cx = p2.parser.context;
    return new Stack(p2, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
  }
  /// The stack's current [context](#lr.ContextTracker) value, if
  /// any. Its type will depend on the context tracker's type
  /// parameter, or it will be `null` if there is no context
  /// tracker.
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /// @internal
  pushState(state, start) {
    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
    this.state = state;
  }
  // Apply a reduce action
  /// @internal
  reduce(action) {
    var _a2;
    let depth = action >> 19, type = action & 65535;
    let { parser: parser2 } = this.p;
    let dPrec = parser2.dynamicPrecedence(type);
    if (dPrec)
      this.score += dPrec;
    if (depth == 0) {
      this.pushState(parser2.getGoto(this.state, type, true), this.reducePos);
      if (type < parser2.minRepeatTerm)
        this.storeNode(type, this.reducePos, this.reducePos, 4, true);
      this.reduceContext(type, this.reducePos);
      return;
    }
    let base2 = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
    let start = base2 ? this.stack[base2 - 2] : this.p.ranges[0].from, size = this.reducePos - start;
    if (size >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
      if (start == this.p.lastBigReductionStart) {
        this.p.bigReductionCount++;
        this.p.lastBigReductionSize = size;
      } else if (this.p.lastBigReductionSize < size) {
        this.p.bigReductionCount = 1;
        this.p.lastBigReductionStart = start;
        this.p.lastBigReductionSize = size;
      }
    }
    let bufferBase = base2 ? this.stack[base2 - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
    if (type < parser2.minRepeatTerm || action & 131072) {
      let pos = parser2.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(type, start, pos, count + 4, true);
    }
    if (action & 262144) {
      this.state = this.stack[base2];
    } else {
      let baseStateID = this.stack[base2 - 3];
      this.state = parser2.getGoto(baseStateID, type, true);
    }
    while (this.stack.length > base2)
      this.stack.pop();
    this.reduceContext(type, start);
  }
  // Shift a value into the buffer
  /// @internal
  storeNode(term, start, end, size = 4, isReduce = false) {
    if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let cur = this, top2 = this.buffer.length;
      if (top2 == 0 && cur.parent) {
        top2 = cur.bufferBase - cur.parent.bufferBase;
        cur = cur.parent;
      }
      if (top2 > 0 && cur.buffer[top2 - 4] == 0 && cur.buffer[top2 - 1] > -1) {
        if (start == end)
          return;
        if (cur.buffer[top2 - 2] >= start) {
          cur.buffer[top2 - 2] = end;
          return;
        }
      }
    }
    if (!isReduce || this.pos == end) {
      this.buffer.push(term, start, end, size);
    } else {
      let index = this.buffer.length;
      if (index > 0 && this.buffer[index - 4] != 0)
        while (index > 0 && this.buffer[index - 2] > end) {
          this.buffer[index] = this.buffer[index - 4];
          this.buffer[index + 1] = this.buffer[index - 3];
          this.buffer[index + 2] = this.buffer[index - 2];
          this.buffer[index + 3] = this.buffer[index - 1];
          index -= 4;
          if (size > 4)
            size -= 4;
        }
      this.buffer[index] = term;
      this.buffer[index + 1] = start;
      this.buffer[index + 2] = end;
      this.buffer[index + 3] = size;
    }
  }
  // Apply a shift action
  /// @internal
  shift(action, next, nextEnd) {
    let start = this.pos;
    if (action & 131072) {
      this.pushState(action & 65535, this.pos);
    } else if ((action & 262144) == 0) {
      let nextState = action, { parser: parser2 } = this.p;
      if (nextEnd > this.pos || next <= parser2.maxNode) {
        this.pos = nextEnd;
        if (!parser2.stateFlag(
          nextState,
          1
          /* StateFlag.Skipped */
        ))
          this.reducePos = nextEnd;
      }
      this.pushState(nextState, start);
      this.shiftContext(next, start);
      if (next <= parser2.maxNode)
        this.buffer.push(next, start, nextEnd, 4);
    } else {
      this.pos = nextEnd;
      this.shiftContext(next, start);
      if (next <= this.p.parser.maxNode)
        this.buffer.push(next, start, nextEnd, 4);
    }
  }
  // Apply an action
  /// @internal
  apply(action, next, nextEnd) {
    if (action & 65536)
      this.reduce(action);
    else
      this.shift(action, next, nextEnd);
  }
  // Add a prebuilt (reused) node into the buffer.
  /// @internal
  useNode(value, next) {
    let index = this.p.reused.length - 1;
    if (index < 0 || this.p.reused[index] != value) {
      this.p.reused.push(value);
      index++;
    }
    let start = this.pos;
    this.reducePos = this.pos = start + value.length;
    this.pushState(next, start);
    this.buffer.push(
      index,
      start,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    );
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /// @internal
  split() {
    let parent = this;
    let off = parent.buffer.length;
    while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
      off -= 4;
    let buffer = parent.buffer.slice(off), base2 = parent.bufferBase + off;
    while (parent && base2 == parent.bufferBase)
      parent = parent.parent;
    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base2, this.curContext, this.lookAhead, parent);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /// @internal
  recoverByDelete(next, nextEnd) {
    let isNode = next <= this.p.parser.maxNode;
    if (isNode)
      this.storeNode(next, this.pos, nextEnd, 4);
    this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
    this.pos = this.reducePos = nextEnd;
    this.score -= 190;
  }
  /// Check if the given term would be able to be shifted (optionally
  /// after some reductions) on this stack. This can be useful for
  /// external tokenizers that want to make sure they only provide a
  /// given token when it applies.
  canShift(term) {
    for (let sim = new SimulatedStack(this); ; ) {
      let action = this.p.parser.stateSlot(
        sim.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(sim.state, term);
      if (action == 0)
        return false;
      if ((action & 65536) == 0)
        return true;
      sim.reduce(action);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /// @internal
  recoverByInsert(next) {
    if (this.stack.length >= 300)
      return [];
    let nextStates = this.p.parser.nextStates(this.state);
    if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
      let best = [];
      for (let i = 0, s2; i < nextStates.length; i += 2) {
        if ((s2 = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s2, next))
          best.push(nextStates[i], s2);
      }
      if (this.stack.length < 120)
        for (let i = 0; best.length < 4 << 1 && i < nextStates.length; i += 2) {
          let s2 = nextStates[i + 1];
          if (!best.some((v2, i2) => i2 & 1 && v2 == s2))
            best.push(nextStates[i], s2);
        }
      nextStates = best;
    }
    let result = [];
    for (let i = 0; i < nextStates.length && result.length < 4; i += 2) {
      let s2 = nextStates[i + 1];
      if (s2 == this.state)
        continue;
      let stack = this.split();
      stack.pushState(s2, this.pos);
      stack.storeNode(0, stack.pos, stack.pos, 4, true);
      stack.shiftContext(nextStates[i], this.pos);
      stack.score -= 200;
      result.push(stack);
    }
    return result;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /// @internal
  forceReduce() {
    let { parser: parser2 } = this.p;
    let reduce = parser2.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((reduce & 65536) == 0)
      return false;
    if (!parser2.validAction(this.state, reduce)) {
      let depth = reduce >> 19, term = reduce & 65535;
      let target = this.stack.length - depth * 3;
      if (target < 0 || parser2.getGoto(this.stack[target], term, false) < 0) {
        let backup = this.findForcedReduction();
        if (backup == null)
          return false;
        reduce = backup;
      }
      this.storeNode(0, this.reducePos, this.reducePos, 4, true);
      this.score -= 100;
    }
    this.reducePos = this.pos;
    this.reduce(reduce);
    return true;
  }
  /// Try to scan through the automaton to find some kind of reduction
  /// that can be applied. Used when the regular ForcedReduce field
  /// isn't a valid action. @internal
  findForcedReduction() {
    let { parser: parser2 } = this.p, seen2 = [];
    let explore = (state, depth) => {
      if (seen2.includes(state))
        return;
      seen2.push(state);
      return parser2.allActions(state, (action) => {
        if (action & (262144 | 131072))
          ;
        else if (action & 65536) {
          let rDepth = (action >> 19) - depth;
          if (rDepth > 1) {
            let term = action & 65535, target = this.stack.length - rDepth * 3;
            if (target >= 0 && parser2.getGoto(this.stack[target], term, false) >= 0)
              return rDepth << 19 | 65536 | term;
          }
        } else {
          let found = explore(action, depth + 1);
          if (found != null)
            return found;
        }
      });
    };
    return explore(this.state, 0);
  }
  /// @internal
  forceAll() {
    while (!this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    )) {
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    }
    return this;
  }
  /// Check whether this state has no further actions (assumed to be a direct descendant of the
  /// top state, since any other states must be able to continue
  /// somehow). @internal
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: parser2 } = this.p;
    return parser2.data[parser2.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !parser2.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /// Restart the stack (put it back in its start state). Only safe
  /// when this.stack.length == 3 (state is directly below the top
  /// state). @internal
  restart() {
    this.state = this.stack[0];
    this.stack.length = 0;
  }
  /// @internal
  sameState(other) {
    if (this.state != other.state || this.stack.length != other.stack.length)
      return false;
    for (let i = 0; i < this.stack.length; i += 3)
      if (this.stack[i] != other.stack[i])
        return false;
    return true;
  }
  /// Get the parser used by this stack.
  get parser() {
    return this.p.parser;
  }
  /// Test whether a given dialect (by numeric ID, as exported from
  /// the terms file) is enabled.
  dialectEnabled(dialectID) {
    return this.p.parser.dialect.flags[dialectID];
  }
  shiftContext(term, start) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
  }
  reduceContext(term, start) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
  }
  /// @internal
  emitContext() {
    let last2 = this.buffer.length - 1;
    if (last2 < 0 || this.buffer[last2] != -3)
      this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /// @internal
  emitLookAhead() {
    let last2 = this.buffer.length - 1;
    if (last2 < 0 || this.buffer[last2] != -4)
      this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(context) {
    if (context != this.curContext.context) {
      let newCx = new StackContext(this.curContext.tracker, context);
      if (newCx.hash != this.curContext.hash)
        this.emitContext();
      this.curContext = newCx;
    }
  }
  /// @internal
  setLookAhead(lookAhead) {
    if (lookAhead > this.lookAhead) {
      this.emitLookAhead();
      this.lookAhead = lookAhead;
    }
  }
  /// @internal
  close() {
    if (this.curContext && this.curContext.tracker.strict)
      this.emitContext();
    if (this.lookAhead > 0)
      this.emitLookAhead();
  }
}
class StackContext {
  constructor(tracker, context) {
    this.tracker = tracker;
    this.context = context;
    this.hash = tracker.strict ? tracker.hash(context) : 0;
  }
}
var Recover;
(function(Recover2) {
  Recover2[Recover2["Insert"] = 200] = "Insert";
  Recover2[Recover2["Delete"] = 190] = "Delete";
  Recover2[Recover2["Reduce"] = 100] = "Reduce";
  Recover2[Recover2["MaxNext"] = 4] = "MaxNext";
  Recover2[Recover2["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
  Recover2[Recover2["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
  Recover2[Recover2["MinBigReduction"] = 2e3] = "MinBigReduction";
})(Recover || (Recover = {}));
class SimulatedStack {
  constructor(start) {
    this.start = start;
    this.state = start.state;
    this.stack = start.stack;
    this.base = this.stack.length;
  }
  reduce(action) {
    let term = action & 65535, depth = action >> 19;
    if (depth == 0) {
      if (this.stack == this.start.stack)
        this.stack = this.stack.slice();
      this.stack.push(this.state, 0, 0);
      this.base += 3;
    } else {
      this.base -= (depth - 1) * 3;
    }
    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
    this.state = goto;
  }
}
class StackBufferCursor {
  constructor(stack, pos, index) {
    this.stack = stack;
    this.pos = pos;
    this.index = index;
    this.buffer = stack.buffer;
    if (this.index == 0)
      this.maybeNext();
  }
  static create(stack, pos = stack.bufferBase + stack.buffer.length) {
    return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
  }
  maybeNext() {
    let next = this.stack.parent;
    if (next != null) {
      this.index = this.stack.bufferBase - next.bufferBase;
      this.stack = next;
      this.buffer = next.buffer;
    }
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4;
    this.pos -= 4;
    if (this.index == 0)
      this.maybeNext();
  }
  fork() {
    return new StackBufferCursor(this.stack, this.pos, this.index);
  }
}
function decodeArray(input, Type = Uint16Array) {
  if (typeof input != "string")
    return input;
  let array = null;
  for (let pos = 0, out = 0; pos < input.length; ) {
    let value = 0;
    for (; ; ) {
      let next = input.charCodeAt(pos++), stop = false;
      if (next == 126) {
        value = 65535;
        break;
      }
      if (next >= 92)
        next--;
      if (next >= 34)
        next--;
      let digit = next - 32;
      if (digit >= 46) {
        digit -= 46;
        stop = true;
      }
      value += digit;
      if (stop)
        break;
      value *= 46;
    }
    if (array)
      array[out++] = value;
    else
      array = new Type(value);
  }
  return array;
}
class CachedToken {
  constructor() {
    this.start = -1;
    this.value = -1;
    this.end = -1;
    this.extended = -1;
    this.lookAhead = 0;
    this.mask = 0;
    this.context = 0;
  }
}
const nullToken = new CachedToken();
class InputStream {
  /// @internal
  constructor(input, ranges) {
    this.input = input;
    this.ranges = ranges;
    this.chunk = "";
    this.chunkOff = 0;
    this.chunk2 = "";
    this.chunk2Pos = 0;
    this.next = -1;
    this.token = nullToken;
    this.rangeIndex = 0;
    this.pos = this.chunkPos = ranges[0].from;
    this.range = ranges[0];
    this.end = ranges[ranges.length - 1].to;
    this.readNext();
  }
  /// @internal
  resolveOffset(offset, assoc) {
    let range2 = this.range, index = this.rangeIndex;
    let pos = this.pos + offset;
    while (pos < range2.from) {
      if (!index)
        return null;
      let next = this.ranges[--index];
      pos -= range2.from - next.to;
      range2 = next;
    }
    while (assoc < 0 ? pos > range2.to : pos >= range2.to) {
      if (index == this.ranges.length - 1)
        return null;
      let next = this.ranges[++index];
      pos += next.from - range2.to;
      range2 = next;
    }
    return pos;
  }
  /// @internal
  clipPos(pos) {
    if (pos >= this.range.from && pos < this.range.to)
      return pos;
    for (let range2 of this.ranges)
      if (range2.to > pos)
        return Math.max(pos, range2.from);
    return this.end;
  }
  /// Look at a code unit near the stream position. `.peek(0)` equals
  /// `.next`, `.peek(-1)` gives you the previous character, and so
  /// on.
  ///
  /// Note that looking around during tokenizing creates dependencies
  /// on potentially far-away content, which may reduce the
  /// effectiveness incremental parsing—when looking forward—or even
  /// cause invalid reparses when looking backward more than 25 code
  /// units, since the library does not track lookbehind.
  peek(offset) {
    let idx = this.chunkOff + offset, pos, result;
    if (idx >= 0 && idx < this.chunk.length) {
      pos = this.pos + offset;
      result = this.chunk.charCodeAt(idx);
    } else {
      let resolved = this.resolveOffset(offset, 1);
      if (resolved == null)
        return -1;
      pos = resolved;
      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
      } else {
        let i = this.rangeIndex, range2 = this.range;
        while (range2.to <= pos)
          range2 = this.ranges[++i];
        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
        if (pos + this.chunk2.length > range2.to)
          this.chunk2 = this.chunk2.slice(0, range2.to - pos);
        result = this.chunk2.charCodeAt(0);
      }
    }
    if (pos >= this.token.lookAhead)
      this.token.lookAhead = pos + 1;
    return result;
  }
  /// Accept a token. By default, the end of the token is set to the
  /// current stream position, but you can pass an offset (relative to
  /// the stream position) to change that.
  acceptToken(token, endOffset = 0) {
    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
    if (end == null || end < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = token;
    this.token.end = end;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk, chunkPos } = this;
      this.chunk = this.chunk2;
      this.chunkPos = this.chunk2Pos;
      this.chunk2 = chunk;
      this.chunk2Pos = chunkPos;
      this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk;
      this.chunk2Pos = this.chunkPos;
      let nextChunk = this.input.chunk(this.pos);
      let end = this.pos + nextChunk.length;
      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
      this.chunkPos = this.pos;
      this.chunkOff = 0;
    }
  }
  readNext() {
    if (this.chunkOff >= this.chunk.length) {
      this.getChunk();
      if (this.chunkOff == this.chunk.length)
        return this.next = -1;
    }
    return this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /// Move the stream forward N (defaults to 1) code units. Returns
  /// the new value of [`next`](#lr.InputStream.next).
  advance(n2 = 1) {
    this.chunkOff += n2;
    while (this.pos + n2 >= this.range.to) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      n2 -= this.range.to - this.pos;
      this.range = this.ranges[++this.rangeIndex];
      this.pos = this.range.from;
    }
    this.pos += n2;
    if (this.pos >= this.token.lookAhead)
      this.token.lookAhead = this.pos + 1;
    return this.readNext();
  }
  setDone() {
    this.pos = this.chunkPos = this.end;
    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
    this.chunk = "";
    return this.next = -1;
  }
  /// @internal
  reset(pos, token) {
    if (token) {
      this.token = token;
      token.start = pos;
      token.lookAhead = pos + 1;
      token.value = token.extended = -1;
    } else {
      this.token = nullToken;
    }
    if (this.pos != pos) {
      this.pos = pos;
      if (pos == this.end) {
        this.setDone();
        return this;
      }
      while (pos < this.range.from)
        this.range = this.ranges[--this.rangeIndex];
      while (pos >= this.range.to)
        this.range = this.ranges[++this.rangeIndex];
      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
        this.chunkOff = pos - this.chunkPos;
      } else {
        this.chunk = "";
        this.chunkOff = 0;
      }
      this.readNext();
    }
    return this;
  }
  /// @internal
  read(from, to) {
    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
    if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
    if (from >= this.range.from && to <= this.range.to)
      return this.input.read(from, to);
    let result = "";
    for (let r2 of this.ranges) {
      if (r2.from >= to)
        break;
      if (r2.to > from)
        result += this.input.read(Math.max(r2.from, from), Math.min(r2.to, to));
    }
    return result;
  }
}
class TokenGroup {
  constructor(data, id2) {
    this.data = data;
    this.id = id2;
  }
  token(input, stack) {
    let { parser: parser2 } = stack.p;
    readToken(this.data, input, stack, this.id, parser2.data, parser2.tokenPrecTable);
  }
}
TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
class LocalTokenGroup {
  constructor(data, precTable, elseToken) {
    this.precTable = precTable;
    this.elseToken = elseToken;
    this.data = typeof data == "string" ? decodeArray(data) : data;
  }
  token(input, stack) {
    let start = input.pos, skipped = 0;
    for (; ; ) {
      readToken(this.data, input, stack, 0, this.data, this.precTable);
      if (input.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (input.next < 0)
        break;
      input.advance();
      input.reset(input.pos, input.token);
      skipped++;
    }
    if (skipped) {
      input.reset(start, input.token);
      input.acceptToken(this.elseToken, skipped);
    }
  }
}
LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
class ExternalTokenizer {
  /// Create a tokenizer. The first argument is the function that,
  /// given an input stream, scans for the types of tokens it
  /// recognizes at the stream's position, and calls
  /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  /// one.
  constructor(token, options = {}) {
    this.token = token;
    this.contextual = !!options.contextual;
    this.fallback = !!options.fallback;
    this.extend = !!options.extend;
  }
}
function readToken(data, input, stack, group, precTable, precOffset) {
  let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
  scan:
    for (; ; ) {
      if ((groupMask & data[state]) == 0)
        break;
      let accEnd = data[state + 1];
      for (let i = state + 3; i < accEnd; i += 2)
        if ((data[i + 1] & groupMask) > 0) {
          let term = data[i];
          if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
            input.acceptToken(term);
            break;
          }
        }
      let next = input.next, low = 0, high = data[state + 2];
      if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 && data[accEnd + high * 3 - 3] == 65535) {
        state = data[accEnd + high * 3 - 1];
        continue scan;
      }
      for (; low < high; ) {
        let mid = low + high >> 1;
        let index = accEnd + mid + (mid << 1);
        let from = data[index], to = data[index + 1] || 65536;
        if (next < from)
          high = mid;
        else if (next >= to)
          low = mid + 1;
        else {
          state = data[index + 2];
          input.advance();
          continue scan;
        }
      }
      break;
    }
}
function findOffset(data, start, term) {
  for (let i = start, next; (next = data[i]) != 65535; i++)
    if (next == term)
      return i - start;
  return -1;
}
function overrides(token, prev, tableData, tableOffset) {
  let iPrev = findOffset(tableData, tableOffset, prev);
  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
}
const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test({}.LOG);
let stackIDs = null;
var Safety;
(function(Safety2) {
  Safety2[Safety2["Margin"] = 25] = "Margin";
})(Safety || (Safety = {}));
function cutAt(tree, pos, side) {
  let cursor = tree.cursor(IterMode.IncludeAnonymous);
  cursor.moveTo(pos);
  for (; ; ) {
    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
      for (; ; ) {
        if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
          return side < 0 ? Math.max(0, Math.min(
            cursor.to - 1,
            pos - 25
            /* Safety.Margin */
          )) : Math.min(tree.length, Math.max(
            cursor.from + 1,
            pos + 25
            /* Safety.Margin */
          ));
        if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
          break;
        if (!cursor.parent())
          return side < 0 ? 0 : tree.length;
      }
  }
}
class FragmentCursor2 {
  constructor(fragments, nodeSet) {
    this.fragments = fragments;
    this.nodeSet = nodeSet;
    this.i = 0;
    this.fragment = null;
    this.safeFrom = -1;
    this.safeTo = -1;
    this.trees = [];
    this.start = [];
    this.index = [];
    this.nextFragment();
  }
  nextFragment() {
    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (fr) {
      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
      while (this.trees.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
      }
      this.trees.push(fr.tree);
      this.start.push(-fr.offset);
      this.index.push(0);
      this.nextStart = this.safeFrom;
    } else {
      this.nextStart = 1e9;
    }
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(pos) {
    if (pos < this.nextStart)
      return null;
    while (this.fragment && this.safeTo <= pos)
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let last2 = this.trees.length - 1;
      if (last2 < 0) {
        this.nextFragment();
        return null;
      }
      let top2 = this.trees[last2], index = this.index[last2];
      if (index == top2.children.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
        continue;
      }
      let next = top2.children[index];
      let start = this.start[last2] + top2.positions[index];
      if (start > pos) {
        this.nextStart = start;
        return null;
      }
      if (next instanceof Tree) {
        if (start == pos) {
          if (start < this.safeFrom)
            return null;
          let end = start + next.length;
          if (end <= this.safeTo) {
            let lookAhead = next.prop(NodeProp.lookAhead);
            if (!lookAhead || end + lookAhead < this.fragment.to)
              return next;
          }
        }
        this.index[last2]++;
        if (start + next.length >= Math.max(this.safeFrom, pos)) {
          this.trees.push(next);
          this.start.push(start);
          this.index.push(0);
        }
      } else {
        this.index[last2]++;
        this.nextStart = start + next.length;
      }
    }
  }
}
class TokenCache {
  constructor(parser2, stream2) {
    this.stream = stream2;
    this.tokens = [];
    this.mainToken = null;
    this.actions = [];
    this.tokens = parser2.tokenizers.map((_) => new CachedToken());
  }
  getActions(stack) {
    let actionIndex = 0;
    let main2 = null;
    let { parser: parser2 } = stack.p, { tokenizers } = parser2;
    let mask = parser2.stateSlot(
      stack.state,
      3
      /* ParseState.TokenizerMask */
    );
    let context = stack.curContext ? stack.curContext.hash : 0;
    let lookAhead = 0;
    for (let i = 0; i < tokenizers.length; i++) {
      if ((1 << i & mask) == 0)
        continue;
      let tokenizer = tokenizers[i], token = this.tokens[i];
      if (main2 && !tokenizer.fallback)
        continue;
      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
        this.updateCachedToken(token, tokenizer, stack);
        token.mask = mask;
        token.context = context;
      }
      if (token.lookAhead > token.end + 25)
        lookAhead = Math.max(token.lookAhead, lookAhead);
      if (token.value != 0) {
        let startIndex = actionIndex;
        if (token.extended > -1)
          actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
        if (!tokenizer.extend) {
          main2 = token;
          if (actionIndex > startIndex)
            break;
        }
      }
    }
    while (this.actions.length > actionIndex)
      this.actions.pop();
    if (lookAhead)
      stack.setLookAhead(lookAhead);
    if (!main2 && stack.pos == this.stream.end) {
      main2 = new CachedToken();
      main2.value = stack.p.parser.eofTerm;
      main2.start = main2.end = stack.pos;
      actionIndex = this.addActions(stack, main2.value, main2.end, actionIndex);
    }
    this.mainToken = main2;
    return this.actions;
  }
  getMainToken(stack) {
    if (this.mainToken)
      return this.mainToken;
    let main2 = new CachedToken(), { pos, p: p2 } = stack;
    main2.start = pos;
    main2.end = Math.min(pos + 1, p2.stream.end);
    main2.value = pos == p2.stream.end ? p2.parser.eofTerm : 0;
    return main2;
  }
  updateCachedToken(token, tokenizer, stack) {
    let start = this.stream.clipPos(stack.pos);
    tokenizer.token(this.stream.reset(start, token), stack);
    if (token.value > -1) {
      let { parser: parser2 } = stack.p;
      for (let i = 0; i < parser2.specialized.length; i++)
        if (parser2.specialized[i] == token.value) {
          let result = parser2.specializers[i](this.stream.read(token.start, token.end), stack);
          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
            if ((result & 1) == 0)
              token.value = result >> 1;
            else
              token.extended = result >> 1;
            break;
          }
        }
    } else {
      token.value = 0;
      token.end = this.stream.clipPos(start + 1);
    }
  }
  putAction(action, token, end, index) {
    for (let i = 0; i < index; i += 3)
      if (this.actions[i] == action)
        return index;
    this.actions[index++] = action;
    this.actions[index++] = token;
    this.actions[index++] = end;
    return index;
  }
  addActions(stack, token, end, index) {
    let { state } = stack, { parser: parser2 } = stack.p, { data } = parser2;
    for (let set = 0; set < 2; set++) {
      for (let i = parser2.stateSlot(
        state,
        set ? 2 : 1
        /* ParseState.Actions */
      ); ; i += 3) {
        if (data[i] == 65535) {
          if (data[i + 1] == 1) {
            i = pair(data, i + 2);
          } else {
            if (index == 0 && data[i + 1] == 2)
              index = this.putAction(pair(data, i + 2), token, end, index);
            break;
          }
        }
        if (data[i] == token)
          index = this.putAction(pair(data, i + 1), token, end, index);
      }
    }
    return index;
  }
}
var Rec;
(function(Rec2) {
  Rec2[Rec2["Distance"] = 5] = "Distance";
  Rec2[Rec2["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
  Rec2[Rec2["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
  Rec2[Rec2["ForceReduceLimit"] = 10] = "ForceReduceLimit";
  Rec2[Rec2["CutDepth"] = 15e3] = "CutDepth";
  Rec2[Rec2["CutTo"] = 9e3] = "CutTo";
  Rec2[Rec2["MaxLeftAssociativeReductionCount"] = 300] = "MaxLeftAssociativeReductionCount";
  Rec2[Rec2["MaxStackCount"] = 12] = "MaxStackCount";
})(Rec || (Rec = {}));
class Parse {
  constructor(parser2, input, fragments, ranges) {
    this.parser = parser2;
    this.input = input;
    this.ranges = ranges;
    this.recovering = 0;
    this.nextStackID = 9812;
    this.minStackPos = 0;
    this.reused = [];
    this.stoppedAt = null;
    this.lastBigReductionStart = -1;
    this.lastBigReductionSize = 0;
    this.bigReductionCount = 0;
    this.stream = new InputStream(input, ranges);
    this.tokens = new TokenCache(parser2, this.stream);
    this.topTerm = parser2.top[1];
    let { from } = ranges[0];
    this.stacks = [Stack.start(this, parser2.top[0], from)];
    this.fragments = fragments.length && this.stream.end - from > parser2.bufferLength * 4 ? new FragmentCursor2(fragments, parser2.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let stacks = this.stacks, pos = this.minStackPos;
    let newStacks = this.stacks = [];
    let stopped, stoppedTokens;
    if (this.bigReductionCount > 300 && stacks.length == 1) {
      let [s2] = stacks;
      while (s2.forceReduce() && s2.stack.length && s2.stack[s2.stack.length - 2] >= this.lastBigReductionStart) {
      }
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let i = 0; i < stacks.length; i++) {
      let stack = stacks[i];
      for (; ; ) {
        this.tokens.mainToken = null;
        if (stack.pos > pos) {
          newStacks.push(stack);
        } else if (this.advanceStack(stack, newStacks, stacks)) {
          continue;
        } else {
          if (!stopped) {
            stopped = [];
            stoppedTokens = [];
          }
          stopped.push(stack);
          let tok = this.tokens.getMainToken(stack);
          stoppedTokens.push(tok.value, tok.end);
        }
        break;
      }
    }
    if (!newStacks.length) {
      let finished = stopped && findFinished(stopped);
      if (finished)
        return this.stackToTree(finished);
      if (this.parser.strict) {
        if (verbose && stopped)
          console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
        throw new SyntaxError("No parse at " + pos);
      }
      if (!this.recovering)
        this.recovering = 5;
    }
    if (this.recovering && stopped) {
      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
      if (finished)
        return this.stackToTree(finished.forceAll());
    }
    if (this.recovering) {
      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
      if (newStacks.length > maxRemaining) {
        newStacks.sort((a2, b2) => b2.score - a2.score);
        while (newStacks.length > maxRemaining)
          newStacks.pop();
      }
      if (newStacks.some((s2) => s2.reducePos > pos))
        this.recovering--;
    } else if (newStacks.length > 1) {
      outer:
        for (let i = 0; i < newStacks.length - 1; i++) {
          let stack = newStacks[i];
          for (let j2 = i + 1; j2 < newStacks.length; j2++) {
            let other = newStacks[j2];
            if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
              if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                newStacks.splice(j2--, 1);
              } else {
                newStacks.splice(i--, 1);
                continue outer;
              }
            }
          }
        }
      if (newStacks.length > 12)
        newStacks.splice(
          12,
          newStacks.length - 12
          /* Rec.MaxStackCount */
        );
    }
    this.minStackPos = newStacks[0].pos;
    for (let i = 1; i < newStacks.length; i++)
      if (newStacks[i].pos < this.minStackPos)
        this.minStackPos = newStacks[i].pos;
    return null;
  }
  stopAt(pos) {
    if (this.stoppedAt != null && this.stoppedAt < pos)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = pos;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(stack, stacks, split) {
    let start = stack.pos, { parser: parser2 } = this;
    let base2 = verbose ? this.stackID(stack) + " -> " : "";
    if (this.stoppedAt != null && start > this.stoppedAt)
      return stack.forceReduce() ? stack : null;
    if (this.fragments) {
      let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
      for (let cached = this.fragments.nodeAt(start); cached; ) {
        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser2.getGoto(stack.state, cached.type.id) : -1;
        if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
          stack.useNode(cached, match);
          if (verbose)
            console.log(base2 + this.stackID(stack) + ` (via reuse of ${parser2.getName(cached.type.id)})`);
          return true;
        }
        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
          break;
        let inner = cached.children[0];
        if (inner instanceof Tree && cached.positions[0] == 0)
          cached = inner;
        else
          break;
      }
    }
    let defaultReduce = parser2.stateSlot(
      stack.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (defaultReduce > 0) {
      stack.reduce(defaultReduce);
      if (verbose)
        console.log(base2 + this.stackID(stack) + ` (via always-reduce ${parser2.getName(
          defaultReduce & 65535
          /* Action.ValueMask */
        )})`);
      return true;
    }
    if (stack.stack.length >= 15e3) {
      while (stack.stack.length > 9e3 && stack.forceReduce()) {
      }
    }
    let actions = this.tokens.getActions(stack);
    for (let i = 0; i < actions.length; ) {
      let action = actions[i++], term = actions[i++], end = actions[i++];
      let last2 = i == actions.length || !split;
      let localStack = last2 ? stack : stack.split();
      localStack.apply(action, term, end);
      if (verbose)
        console.log(base2 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser2.getName(
          action & 65535
          /* Action.ValueMask */
        )}`} for ${parser2.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
      if (last2)
        return true;
      else if (localStack.pos > start)
        stacks.push(localStack);
      else
        split.push(localStack);
    }
    return false;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(stack, newStacks) {
    let pos = stack.pos;
    for (; ; ) {
      if (!this.advanceStack(stack, null, null))
        return false;
      if (stack.pos > pos) {
        pushStackDedup(stack, newStacks);
        return true;
      }
    }
  }
  runRecovery(stacks, tokens2, newStacks) {
    let finished = null, restarted = false;
    for (let i = 0; i < stacks.length; i++) {
      let stack = stacks[i], token = tokens2[i << 1], tokenEnd = tokens2[(i << 1) + 1];
      let base2 = verbose ? this.stackID(stack) + " -> " : "";
      if (stack.deadEnd) {
        if (restarted)
          continue;
        restarted = true;
        stack.restart();
        if (verbose)
          console.log(base2 + this.stackID(stack) + " (restarted)");
        let done = this.advanceFully(stack, newStacks);
        if (done)
          continue;
      }
      let force = stack.split(), forceBase = base2;
      for (let j2 = 0; force.forceReduce() && j2 < 10; j2++) {
        if (verbose)
          console.log(forceBase + this.stackID(force) + " (via force-reduce)");
        let done = this.advanceFully(force, newStacks);
        if (done)
          break;
        if (verbose)
          forceBase = this.stackID(force) + " -> ";
      }
      for (let insert2 of stack.recoverByInsert(token)) {
        if (verbose)
          console.log(base2 + this.stackID(insert2) + " (via recover-insert)");
        this.advanceFully(insert2, newStacks);
      }
      if (this.stream.end > stack.pos) {
        if (tokenEnd == stack.pos) {
          tokenEnd++;
          token = 0;
        }
        stack.recoverByDelete(token, tokenEnd);
        if (verbose)
          console.log(base2 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
        pushStackDedup(stack, newStacks);
      } else if (!finished || finished.score < stack.score) {
        finished = stack;
      }
    }
    return finished;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(stack) {
    stack.close();
    return Tree.build({
      buffer: StackBufferCursor.create(stack),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: stack.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(stack) {
    let id2 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
    if (!id2)
      stackIDs.set(stack, id2 = String.fromCodePoint(this.nextStackID++));
    return id2 + stack;
  }
}
function pushStackDedup(stack, newStacks) {
  for (let i = 0; i < newStacks.length; i++) {
    let other = newStacks[i];
    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i].score < stack.score)
        newStacks[i] = stack;
      return;
    }
  }
  newStacks.push(stack);
}
class Dialect {
  constructor(source, flags, disabled) {
    this.source = source;
    this.flags = flags;
    this.disabled = disabled;
  }
  allows(term) {
    return !this.disabled || this.disabled[term] == 0;
  }
}
const id = (x2) => x2;
class ContextTracker {
  /// Define a context tracker.
  constructor(spec) {
    this.start = spec.start;
    this.shift = spec.shift || id;
    this.reduce = spec.reduce || id;
    this.reuse = spec.reuse || id;
    this.hash = spec.hash || (() => 0);
    this.strict = spec.strict !== false;
  }
}
class LRParser extends Parser {
  /// @internal
  constructor(spec) {
    super();
    this.wrappers = [];
    if (spec.version != 14)
      throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
    let nodeNames = spec.nodeNames.split(" ");
    this.minRepeatTerm = nodeNames.length;
    for (let i = 0; i < spec.repeatNodeCount; i++)
      nodeNames.push("");
    let topTerms = Object.keys(spec.topRules).map((r2) => spec.topRules[r2][1]);
    let nodeProps = [];
    for (let i = 0; i < nodeNames.length; i++)
      nodeProps.push([]);
    function setProp(nodeID, prop, value) {
      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
    }
    if (spec.nodeProps)
      for (let propSpec of spec.nodeProps) {
        let prop = propSpec[0];
        if (typeof prop == "string")
          prop = NodeProp[prop];
        for (let i = 1; i < propSpec.length; ) {
          let next = propSpec[i++];
          if (next >= 0) {
            setProp(next, prop, propSpec[i++]);
          } else {
            let value = propSpec[i + -next];
            for (let j2 = -next; j2 > 0; j2--)
              setProp(propSpec[i++], prop, value);
            i++;
          }
        }
      }
    this.nodeSet = new NodeSet(nodeNames.map((name2, i) => NodeType.define({
      name: i >= this.minRepeatTerm ? void 0 : name2,
      id: i,
      props: nodeProps[i],
      top: topTerms.indexOf(i) > -1,
      error: i == 0,
      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
    })));
    if (spec.propSources)
      this.nodeSet = this.nodeSet.extend(...spec.propSources);
    this.strict = false;
    this.bufferLength = DefaultBufferLength;
    let tokenArray = decodeArray(spec.tokenData);
    this.context = spec.context;
    this.specializerSpecs = spec.specialized || [];
    this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let i = 0; i < this.specializerSpecs.length; i++)
      this.specialized[i] = this.specializerSpecs[i].term;
    this.specializers = this.specializerSpecs.map(getSpecializer);
    this.states = decodeArray(spec.states, Uint32Array);
    this.data = decodeArray(spec.stateData);
    this.goto = decodeArray(spec.goto);
    this.maxTerm = spec.maxTerm;
    this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
    this.topRules = spec.topRules;
    this.dialects = spec.dialects || {};
    this.dynamicPrecedences = spec.dynamicPrecedences || null;
    this.tokenPrecTable = spec.tokenPrec;
    this.termNames = spec.termNames || null;
    this.maxNode = this.nodeSet.types.length - 1;
    this.dialect = this.parseDialect();
    this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(input, fragments, ranges) {
    let parse = new Parse(this, input, fragments, ranges);
    for (let w2 of this.wrappers)
      parse = w2(parse, input, fragments, ranges);
    return parse;
  }
  /// Get a goto table entry @internal
  getGoto(state, term, loose = false) {
    let table = this.goto;
    if (term >= table[0])
      return -1;
    for (let pos = table[term + 1]; ; ) {
      let groupTag = table[pos++], last2 = groupTag & 1;
      let target = table[pos++];
      if (last2 && loose)
        return target;
      for (let end = pos + (groupTag >> 1); pos < end; pos++)
        if (table[pos] == state)
          return target;
      if (last2)
        return -1;
    }
  }
  /// Check if this state has an action for a given terminal @internal
  hasAction(state, terminal) {
    let data = this.data;
    for (let set = 0; set < 2; set++) {
      for (let i = this.stateSlot(
        state,
        set ? 2 : 1
        /* ParseState.Actions */
      ), next; ; i += 3) {
        if ((next = data[i]) == 65535) {
          if (data[i + 1] == 1)
            next = data[i = pair(data, i + 2)];
          else if (data[i + 1] == 2)
            return pair(data, i + 2);
          else
            break;
        }
        if (next == terminal || next == 0)
          return pair(data, i + 1);
      }
    }
    return 0;
  }
  /// @internal
  stateSlot(state, slot) {
    return this.states[state * 6 + slot];
  }
  /// @internal
  stateFlag(state, flag) {
    return (this.stateSlot(
      state,
      0
      /* ParseState.Flags */
    ) & flag) > 0;
  }
  /// @internal
  validAction(state, action) {
    return !!this.allActions(state, (a2) => a2 == action ? true : null);
  }
  /// @internal
  allActions(state, action) {
    let deflt = this.stateSlot(
      state,
      4
      /* ParseState.DefaultReduce */
    );
    let result = deflt ? action(deflt) : void 0;
    for (let i = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); result == null; i += 3) {
      if (this.data[i] == 65535) {
        if (this.data[i + 1] == 1)
          i = pair(this.data, i + 2);
        else
          break;
      }
      result = action(pair(this.data, i + 1));
    }
    return result;
  }
  /// Get the states that can follow this one through shift actions or
  /// goto jumps. @internal
  nextStates(state) {
    let result = [];
    for (let i = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535) {
        if (this.data[i + 1] == 1)
          i = pair(this.data, i + 2);
        else
          break;
      }
      if ((this.data[i + 2] & 65536 >> 16) == 0) {
        let value = this.data[i + 1];
        if (!result.some((v2, i2) => i2 & 1 && v2 == value))
          result.push(this.data[i], value);
      }
    }
    return result;
  }
  /// Configure the parser. Returns a new parser instance that has the
  /// given settings modified. Settings not provided in `config` are
  /// kept from the original parser.
  configure(config2) {
    let copy = Object.assign(Object.create(LRParser.prototype), this);
    if (config2.props)
      copy.nodeSet = this.nodeSet.extend(...config2.props);
    if (config2.top) {
      let info = this.topRules[config2.top];
      if (!info)
        throw new RangeError(`Invalid top rule name ${config2.top}`);
      copy.top = info;
    }
    if (config2.tokenizers)
      copy.tokenizers = this.tokenizers.map((t2) => {
        let found = config2.tokenizers.find((r2) => r2.from == t2);
        return found ? found.to : t2;
      });
    if (config2.specializers) {
      copy.specializers = this.specializers.slice();
      copy.specializerSpecs = this.specializerSpecs.map((s2, i) => {
        let found = config2.specializers.find((r2) => r2.from == s2.external);
        if (!found)
          return s2;
        let spec = Object.assign(Object.assign({}, s2), { external: found.to });
        copy.specializers[i] = getSpecializer(spec);
        return spec;
      });
    }
    if (config2.contextTracker)
      copy.context = config2.contextTracker;
    if (config2.dialect)
      copy.dialect = this.parseDialect(config2.dialect);
    if (config2.strict != null)
      copy.strict = config2.strict;
    if (config2.wrap)
      copy.wrappers = copy.wrappers.concat(config2.wrap);
    if (config2.bufferLength != null)
      copy.bufferLength = config2.bufferLength;
    return copy;
  }
  /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  /// are registered for this parser.
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /// Returns the name associated with a given term. This will only
  /// work for all terms when the parser was generated with the
  /// `--names` option. By default, only the names of tagged terms are
  /// stored.
  getName(term) {
    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
  }
  /// The eof term id is always allocated directly after the node
  /// types. @internal
  get eofTerm() {
    return this.maxNode + 1;
  }
  /// The type of top node produced by the parser.
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /// @internal
  dynamicPrecedence(term) {
    let prec2 = this.dynamicPrecedences;
    return prec2 == null ? 0 : prec2[term] || 0;
  }
  /// @internal
  parseDialect(dialect) {
    let values2 = Object.keys(this.dialects), flags = values2.map(() => false);
    if (dialect)
      for (let part of dialect.split(" ")) {
        let id2 = values2.indexOf(part);
        if (id2 >= 0)
          flags[id2] = true;
      }
    let disabled = null;
    for (let i = 0; i < values2.length; i++)
      if (!flags[i]) {
        for (let j2 = this.dialects[values2[i]], id2; (id2 = this.data[j2++]) != 65535; )
          (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id2] = 1;
      }
    return new Dialect(dialect, flags, disabled);
  }
  /// Used by the output of the parser generator. Not available to
  /// user code. @hide
  static deserialize(spec) {
    return new LRParser(spec);
  }
}
function pair(data, off) {
  return data[off] | data[off + 1] << 16;
}
function findFinished(stacks) {
  let best = null;
  for (let stack of stacks) {
    let stopped = stack.p.stoppedAt;
    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
      stack.state,
      2
      /* StateFlag.Accepting */
    ) && (!best || best.score < stack.score))
      best = stack;
  }
  return best;
}
function getSpecializer(spec) {
  if (spec.external) {
    let mask = spec.extend ? 1 : 0;
    return (value, stack) => spec.external(value, stack) << 1 | mask;
  }
  return spec.get;
}
const descendantOp = 95, Unit = 1, callee = 96, identifier$2 = 97, VariableName = 2;
const space$1 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
];
const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash$1 = 45, period = 46, hash = 35, percent = 37;
function isAlpha(ch) {
  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161;
}
function isDigit(ch) {
  return ch >= 48 && ch <= 57;
}
const identifiers = new ExternalTokenizer((input, stack) => {
  for (let inside2 = false, dashes = 0, i = 0; ; i++) {
    let { next } = input;
    if (isAlpha(next) || next == dash$1 || next == underscore || inside2 && isDigit(next)) {
      if (!inside2 && (next != dash$1 || i > 0))
        inside2 = true;
      if (dashes === i && next == dash$1)
        dashes++;
      input.advance();
    } else {
      if (inside2)
        input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier$2);
      break;
    }
  }
});
const descendant = new ExternalTokenizer((input) => {
  if (space$1.includes(input.peek(-1))) {
    let { next } = input;
    if (isAlpha(next) || next == underscore || next == hash || next == period || next == bracketL || next == colon || next == dash$1)
      input.acceptToken(descendantOp);
  }
});
const unitToken = new ExternalTokenizer((input) => {
  if (!space$1.includes(input.peek(-1))) {
    let { next } = input;
    if (next == percent) {
      input.advance();
      input.acceptToken(Unit);
    }
    if (isAlpha(next)) {
      do {
        input.advance();
      } while (isAlpha(input.next));
      input.acceptToken(Unit);
    }
  }
});
const cssHighlighting = styleTags({
  "AtKeyword import charset namespace keyframes media supports": tags$1.definitionKeyword,
  "from to selector": tags$1.keyword,
  NamespaceName: tags$1.namespace,
  KeyframeName: tags$1.labelName,
  KeyframeRangeName: tags$1.operatorKeyword,
  TagName: tags$1.tagName,
  ClassName: tags$1.className,
  PseudoClassName: tags$1.constant(tags$1.className),
  IdName: tags$1.labelName,
  "FeatureName PropertyName": tags$1.propertyName,
  AttributeName: tags$1.attributeName,
  NumberLiteral: tags$1.number,
  KeywordQuery: tags$1.keyword,
  UnaryQueryOp: tags$1.operatorKeyword,
  "CallTag ValueName": tags$1.atom,
  VariableName: tags$1.variableName,
  Callee: tags$1.operatorKeyword,
  Unit: tags$1.unit,
  "UniversalSelector NestingSelector": tags$1.definitionOperator,
  MatchOp: tags$1.compareOperator,
  "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
  BinOp: tags$1.arithmeticOperator,
  Important: tags$1.modifier,
  Comment: tags$1.blockComment,
  ColorLiteral: tags$1.color,
  "ParenthesizedContent StringLiteral": tags$1.string,
  ":": tags$1.punctuation,
  "PseudoOp #": tags$1.derefOperator,
  "; ,": tags$1.separator,
  "( )": tags$1.paren,
  "[ ]": tags$1.squareBracket,
  "{ }": tags$1.brace
});
const spec_callee = { __proto__: null, lang: 32, "nth-child": 32, "nth-last-child": 32, "nth-of-type": 32, "nth-last-of-type": 32, dir: 32, "host-context": 32, url: 60, "url-prefix": 60, domain: 60, regexp: 60, selector: 134 };
const spec_AtKeyword = { __proto__: null, "@import": 114, "@media": 138, "@charset": 142, "@namespace": 146, "@keyframes": 152, "@supports": 164 };
const spec_identifier$1 = { __proto__: null, not: 128, only: 128 };
const parser$4 = LRParser.deserialize({
  version: 14,
  states: "8`QYQ[OOO#_Q[OOOOQP'#Cd'#CdOOQP'#Cc'#CcO#fQ[O'#CfO$YQXO'#CaO$aQ[O'#ChO$lQ[O'#DPO$qQ[O'#DTOOQP'#Ee'#EeO$vQdO'#DeO%bQ[O'#DrO$vQdO'#DtO%sQ[O'#DvO&OQ[O'#DyO&WQ[O'#EPO&fQ[O'#EROOQS'#Ed'#EdOOQS'#ET'#ETQYQ[OOO&mQXO'#CdO'bQWO'#DaO'gQWO'#EkO'rQ[O'#EkQOQWOOOOQP'#Cg'#CgOOQP,59Q,59QO#fQ[O,59QO'|Q[O'#EWO(hQWO,58{O(pQ[O,59SO$lQ[O,59kO$qQ[O,59oO'|Q[O,59sO'|Q[O,59uO'|Q[O,59vO({Q[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO)SQWO,59SO)XQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO)^Q`O,59oOOQS'#Cp'#CpO$vQdO'#CqO)fQvO'#CsO*sQtO,5:POOQO'#Cx'#CxO)XQWO'#CwO+XQWO'#CyOOQS'#Eh'#EhOOQO'#Dh'#DhO+^Q[O'#DoO+lQWO'#ElO&WQ[O'#DmO+zQWO'#DpOOQO'#Em'#EmO(kQWO,5:^O,PQpO,5:`OOQS'#Dx'#DxO,XQWO,5:bO,^Q[O,5:bOOQO'#D{'#D{O,fQWO,5:eO,kQWO,5:kO,sQWO,5:mOOQS-E8R-E8RO$vQdO,59{O,{Q[O'#EYO-YQWO,5;VO-YQWO,5;VOOQP1G.l1G.lO.PQXO,5:rOOQO-E8U-E8UOOQS1G.g1G.gOOQP1G.n1G.nO)SQWO1G.nO)XQWO1G.nOOQP1G/V1G/VO.^Q`O1G/ZO.wQXO1G/_O/_QXO1G/aO/uQXO1G/bO0]QWO,59zO0bQ[O'#DOO0iQdO'#CoOOQP1G/Z1G/ZO$vQdO1G/ZO0pQpO,59]OOQS,59_,59_O$vQdO,59aO0xQWO1G/kOOQS,59c,59cO0}Q!bO,59eO1VQWO'#DhO1bQWO,5:TO1gQWO,5:ZO&WQ[O,5:VO&WQ[O'#EZO1oQWO,5;WO1zQWO,5:XO'|Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O2]QWO1G/|O2bQdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XO2mQtO1G/gOOQO,5:t,5:tO3TQ[O,5:tOOQO-E8W-E8WO3bQWO1G0qOOQP7+$Y7+$YOOQP7+$u7+$uO$vQdO7+$uOOQS1G/f1G/fO3mQXO'#EjO3tQWO,59jO3yQtO'#EUO4nQdO'#EgO4xQWO,59ZO4}QpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO5VQWO1G/PO$vQdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO5[QWO,5:uOOQO-E8X-E8XO5jQXO1G/vOOQS7+%h7+%hO5qQYO'#CsOOQO'#EO'#EOO5|Q`O'#D}OOQO'#D}'#D}O6XQWO'#E[O6aQdO,5:hOOQS,5:h,5:hO6lQtO'#EXO$vQdO'#EXO7jQdO7+%ROOQO7+%R7+%ROOQO1G0`1G0`O7}QpO<<HaO8VQWO,5;UOOQP1G/U1G/UOOQS-E8S-E8SO$vQdO'#EVO8_QWO,5;ROOQT1G.u1G.uOOQP<<Ha<<HaOOQS7+$k7+$kO8gQdO7+%ZOOQO7+%b7+%bOOQO,5:i,5:iO2eQdO'#E]O6XQWO,5:vOOQS,5:v,5:vOOQS-E8Y-E8YOOQS1G0S1G0SO8nQtO,5:sOOQS-E8V-E8VOOQO<<Hm<<HmOOQPAN={AN={O9lQdO,5:qOOQO-E8T-E8TOOQO<<Hu<<HuOOQO,5:w,5:wOOQO-E8Z-E8ZOOQS1G0b1G0b",
  stateData: ":O~O#VOSROS~OUXOXXO]UO^UOtVOxWO!Y`O!ZYO!gZO!i[O!k]O!n^O!t_O#TQO#YSO~OQeOUXOXXO]UO^UOtVOxWO!Y`O!ZYO!gZO!i[O!k]O!n^O!t_O#TdO#YSO~O#Q#_P~P!ZO#TiO~O]nO^nOplOtoOxpO|qO!PsO#RrO#YkO~O!RtO~P#kO`zO#SwO#TvO~O#T{O~O#T}O~OQ!WOb!QOf!WOh!WOn!VO#S!TO#T!PO#]!RO~Ob!YO!b![O!e!]O#T!XO!R#`P~Oh!bOn!VO#T!aO~Oh!dO#T!dO~Ob!YO!b![O!e!]O#T!XO~O!W#`P~P%bO]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#RWX#YWX~O]!iO~O!W!jO#Q#_X!Q#_X~O#Q#_X!Q#_X~P!ZOUXOXXO]UO^UOtVOxWO#TQO#YSO~OplO!RtO~O`!sO#SwO#TvO~O!Q#_P~P!ZOb!zO~Ob!{O~Ov!|Oz!}O~OP#PObgXjgX!WgX!bgX!egX#TgXagXQgXfgXhgXngXpgX!VgX#QgX#SgX#]gXvgX!QgX~Ob!YOj#QO!b![O!e!]O#T!XO!W#`P~Ob#TO~Ob!YO!b![O!e!]O#T#UO~Op#YO!`#XO!R#`X!W#`X~Ob#]O~Oj#QO!W#_O~O!W#`O~Oh#aOn!VO~O!R#bO~O!RtO!`#XO~O!RtO!W#eO~O!W!|X#Q!|X!Q!|X~P!ZO!W!jO#Q#_a!Q#_a~O]nO^nOtoOxpO|qO!PsO#RrO#YkO~Op!za!R!zaa!za~P-eOv#lOz#mO~O]nO^nOtoOxpO#YkO~Op{i|{i!P{i!R{i#R{ia{i~P.fOp}i|}i!P}i!R}i#R}ia}i~P.fOp!Oi|!Oi!P!Oi!R!Oi#R!Oia!Oi~P.fO!Q#nO~Oa#^P~P'|Oa#ZP~P$vOa#uOj#QO~O!W#wO~Oh#xOo#xO~O]!^Xa![X!`![X~O]#yO~Oa#zO!`#XO~Op#YO!R#`a!W#`a~O!`#XOp!aa!R!aa!W!aaa!aa~O!W$PO~O!Q$WO#T$RO#]$QO~Oj#QOp$YO!V$[O!W!Ti#Q!Ti!Q!Ti~P$vO!W!|a#Q!|a!Q!|a~P!ZO!W!jO#Q#_i!Q#_i~Oa#^X~P#kOa$`O~Oj#QOQ!xXa!xXb!xXf!xXh!xXn!xXp!xX#S!xX#T!xX#]!xX~Op$bOa#ZX~P$vOa$dO~Oj#QOv$eO~Oa$fO~O!`#XOp!}a!R!}a!W!}a~Oa$hO~P-eOP#POpgX!RgX~O#]$QOp!qX!R!qX~Op$jO!RtO~O!Q$nO#T$RO#]$QO~Oj#QOQ!{Xb!{Xf!{Xh!{Xn!{Xp!{X!V!{X!W!{X#Q!{X#S!{X#T!{X#]!{X!Q!{X~Op$YO!V$qO!W!Tq#Q!Tq!Q!Tq~P$vOj#QOv$rO~OplOa#^a~Op$bOa#Za~Oa$uO~P$vOj#QOQ!{ab!{af!{ah!{an!{ap!{a!V!{a!W!{a#Q!{a#S!{a#T!{a#]!{a!Q!{a~Oa!yap!ya~P$vO#VoR#]j!Pj~",
  goto: ",z#bPPPPP#cP#l#{P#l$[#lPP$bPPP$h$q$qP%TP$qP$q%o&RPPP&k&q#lP&wP#lP&}P#lP#l#lPPP'T'j'wPP#cPP(O(O(Y(OP(OP(O(OP#cP#cP#cP(]#cP(`(c(f(m#cP#cP(r)R)a)g)q)w*R*X*_PPPPPP*e*nP+Z+^P,S,V,],f_aOPcgt!j#hkXOPcglqrst!j!z#]#hkROPcglqrst!j!z#]#hQjSR!mkQxUR!qnQ!qzQ#S!UR#k!sq!WY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sp!WY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sU$T#b$V$jR$i$Sq!UY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sp!WY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sQ!b]R#a!cQyUR!rnQ!qyR#k!rQ|VR!toQ!OWR!upQuTQ!pmQ#^!_Q#d!fQ#e!gQ$l$UR$x$kSfPtQ!lgQ#g!jR$]#hZePgt!j#ha!^Z_`!S!Y![#X#YR#V!YR!c]R!e^R#c!eS$U#b$VR$v$jV$S#b$V$jQcOSgPtU!hcg#hR#h!jQ#r!{U$a#r$g$sQ$g#yR$s$bQ$c#rR$t$cQmTS!om$_R$_#oQ$Z#fR$p$ZQ!kfS#i!k#jR#j!lQ#Z!ZR#}#ZQ$V#bR$m$VQ$k$UR$w$k_bOPcgt!j#h^TOPcgt!j#hQ!nlQ!vqQ!wrQ!xsQ#o!zR$O#]R#s!{Q!SYQ!`[Q#O!QQ#f!i[#q!{#r#y$b$g$sQ#t!}Q#v#QS$X#f$ZQ$^#mR$o$YR#p!zQhPR!ytQ!_ZQ!g`R#R!SU!ZZ`!SQ!f_Q#W!YQ#[![Q#{#XR#|#Y",
  nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
  maxTerm: 109,
  nodeProps: [
    ["openedBy", 17, "(", 48, "{"],
    ["closedBy", 18, ")", 49, "}"]
  ],
  propSources: [cssHighlighting],
  skippedNodes: [0, 3],
  repeatNodeCount: 9,
  tokenData: "Lq~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Cu![!]Dp!]!^El!^!_$}!_!`E}!`!aF`!a!b$}!b!cG[!c!}$}!}#OHt#O#P$}#P#QIV#Q#R6d#R#T$}#T#UIh#U#c$}#c#dJy#d#o$}#o#pK`#p#q6d#q#rKq#r#sLS#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`Lk<%lO$}W%QSOy%^z;'S%^;'S;=`%o<%lO%^W%cSoWOy%^z;'S%^;'S;=`%o<%lO%^W%rP;=`<%l%^~%zh#V~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#V~oWOX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^^)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^^)sUoWOy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^^*[UoWOy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^^*sUoWOy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^^+[UoWOy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^^+sUoWOy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^^,[UoWOy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^^,sUoWOy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^^-[UoWOy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^^-uS!VUoWOy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.R_/zYtPOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^^0oYoWOy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^^1dYoWOy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^^2ZYfUoWOy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^^3QYfUoWOy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^^3uYoWOy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^^4lYfUoWOy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^^5aYoWOy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^^6WSfUoWOy%^z;'S%^;'S;=`%o<%lO%^Y6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^Y7QSzQoWOy%^z;'S%^;'S;=`%o<%lO%^X7cSXPOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7o_9cSbVOy%^z;'S%^;'S;=`%o<%lO%^~9tOa~_9{UUPjSOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^_:fWjS!PPOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^^;TUoWOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^^;nYoW#]UOy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^^<cYoWOy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^=WUoWOy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^=qUoW#]UOy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^>[[oW#]UOy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^_?VSpVOy%^z;'S%^;'S;=`%o<%lO%^^?hWjSOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^_@VU#YPOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjSOy%^z{@}{;'S%^;'S;=`%o<%lO%^~ASUoWOy@}yzAfz{Bm{;'S@};'S;=`Co<%lO@}~AiTOzAfz{Ax{;'SAf;'S;=`Bg<%lOAf~A{VOzAfz{Ax{!PAf!P!QBb!Q;'SAf;'S;=`Bg<%lOAf~BgOR~~BjP;=`<%lAf~BrWoWOy@}yzAfz{Bm{!P@}!P!QC[!Q;'S@};'S;=`Co<%lO@}~CcSoWR~Oy%^z;'S%^;'S;=`%o<%lO%^~CrP;=`<%l@}^Cz[#]UOy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^XDuU]POy%^z![%^![!]EX!];'S%^;'S;=`%o<%lO%^XE`S^PoWOy%^z;'S%^;'S;=`%o<%lO%^_EqS!WVOy%^z;'S%^;'S;=`%o<%lO%^YFSSzQOy%^z;'S%^;'S;=`%o<%lO%^XFeU|POy%^z!`%^!`!aFw!a;'S%^;'S;=`%o<%lO%^XGOS|PoWOy%^z;'S%^;'S;=`%o<%lO%^XG_WOy%^z!c%^!c!}Gw!}#T%^#T#oGw#o;'S%^;'S;=`%o<%lO%^XHO[!YPoWOy%^z}%^}!OGw!O!Q%^!Q![Gw![!c%^!c!}Gw!}#T%^#T#oGw#o;'S%^;'S;=`%o<%lO%^XHySxPOy%^z;'S%^;'S;=`%o<%lO%^^I[SvUOy%^z;'S%^;'S;=`%o<%lO%^XIkUOy%^z#b%^#b#cI}#c;'S%^;'S;=`%o<%lO%^XJSUoWOy%^z#W%^#W#XJf#X;'S%^;'S;=`%o<%lO%^XJmS!`PoWOy%^z;'S%^;'S;=`%o<%lO%^XJ|UOy%^z#f%^#f#gJf#g;'S%^;'S;=`%o<%lO%^ZKeS!RROy%^z;'S%^;'S;=`%o<%lO%^_KvS!QVOy%^z;'S%^;'S;=`%o<%lO%^ZLXU!PPOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^WLnP;=`<%l$}",
  tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
  topRules: { "StyleSheet": [0, 4], "Styles": [1, 84] },
  specialized: [{ term: 96, get: (value) => spec_callee[value] || -1 }, { term: 56, get: (value) => spec_AtKeyword[value] || -1 }, { term: 97, get: (value) => spec_identifier$1[value] || -1 }],
  tokenPrec: 1142
});
let _properties = null;
function properties() {
  if (!_properties && typeof document == "object" && document.body) {
    let { style } = document.body, names = [], seen2 = /* @__PURE__ */ new Set();
    for (let prop in style)
      if (prop != "cssText" && prop != "cssFloat") {
        if (typeof style[prop] == "string") {
          if (/[A-Z]/.test(prop))
            prop = prop.replace(/[A-Z]/g, (ch) => "-" + ch.toLowerCase());
          if (!seen2.has(prop)) {
            names.push(prop);
            seen2.add(prop);
          }
        }
      }
    _properties = names.sort().map((name2) => ({ type: "property", label: name2 }));
  }
  return _properties || [];
}
const pseudoClasses = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((name2) => ({ type: "class", label: name2 }));
const values = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((name2) => ({ type: "keyword", label: name2 })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((name2) => ({ type: "constant", label: name2 })));
const tags = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((name2) => ({ type: "type", label: name2 }));
const identifier$1 = /^(\w[\w-]*|-\w[\w-]*|)$/, variable = /^-(-[\w-]*)?$/;
function isVarArg(node, doc2) {
  var _a2;
  if (node.name == "(" || node.type.isError)
    node = node.parent || node;
  if (node.name != "ArgList")
    return false;
  let callee2 = (_a2 = node.parent) === null || _a2 === void 0 ? void 0 : _a2.firstChild;
  if ((callee2 === null || callee2 === void 0 ? void 0 : callee2.name) != "Callee")
    return false;
  return doc2.sliceString(callee2.from, callee2.to) == "var";
}
const VariablesByNode = /* @__PURE__ */ new NodeWeakMap();
const declSelector = ["Declaration"];
function astTop(node) {
  for (let cur = node; ; ) {
    if (cur.type.isTop)
      return cur;
    if (!(cur = cur.parent))
      return node;
  }
}
function variableNames(doc2, node, isVariable) {
  if (node.to - node.from > 4096) {
    let known = VariablesByNode.get(node);
    if (known)
      return known;
    let result = [], seen2 = /* @__PURE__ */ new Set(), cursor = node.cursor(IterMode.IncludeAnonymous);
    if (cursor.firstChild())
      do {
        for (let option of variableNames(doc2, cursor.node, isVariable))
          if (!seen2.has(option.label)) {
            seen2.add(option.label);
            result.push(option);
          }
      } while (cursor.nextSibling());
    VariablesByNode.set(node, result);
    return result;
  } else {
    let result = [], seen2 = /* @__PURE__ */ new Set();
    node.cursor().iterate((node2) => {
      var _a2;
      if (isVariable(node2) && node2.matchContext(declSelector) && ((_a2 = node2.node.nextSibling) === null || _a2 === void 0 ? void 0 : _a2.name) == ":") {
        let name2 = doc2.sliceString(node2.from, node2.to);
        if (!seen2.has(name2)) {
          seen2.add(name2);
          result.push({ label: name2, type: "variable" });
        }
      }
    });
    return result;
  }
}
const defineCSSCompletionSource = (isVariable) => (context) => {
  let { state, pos } = context, node = syntaxTree$1(state).resolveInner(pos, -1);
  let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
  if (node.name == "PropertyName" || (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
    return { from: node.from, options: properties(), validFor: identifier$1 };
  if (node.name == "ValueName")
    return { from: node.from, options: values, validFor: identifier$1 };
  if (node.name == "PseudoClassName")
    return { from: node.from, options: pseudoClasses, validFor: identifier$1 };
  if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))
    return {
      from: isVariable(node) || isDash ? node.from : pos,
      options: variableNames(state.doc, astTop(node), isVariable),
      validFor: variable
    };
  if (node.name == "TagName") {
    for (let { parent } = node; parent; parent = parent.parent)
      if (parent.name == "Block")
        return { from: node.from, options: properties(), validFor: identifier$1 };
    return { from: node.from, options: tags, validFor: identifier$1 };
  }
  if (!context.explicit)
    return null;
  let above = node.resolve(pos), before = above.childBefore(pos);
  if (before && before.name == ":" && above.name == "PseudoClassSelector")
    return { from: pos, options: pseudoClasses, validFor: identifier$1 };
  if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
    return { from: pos, options: values, validFor: identifier$1 };
  if (above.name == "Block" || above.name == "Styles")
    return { from: pos, options: properties(), validFor: identifier$1 };
  return null;
};
const cssCompletionSource = /* @__PURE__ */ defineCSSCompletionSource((n2) => n2.name == "VariableName");
const cssLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "css",
  parser: /* @__PURE__ */ parser$4.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Declaration: /* @__PURE__ */ continuedIndent()
      }),
      /* @__PURE__ */ foldNodeProp.add({
        Block: foldInside
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function css$1() {
  return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
}
const scriptText = 54, StartCloseScriptTag = 1, styleText = 55, StartCloseStyleTag = 2, textareaText = 56, StartCloseTextareaTag = 3, EndTag = 4, SelfClosingEndTag = 5, StartTag = 6, StartScriptTag = 7, StartStyleTag = 8, StartTextareaTag = 9, StartSelfClosingTag = 10, StartCloseTag = 11, NoMatchStartCloseTag = 12, MismatchedStartCloseTag = 13, missingCloseTag = 57, IncompleteCloseTag = 14, commentContent$1 = 58, Element = 20, TagName = 22, Attribute = 23, AttributeName = 24, AttributeValue = 26, UnquotedAttributeValue = 27, ScriptText = 28, StyleText = 31, TextareaText = 34, OpenTag = 36, CloseTag = 37, Dialect_noMatch = 0, Dialect_selfClosing = 1;
const selfClosers$1 = {
  area: true,
  base: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
  menuitem: true
};
const implicitlyClosed = {
  dd: true,
  li: true,
  optgroup: true,
  option: true,
  p: true,
  rp: true,
  rt: true,
  tbody: true,
  td: true,
  tfoot: true,
  th: true,
  tr: true
};
const closeOnOpen = {
  dd: { dd: true, dt: true },
  dt: { dd: true, dt: true },
  li: { li: true },
  option: { option: true, optgroup: true },
  optgroup: { optgroup: true },
  p: {
    address: true,
    article: true,
    aside: true,
    blockquote: true,
    dir: true,
    div: true,
    dl: true,
    fieldset: true,
    footer: true,
    form: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    header: true,
    hgroup: true,
    hr: true,
    menu: true,
    nav: true,
    ol: true,
    p: true,
    pre: true,
    section: true,
    table: true,
    ul: true
  },
  rp: { rp: true, rt: true },
  rt: { rp: true, rt: true },
  tbody: { tbody: true, tfoot: true },
  td: { td: true, th: true },
  tfoot: { tbody: true },
  th: { td: true, th: true },
  thead: { tbody: true, tfoot: true },
  tr: { tr: true }
};
function nameChar(ch) {
  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161;
}
function isSpace(ch) {
  return ch == 9 || ch == 10 || ch == 13 || ch == 32;
}
let cachedName = null, cachedInput = null, cachedPos = 0;
function tagNameAfter(input, offset) {
  let pos = input.pos + offset;
  if (cachedPos == pos && cachedInput == input)
    return cachedName;
  let next = input.peek(offset);
  while (isSpace(next))
    next = input.peek(++offset);
  let name2 = "";
  for (; ; ) {
    if (!nameChar(next))
      break;
    name2 += String.fromCharCode(next);
    next = input.peek(++offset);
  }
  cachedInput = input;
  cachedPos = pos;
  return cachedName = name2 ? name2.toLowerCase() : next == question || next == bang ? void 0 : null;
}
const lessThan = 60, greaterThan = 62, slash$1 = 47, question = 63, bang = 33, dash = 45;
function ElementContext(name2, parent) {
  this.name = name2;
  this.parent = parent;
  this.hash = parent ? parent.hash : 0;
  for (let i = 0; i < name2.length; i++)
    this.hash += (this.hash << 4) + name2.charCodeAt(i) + (name2.charCodeAt(i) << 8);
}
const startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];
const elementContext = new ContextTracker({
  start: null,
  shift(context, term, stack, input) {
    return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
  },
  reduce(context, term) {
    return term == Element && context ? context.parent : context;
  },
  reuse(context, node, stack, input) {
    let type = node.type.id;
    return type == StartTag || type == OpenTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
  },
  hash(context) {
    return context ? context.hash : 0;
  },
  strict: false
});
const tagStart = new ExternalTokenizer((input, stack) => {
  if (input.next != lessThan) {
    if (input.next < 0 && stack.context)
      input.acceptToken(missingCloseTag);
    return;
  }
  input.advance();
  let close = input.next == slash$1;
  if (close)
    input.advance();
  let name2 = tagNameAfter(input, 0);
  if (name2 === void 0)
    return;
  if (!name2)
    return input.acceptToken(close ? IncompleteCloseTag : StartTag);
  let parent = stack.context ? stack.context.name : null;
  if (close) {
    if (name2 == parent)
      return input.acceptToken(StartCloseTag);
    if (parent && implicitlyClosed[parent])
      return input.acceptToken(missingCloseTag, -2);
    if (stack.dialectEnabled(Dialect_noMatch))
      return input.acceptToken(NoMatchStartCloseTag);
    for (let cx = stack.context; cx; cx = cx.parent)
      if (cx.name == name2)
        return;
    input.acceptToken(MismatchedStartCloseTag);
  } else {
    if (name2 == "script")
      return input.acceptToken(StartScriptTag);
    if (name2 == "style")
      return input.acceptToken(StartStyleTag);
    if (name2 == "textarea")
      return input.acceptToken(StartTextareaTag);
    if (selfClosers$1.hasOwnProperty(name2))
      return input.acceptToken(StartSelfClosingTag);
    if (parent && closeOnOpen[parent] && closeOnOpen[parent][name2])
      input.acceptToken(missingCloseTag, -1);
    else
      input.acceptToken(StartTag);
  }
}, { contextual: true });
const commentContent = new ExternalTokenizer((input) => {
  for (let dashes = 0, i = 0; ; i++) {
    if (input.next < 0) {
      if (i)
        input.acceptToken(commentContent$1);
      break;
    }
    if (input.next == dash) {
      dashes++;
    } else if (input.next == greaterThan && dashes >= 2) {
      if (i > 3)
        input.acceptToken(commentContent$1, -2);
      break;
    } else {
      dashes = 0;
    }
    input.advance();
  }
});
function inForeignElement(context) {
  for (; context; context = context.parent)
    if (context.name == "svg" || context.name == "math")
      return true;
  return false;
}
const endTag = new ExternalTokenizer((input, stack) => {
  if (input.next == slash$1 && input.peek(1) == greaterThan) {
    let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
    input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
  } else if (input.next == greaterThan) {
    input.acceptToken(EndTag, 1);
  }
});
function contentTokenizer(tag, textToken, endToken) {
  let lastState = 2 + tag.length;
  return new ExternalTokenizer((input) => {
    for (let state = 0, matchedLen = 0, i = 0; ; i++) {
      if (input.next < 0) {
        if (i)
          input.acceptToken(textToken);
        break;
      }
      if (state == 0 && input.next == lessThan || state == 1 && input.next == slash$1 || state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
        state++;
        matchedLen++;
      } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
        matchedLen++;
      } else if (state == lastState && input.next == greaterThan) {
        if (i > matchedLen)
          input.acceptToken(textToken, -matchedLen);
        else
          input.acceptToken(endToken, -(matchedLen - 2));
        break;
      } else if ((input.next == 10 || input.next == 13) && i) {
        input.acceptToken(textToken, 1);
        break;
      } else {
        state = matchedLen = 0;
      }
      input.advance();
    }
  });
}
const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);
const styleTokens$1 = contentTokenizer("style", styleText, StartCloseStyleTag);
const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);
const htmlHighlighting = styleTags({
  "Text RawText": tags$1.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": tags$1.angleBracket,
  TagName: tags$1.tagName,
  "MismatchedCloseTag/TagName": [tags$1.tagName, tags$1.invalid],
  AttributeName: tags$1.attributeName,
  "AttributeValue UnquotedAttributeValue": tags$1.attributeValue,
  Is: tags$1.definitionOperator,
  "EntityReference CharacterReference": tags$1.character,
  Comment: tags$1.blockComment,
  ProcessingInst: tags$1.processingInstruction,
  DoctypeDecl: tags$1.documentMeta
});
const parser$3 = LRParser.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%WQ&rO,59fO%`Q&rO,59iO%hQ&rO,59lO%sQ&rO,59nOOOa'#D^'#D^O%{OaO'#CxO&WOaO,59[OOOb'#D_'#D_O&`ObO'#C{O&kObO,59[OOOd'#D`'#D`O&sOdO'#DOO'OOdO,59[OOO`'#Da'#DaO'WO!rO,59[O'_Q#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'dO$fO,59oOOO`,59o,59oO'lQ#|O,59qO'qQ#|O,59rOOO`-E7W-E7WO'vQ&rO'#CsOOQW'#DZ'#DZO(UQ&rO1G.wOOOa1G.w1G.wO(^Q&rO1G/QOOOb1G/Q1G/QO(fQ&rO1G/TOOOd1G/T1G/TO(nQ&rO1G/WOOO`1G/W1G/WOOO`1G/Y1G/YO(yQ&rO1G/YOOOa-E7[-E7[O)RQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)WQ#tO'#C|OOOd-E7^-E7^O)]Q#tO'#DPOOO`-E7_-E7_O)bQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O)gQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rOOO`7+$t7+$tO)rQ#|O,59eO)wQ#|O,59hO)|Q#|O,59kOOO`1G/X1G/XO*RO7[O'#CvO*dOMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O*uO7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+WOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: "+s~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OhyO~OS!OOhyO~OS!QOhyO~OS!SOT!TOhyO~OS!TOhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXhgXTgX~OS!fOhyO~OS!gOhyO~OS!hOhyO~OS!iOT!jOhyO~OS!jOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{}!P!R!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!UeZ!e{}!P!R!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: elementContext,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"]
  ],
  propSources: [htmlHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "#%g!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs4ysv-_vw5iwxJ^x}-_}!OKP!O!P-_!P!Q$q!Q![-_![!]!!O!]!^-_!^!_!&W!_!`#$o!`!a&X!a!c-_!c!}!!O!}#R-_#R#S!!O#S#T3V#T#o!!O#o#s-_#s$f$q$f%W-_%W%o!!O%o%p-_%p&a!!O&a&b-_&b1p!!O1p4U-_4U4d!!O4d4e-_4e$IS!!O$IS$I`-_$I`$Ib!!O$Ib$Kh-_$Kh%#t!!O%#t&/x-_&/x&Et!!O&Et&FV-_&FV;'S!!O;'S;:j!&Q;:j;=`4s<%l?&r-_?&r?Ah!!O?Ah?BY$q?BY?Mn!!O?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_1n!_!a&X!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/echSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0uXhSqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0pS1eP;=`<%l0p[1kP;=`<%l/^!U1wbhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!U3SP;=`<%l1n!V3bchS`P!a`!cpOq&Xqr3Vrs&}sv3Vvw0pwx(tx!P3V!P!Q&X!Q!^3V!^!_1n!_!a&X!a#s3V#s$f&X$f;'S3V;'S;=`4m<%l?Ah3V?Ah?BY&X?BY?Mn3V?MnO&X!V4pP;=`<%l3V!_4vP;=`<%l-_!Z5SV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_5rjhSkWc!ROX7dXZ8qZ[7d[^8q^p7dqr:crs8qst@Ttw:cwx8qx!P:c!P!Q7d!Q!]:c!]!^/^!^!_=p!_!a8q!a#S:c#S#T=p#T#s:c#s$f7d$f;'S:c;'S;=`?}<%l?Ah:c?Ah?BY7d?BY?Mn:c?MnO7d!Z7ibkWOX7dXZ8qZ[7d[^8q^p7dqr7drs8qst+Ptw7dwx8qx!]7d!]!^9f!^!a8q!a#S7d#S#T8q#T;'S7d;'S;=`:]<%lO7d!R8tVOp8qqs8qt!]8q!]!^9Z!^;'S8q;'S;=`9`<%lO8q!R9`Oa!R!R9cP;=`<%l8q!Z9mYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z:`P;=`<%l7d!_:jjhSkWOX7dXZ8qZ[7d[^8q^p7dqr:crs8qst/^tw:cwx8qx!P:c!P!Q7d!Q!]:c!]!^<[!^!_=p!_!a8q!a#S:c#S#T=p#T#s:c#s$f7d$f;'S:c;'S;=`?}<%l?Ah:c?Ah?BY7d?BY?Mn:c?MnO7d!_<echSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V=udhSOp8qqr=prs8qst0ptw=pwx8qx!P=p!P!Q8q!Q!]=p!]!^?T!^!_=p!_!a8q!a#s=p#s$f8q$f;'S=p;'S;=`?w<%l?Ah=p?Ah?BY8q?BY?Mn=p?MnO8q!V?[XhSa!Rqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0p!V?zP;=`<%l=p!_@QP;=`<%l:c!_@[ihSkWOXAyXZCTZ[Ay[^CT^pAyqrDrrsCTswDrwxCTx!PDr!P!QAy!Q!]Dr!]!^/^!^!_G|!_!aCT!a#SDr#S#TG|#T#sDr#s$fAy$f;'SDr;'S;=`JW<%l?AhDr?Ah?BYAy?BY?MnDr?MnOAy!ZBOakWOXAyXZCTZ[Ay[^CT^pAyqrAyrsCTswAywxCTx!]Ay!]!^Cu!^!aCT!a#SAy#S#TCT#T;'SAy;'S;=`Dl<%lOAy!RCWUOpCTq!]CT!]!^Cj!^;'SCT;'S;=`Co<%lOCT!RCoOb!R!RCrP;=`<%lCT!ZC|YkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZDoP;=`<%lAy!_DyihSkWOXAyXZCTZ[Ay[^CT^pAyqrDrrsCTswDrwxCTx!PDr!P!QAy!Q!]Dr!]!^Fh!^!_G|!_!aCT!a#SDr#S#TG|#T#sDr#s$fAy$f;'SDr;'S;=`JW<%l?AhDr?Ah?BYAy?BY?MnDr?MnOAy!_FqchSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VHRchSOpCTqrG|rsCTswG|wxCTx!PG|!P!QCT!Q!]G|!]!^I^!^!_G|!_!aCT!a#sG|#s$fCT$f;'SG|;'S;=`JQ<%l?AhG|?Ah?BYCT?BY?MnG|?MnOCT!VIeXhSb!Rqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0p!VJTP;=`<%lG|!_JZP;=`<%lDr!ZJgW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aK^lhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMU!O!P-_!P!Q$q!Q!^-_!^!_1n!_!a&X!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aMckhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_1n!_!`&X!`!a! W!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!T! cX`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!a!!_!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!O!!O!O!P!!O!P!Q$q!Q![!!O![!]!!O!]!^-_!^!_1n!_!a&X!a!c-_!c!}!!O!}#R-_#R#S!!O#S#T3V#T#o!!O#o#s-_#s$f$q$f$}-_$}%O!!O%O%W-_%W%o!!O%o%p-_%p&a!!O&a&b-_&b1p!!O1p4U!!O4U4d!!O4d4e-_4e$IS!!O$IS$I`-_$I`$Ib!!O$Ib$Je-_$Je$Jg!!O$Jg$Kh-_$Kh%#t!!O%#t&/x-_&/x&Et!!O&Et&FV-_&FV;'S!!O;'S;:j!&Q;:j;=`4s<%l?&r-_?&r?Ah!!O?Ah?BY$q?BY?Mn!!O?MnO$q!a!&TP;=`<%l!!O!V!&achS!a`!cpOq*Vqr!'lrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!b!Ey!b#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!'uhhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex}1n}!O!)a!O!P1n!P!Q*V!Q!_1n!_!a*V!a!f1n!f!g!,]!g#W1n#W#X!<y#X#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!)jdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex}1n}!O!*x!O!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!+TbhS!a`!cp!dPOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!,fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!q1n!q!r!-t!r#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!-}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!e1n!e!f!/]!f#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!/fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!v1n!v!w!0t!w#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!0}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!{1n!{!|!2]!|#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!2fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!r1n!r!s!3t!s#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!3}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!g1n!g!h!5]!h#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!5fchS!a`!cpOq!6qqr!5]rs!7hsv!5]vw!;`wx!9[x!P!5]!P!Q!6q!Q!_!5]!_!`!6q!`!a!:j!a#s!5]#s$f!6q$f;'S!5];'S;=`!<s<%l?Ah!5]?Ah?BY!6q?BY?Mn!5]?MnO!6q!R!6xY!a`!cpOr!6qrs!7hsv!6qvw!8Swx!9[x!`!6q!`!a!:j!a;'S!6q;'S;=`!;Y<%lO!6qq!7mV!cpOv!7hvx!8Sx!`!7h!`!a!8q!a;'S!7h;'S;=`!9U<%lO!7hP!8VTO!`!8S!`!a!8f!a;'S!8S;'S;=`!8k<%lO!8SP!8kO{PP!8nP;=`<%l!8Sq!8xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!9XP;=`<%l!7ha!9aX!a`Or!9[rs!8Ssv!9[vw!8Sw!`!9[!`!a!9|!a;'S!9[;'S;=`!:d<%lO!9[a!:TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!:gP;=`<%l!9[!R!:sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;]P;=`<%l!6qT!;ebhSOq!8Sqr!;`rs!8Ssw!;`wx!8Sx!P!;`!P!Q!8S!Q!_!;`!_!`!8S!`!a!8f!a#s!;`#s$f!8S$f;'S!;`;'S;=`!<m<%l?Ah!;`?Ah?BY!8S?BY?Mn!;`?MnO!8ST!<pP;=`<%l!;`!V!<vP;=`<%l!5]!V!=SdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#c1n#c#d!>b#d#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!>kdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#V1n#V#W!?y#W#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!@SdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#h1n#h#i!Ab#i#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!AkdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#m1n#m#n!By#n#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!CSdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#d1n#d#e!Db#e#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!DkdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#X1n#X#Y!5]#Y#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!FSchS!a`!cpOq!G_qr!Eyrs!HUsv!Eyvw!Ncwx!Jvx!P!Ey!P!Q!G_!Q!_!Ey!_!a!G_!a!b##T!b#s!Ey#s$f!G_$f;'S!Ey;'S;=`#$i<%l?Ah!Ey?Ah?BY!G_?BY?Mn!Ey?MnO!G_!R!GfY!a`!cpOr!G_rs!HUsv!G_vw!Hpwx!Jvx!a!G_!a!b!Lv!b;'S!G_;'S;=`!N]<%lO!G_q!HZV!cpOv!HUvx!Hpx!a!HU!a!b!Iq!b;'S!HU;'S;=`!Jp<%lO!HUP!HsTO!a!Hp!a!b!IS!b;'S!Hp;'S;=`!Ik<%lO!HpP!IVTO!`!Hp!`!a!If!a;'S!Hp;'S;=`!Ik<%lO!HpP!IkOxPP!InP;=`<%l!Hpq!IvV!cpOv!HUvx!Hpx!`!HU!`!a!J]!a;'S!HU;'S;=`!Jp<%lO!HUq!JdS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!JsP;=`<%l!HUa!J{X!a`Or!Jvrs!Hpsv!Jvvw!Hpw!a!Jv!a!b!Kh!b;'S!Jv;'S;=`!Lp<%lO!Jva!KmX!a`Or!Jvrs!Hpsv!Jvvw!Hpw!`!Jv!`!a!LY!a;'S!Jv;'S;=`!Lp<%lO!Jva!LaT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!LsP;=`<%l!Jv!R!L}Y!a`!cpOr!G_rs!HUsv!G_vw!Hpwx!Jvx!`!G_!`!a!Mm!a;'S!G_;'S;=`!N]<%lO!G_!R!MvV!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!N`P;=`<%l!G_T!NhbhSOq!Hpqr!Ncrs!Hpsw!Ncwx!Hpx!P!Nc!P!Q!Hp!Q!_!Nc!_!a!Hp!a!b# p!b#s!Nc#s$f!Hp$f;'S!Nc;'S;=`#!}<%l?Ah!Nc?Ah?BY!Hp?BY?Mn!Nc?MnO!HpT# ubhSOq!Hpqr!Ncrs!Hpsw!Ncwx!Hpx!P!Nc!P!Q!Hp!Q!_!Nc!_!`!Hp!`!a!If!a#s!Nc#s$f!Hp$f;'S!Nc;'S;=`#!}<%l?Ah!Nc?Ah?BY!Hp?BY?Mn!Nc?MnO!HpT##QP;=`<%l!Nc!V##^chS!a`!cpOq!G_qr!Eyrs!HUsv!Eyvw!Ncwx!Jvx!P!Ey!P!Q!G_!Q!_!Ey!_!`!G_!`!a!Mm!a#s!Ey#s$f!G_$f;'S!Ey;'S;=`#$i<%l?Ah!Ey?Ah?BY!G_?BY?Mn!Ey?MnO!G_!V#$lP;=`<%l!Ey!V#$zXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [scriptTokens, styleTokens$1, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
  topRules: { "Document": [0, 15] },
  dialects: { noMatch: 0, selfClosing: 485 },
  tokenPrec: 487
});
function getAttrs(openTag, input) {
  let attrs = /* @__PURE__ */ Object.create(null);
  for (let att of openTag.getChildren(Attribute)) {
    let name2 = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
    if (name2)
      attrs[input.read(name2.from, name2.to)] = !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
  }
  return attrs;
}
function findTagName(openTag, input) {
  let tagNameNode = openTag.getChild(TagName);
  return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " ";
}
function maybeNest(node, input, tags2) {
  let attrs;
  for (let tag of tags2) {
    if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))
      return { parser: tag.parser };
  }
  return null;
}
function configureNesting(tags2 = [], attributes = []) {
  let script = [], style = [], textarea = [], other = [];
  for (let tag of tags2) {
    let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : other;
    array.push(tag);
  }
  let attrs = attributes.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let attr of attributes)
    (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);
  return parseMixed((node, input) => {
    let id2 = node.type.id;
    if (id2 == ScriptText)
      return maybeNest(node, input, script);
    if (id2 == StyleText)
      return maybeNest(node, input, style);
    if (id2 == TextareaText)
      return maybeNest(node, input, textarea);
    if (id2 == Element && other.length) {
      let n2 = node.node, open = n2.firstChild, tagName = open && findTagName(open, input), attrs2;
      if (tagName)
        for (let tag of other) {
          if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs2 || (attrs2 = getAttrs(n2, input))))) {
            let close = n2.lastChild;
            return { parser: tag.parser, overlay: [{ from: open.to, to: close.type.id == CloseTag ? close.from : n2.to }] };
          }
        }
    }
    if (attrs && id2 == Attribute) {
      let n2 = node.node, nameNode;
      if (nameNode = n2.firstChild) {
        let matches = attrs[input.read(nameNode.from, nameNode.to)];
        if (matches)
          for (let attr of matches) {
            if (attr.tagName && attr.tagName != findTagName(n2.parent, input))
              continue;
            let value = n2.lastChild;
            if (value.type.id == AttributeValue) {
              let from = value.from + 1;
              let last2 = value.lastChild, to = value.to - (last2 && last2.isError ? 0 : 1);
              if (to > from)
                return { parser: attr.parser, overlay: [{ from, to }] };
            } else if (value.type.id == UnquotedAttributeValue) {
              return { parser: attr.parser, overlay: [{ from: value.from, to: value.to }] };
            }
          }
      }
    }
    return null;
  });
}
const noSemi = 302, incdec = 1, incdecPrefix = 2, insertSemi = 303, spaces = 305, newline = 306, LineComment = 3, BlockComment = 4;
const space = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
];
const braceR = 125, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45;
const trackNewline = new ContextTracker({
  start: false,
  shift(context, term) {
    return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
  },
  strict: false
});
const insertSemicolon = new ExternalTokenizer((input, stack) => {
  let { next } = input;
  if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi))
    input.acceptToken(insertSemi);
}, { contextual: true, fallback: true });
const noSemicolon = new ExternalTokenizer((input, stack) => {
  let { next } = input, after;
  if (space.indexOf(next) > -1)
    return;
  if (next == slash && ((after = input.peek(1)) == slash || after == star))
    return;
  if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi))
    input.acceptToken(noSemi);
}, { contextual: true });
const incdecToken = new ExternalTokenizer((input, stack) => {
  let { next } = input;
  if (next == plus || next == minus) {
    input.advance();
    if (next == input.next) {
      input.advance();
      let mayPostfix = !stack.context && stack.canShift(incdec);
      input.acceptToken(mayPostfix ? incdec : incdecPrefix);
    }
  }
}, { contextual: true });
const jsHighlight = styleTags({
  "get set async static": tags$1.modifier,
  "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
  "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
  "let var const function class extends": tags$1.definitionKeyword,
  "import export from": tags$1.moduleKeyword,
  "with debugger as new": tags$1.keyword,
  TemplateString: tags$1.special(tags$1.string),
  super: tags$1.atom,
  BooleanLiteral: tags$1.bool,
  this: tags$1.self,
  null: tags$1.null,
  Star: tags$1.modifier,
  VariableName: tags$1.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags$1.function(tags$1.variableName),
  VariableDefinition: tags$1.definition(tags$1.variableName),
  Label: tags$1.labelName,
  PropertyName: tags$1.propertyName,
  PrivatePropertyName: tags$1.special(tags$1.propertyName),
  "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
  "FunctionDeclaration/VariableDefinition": tags$1.function(tags$1.definition(tags$1.variableName)),
  "ClassDeclaration/VariableDefinition": tags$1.definition(tags$1.className),
  PropertyDefinition: tags$1.definition(tags$1.propertyName),
  PrivatePropertyDefinition: tags$1.definition(tags$1.special(tags$1.propertyName)),
  UpdateOp: tags$1.updateOperator,
  LineComment: tags$1.lineComment,
  BlockComment: tags$1.blockComment,
  Number: tags$1.number,
  String: tags$1.string,
  Escape: tags$1.escape,
  ArithOp: tags$1.arithmeticOperator,
  LogicOp: tags$1.logicOperator,
  BitOp: tags$1.bitwiseOperator,
  CompareOp: tags$1.compareOperator,
  RegExp: tags$1.regexp,
  Equals: tags$1.definitionOperator,
  Arrow: tags$1.function(tags$1.punctuation),
  ": Spread": tags$1.punctuation,
  "( )": tags$1.paren,
  "[ ]": tags$1.squareBracket,
  "{ }": tags$1.brace,
  "InterpolationStart InterpolationEnd": tags$1.special(tags$1.brace),
  ".": tags$1.derefOperator,
  ", ;": tags$1.separator,
  "@": tags$1.meta,
  TypeName: tags$1.typeName,
  TypeDefinition: tags$1.definition(tags$1.typeName),
  "type enum interface implements namespace module declare": tags$1.definitionKeyword,
  "abstract global Privacy readonly override": tags$1.modifier,
  "is keyof unique infer": tags$1.operatorKeyword,
  JSXAttributeValue: tags$1.attributeValue,
  JSXText: tags$1.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
  "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.attributeName,
  "JSXBuiltin/JSXIdentifier": tags$1.standard(tags$1.tagName)
});
const spec_identifier = { __proto__: null, export: 14, as: 19, from: 27, default: 30, async: 35, function: 36, extends: 46, this: 50, true: 58, false: 58, null: 70, void: 74, typeof: 78, super: 96, new: 130, delete: 146, yield: 155, await: 159, class: 164, public: 221, private: 221, protected: 221, readonly: 223, instanceof: 242, satisfies: 245, in: 246, const: 248, import: 280, keyof: 335, unique: 339, infer: 345, is: 381, abstract: 401, implements: 403, type: 405, let: 408, var: 410, interface: 417, enum: 421, namespace: 427, module: 429, declare: 433, global: 437, for: 456, of: 465, while: 468, with: 472, do: 476, if: 480, else: 482, switch: 486, case: 492, try: 498, catch: 502, finally: 506, return: 510, throw: 514, break: 518, continue: 522, debugger: 526 };
const spec_word = { __proto__: null, async: 117, get: 119, set: 121, declare: 181, public: 183, private: 183, protected: 183, static: 185, abstract: 187, override: 189, readonly: 195, accessor: 197, new: 385 };
const spec_LessThan = { __proto__: null, "<": 137 };
const parser$2 = LRParser.deserialize({
  version: 14,
  states: "$6[O`QUOOO%QQUOOO'TQWOOP(bOSOOO*pQ(CjO'#CfO*wOpO'#CgO+VO!bO'#CgO+eO07`O'#DZO-vQUO'#DaO.WQUO'#DlO%QQUO'#DvO0[QUO'#EOOOQ(CY'#EW'#EWO0uQSO'#ETOOQO'#Ei'#EiOOQO'#Ib'#IbO0}QSO'#GkO1YQSO'#EhO1_QSO'#EhO3aQ(CjO'#JcO6QQ(CjO'#JdO6nQSO'#FWO6sQ#tO'#FoOOQ(CY'#F`'#F`O7OO&jO'#F`O7^Q,UO'#FvO8tQSO'#FuOOQ(CY'#Jd'#JdOOQ(CW'#Jc'#JcOOQQ'#KO'#KOO8yQSO'#IOO9OQ(C[O'#IPOOQQ'#JP'#JPOOQQ'#IT'#ITQ`QUOOO%QQUO'#DnO9WQUO'#DzO%QQUO'#D|O9_QSO'#GkO9dQ,UO'#ClO9rQSO'#EgO9}QSO'#ErO:SQ,UO'#F_O:qQSO'#GkO:vQSO'#GoO;RQSO'#GoO;aQSO'#GrO;aQSO'#GsO;aQSO'#GuO9_QSO'#GxO<QQSO'#G{O=cQSO'#CbO=sQSO'#HXO={QSO'#H_O={QSO'#HaO`QUO'#HcO={QSO'#HeO={QSO'#HhO>QQSO'#HnO>VQ(C]O'#HtO%QQUO'#HvO>bQ(C]O'#HxO>mQ(C]O'#HzO9OQ(C[O'#H|O>xQ(CjO'#CfO?zQWO'#DfQOQSOOO@bQSO'#EPO9dQ,UO'#EgO@mQSO'#EgO@xQ`O'#F_OOQQ'#Cd'#CdOOQ(CW'#Dk'#DkOOQ(CW'#Jg'#JgO%QQUO'#JgOOQO'#Jk'#JkOOQO'#I_'#I_OAxQWO'#E`OOQ(CW'#E_'#E_OBtQ(C`O'#E`OCOQWO'#ESOOQO'#Jj'#JjOCdQWO'#JkODqQWO'#ESOCOQWO'#E`PEOO?MpO'#C`POOO)CDn)CDnOOOO'#IU'#IUOEZOpO,59ROOQ(CY,59R,59ROOOO'#IV'#IVOEiO!bO,59RO%QQUO'#D]OOOO'#IX'#IXOEwO07`O,59uOOQ(CY,59u,59uOFVQUO'#IYOFjQSO'#JeOHlQbO'#JeO+sQUO'#JeOHsQSO,59{OIZQSO'#EiOIhQSO'#JsOIsQSO'#JrOIsQSO'#JrOI{QSO,5;VOJQQSO'#JqOOQ(CY,5:W,5:WOJXQUO,5:WOLYQ(CjO,5:bOLyQSO,5:jOMdQ(C[O'#JpOMkQSO'#JoO:vQSO'#JoONPQSO'#JoONXQSO,5;UON^QSO'#JoO!!fQbO'#JdOOQ(CY'#Cf'#CfO%QQUO'#EOO!#UQ`O,5:oOOQO'#Jl'#JlOOQO-E<`-E<`O9_QSO,5=VO!#lQSO,5=VO!#qQUO,5;SO!%tQ,UO'#EdO!'XQSO,5;SO!(qQ,UO'#DpO!(xQUO'#DuO!)SQWO,5;]O!)[QWO,5;]O%QQUO,5;]OOQQ'#FO'#FOOOQQ'#FQ'#FQO%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^OOQQ'#FU'#FUO!)jQUO,5;oOOQ(CY,5;t,5;tOOQ(CY,5;u,5;uO!+mQSO,5;uOOQ(CY,5;v,5;vO%QQUO'#IfO!+uQ(C[O,5<cO!%tQ,UO,5;^O!,dQ,UO,5;^O%QQUO,5;rO!,kQ#tO'#FeO!-hQ#tO'#JwO!-SQ#tO'#JwO!-oQ#tO'#JwOOQO'#Jw'#JwO!.TQ#tO,5;}OOOO,5<Z,5<ZO!.fQUO'#FqOOOO'#Ie'#IeO7OO&jO,5;zO!.mQ#tO'#FsOOQ(CY,5;z,5;zO!/^Q7[O'#CrOOQ(CY'#Cv'#CvO!/qQSO'#CvO!/vO07`O'#CzO!0dQ,UO,5<`O!0kQSO,5<bO!2QQMhO'#GQO!2_QSO'#GRO!2dQSO'#GRO!2iQMhO'#GVO!3hQWO'#GZO!4ZQ7[O'#J^OOQ(CY'#J^'#J^O!4eQSO'#J]O!4sQSO'#J[O!4{QSO'#CqOOQ(CY'#Ct'#CtOOQ(CY'#DO'#DOOOQ(CY'#DQ'#DQO0xQSO'#DSO!'^Q,UO'#FxO!'^Q,UO'#FzO!5TQSO'#F|O!5YQSO'#F}O!2dQSO'#GTO!'^Q,UO'#GYO!5_QSO'#EjO!5|QSO,5<aO`QUO,5>jOOQQ'#JX'#JXOOQQ,5>k,5>kOOQQ-E<R-E<RO!7{Q(CjO,5:YO!:iQ(CjO,5:fO%QQUO,5:fO!=SQ(CjO,5:hOOQ(CW'#Co'#CoO!=sQ,UO,5=VO!>RQ(C[O'#JYO8tQSO'#JYO!>dQ(C[O,59WO!>oQWO,59WO!>wQ,UO,59WO9dQ,UO,59WO!?SQSO,5;SO!?[QSO'#HWO!?mQSO'#KSO%QQUO,5;wO!?uQWO,5;yO!?zQSO,5=qO!@PQSO,5=qO!@UQSO,5=qO9OQ(C[O,5=qO!@dQSO'#EkO!A^QWO'#ElOOQ(CW'#Jq'#JqO!AeQ(C[O'#KPO9OQ(C[O,5=ZO;aQSO,5=aOOQO'#Cr'#CrO!ApQWO,5=^O!AxQ,UO,5=_O!BTQSO,5=aO!BYQ`O,5=dO>QQSO'#G}O9_QSO'#HPO!BbQSO'#HPO9dQ,UO'#HRO!BgQSO'#HROOQQ,5=g,5=gO!BlQSO'#HSO!BtQSO'#ClO!ByQSO,58|O!CTQSO,58|O!E]QUO,58|OOQQ,58|,58|O!EjQ(C[O,58|O%QQUO,58|O!EuQUO'#HZOOQQ'#H['#H[OOQQ'#H]'#H]O`QUO,5=sO!FVQSO,5=sO`QUO,5=yO`QUO,5={O!F[QSO,5=}O`QUO,5>PO!FaQSO,5>SO!FfQUO,5>YOOQQ,5>`,5>`O%QQUO,5>`O9OQ(C[O,5>bOOQQ,5>d,5>dO!JmQSO,5>dOOQQ,5>f,5>fO!JmQSO,5>fOOQQ,5>h,5>hO!JrQWO'#DXO%QQUO'#JgO!KaQWO'#JgO!LOQWO'#DgO!LaQWO'#DgO!NrQUO'#DgO!NyQSO'#JfO# RQSO,5:QO# WQSO'#EmO# fQSO'#JtO# nQSO,5;WO# sQWO'#DgO#!QQWO'#EROOQ(CY,5:k,5:kO%QQUO,5:kO#!XQSO,5:kO>QQSO,5;RO!>oQWO,5;RO!>wQ,UO,5;RO9dQ,UO,5;RO#!aQSO,5@RO#!fQ!LQO,5:oOOQO-E<]-E<]O##lQ(C`O,5:zOCOQWO,5:nO##vQWO,5:nOCOQWO,5:zO!>dQ(C[O,5:nOOQ(CW'#Ec'#EcOOQO,5:z,5:zO%QQUO,5:zO#$TQ(C[O,5:zO#$`Q(C[O,5:zO!>oQWO,5:nOOQO,5;Q,5;QO#$nQ(C[O,5:zPOOO'#IS'#ISP#%SO?MpO,58zPOOO,58z,58zOOOO-E<S-E<SOOQ(CY1G.m1G.mOOOO-E<T-E<TO#%_Q`O,59wOOOO-E<V-E<VOOQ(CY1G/a1G/aO#%dQbO,5>tO+sQUO,5>tOOQO,5>z,5>zO#%nQUO'#IYOOQO-E<W-E<WO#%{QSO,5@PO#&TQbO,5@PO#&[QSO,5@^OOQ(CY1G/g1G/gO%QQUO,5@_O#&dQSO'#I`OOQO-E<^-E<^O#&[QSO,5@^OOQ(CW1G0q1G0qOOQ(CY1G/r1G/rOOQ(CY1G0U1G0UO%QQUO,5@[O#&xQ(C[O,5@[O#'ZQ(C[O,5@[O#'bQSO,5@ZO:vQSO,5@ZO#'jQSO,5@ZO#'xQSO'#IcO#'bQSO,5@ZOOQ(CW1G0p1G0pO!)SQWO,5:qO!)_QWO,5:qOOQO,5:s,5:sO#(jQSO,5:sO#(rQ,UO1G2qO9_QSO1G2qOOQ(CY1G0n1G0nO#)QQ(CjO1G0nO#*VQ(ChO,5;OOOQ(CY'#GP'#GPO#*sQ(CjO'#J^O!#qQUO1G0nO#,{Q,UO'#JhO#-VQSO,5:[O#-[QbO'#JiO%QQUO'#JiO#-fQSO,5:aOOQ(CY'#DX'#DXOOQ(CY1G0w1G0wO%QQUO1G0wOOQ(CY1G1a1G1aO#-kQSO1G0wO#0SQ(CjO1G0xO#0ZQ(CjO1G0xO#2tQ(CjO1G0xO#2{Q(CjO1G0xO#5VQ(CjO1G0xO#5mQ(CjO1G0xO#8gQ(CjO1G0xO#8nQ(CjO1G0xO#;XQ(CjO1G0xO#;`Q(CjO1G0xO#=WQ(CjO1G0xO#@WQ$IUO'#CfO#BUQ$IUO1G1ZO#B]Q$IUO'#JdO!+pQSO1G1aO#BmQ(CjO,5?QOOQ(CW-E<d-E<dO#CaQ(CjO1G0xOOQ(CY1G0x1G0xO#ElQ(CjO1G1^O#F`Q#tO,5<RO#FhQ#tO,5<SO#FpQ#tO'#FjO#GXQSO'#FiOOQO'#Jx'#JxOOQO'#Id'#IdO#G^Q#tO1G1iOOQ(CY1G1i1G1iOOOO1G1t1G1tO#GoQ$IUO'#JcO#GyQSO,5<]O!)jQUO,5<]OOOO-E<c-E<cOOQ(CY1G1f1G1fO#HOQWO'#JwOOQ(CY,5<_,5<_O#HWQWO,5<_OOQ(CY,59b,59bO!%tQ,UO'#C|OOOO'#IW'#IWO#H]O07`O,59fOOQ(CY,59f,59fO%QQUO1G1zO!5YQSO'#IhO#HhQSO,5<sOOQ(CY,5<p,5<pOOQO'#Gf'#GfO!'^Q,UO,5=POOQO'#Gh'#GhO!'^Q,UO,5=RO!%tQ,UO,5=TOOQO1G1|1G1|O#HvQ`O'#CoO#IZQ`O,5<lO#IbQSO'#J{O9_QSO'#J{O#IpQSO,5<nO!'^Q,UO,5<mO#IuQSO'#GSO#JQQSO,5<mO#JVQ`O'#GPO#JdQ`O'#J|O#JnQSO'#J|O!%tQ,UO'#J|O#JsQSO,5<qO#JxQWO'#G[O!3cQWO'#G[O#KZQSO'#G^O#K`QSO'#G`O!2dQSO'#GcO#KeQ(C[O'#IjO#KpQWO,5<uOOQ(CY,5<u,5<uO#KwQWO'#G[O#LVQWO'#G]O#L_QWO'#G]OOQ(CY,5=U,5=UO!'^Q,UO,5?wO!'^Q,UO,5?wO#LdQSO'#IkO#LoQSO,5?vO#LwQSO,59]O#MhQ,UO,59nOOQ(CY,59n,59nO#NZQ,UO,5<dO#N|Q,UO,5<fO?rQSO,5<hOOQ(CY,5<i,5<iO$ WQSO,5<oO$ ]Q,UO,5<tO$ mQSO'#JoO!#qQUO1G1{O$ rQSO1G1{OOQQ1G4U1G4UOOQ(CY1G/t1G/tO!+mQSO1G/tO$#qQ(CjO1G0QOOQQ1G2q1G2qO!%tQ,UO1G2qO%QQUO1G2qO$$bQSO1G2qO$$mQ,UO'#EdOOQ(CW,5?t,5?tO$$wQ(C[O,5?tOOQQ1G.r1G.rO!>dQ(C[O1G.rO!>oQWO1G.rO!>wQ,UO1G.rO$%YQSO1G0nO$%_QSO'#CfO$%jQSO'#KTO$%rQSO,5=rO$%wQSO'#KTO$%|QSO'#KTO$&XQSO'#IsO$&gQSO,5@nO$&oQbO1G1cOOQ(CY1G1e1G1eO9_QSO1G3]O?rQSO1G3]O$&vQSO1G3]O$&{QSO1G3]OOQQ1G3]1G3]O:vQSO'#JrO:vQSO'#EmO%QQUO'#EmO:vQSO'#ImO$'QQ(C[O,5@kOOQQ1G2u1G2uO!BTQSO1G2{O!%tQ,UO1G2xO$']QSO1G2xOOQQ1G2y1G2yO!%tQ,UO1G2yO$'bQSO1G2yO$'jQWO'#GwOOQQ1G2{1G2{O!3cQWO'#IoO!BYQ`O1G3OOOQQ1G3O1G3OOOQQ,5=i,5=iO$'rQ,UO,5=kO9_QSO,5=kO#K`QSO,5=mO8tQSO,5=mO!>oQWO,5=mO!>wQ,UO,5=mO9dQ,UO,5=mO$(QQSO'#KRO$(]QSO,5=nOOQQ1G.h1G.hO$(bQ(C[O1G.hO?rQSO1G.hO$(mQSO1G.hO9OQ(C[O1G.hO$*rQbO,5@pO$+SQSO,5@pO$+_QUO,5=uO$+fQSO,5=uO:vQSO,5@pOOQQ1G3_1G3_O`QUO1G3_OOQQ1G3e1G3eOOQQ1G3g1G3gO={QSO1G3iO$+kQUO1G3kO$/lQUO'#HjOOQQ1G3n1G3nO$/yQSO'#HpO>QQSO'#HrOOQQ1G3t1G3tO$0RQUO1G3tO9OQ(C[O1G3zOOQQ1G3|1G3|OOQ(CW'#GW'#GWO9OQ(C[O1G4OO9OQ(C[O1G4QO$4VQSO,5@RO!)jQUO,5;XO:vQSO,5;XO>QQSO,5:RO!)jQUO,5:RO!>oQWO,5:RO$4[Q$IUO,5:ROOQO,5;X,5;XO$4fQWO'#IZO$4|QSO,5@QOOQ(CY1G/l1G/lO$5UQWO'#IaO$5`QSO,5@`OOQ(CW1G0r1G0rO!LaQWO,5:ROOQO'#I^'#I^O$5hQWO,5:mOOQ(CY,5:m,5:mO#![QSO1G0VOOQ(CY1G0V1G0VO%QQUO1G0VOOQ(CY1G0m1G0mO>QQSO1G0mO!>oQWO1G0mO!>wQ,UO1G0mOOQ(CW1G5m1G5mO!>dQ(C[O1G0YOOQO1G0f1G0fO%QQUO1G0fO$5oQ(C[O1G0fO$5zQ(C[O1G0fO!>oQWO1G0YOCOQWO1G0YO$6YQ(C[O1G0fOOQO1G0Y1G0YO$6nQ(CjO1G0fPOOO-E<Q-E<QPOOO1G.f1G.fOOOO1G/c1G/cO$6xQ`O,5<cO$7QQbO1G4`OOQO1G4f1G4fO%QQUO,5>tO$7[QSO1G5kO$7dQSO1G5xO$7lQbO1G5yO:vQSO,5>zO$7vQ(CjO1G5vO%QQUO1G5vO$8WQ(C[O1G5vO$8iQSO1G5uO$8iQSO1G5uO:vQSO1G5uO$8qQSO,5>}O:vQSO,5>}OOQO,5>},5>}O$9VQSO,5>}O$ mQSO,5>}OOQO-E<a-E<aOOQO1G0]1G0]OOQO1G0_1G0_O!+pQSO1G0_OOQQ7+(]7+(]O!%tQ,UO7+(]O%QQUO7+(]O$9eQSO7+(]O$9pQ,UO7+(]O$:OQ(CjO,59nO$<WQ(CjO,5<dO$>cQ(CjO,5<fO$@nQ(CjO,5<tOOQ(CY7+&Y7+&YO$CPQ(CjO7+&YO$CsQ,UO'#I[O$C}QSO,5@SOOQ(CY1G/v1G/vO$DVQUO'#I]O$DdQSO,5@TO$DlQbO,5@TOOQ(CY1G/{1G/{O$DvQSO7+&cOOQ(CY7+&c7+&cO$D{Q$IUO,5:bO%QQUO7+&uO$EVQ$IUO,5:YO$EdQ$IUO,5:fO$EnQ$IUO,5:hOOQ(CY7+&{7+&{OOQO1G1m1G1mOOQO1G1n1G1nO$ExQ#tO,5<UO!)jQUO,5<TOOQO-E<b-E<bOOQ(CY7+'T7+'TOOOO7+'`7+'`OOOO1G1w1G1wO$FTQSO1G1wOOQ(CY1G1y1G1yO$FYQ`O,59hOOOO-E<U-E<UOOQ(CY1G/Q1G/QO$FaQ(CjO7+'fOOQ(CY,5?S,5?SO$GTQSO,5?SOOQ(CY1G2_1G2_P$GYQSO'#IhPOQ(CY-E<f-E<fO$G|Q,UO1G2kO$HoQ,UO1G2mO$HyQ`O1G2oOOQ(CY1G2W1G2WO$IQQSO'#IgO$I`QSO,5@gO$I`QSO,5@gO$IhQSO,5@gO$IsQSO,5@gOOQO1G2Y1G2YO$JRQ,UO1G2XO!'^Q,UO1G2XO$JcQMhO'#IiO$JsQSO,5@hO!%tQ,UO,5@hO$J{Q`O,5@hOOQ(CY1G2]1G2]OOQ(CW,5<v,5<vOOQ(CW,5<w,5<wO$ mQSO,5<wOBoQSO,5<wO!>oQWO,5<vOOQO'#G_'#G_O$KVQSO,5<xOOQ(CW,5<z,5<zO$ mQSO,5<}OOQO,5?U,5?UOOQO-E<h-E<hOOQ(CY1G2a1G2aO!3cQWO,5<vO$K_QSO,5<wO#KZQSO,5<xO!3cQWO,5<wO$KjQ,UO1G5cO$KtQ,UO1G5cOOQO,5?V,5?VOOQO-E<i-E<iOOQO1G.w1G.wO!?uQWO,59pO%QQUO,59pO$LRQSO1G2SO!'^Q,UO1G2ZO$LWQ(CjO7+'gOOQ(CY7+'g7+'gO!#qQUO7+'gOOQ(CY7+%`7+%`O$LzQ`O'#J}O#![QSO7+(]O$MUQbO7+(]O$9hQSO7+(]O$M]Q(ChO'#CfO$MpQ(ChO,5<{O$NbQSO,5<{OOQ(CW1G5`1G5`OOQQ7+$^7+$^O!>dQ(C[O7+$^O!>oQWO7+$^O!#qQUO7+&YO$NgQSO'#IrO$N{QSO,5@oOOQO1G3^1G3^O9_QSO,5@oO$N{QSO,5@oO% TQSO,5@oOOQO,5?_,5?_OOQO-E<q-E<qOOQ(CY7+&}7+&}O% YQSO7+(wO9OQ(C[O7+(wO9_QSO7+(wO?rQSO7+(wO% _QSO,5;XOOQ(CW,5?X,5?XOOQ(CW-E<k-E<kOOQQ7+(g7+(gO% dQ(ChO7+(dO!%tQ,UO7+(dO% nQ`O7+(eOOQQ7+(e7+(eO!%tQ,UO7+(eO% uQSO'#KQO%!QQSO,5=cOOQO,5?Z,5?ZOOQO-E<m-E<mOOQQ7+(j7+(jO%#aQWO'#HQOOQQ1G3V1G3VO!%tQ,UO1G3VO%QQUO1G3VO%#hQSO1G3VO%#sQ,UO1G3VO9OQ(C[O1G3XO#K`QSO1G3XO8tQSO1G3XO!>oQWO1G3XO!>wQ,UO1G3XO%$RQSO'#IqO%$^QSO,5@mO%$fQWO,5@mOOQ(CW1G3Y1G3YOOQQ7+$S7+$SO?rQSO7+$SO9OQ(C[O7+$SO%$qQSO7+$SO%QQUO1G6[O%QQUO1G6]O%$vQUO1G3aO%$}QSO1G3aO%%SQUO1G3aO%%ZQ(C[O1G6[OOQQ7+(y7+(yO9OQ(C[O7+)TO`QUO7+)VOOQQ'#KW'#KWOOQQ'#It'#ItO%%eQUO,5>UOOQQ,5>U,5>UO%QQUO'#HkO%%rQSO'#HmOOQQ,5>[,5>[O:vQSO,5>[OOQQ,5>^,5>^OOQQ7+)`7+)`OOQQ7+)f7+)fOOQQ7+)j7+)jOOQQ7+)l7+)lO%%wQWO1G5mO%&]Q$IUO1G0sO%&gQSO1G0sOOQO1G/m1G/mO%&rQ$IUO1G/mO>QQSO1G/mO!)jQUO'#DgOOQO,5>u,5>uOOQO-E<X-E<XOOQO,5>{,5>{OOQO-E<_-E<_O!>oQWO1G/mOOQO-E<[-E<[OOQ(CY1G0X1G0XOOQ(CY7+%q7+%qO#![QSO7+%qOOQ(CY7+&X7+&XO>QQSO7+&XO!>oQWO7+&XOOQO7+%t7+%tO$6nQ(CjO7+&QOOQO7+&Q7+&QO%QQUO7+&QO%&|Q(C[O7+&QO!>dQ(C[O7+%tO!>oQWO7+%tO%'XQ(C[O7+&QO%'gQ(CjO7++bO%QQUO7++bO%'wQSO7++aO%'wQSO7++aOOQO1G4i1G4iO:vQSO1G4iO%(PQSO1G4iOOQO7+%y7+%yO#![QSO<<KwO$MUQbO<<KwO%(_QSO<<KwOOQQ<<Kw<<KwO!%tQ,UO<<KwO%QQUO<<KwO%(gQSO<<KwO%(rQ(CjO1G2kO%*}Q(CjO1G2mO%-YQ(CjO1G2XO%/kQ,UO,5>vOOQO-E<Y-E<YO%/uQbO,5>wO%QQUO,5>wOOQO-E<Z-E<ZO%0PQSO1G5oOOQ(CY<<I}<<I}O%0XQ$IUO1G0nO%2cQ$IUO1G0xO%2jQ$IUO1G0xO%4nQ$IUO1G0xO%4uQ$IUO1G0xO%6jQ$IUO1G0xO%7QQ$IUO1G0xO%9eQ$IUO1G0xO%9lQ$IUO1G0xO%;pQ$IUO1G0xO%;wQ$IUO1G0xO%=oQ$IUO1G0xO%>SQ(CjO<<JaO%?XQ$IUO1G0xO%@}Q$IUO'#J^O%CQQ$IUO1G1^O%C_Q$IUO1G0QO!)jQUO'#FlOOQO'#Jy'#JyOOQO1G1p1G1pO%CiQSO1G1oO%CnQ$IUO,5?QOOOO7+'c7+'cOOOO1G/S1G/SOOQ(CY1G4n1G4nO!'^Q,UO7+(ZO%CxQSO,5?RO9_QSO,5?ROOQO-E<e-E<eO%DWQSO1G6RO%DWQSO1G6RO%D`QSO1G6RO%DkQ,UO7+'sO%D{Q`O,5?TO%EVQSO,5?TO!%tQ,UO,5?TOOQO-E<g-E<gO%E[Q`O1G6SO%EfQSO1G6SOOQ(CW1G2c1G2cO$ mQSO1G2cOOQ(CW1G2b1G2bO%EnQSO1G2dO!%tQ,UO1G2dOOQ(CW1G2i1G2iO!>oQWO1G2bOBoQSO1G2cO%EsQSO1G2dO%E{QSO1G2cO!'^Q,UO7+*}OOQ(CY1G/[1G/[O%FWQSO1G/[OOQ(CY7+'n7+'nO%F]Q,UO7+'uO%FmQ(CjO<<KROOQ(CY<<KR<<KRO!%tQ,UO'#IlO%GaQSO,5@iO!%tQ,UO1G2gOOQQ<<Gx<<GxO!>dQ(C[O<<GxO%GiQ(CjO<<ItOOQ(CY<<It<<ItOOQO,5?^,5?^O%H]QSO,5?^O$%|QSO,5?^OOQO-E<p-E<pO%HbQSO1G6ZO%HbQSO1G6ZO9_QSO1G6ZO?rQSO<<LcOOQQ<<Lc<<LcO%HjQSO<<LcO9OQ(C[O<<LcO%HoQSO1G0sOOQQ<<LO<<LOO% dQ(ChO<<LOOOQQ<<LP<<LPO% nQ`O<<LPO%HtQWO'#InO%IPQSO,5@lO!)jQUO,5@lOOQQ1G2}1G2}O%IXQUO'#JgOOQO'#Ip'#IpO9OQ(C[O'#IpO%IcQWO,5=lOOQQ,5=l,5=lO%IjQWO'#E`O%JOQSO7+(qO%JTQSO7+(qOOQQ7+(q7+(qO!%tQ,UO7+(qO%QQUO7+(qO%J]QSO7+(qOOQQ7+(s7+(sO9OQ(C[O7+(sO#K`QSO7+(sO8tQSO7+(sO!>oQWO7+(sO%JhQSO,5?]OOQO-E<o-E<oOOQO'#HT'#HTO%JsQSO1G6XO9OQ(C[O<<GnOOQQ<<Gn<<GnO?rQSO<<GnO%J{QSO7++vO%KQQSO7++wOOQQ7+({7+({O%KVQSO7+({O%K[QUO7+({O%KcQSO7+({O%QQUO7++vO%QQUO7++wOOQQ<<Lo<<LoOOQQ<<Lq<<LqOOQQ-E<r-E<rOOQQ1G3p1G3pO%KhQSO,5>VOOQQ,5>X,5>XO%KmQSO1G3vO:vQSO7+&_O!)jQUO7+&_OOQO7+%X7+%XO%KrQ$IUO1G5yO>QQSO7+%XOOQ(CY<<I]<<I]OOQ(CY<<Is<<IsO>QQSO<<IsOOQO<<Il<<IlO$6nQ(CjO<<IlO%QQUO<<IlOOQO<<I`<<I`O!>dQ(C[O<<I`O%K|Q(C[O<<IlO%LXQ(CjO<<N|O%LiQSO<<N{OOQO7+*T7+*TO:vQSO7+*TOOQQANAcANAcO%LqQSOANAcO!%tQ,UOANAcO#![QSOANAcO$MUQbOANAcO%QQUOANAcO%LyQ(CjO7+'sO& [Q(CjO7+'uO&#mQbO1G4cO&#wQ$IUO7+&YO&$UQ$IUO,59nO&&XQ$IUO,5<dO&([Q$IUO,5<fO&*_Q$IUO,5<tO&,TQ$IUO7+'fO&,bQ$IUO7+'gO&,oQSO,5<WOOQO7+'Z7+'ZO&,tQ,UO<<KuOOQO1G4m1G4mO&,{QSO1G4mO&-WQSO1G4mO&-fQSO7++mO&-fQSO7++mO!%tQ,UO1G4oO&-nQ`O1G4oO&-xQSO7++nOOQ(CW7+'}7+'}O$ mQSO7+(OO&.QQ`O7+(OOOQ(CW7+'|7+'|O$ mQSO7+'}O&.XQSO7+(OO!%tQ,UO7+(OOBoQSO7+'}O&.^Q,UO<<NiOOQ(CY7+$v7+$vO&.hQ`O,5?WOOQO-E<j-E<jO&.rQ(ChO7+(ROOQQAN=dAN=dO9_QSO1G4xOOQO1G4x1G4xO&/SQSO1G4xO&/XQSO7++uO&/XQSO7++uO9OQ(C[OANA}O?rQSOANA}OOQQANA}ANA}OOQQANAjANAjOOQQANAkANAkO&/aQSO,5?YOOQO-E<l-E<lO&/lQ$IUO1G6WO&1|QbO'#CfOOQO,5?[,5?[OOQO-E<n-E<nOOQQ1G3W1G3WO%IXQUO,5<xOOQQ<<L]<<L]O!%tQ,UO<<L]O%JOQSO<<L]O&2WQSO<<L]O%QQUO<<L]OOQQ<<L_<<L_O9OQ(C[O<<L_O#K`QSO<<L_O8tQSO<<L_O&2`QWO1G4wO&2kQSO7++sOOQQAN=YAN=YO9OQ(C[OAN=YOOQQ<= b<= bOOQQ<= c<= cOOQQ<<Lg<<LgO&2sQSO<<LgO&2xQUO<<LgO&3PQSO<= bO&3UQSO<= cOOQQ1G3q1G3qO>QQSO7+)bO&3ZQSO<<IyO&3fQ$IUO<<IyOOQO<<Hs<<HsOOQ(CYAN?_AN?_OOQOAN?WAN?WO$6nQ(CjOAN?WOOQOAN>zAN>zO%QQUOAN?WOOQO<<Mo<<MoOOQQG26}G26}O!%tQ,UOG26}O#![QSOG26}O&3pQSOG26}O$MUQbOG26}O&3xQ$IUO<<JaO&4VQ$IUO1G2XO&5{Q$IUO1G2kO&8OQ$IUO1G2mO&:RQ$IUO<<KRO&:`Q$IUO<<ItOOQO1G1r1G1rO!'^Q,UOANAaOOQO7+*X7+*XO&:mQSO7+*XO&:xQSO<= XO&;QQ`O7+*ZOOQ(CW<<Kj<<KjO$ mQSO<<KjOOQ(CW<<Ki<<KiO&;[Q`O<<KjO$ mQSO<<KiOOQO7+*d7+*dO9_QSO7+*dO&;cQSO<= aOOQQG27iG27iO9OQ(C[OG27iO!)jQUO1G4tO&;kQSO7++rO%JOQSOANAwOOQQANAwANAwO!%tQ,UOANAwO&;sQSOANAwOOQQANAyANAyO9OQ(C[OANAyO#K`QSOANAyOOQO'#HU'#HUOOQO7+*c7+*cOOQQG22tG22tOOQQANBRANBRO&;{QSOANBROOQQAND|AND|OOQQAND}AND}OOQQ<<L|<<L|O!)jQUOAN?eOOQOG24rG24rO$6nQ(CjOG24rO#![QSOLD,iOOQQLD,iLD,iO!%tQ,UOLD,iO&<QQSOLD,iO&<YQ$IUO7+'sO&>OQ$IUO7+'uO&?tQ,UOG26{OOQO<<Ms<<MsOOQ(CWANAUANAUO$ mQSOANAUOOQ(CWANATANATOOQO<<NO<<NOOOQQLD-TLD-TO&@UQ$IUO7+*`OOQQG27cG27cO%JOQSOG27cO!%tQ,UOG27cOOQQG27eG27eO9OQ(C[OG27eOOQQG27mG27mO&@`Q$IUOG25POOQOLD*^LD*^OOQQ!$(!T!$(!TO#![QSO!$(!TO!%tQ,UO!$(!TO&@jQ(CjOG26{OOQ(CWG26pG26pOOQQLD,}LD,}O%JOQSOLD,}OOQQLD-PLD-POOQQ!)9Eo!)9EoO#![QSO!)9EoOOQQ!$(!i!$(!iOOQQ!.K;Z!.K;ZO&B{Q$IUOG26{O!)jQUO'#DvO0uQSO'#ETO&DqQbO'#JcO!)jQUO'#DnO&DxQUO'#DzO!)jQUO'#D|O&EPQbO'#CfO&GgQbO'#CfO&GwQUO,5;SO!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO'#IfO&IzQSO,5<cO&JSQ,UO,5;^O&KgQ,UO,5;^O!)jQUO,5;rO0xQSO'#DSO0xQSO'#DSO!%tQ,UO'#FxO&JSQ,UO'#FxO!%tQ,UO'#FzO&JSQ,UO'#FzO!%tQ,UO'#GYO&JSQ,UO'#GYO!)jQUO,5:fO!)jQUO,5@_O&GwQUO1G0nO&KnQ$IUO'#CfO!)jQUO1G1zO!%tQ,UO,5=PO&JSQ,UO,5=PO!%tQ,UO,5=RO&JSQ,UO,5=RO!%tQ,UO,5<mO&JSQ,UO,5<mO&GwQUO1G1{O!)jQUO7+&uO!%tQ,UO1G2XO&JSQ,UO1G2XO!%tQ,UO1G2ZO&JSQ,UO1G2ZO&GwQUO7+'gO&GwQUO7+&YO!%tQ,UOANAaO&JSQ,UOANAaO&KxQSO'#EhO&K}QSO'#EhO&LVQSO'#FWO&L[QSO'#ErO&LaQSO'#JsO&LlQSO'#JqO&LwQSO,5;SO&L|Q,UO,5<`O&MTQSO'#GRO&MYQSO'#GRO&M_QSO,5<aO&MgQSO,5;SO&MoQ$IUO1G1ZO&MvQSO,5<mO&M{QSO,5<mO&NQQSO,5<oO&NVQSO,5<oO&N[QSO1G1{O&NaQSO1G0nO&NfQ,UO<<KuO&NmQ,UO<<KuO7^Q,UO'#FvO8tQSO'#FuO@mQSO'#EgO!)jQUO,5;oO!2dQSO'#GRO!2dQSO'#GRO!2dQSO'#GTO!2dQSO'#GTO!'^Q,UO7+(ZO!'^Q,UO7+(ZO$HyQ`O1G2oO$HyQ`O1G2oO!%tQ,UO,5=TO!%tQ,UO,5=T",
  stateData: "' v~O'mOS'nOSROS'oRQ~OPYOQYOV!TO^pOaxObwOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!XXO!csO!hZO!kYO!lYO!mYO!otO!quO!tvO!x]O#p}O$QzO$UfO%`{O%b!OO%d|O%e|O%h!PO%j!QO%m!RO%n!RO%p!SO%|!UO&S!VO&U!WO&W!XO&Y!YO&]!ZO&c![O&i!]O&k!^O&m!_O&o!`O&q!aO'tSO'vTO'yUO(RVO(a[O(niO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO't!bO'vTO'yUO(RVO(a[O(niO~O^!sOl!kO|!lO![!uO!]!rO!^!rO!x9mO!|!mO!}!mO#O!tO#P!mO#Q!mO#T!vO#U!vO'u!iO'vTO'yUO(U!jO(a!pO~O'o!wO~OPYXXYX^YXkYXyYXzYX|YX!VYX!eYX!fYX!hYX!lYX#XYX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX'kYX(RYX(bYX(iYX(jYX~O!a$zX~P(gO[!yO'v!{O'w!yO'x!{O~O[!|O'x!{O'y!{O'z!|O~Oq#OO!O#PO(S#PO(T#RO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO't9rO'vTO'yUO(RVO(a[O(niO~O!U#VO!V#SO!S(XP!S(fP~P+sO!W#_O~P`OPYOQYOa!gOb!fOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO'vTO'yUO(RVO(a[O(niO~Oi#iO!U#eO!x]O#b#hO#c#eO't9sO!g(cP~P._O!h#kO't#jO~O!t#oO!x]O%`#pO~O#d#qO~O!a#rO#d#qO~OP$YOX$aOk#}Oy#vOz#wO|#xO!V$^O!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO#v$VO(RVO(b$WO(i#yO(j#zO~O^(VX'k(VX'i(VX!g(VX!S(VX!X(VX%a(VX!a(VX~P1gO#X$bO#{$bOP(WXX(WXk(WXy(WXz(WX|(WX!V(WX!e(WX!h(WX!l(WX#g(WX#h(WX#i(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#q(WX#s(WX#u(WX#v(WX(R(WX(b(WX(i(WX(j(WX!X(WX%a(WX~O^(WX!f(WX'k(WX'i(WX!S(WX!g(WXo(WX!a(WX~P3}O#X$bO~O$W$dO$Y$cO$a$iO~O!X$jO$UfO$d$kO$f$mO~Oi%POk$qOl$pOm$pOs%QOu%ROw%SO|$xO!X$yO!c%XO!h$uO#c%YO$Q%VO$m%TO$o%UO$r%WO't$oO'vTO'yUO'}%OO(R$rOd(OP~O!h%ZO~O!a%]O~O^%^O'k%^O~O'u!iO~P%QO't%eO~O!h%ZO't%eO'u!iO'}%OO~Ob%lO!h%ZO't%eO~O#o$PO~Oy%qO!X%nO!h%pO%b%tO't%eO'u!iO'vTO'yUO](vP~O!t#oO~O|%vO!X%wO't%eO~O|%vO!X%wO%j%{O't%eO~O't%|O~O#p}O%b!OO%d|O%e|O%h!PO%j!QO%m!RO%n!RO~Oa&VOb&UO!t&SO%`&TO%r&RO~P;fOa&YObwO!X&XO!tvO!x]O#p}O%`{O%d|O%e|O%h!PO%j!QO%m!RO%n!RO%p!SO~O_&]O#X&`O%b&ZO'u!iO~P<eO!h&aO!q&eO~O!h#kO~O!XXO~O^%^O'j&mO'k%^O~O^%^O'j&pO'k%^O~O^%^O'j&rO'k%^O~O'iYX!SYXoYX!gYX&QYX!XYX%aYX!aYX~P(gO!['PO!]&xO!^&xO'u!iO'vTO'yUO~Ol&vO|&uO!U&yO(U&tO!W(YP!W(hP~P?fOg'SO!X'QO't%eO~Ob'XO!h%ZO't%eO~Oy%qO!h%pO~Ol!kO|!lO!x9mO!|!mO!}!mO#P!mO#Q!mO'u!iO'vTO'yUO(U!jO(a!pO~O!['_O!]'^O!^'^O#O!mO#T'`O#U'`O~PAQO^%^O!a#rO!h%ZO'k%^O'}%OO(b'bO~O!l'fO#X'dO~PB`Ol!kO|!lO'vTO'yUO(U!jO(a!pO~O!XXOl(_X|(_X![(_X!](_X!^(_X!x(_X!|(_X!}(_X#O(_X#P(_X#Q(_X#T(_X#U(_X'u(_X'v(_X'y(_X(U(_X(a(_X~O!]'^O!^'^O'u!iO~PCOO'p'jO'q'jO'r'lO~O[!yO'v'nO'w!yO'x'nO~O[!|O'x'nO'y'nO'z!|O~Oq#OO!O#PO(S#PO(T'rO~O!U'tO!S&|X!S'SX!V&|X!V'SX~P+sO!V'vO!S(XX~OP$YOX$aOk#}Oy#vOz#wO|#xO!V'vO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO#v$VO(RVO(b$WO(i#yO(j#zO~O!S(XX~PFrO!S'{O~O!S(eX!V(eX!a(eX!g(eX(b(eX~O#X(eX#d#]X!W(eX~PHxO#X'|O!S(gX!V(gX~O!V'}O!S(fX~O!S(QO~O#X$bO~PHxO!W(RO~P`Oy#vOz#wO|#xO!f#tO!h#uO(RVOP!jaX!jak!ja!V!ja!e!ja!l!ja#g!ja#h!ja#i!ja#j!ja#k!ja#l!ja#m!ja#n!ja#o!ja#q!ja#s!ja#u!ja#v!ja(b!ja(i!ja(j!ja~O^!ja'k!ja'i!ja!S!ja!g!jao!ja!X!ja%a!ja!a!ja~PJ`O!g(SO~O!a#rO#X(TO(b'bO!V(dX^(dX'k(dX~O!g(dX~PMOO|%vO!X%wO!x]O#b(YO#c(XO't%eO~O!V(ZO!g(cX~O!g(]O~O|%vO!X%wO#c(XO't%eO~OP(WXX(WXk(WXy(WXz(WX|(WX!V(WX!e(WX!f(WX!h(WX!l(WX#g(WX#h(WX#i(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#q(WX#s(WX#u(WX#v(WX(R(WX(b(WX(i(WX(j(WX~O!a#rO!g(WX~PNlOy(^Oz(_O!f#tO!h#uO!x!wa|!wa~O!t!wa%`!wa!X!wa#b!wa#c!wa't!wa~P!!pO!t(cO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!XXO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO't!bO'vTO'yUO(RVO(a[O(niO~Oi%POk$qOl$pOm$pOs%QOu%ROw:VO|$xO!X$yO!c;aO!h$uO#c:]O$Q%VO$m:XO$o:ZO$r%WO't(gO'vTO'yUO'}%OO(R$rO~O#d(iO~Oi%POk$qOl$pOm$pOs%QOu%ROw%SO|$xO!X$yO!c%XO!h$uO#c%YO$Q%VO$m%TO$o%UO$r%WO't(gO'vTO'yUO'}%OO(R$rO~Od([P~P!'^O!U(mO!g(]P~P%QO(U(oO(a[O~O|(qO!h#uO(U(oO(a[O~OP9lOQ9lOa;]Ob!fOikOk9lOlkOmkOskOu9lOw9lO|WO!QkO!RkO!X!cO!c9oO!hZO!k9lO!l9lO!m9lO!o9pO!q9qO!t!eO$Q!hO$UfO't)PO'vTO'yUO(RVO(a[O(n;ZO~Oz)SO!h#uO~O!V$^O^$ka'k$ka'i$ka!g$ka!S$ka!X$ka%a$ka!a$ka~O#p)WO~P!%tOy)ZO!a)YO!X$XX$T$XX$W$XX$Y$XX$a$XX~O!a)YO!X(kX$T(kX$W(kX$Y(kX$a(kX~Oy)ZO~P!-SOy)ZO!X(kX$T(kX$W(kX$Y(kX$a(kX~O!X)]O$T)aO$W)[O$Y)[O$a)bO~O!U)eO~P!)jO$W$dO$Y$cO$a)iO~Og$sXy$sX|$sX!f$sX(i$sX(j$sX~OdfXd$sXgfX!VfX#XfX~P!.xOl)kO~Oq)lO(S)mO(T)oO~Og)xOy)qO|)rO(i)tO(j)vO~Od)pO~P!0ROd)yO~Oi%POk$qOl$pOm$pOs%QOu%ROw:VO|$xO!X$yO!c;aO!h$uO#c:]O$Q%VO$m:XO$o:ZO$r%WO'vTO'yUO'}%OO(R$rO~O!U)}O't)zO!g(oP~P!0pO#d*PO~O!h*QO~O!U*VO't*SO!S(pP~P!0pOk*cO|*ZO![*aO!]*YO!^*YO!h*QO#T*bO%W*]O'u!iO(U!jO~O!W*`O~P!2vO!f#tOg(QXy(QX|(QX(i(QX(j(QX!V(QX#X(QX~Od(QX#y(QX~P!3oOg*fO#X*eOd(PX!V(PX~O!V*gOd(OX~O't%|Od(OP~O!h*nO~O't(gO~Oi*rO|%vO!U#eO!X%wO!x]O#b#hO#c#eO't%eO!g(cP~O!a#rO#d*sO~OP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO#v$VO(RVO(b$WO(i#yO(j#zO~O^!ba!V!ba'k!ba'i!ba!S!ba!g!bao!ba!X!ba%a!ba!a!ba~P!6UOy#vOz#wO|#xO!f#tO!h#uO(RVOP!naX!nak!na!V!na!e!na!l!na#g!na#h!na#i!na#j!na#k!na#l!na#m!na#n!na#o!na#q!na#s!na#u!na#v!na(b!na(i!na(j!na~O^!na'k!na'i!na!S!na!g!nao!na!X!na%a!na!a!na~P!8oOy#vOz#wO|#xO!f#tO!h#uO(RVOP!paX!pak!pa!V!pa!e!pa!l!pa#g!pa#h!pa#i!pa#j!pa#k!pa#l!pa#m!pa#n!pa#o!pa#q!pa#s!pa#u!pa#v!pa(b!pa(i!pa(j!pa~O^!pa'k!pa'i!pa!S!pa!g!pao!pa!X!pa%a!pa!a!pa~P!;YOg*{O!X'QO%a*zO'}%OO~O!a*}O^'|X!X'|X'k'|X!V'|X~O^%^O!XXO'k%^O~O!h%ZO'}%OO~O!h%ZO't%eO'}%OO~O!a#rO#d(iO~O%b+ZO't+VO'vTO'yUO!W(wP~O!V+[O](vX~O(U(oO~OX+`O~O]+aO~O!X%nO't%eO'u!iO](vP~O|%vO!U+eO!V'}O!X%wO't%eO!S(fP~Ol&|O|+gO!U+fO'vTO'yUO(U(oO~O!W(hP~P!@xO!V+hO^(sX'k(sX~O#X+lO'}%OO~Og+oO!X$yO'}%OO~O!X+qO~Oy+sO!XXO~O!t+xO~Ob+}O~O't#jO!W(uP~Ob%lO~O%b!OO't%|O~P<eOX,TO],SO~OPYOQYOaxObwOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!csO!hZO!kYO!lYO!mYO!otO!quO!tvO!x]O$UfO%`{O'vTO'yUO(RVO(a[O(niO~O!X!cO$Q!hO't!bO~P!C]O],SO^%^O'k%^O~O^,XO#p,ZO%d,ZO%e,ZO~P%QO!h&aO~O&S,`O~O!X,bO~O&e,dO&g,eOP&baQ&baV&ba^&baa&bab&bai&bak&bal&bam&bas&bau&baw&ba|&ba!Q&ba!R&ba!X&ba!c&ba!h&ba!k&ba!l&ba!m&ba!o&ba!q&ba!t&ba!x&ba#p&ba$Q&ba$U&ba%`&ba%b&ba%d&ba%e&ba%h&ba%j&ba%m&ba%n&ba%p&ba%|&ba&S&ba&U&ba&W&ba&Y&ba&]&ba&c&ba&i&ba&k&ba&m&ba&o&ba&q&ba'i&ba't&ba'v&ba'y&ba(R&ba(a&ba(n&ba!W&ba&Z&ba_&ba&`&ba~O't,jO~O!V{X!V!_X!W{X!W!_X!a{X!a!_X!h!_X#X{X'}!_X~O!a,oO#X,nO!V#aX!V(ZX!W#aX!W(ZX!a(ZX!h(ZX'}(ZX~O!a,qO!h%ZO'}%OO!V!ZX!W!ZX~Ol!kO|!lO'vTO'yUO(U!jO~OP9lOQ9lOa;]Ob!fOikOk9lOlkOmkOskOu9lOw9lO|WO!QkO!RkO!X!cO!c9oO!hZO!k9lO!l9lO!m9lO!o9pO!q9qO!t!eO$Q!hO$UfO'vTO'yUO(RVO(a[O(n;ZO~O't:bO~P!LrO!V,uO!W(YX~O!W,wO~O!a,oO#X,nO!V#aX!W#aX~O!V,xO!W(hX~O!W,zO~O!],{O!^,{O'u!iO~P!LaO!W-OO~P'TOg-RO!X'QO~O!S-WO~Ol!wa![!wa!]!wa!^!wa!|!wa!}!wa#O!wa#P!wa#Q!wa#T!wa#U!wa'u!wa'v!wa'y!wa(U!wa(a!wa~P!!pO!l-]O#X-ZO~PB`O!]-_O!^-_O'u!iO~PCOO^%^O#X-ZO'k%^O~O^%^O!a#rO#X-ZO'k%^O~O^%^O!a#rO!l-]O#X-ZO'k%^O(b'bO~O'p'jO'q'jO'r-dO~Oo-eO~O!S&|a!V&|a~P!6UO!U-iO!S&|X!V&|X~P%QO!V'vO!S(Xa~O!S(Xa~PFrO!V'}O!S(fa~O|%vO!U-mO!X%wO't%eO!S'SX!V'SX~O#X-oO!V(da!g(da^(da'k(da~O!a#rO~P#&xO!V(ZO!g(ca~O|%vO!X%wO#c-sO't%eO~Oi-xO|%vO!U-uO!X%wO!x]O#b-wO#c-uO't%eO!V'VX!g'VX~Oz-|O!h#uO~Og.PO!X'QO%a.OO'}%OO~O^#[i!V#[i'k#[i'i#[i!S#[i!g#[io#[i!X#[i%a#[i!a#[i~P!6UOg;gOy)qO|)rO(i)tO(j)vO~O#d#Wa^#Wa#X#Wa'k#Wa!V#Wa!g#Wa!X#Wa!S#Wa~P#)tO#d(QXP(QXX(QX^(QXk(QXz(QX!e(QX!h(QX!l(QX#g(QX#h(QX#i(QX#j(QX#k(QX#l(QX#m(QX#n(QX#o(QX#q(QX#s(QX#u(QX#v(QX'k(QX(R(QX(b(QX!g(QX!S(QX'i(QXo(QX!X(QX%a(QX!a(QX~P!3oO!V.YOd([X~P!0ROd.[O~O!V.]O!g(]X~P!6UO!g.`O~O!S.bO~OP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO(RVOX#fi^#fik#fi!V#fi!e#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi'k#fi(b#fi(i#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~O#g#fi~P#-pO#g#{O~P#-pOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O(RVOX#fi^#fi!V#fi!e#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi'k#fi(b#fi(i#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~Ok#fi~P#0bOk#}O~P#0bOP$YOk#}Oy#vOz#wO|#xO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO(RVO^#fi!V#fi#q#fi#s#fi#u#fi#v#fi'k#fi(b#fi(i#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~OX#fi!e#fi#l#fi#m#fi#n#fi#o#fi~P#3SOX$aO!e$PO#l$PO#m$PO#n$`O#o$PO~P#3SOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO(RVO^#fi!V#fi#s#fi#u#fi#v#fi'k#fi(b#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~O(i#fi~P#6TO(i#yO~P#6TOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO(RVO(i#yO^#fi!V#fi#u#fi#v#fi'k#fi(b#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~O(j#fi~P#8uO(j#zO~P#8uOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO(RVO(i#yO(j#zO~O^#fi!V#fi#v#fi'k#fi(b#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~P#;gOPYXXYXkYXyYXzYX|YX!eYX!fYX!hYX!lYX#XYX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX(RYX(bYX(iYX(jYX!VYX!WYX~O#yYX~P#>QOP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO#s9|O#u:OO#v:PO(RVO(b$WO(i#yO(j#zO~O#y.dO~P#@_O#X:UO#{:UO#y(WX!W(WX~PNlO^'Ya!V'Ya'k'Ya'i'Ya!g'Ya!S'Yao'Ya!X'Ya%a'Ya!a'Ya~P!6UOP#fiX#fi^#fik#fiz#fi!V#fi!e#fi!f#fi!h#fi!l#fi#g#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi'k#fi(R#fi(b#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~P#)tO^#zi!V#zi'k#zi'i#zi!S#zi!g#zio#zi!X#zi%a#zi!a#zi~P!6UO$W.iO$Y.iO~O$W.jO$Y.jO~O!a)YO#X.kO!X$^X$T$^X$W$^X$Y$^X$a$^X~O!U.lO~O!X)]O$T.nO$W)[O$Y)[O$a.oO~O!V:QO!W(VX~P#@_O!W.pO~O!a)YO$a(kX~O$a.rO~Oq)lO(S)mO(T.uO~Ol.xO!S.yO'vTO'yUO~O!VcX!acX!gcX!g$sX(bcX~P!.xO!g/PO~P#)tO!V/QO!a#rO(b'bO!g(oX~O!g/VO~O!U)}O't%eO!g(oP~O#d/XO~O!S$sX!V$sX!a$zX~P!.xO!V/YO!S(pX~P#)tO!a/[O~O!S/^O~Ok/bO!a#rO!h%ZO'}%OO(b'bO~O't/dO~O!a*}O~O^%^O!V/hO'k%^O~O!W/jO~P!2vO!]/kO!^/kO'u!iO(U!jO~O|/mO(U!jO~O#T/nO~O't%|Od'_X!V'_X~O!V*gOd(Oa~Od/sO~Oy/tOz/tO|/uOgva(iva(jva!Vva#Xva~Odva#yva~P#L|Oy)qO|)rOg$la(i$la(j$la!V$la#X$la~Od$la#y$la~P#MrOy)qO|)rOg$na(i$na(j$na!V$na#X$na~Od$na#y$na~P#NeO#d/wO~Od$|a!V$|a#X$|a#y$|a~P!0RO!a#rO~O#d/zO~Oy#vOz#wO|#xO!f#tO!h#uO(RVOP!niX!nik!ni!V!ni!e!ni!l!ni#g!ni#h!ni#i!ni#j!ni#k!ni#l!ni#m!ni#n!ni#o!ni#q!ni#s!ni#u!ni#v!ni(b!ni(i!ni(j!ni~O^!ni'k!ni'i!ni!S!ni!g!nio!ni!X!ni%a!ni!a!ni~P$ wOg.PO!X'QO%a.OO~Oi0RO't0QO~P!0sO!a*}O^'|a!X'|a'k'|a!V'|a~O#d0XO~OXYX!VcX!WcX~O!V0YO!W(wX~O!W0[O~OX0]O~O't+VO'vTO'yUO~O!X%nO't%eO]'gX!V'gX~O!V+[O](va~O!g0bO~P!6UOX0eO~O]0fO~O!V+hO^(sa'k(sa~O#X0lO~Og0oO!X$yO~O(U(oO!W(tP~Og0xO!X0uO%a0wO'}%OO~OX1SO!V1QO!W(uX~O!W1TO~O]1VO^%^O'k%^O~O't#jO'vTO'yUO~O#X$bO#{$bOP(WXX(WXk(WXy(WXz(WX|(WX!V(WX!e(WX!h(WX!l(WX#g(WX#h(WX#i(WX#j(WX#k(WX#l(WX#m(WX#n(WX#q(WX#s(WX#u(WX#v(WX(R(WX(b(WX(i(WX(j(WX~O#o1YO&Q1ZO^(WX!f(WX~P$(xO#X$bO#o1YO&Q1ZO~O^1[O~P%QO^1^O~O&Z1bOP&XiQ&XiV&Xi^&Xia&Xib&Xii&Xik&Xil&Xim&Xis&Xiu&Xiw&Xi|&Xi!Q&Xi!R&Xi!X&Xi!c&Xi!h&Xi!k&Xi!l&Xi!m&Xi!o&Xi!q&Xi!t&Xi!x&Xi#p&Xi$Q&Xi$U&Xi%`&Xi%b&Xi%d&Xi%e&Xi%h&Xi%j&Xi%m&Xi%n&Xi%p&Xi%|&Xi&S&Xi&U&Xi&W&Xi&Y&Xi&]&Xi&c&Xi&i&Xi&k&Xi&m&Xi&o&Xi&q&Xi'i&Xi't&Xi'v&Xi'y&Xi(R&Xi(a&Xi(n&Xi!W&Xi_&Xi&`&Xi~O_1hO!W1fO&`1gO~P`O!XXO!h1jO~O&g,eOP&biQ&biV&bi^&bia&bib&bii&bik&bil&bim&bis&biu&biw&bi|&bi!Q&bi!R&bi!X&bi!c&bi!h&bi!k&bi!l&bi!m&bi!o&bi!q&bi!t&bi!x&bi#p&bi$Q&bi$U&bi%`&bi%b&bi%d&bi%e&bi%h&bi%j&bi%m&bi%n&bi%p&bi%|&bi&S&bi&U&bi&W&bi&Y&bi&]&bi&c&bi&i&bi&k&bi&m&bi&o&bi&q&bi'i&bi't&bi'v&bi'y&bi(R&bi(a&bi(n&bi!W&bi&Z&bi_&bi&`&bi~O!S1pO~O!V!Za!W!Za~P#@_Ol!kO|!lO!U1vO(U!jO!V&}X!W&}X~P?fO!V,uO!W(Ya~O!V'TX!W'TX~P!@xO!V,xO!W(ha~O!W1}O~P'TO^%^O#X2WO'k%^O~O^%^O!a#rO#X2WO'k%^O~O^%^O!a#rO!l2[O#X2WO'k%^O(b'bO~O^%^O'k%^O~P!6UO!V$^Oo$ka~O!S&|i!V&|i~P!6UO!V'vO!S(Xi~O!V'}O!S(fi~O!S(gi!V(gi~P!6UO!V(di!g(di^(di'k(di~P!6UO#X2^O!V(di!g(di^(di'k(di~O!V(ZO!g(ci~O|%vO!X%wO!x]O#b2cO#c2bO't%eO~O|%vO!X%wO#c2bO't%eO~Og2jO!X'QO%a2iO~Og2jO!X'QO%a2iO'}%OO~O#dvaPvaXva^vakva!eva!fva!hva!lva#gva#hva#iva#jva#kva#lva#mva#nva#ova#qva#sva#uva#vva'kva(Rva(bva!gva!Sva'ivaova!Xva%ava!ava~P#L|O#d$laP$laX$la^$lak$laz$la!e$la!f$la!h$la!l$la#g$la#h$la#i$la#j$la#k$la#l$la#m$la#n$la#o$la#q$la#s$la#u$la#v$la'k$la(R$la(b$la!g$la!S$la'i$lao$la!X$la%a$la!a$la~P#MrO#d$naP$naX$na^$nak$naz$na!e$na!f$na!h$na!l$na#g$na#h$na#i$na#j$na#k$na#l$na#m$na#n$na#o$na#q$na#s$na#u$na#v$na'k$na(R$na(b$na!g$na!S$na'i$nao$na!X$na%a$na!a$na~P#NeO#d$|aP$|aX$|a^$|ak$|az$|a!V$|a!e$|a!f$|a!h$|a!l$|a#g$|a#h$|a#i$|a#j$|a#k$|a#l$|a#m$|a#n$|a#o$|a#q$|a#s$|a#u$|a#v$|a'k$|a(R$|a(b$|a!g$|a!S$|a'i$|a#X$|ao$|a!X$|a%a$|a!a$|a~P#)tO^#[q!V#[q'k#[q'i#[q!S#[q!g#[qo#[q!X#[q%a#[q!a#[q~P!6UOd'OX!V'OX~P!'^O!V.YOd([a~O!U2rO!V'PX!g'PX~P%QO!V.]O!g(]a~O!V.]O!g(]a~P!6UO!S2uO~O#y!ja!W!ja~PJ`O#y!ba!V!ba!W!ba~P#@_O#y!na!W!na~P!8oO#y!pa!W!pa~P!;YO!X3XO$UfO$_3YO~O!W3^O~Oo3_O~P#)tO^$hq!V$hq'k$hq'i$hq!S$hq!g$hqo$hq!X$hq%a$hq!a$hq~P!6UO!S3`O~Ol.xO'vTO'yUO~Oy)qO|)rO(j)vOg%Xi(i%Xi!V%Xi#X%Xi~Od%Xi#y%Xi~P$GeOy)qO|)rOg%Zi(i%Zi(j%Zi!V%Zi#X%Zi~Od%Zi#y%Zi~P$HWO(b$WO~P#)tO!U3cO't%eO!V'ZX!g'ZX~O!V/QO!g(oa~O!V/QO!a#rO!g(oa~O!V/QO!a#rO(b'bO!g(oa~Od$ui!V$ui#X$ui#y$ui~P!0RO!U3kO't*SO!S']X!V']X~P!0pO!V/YO!S(pa~O!V/YO!S(pa~P#)tO!a#rO#o3sO~Ok3vO!a#rO(b'bO~Od(Pi!V(Pi~P!0RO#X3yOd(Pi!V(Pi~P!0RO!g3|O~O^$iq!V$iq'k$iq'i$iq!S$iq!g$iqo$iq!X$iq%a$iq!a$iq~P!6UO!V4QO!X(qX~P#)tO!f#tO~P3}O^$sX!X$sX%UYX'k$sX!V$sX~P!.xO%U4SO^hXghXyhX|hX!XhX'khX(ihX(jhX!VhX~O%U4SO~O%b4ZO't+VO'vTO'yUO!V'fX!W'fX~O!V0YO!W(wa~OX4_O~O]4`O~O!S4dO~O^%^O'k%^O~P#)tO!X$yO~P#)tO!V4iO#X4kO!W(tX~O!W4lO~Ol!kO|4mO![!uO!]!rO!^!rO!x9mO!|!mO!}!mO#O!mO#P!mO#Q!mO#T4rO#U!vO'u!iO'vTO'yUO(U!jO(a!pO~O!W4qO~P%!VOg4wO!X0uO%a4vO~Og4wO!X0uO%a4vO'}%OO~O't#jO!V'eX!W'eX~O!V1QO!W(ua~O'vTO'yUO(U5QO~O]5UO~O!g5XO~P%QO^5ZO~O^5ZO~P%QO#o5]O&Q5^O~PMOO_1hO!W5bO&`1gO~P`O!a5dO~O!a5fO!V(Zi!W(Zi!a(Zi!h(Zi'}(Zi~O!V#ai!W#ai~P#@_O#X5gO!V#ai!W#ai~O!V!Zi!W!Zi~P#@_O^%^O#X5pO'k%^O~O^%^O!a#rO#X5pO'k%^O~O!V(dq!g(dq^(dq'k(dq~P!6UO!V(ZO!g(cq~O|%vO!X%wO#c5wO't%eO~O!X'QO%a5zO~Og5}O!X'QO%a5zO~O#d%XiP%XiX%Xi^%Xik%Xiz%Xi!e%Xi!f%Xi!h%Xi!l%Xi#g%Xi#h%Xi#i%Xi#j%Xi#k%Xi#l%Xi#m%Xi#n%Xi#o%Xi#q%Xi#s%Xi#u%Xi#v%Xi'k%Xi(R%Xi(b%Xi!g%Xi!S%Xi'i%Xio%Xi!X%Xi%a%Xi!a%Xi~P$GeO#d%ZiP%ZiX%Zi^%Zik%Ziz%Zi!e%Zi!f%Zi!h%Zi!l%Zi#g%Zi#h%Zi#i%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#q%Zi#s%Zi#u%Zi#v%Zi'k%Zi(R%Zi(b%Zi!g%Zi!S%Zi'i%Zio%Zi!X%Zi%a%Zi!a%Zi~P$HWO#d$uiP$uiX$ui^$uik$uiz$ui!V$ui!e$ui!f$ui!h$ui!l$ui#g$ui#h$ui#i$ui#j$ui#k$ui#l$ui#m$ui#n$ui#o$ui#q$ui#s$ui#u$ui#v$ui'k$ui(R$ui(b$ui!g$ui!S$ui'i$ui#X$uio$ui!X$ui%a$ui!a$ui~P#)tOd'Oa!V'Oa~P!0RO!V'Pa!g'Pa~P!6UO!V.]O!g(]i~O#y#[i!V#[i!W#[i~P#@_OP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO(RVOX#fik#fi!e#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi#y#fi(b#fi(i#fi(j#fi!V#fi!W#fi~O#g#fi~P%0fO#g9uO~P%0fOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO(RVOX#fi!e#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi#y#fi(b#fi(i#fi(j#fi!V#fi!W#fi~Ok#fi~P%2qOk9wO~P%2qOP$YOk9wOy#vOz#wO|#xO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO(RVO#q#fi#s#fi#u#fi#v#fi#y#fi(b#fi(i#fi(j#fi!V#fi!W#fi~OX#fi!e#fi#l#fi#m#fi#n#fi#o#fi~P%4|OX:TO!e9yO#l9yO#m9yO#n:SO#o9yO~P%4|OP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO(RVO#s#fi#u#fi#v#fi#y#fi(b#fi(j#fi!V#fi!W#fi~O(i#fi~P%7hO(i#yO~P%7hOP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO#s9|O(RVO(i#yO#u#fi#v#fi#y#fi(b#fi!V#fi!W#fi~O(j#fi~P%9sO(j#zO~P%9sOP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO#s9|O#u:OO(RVO(i#yO(j#zO~O#v#fi#y#fi(b#fi!V#fi!W#fi~P%<OO^#wy!V#wy'k#wy'i#wy!S#wy!g#wyo#wy!X#wy%a#wy!a#wy~P!6UOg;hOy)qO|)rO(i)tO(j)vO~OP#fiX#fik#fiz#fi!e#fi!f#fi!h#fi!l#fi#g#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi#y#fi(R#fi(b#fi!V#fi!W#fi~P%>vO!f#tOP(QXX(QXg(QXk(QXy(QXz(QX|(QX!e(QX!h(QX!l(QX#g(QX#h(QX#i(QX#j(QX#k(QX#l(QX#m(QX#n(QX#o(QX#q(QX#s(QX#u(QX#v(QX#y(QX(R(QX(b(QX(i(QX(j(QX!V(QX!W(QX~O#y#zi!V#zi!W#zi~P#@_O#y!ni!W!ni~P$ wO!W6ZO~O!V'Ya!W'Ya~P#@_O!a#rO(b'bO!V'Za!g'Za~O!V/QO!g(oi~O!V/QO!a#rO!g(oi~Od$uq!V$uq#X$uq#y$uq~P!0RO!S']a!V']a~P#)tO!a6bO~O!V/YO!S(pi~P#)tO!V/YO!S(pi~O!S6fO~O!a#rO#o6kO~Ok6lO!a#rO(b'bO~O!S6nO~Od$wq!V$wq#X$wq#y$wq~P!0RO^$iy!V$iy'k$iy'i$iy!S$iy!g$iyo$iy!X$iy%a$iy!a$iy~P!6UO!V4QO!X(qa~O^#[y!V#[y'k#[y'i#[y!S#[y!g#[yo#[y!X#[y%a#[y!a#[y~P!6UOX6sO~O!V0YO!W(wi~O]6yO~O!a5fO~O(U(oO!V'bX!W'bX~O!V4iO!W(ta~OikO't7QO~P._O!W7TO~P%!VOl!kO|7UO'vTO'yUO(U!jO(a!pO~O!X0uO~O!X0uO%a7WO~Og7ZO!X0uO%a7WO~OX7`O!V'ea!W'ea~O!V1QO!W(ui~O!g7dO~O!g7eO~O!g7fO~O!g7fO~P%QO^7hO~O!a7kO~O!g7lO~O!V(gi!W(gi~P#@_O^%^O#X7tO'k%^O~O!V(dy!g(dy^(dy'k(dy~P!6UO!V(ZO!g(cy~O!X'QO%a7wO~O#d$uqP$uqX$uq^$uqk$uqz$uq!V$uq!e$uq!f$uq!h$uq!l$uq#g$uq#h$uq#i$uq#j$uq#k$uq#l$uq#m$uq#n$uq#o$uq#q$uq#s$uq#u$uq#v$uq'k$uq(R$uq(b$uq!g$uq!S$uq'i$uq#X$uqo$uq!X$uq%a$uq!a$uq~P#)tO#d$wqP$wqX$wq^$wqk$wqz$wq!V$wq!e$wq!f$wq!h$wq!l$wq#g$wq#h$wq#i$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#q$wq#s$wq#u$wq#v$wq'k$wq(R$wq(b$wq!g$wq!S$wq'i$wq#X$wqo$wq!X$wq%a$wq!a$wq~P#)tO!V'Pi!g'Pi~P!6UO#y#[q!V#[q!W#[q~P#@_Oy/tOz/tO|/uOPvaXvagvakva!eva!fva!hva!lva#gva#hva#iva#jva#kva#lva#mva#nva#ova#qva#sva#uva#vva#yva(Rva(bva(iva(jva!Vva!Wva~Oy)qO|)rOP$laX$lag$lak$laz$la!e$la!f$la!h$la!l$la#g$la#h$la#i$la#j$la#k$la#l$la#m$la#n$la#o$la#q$la#s$la#u$la#v$la#y$la(R$la(b$la(i$la(j$la!V$la!W$la~Oy)qO|)rOP$naX$nag$nak$naz$na!e$na!f$na!h$na!l$na#g$na#h$na#i$na#j$na#k$na#l$na#m$na#n$na#o$na#q$na#s$na#u$na#v$na#y$na(R$na(b$na(i$na(j$na!V$na!W$na~OP$|aX$|ak$|az$|a!e$|a!f$|a!h$|a!l$|a#g$|a#h$|a#i$|a#j$|a#k$|a#l$|a#m$|a#n$|a#o$|a#q$|a#s$|a#u$|a#v$|a#y$|a(R$|a(b$|a!V$|a!W$|a~P%>vO#y$hq!V$hq!W$hq~P#@_O#y$iq!V$iq!W$iq~P#@_O!W8RO~O#y8SO~P!0RO!a#rO!V'Zi!g'Zi~O!a#rO(b'bO!V'Zi!g'Zi~O!V/QO!g(oq~O!S']i!V']i~P#)tO!V/YO!S(pq~O!S8YO~P#)tO!S8YO~Od(Py!V(Py~P!0RO!V'`a!X'`a~P#)tO^%Tq!X%Tq'k%Tq!V%Tq~P#)tOX8_O~O!V0YO!W(wq~O#X8cO!V'ba!W'ba~O!V4iO!W(ti~P#@_OPYXXYXkYXyYXzYX|YX!SYX!VYX!eYX!fYX!hYX!lYX#XYX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX(RYX(bYX(iYX(jYX~O!a%RX#o%RX~P&/vO!X0uO%a8gO~O'vTO'yUO(U8lO~O!V1QO!W(uq~O!g8oO~O!g8oO~P%QO!g8qO~O!g8rO~O#X8tO!V#ay!W#ay~O!V#ay!W#ay~P#@_O!X'QO%a8yO~O#y#wy!V#wy!W#wy~P#@_OP$uiX$uik$uiz$ui!e$ui!f$ui!h$ui!l$ui#g$ui#h$ui#i$ui#j$ui#k$ui#l$ui#m$ui#n$ui#o$ui#q$ui#s$ui#u$ui#v$ui#y$ui(R$ui(b$ui!V$ui!W$ui~P%>vOy)qO|)rO(j)vOP%XiX%Xig%Xik%Xiz%Xi!e%Xi!f%Xi!h%Xi!l%Xi#g%Xi#h%Xi#i%Xi#j%Xi#k%Xi#l%Xi#m%Xi#n%Xi#o%Xi#q%Xi#s%Xi#u%Xi#v%Xi#y%Xi(R%Xi(b%Xi(i%Xi!V%Xi!W%Xi~Oy)qO|)rOP%ZiX%Zig%Zik%Ziz%Zi!e%Zi!f%Zi!h%Zi!l%Zi#g%Zi#h%Zi#i%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#q%Zi#s%Zi#u%Zi#v%Zi#y%Zi(R%Zi(b%Zi(i%Zi(j%Zi!V%Zi!W%Zi~O#y$iy!V$iy!W$iy~P#@_O#y#[y!V#[y!W#[y~P#@_O!a#rO!V'Zq!g'Zq~O!V/QO!g(oy~O!S']q!V']q~P#)tO!S9QO~P#)tO!V0YO!W(wy~O!V4iO!W(tq~O!X0uO%a9XO~O!g9[O~O!X'QO%a9aO~OP$uqX$uqk$uqz$uq!e$uq!f$uq!h$uq!l$uq#g$uq#h$uq#i$uq#j$uq#k$uq#l$uq#m$uq#n$uq#o$uq#q$uq#s$uq#u$uq#v$uq#y$uq(R$uq(b$uq!V$uq!W$uq~P%>vOP$wqX$wqk$wqz$wq!e$wq!f$wq!h$wq!l$wq#g$wq#h$wq#i$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#q$wq#s$wq#u$wq#v$wq#y$wq(R$wq(b$wq!V$wq!W$wq~P%>vOd%]!Z!V%]!Z#X%]!Z#y%]!Z~P!0RO!V'bq!W'bq~P#@_O!V#a!Z!W#a!Z~P#@_O#d%]!ZP%]!ZX%]!Z^%]!Zk%]!Zz%]!Z!V%]!Z!e%]!Z!f%]!Z!h%]!Z!l%]!Z#g%]!Z#h%]!Z#i%]!Z#j%]!Z#k%]!Z#l%]!Z#m%]!Z#n%]!Z#o%]!Z#q%]!Z#s%]!Z#u%]!Z#v%]!Z'k%]!Z(R%]!Z(b%]!Z!g%]!Z!S%]!Z'i%]!Z#X%]!Zo%]!Z!X%]!Z%a%]!Z!a%]!Z~P#)tOP%]!ZX%]!Zk%]!Zz%]!Z!e%]!Z!f%]!Z!h%]!Z!l%]!Z#g%]!Z#h%]!Z#i%]!Z#j%]!Z#k%]!Z#l%]!Z#m%]!Z#n%]!Z#o%]!Z#q%]!Z#s%]!Z#u%]!Z#v%]!Z#y%]!Z(R%]!Z(b%]!Z!V%]!Z!W%]!Z~P%>vOo(VX~P1gO'u!iO~P!)jO!ScX!VcX#XcX~P&/vOPYXXYXkYXyYXzYX|YX!VYX!VcX!eYX!fYX!hYX!lYX#XYX#XcX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX(RYX(bYX(iYX(jYX~O!acX!gYX!gcX(bcX~P&E^OP9lOQ9lOa;]Ob!fOikOk9lOlkOmkOskOu9lOw9lO|WO!QkO!RkO!XXO!c9oO!hZO!k9lO!l9lO!m9lO!o9pO!q9qO!t!eO$Q!hO$UfO't)PO'vTO'yUO(RVO(a[O(n;ZO~O!V:QO!W$ka~Oi%POk$qOl$pOm$pOs%QOu%ROw:WO|$xO!X$yO!c;bO!h$uO#c:^O$Q%VO$m:YO$o:[O$r%WO't(gO'vTO'yUO'}%OO(R$rO~O#p)WO~P&JSO!WYX!WcX~P&E^O#d9tO~O!a#rO#d9tO~O#X:UO~O#o9yO~O#X:`O!V(gX!W(gX~O#X:UO!V(eX!W(eX~O#d:aO~Od:cO~P!0RO#d:hO~O#d:iO~O!a#rO#d:jO~O!a#rO#d:aO~O#y:kO~P#@_O#d:lO~O#d:mO~O#d:nO~O#d:oO~O#d:pO~O#d:qO~O#y:rO~P!0RO#y:sO~P!0RO$U~!f!|!}#P#Q#T#b#c#n(n$m$o$r%U%`%a%b%h%j%m%n%p%r~'oR$U(n#h!R'm'u#il#g#jky'n(U'n't$W$Y$W~",
  goto: "$%Z({PPPP(|P)PP)aP*p.rPPPP5SPP5iP;d>iP>|P>|PPP>|P@lP>|P>|P>|P@pPP@uPA`PFUPPPFYPPPPFYIXPPPI_JYPFYPLgPPPPNuFYPPPFYPFYP!#TFYP!&g!'i!'rP!(e!(i!(ePPPPP!+r!'iPP!,`!-YP!/|FYFY!0R!3Z!7n!7n!;cPPP!;jFYPPPPPPPPPPP!>uP!@WPPFY!AePFYPFYFYFYFYPFY!BwPP!E}P!IPP!IT!I_!Ic!IcP!EzP!Ig!IgP!LiP!LmFYFY!Ls# t>|P>|P>|>|P##O>|>|#$x>|#'V>|#(y>|>|#)g#+c#+c#+g#+o#+c#+wP#+cP>|#,a>|#-i>|>|5SPPP#.tPP#/^#/^P#/^P#/s#/^PP#/yP#/pP#/p#0]#/p#0w#0}5P)P#1Q)PP#1X#1X#1XP)PP)PP)PP)PPP)PP#1_#1bP#1b)PP#1fP#1iP)PP)PP)PP)PP)PP)P)PPP#1o#1u#2P#2V#2]#2c#2i#2w#2}#3T#3_#3e#3o#4O#4U#4u#5X#5_#5e#5s#6Y#7j#7x#8O#8U#8[#8b#8l#8r#8x#9S#9f#9lPPPPPPPPPP#9rPPPPPPP#:f#=mP#>|#?T#?]PPPP#Cg#F]#Lr#Lu#Lx#Mq#Mt#Mw#NO#NWPP#N^#Nb$ Z$!Z$!_$!sPP$!w$!}$#RP$#U$#Y$#]$$R$$i$$n$$q$$t$$z$$}$%R$%VR!xRmpOXr!X#`%]&d&f&g&i,],b1b1eY!rQ'Q,}0u4pQ%ctQ%kwQ%rzQ&[!TS&x!c,uQ'W!fS'^!o!uS*Y$y*_Q+T%lQ+b%tQ+|&UQ,{'PQ-V'XQ-_'_Q/k*aQ1P+}R:_9p$zdOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s+g,X,],b-R-Z-i-o.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2r4m4w5Z5]5^5p7U7Z7h7tS#m]9m!r)R$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q*j%SQ+Y%nQ,O&XQ,V&aQ.S:VQ0O*{Q0S*}Q0_+ZQ1X,TQ2f.PQ4Y0YQ5O1QQ5|2jQ6S:WQ6u4ZR7z5}&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^t!kQ!o!r!u!v&x'P'Q'^'_'`,u,{,}-_0u4p4r$Y$pi#r#t$`$a$u$x%T%U%Y)l)u)w)x*P*V*e*f*z*}+l+o.O.Y/X/Y/[/w0l0o0w2i3a3k3s3y4Q4S4v5z6b6k7W7w8S8g8y9X9a:S:T:X:Y:Z:[:]:^:d:e:f:g:h:i:l:m:n:o:r:s;Z;c;d;g;hQ%uzQ&v!cS&|%w,xQ+Y%nS.x)r.zQ/v*nQ0_+ZQ0d+aQ1W,SQ1X,TQ4Y0YQ4c0fQ5R1SQ5S1VQ6u4ZQ6x4`Q7c5UQ8b6yR8m7`pmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eR,Q&]&r^OPXYrstux!X!^!g!l#O#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u'S'd'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;];^[#XWZ#S#V&y'tQ%fvQ%jwS%oz%t!U%x|}#d#e#h%Z%v'}(X(Y(Z+e+f+h,Z,o-m-s-t-u-w1j2b2c5f5wQ&Q!RQ'T!eQ'V!fQ(b#oS)|$u*QS+S%k%lQ+W%nQ+w&SQ+{&US-U'W'XQ.R(cQ/U)}Q0W+TQ0^+ZQ0`+[Q0c+`Q0z+xS1O+|+}Q2S-VQ3b/QQ4X0YQ4]0]Q4b0eQ4}1PQ6_3cQ6t4ZQ6w4_Q8^6sR9S8_v$wi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;d!S%hw!f!q%j%k%l&w'V'W'X']'g*X+S+T,r-U-V-^/c0W1{2S2Z3uQ*|%fQ+m%}Q+p&OQ+z&UQ.Q(bQ0y+wU0}+{+|+}Q2k.RQ4x0zS4|1O1PQ7_4}!z;_#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hg;`:S:T:Y:[:^:e:g:i:m:o:sW$|i%O*g;ZS%}!O&ZQ&O!PQ&P!QR+k%{$Z${i#r#t$`$a$u$x%T%U%Y)l)u)w)x*P*V*e*f*z*}+l+o.O.Y/X/Y/[/w0l0o0w2i3a3k3s3y4Q4S4v5z6b6k7W7w8S8g8y9X9a:S:T:X:Y:Z:[:]:^:d:e:f:g:h:i:l:m:n:o:r:s;Z;c;d;g;hT)m$r)nV*k%S:V:WU&|!c%w,xS(p#v#wQ+_%qS-z(^(_Q0p+qQ3z/tR6}4i&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^$i$]c#U#a%a%b%d's'y(e(l(t(u(v(w(x(y(z({(|(})O)Q)T)X)c*x+^,s-b-g-l-n.X._.c.e.f.g.v/x1q1t2U2]2q2v2w2x2y2z2{2|2}3O3P3Q3R3S3V3W3]4O4V5i5o5t6Q6R6W6X7P7n7r7{8P8Q8v9U9]9n;QT#PV#Q&ykOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q&z!cR1w,uv!kQ!c!o!r!u!v&x'P'Q'^'_'`,u,{,}-_0u4p4rS*X$y*_S/c*Y*aQ/l*bQ0r+sQ3u/kR3x/nlpOXr!X#`%]&d&f&g&i,],b1b1eQ&k![Q'h!tS(d#q9tQ+Q%iQ+u&QQ+v&RQ-S'UQ-a'aS.W(i:aS/y*s:jQ0U+RQ0t+tQ1i,dQ1k,eQ1s,pQ2Q-TQ2T-XS4P/z:pQ4T0VS4W0X:qQ5h1uQ5l2RQ5q2YQ6r4UQ7o5jQ7p5mQ7s5rR8s7l$d$[c#U#a%b%d's'y(e(l(t(u(v(w(x(y(z({(|(})O)Q)T)X)c*x+^,s-b-g-l-n.X._.c.f.g.v/x1q1t2U2]2q2v2w2x2y2z2{2|2}3O3P3Q3R3S3V3W3]4O4V5i5o5t6Q6R6W6X7P7n7r7{8P8Q8v9U9]9n;QS(a#l'ZU*d$z(h3US*w%a.eQ2g0OQ5y2fQ7y5|R8z7z$d$Zc#U#a%b%d's'y(e(l(t(u(v(w(x(y(z({(|(})O)Q)T)X)c*x+^,s-b-g-l-n.X._.c.f.g.v/x1q1t2U2]2q2v2w2x2y2z2{2|2}3O3P3Q3R3S3V3W3]4O4V5i5o5t6Q6R6W6X7P7n7r7{8P8Q8v9U9]9n;QS(`#l'ZS(r#w$[S*v%a.eS-{(_(aQ.h)SQ/{*wR2d-|&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^S#m]9mQ&f!VQ&g!WQ&i!YQ&j!ZR1a,`Q'R!eQ*y%fQ-Q'TS-}(b*|Q2O-PW2h.Q.R/}0PQ5k2PU5x2e2g2kS7v5y5{S8x7x7yS9_8w8zQ9g9`R9j9hU!sQ'Q,}T4n0u4p!O_OXZ`r!T!X#`#d%Z%]&Z&]&d&f&g&i(Z,],b-t1b1e]!mQ!o'Q,}0u4pT#m]9m%UyOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tS(p#v#wS-z(^(_!s:w$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Y!qQ'Q,}0u4pQ']!oS'g!r!uS'i!v4rS-^'^'_Q-`'`R2Z-_Q'f!qS(V#c1_S-]']'iQ/T)|Q/a*XQ2[-`Q3g/US3p/b/lQ6^3bS6i3v3xQ8U6_R8]6lQ#sbQ'e!qS(U#c1_S(W#i*rQ*t%[Q+O%gQ+U%mU-[']'f'iQ-p(VQ/S)|Q/`*XQ/f*[Q0T+PQ0{+yS2X-]-`Q2a-xS3f/T/US3o/a/lQ3r/eQ3t/gQ4z0|Q5s2[Q6]3bQ6a3gS6e3p3xQ6j3wQ7]4{S8T6^6_Q8X6fQ8Z6iQ8j7^Q9O8UQ9P8YQ9R8]Q9Z8kQ9c9QQ:z:uQ;V;OR;W;PV!sQ'Q,}%UaOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tS#sx!g!r:t$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^R:z;]%UbOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tQ%[j!S%gw!f!q%j%k%l&w'V'W'X']'g*X+S+T,r-U-V-^/c0W1{2S2Z3uS%mx!gQ+P%hQ+y&UW0|+z+{+|+}U4{0}1O1PS7^4|4}Q8k7_!r:u$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q;O;[R;P;]$xeOPXYrstu!X!^!l#O#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'd'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tY#^WZ#S#V't!U%x|}#d#e#h%Z%v'}(X(Y(Z+e+f+h,Z,o-m-s-t-u-w1j2b2c5f5wQ,W&a!p:v$X$j)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^R:y&yS&}!c%wR1y,x$zdOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s+g,X,],b-R-Z-i-o.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2r4m4w5Z5]5^5p7U7Z7h7t!r)R$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q,V&aQ0O*{Q2f.PQ5|2jR7z5}!f$Rc#U%a's'y(e(l({(|(})O)T)X+^-b-g-l-n.X._.v/x2U2]2q3S4O4V5o5t6Q7r8v9n!T9{)Q)c,s.e1q1t2v3O3P3Q3R3V3]5i6R6W6X7P7n7{8P8Q9U9];Q!b$Tc#U%a's'y(e(l(})O)T)X+^-b-g-l-n.X._.v/x2U2]2q3S4O4V5o5t6Q7r8v9n!P9})Q)c,s.e1q1t2v3Q3R3V3]5i6R6W6X7P7n7{8P8Q9U9];Q!^$Xc#U%a's'y(e(l)T)X+^-b-g-l-n.X._.v/x2U2]2q3S4O4V5o5t6Q7r8v9nQ3a/Oz;^)Q)c,s.e1q1t2v3V3]5i6R6W6X7P7n7{8P8Q9U9];QQ;c;eR;d;f&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^S$kh$lR3Y.k'PgOPWXYZhrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j$l%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.k.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^T$gf$mQ$efS)[$h)`R)h$mT$ff$mT)^$h)`'PhOPWXYZhrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j$l%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.k.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^T$kh$lQ$nhR)g$l%UjOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7t!s;[$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^#alOPXZr!X!^!l#O#`#k#x$j%]&]&`&a&d&f&g&i&m&u'S(q)e*{+g,X,],b-R.P.l/u0x1Y1Z1[1^1b1e1g2j3X4m4w5Z5]5^5}7U7Z7hv$zi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;d!z(h#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hQ*o%WQ.w)qg3U:S:T:Y:[:^:e:g:i:m:o:sv$vi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;dQ*R$wS*[$y*_Q*p%XQ/g*]!z:|#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hf:}:S:T:Y:[:^:e:g:i:m:o:sQ;R;_Q;S;`Q;T;aR;U;bv$zi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;d!z(h#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hg3U:S:T:Y:[:^:e:g:i:m:o:slnOXr!X#`%]&d&f&g&i,],b1b1eQ*U$xQ,k&pQ,l&rR3j/Y$Y${i#r#t$`$a$u$x%T%U%Y)l)u)w)x*P*V*e*f*z*}+l+o.O.Y/X/Y/[/w0l0o0w2i3a3k3s3y4Q4S4v5z6b6k7W7w8S8g8y9X9a:S:T:X:Y:Z:[:]:^:d:e:f:g:h:i:l:m:n:o:r:s;Z;c;d;g;hQ+n&OQ0n+pQ4g0mR6|4hT*^$y*_S*^$y*_T4o0u4pS/e*Z4mT3w/m7UQ+O%gQ/f*[Q0T+PQ0{+yQ4z0|Q7]4{Q8j7^R9Z8kn)u$s(j*q/W/o/p2o3h3}6[6m8}:{;X;Y!W:d(f)V){*T.V.s/O/]/|0k0m2n3i3m4f4h6O6P6c6g6o6q8W8[9b;e;f]:e3T6V7|8{8|9kp)w$s(j*q.|/W/o/p2o3h3}6[6m8}:{;X;Y!Y:f(f)V){*T.V.s/O/]/|0k0m2l2n3i3m4f4h6O6P6c6g6o6q8W8[9b;e;f_:g3T6V7|7}8{8|9kpmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eQ&W!SR,X&apmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eR&W!SQ+r&PR0j+kqmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eQ0v+wS4u0y0zU7V4s4t4xS8f7X7YS9V8e8hQ9d9WR9i9eQ&_!TR,R&ZR5R1SS%oz%tR0`+[Q&d!UR,]&eR,c&jT1c,b1eR,g&kQ,f&kR1l,gQ'k!wR-c'kQrOQ#`XT%`r#`Q!zTR'm!zQ!}UR'o!}Q)n$rR.t)nQ#QVR'q#QQ#TWU'w#T'x-jQ'x#UR-j'yQ,v&zR1x,vQ.Z(jR2p.ZQ.^(lS2s.^2tR2t._Q,}'QR1|,}Y!oQ'Q,}0u4pR'[!oS#ZW%vU(O#Z(P-kQ(P#[R-k'zQ,y&}R1z,yr`OXr!T!X#`%]&Z&]&d&f&g&i,],b1b1eS#dZ%ZU#n`#d-tR-t(ZQ([#fQ-q(WW-y([-q2_5uQ2_-rR5u2`Q)`$hR.m)`Q$lhR)f$lQ$_cU)U$_-f:RQ-f9nR:R)cQ/R)|W3d/R3e6`8VU3e/S/T/US6`3f3gR8V6a#m)s$s(f(j)V){*T*l*m*q.T.U.V.s.|.}/O/W/]/o/p/|0k0m2l2m2n2o3T3h3i3m3}4f4h6O6P6T6U6V6[6c6g6m6o6q7|7}8O8W8[8{8|8}9b9k:{;X;Y;e;fQ/Z*TU3l/Z3n6dQ3n/]R6d3mQ*_$yR/i*_Q*h$}R/r*hQ4R/|R6p4RQ+i%yR0i+iQ4j0pS7O4j8dR8d7PQ+t&QR0s+tQ4p0uR7S4pQ1R,OS5P1R7aR7a5RQ0Z+WW4[0Z4^6v8`Q4^0^Q6v4]R8`6wQ+]%oR0a+]Q1e,bR5a1eWqOXr#`Q&h!XQ*u%]Q,[&dQ,^&fQ,_&gQ,a&iQ1`,]S1c,b1eR5`1bQ%_oQ&l!]Q&o!_Q&q!`Q&s!aQ'c!qQ+Q%iQ+d%uQ+j%zQ,Q&_Q,i&nW-Y']'e'f'iQ-a'aQ/h*^Q0U+RS1U,R,UQ1m,hQ1n,kQ1o,lQ2T-XW2V-[-]-`-bQ4T0VQ4a0dQ4e0kQ4y0{Q5T1WQ5_1aU5n2U2X2[Q5q2YQ6r4UQ6z4cQ6{4fQ7R4oQ7[4zQ7b5SS7q5o5sQ7s5rQ8a6xQ8i7]Q8n7cQ8u7rQ9T8bQ9Y8jQ9^8vR9f9ZQ%iwQ'U!fQ'a!qU+R%j%k%lQ,p&wU-T'V'W'XS-X']'gQ/_*XS0V+S+TQ1u,rS2R-U-VQ2Y-^Q3q/cQ4U0WQ5j1{Q5m2SQ5r2ZR6h3uS$ti;ZR*i%OU$}i%O;ZR/q*gQ$siS(f#r*}Q(j#tS)V$`$aQ){$uQ*T$xQ*l%TQ*m%UQ*q%YQ.T:XQ.U:ZQ.V:]Q.s)lQ.|)uQ.})wQ/O)xQ/W*PQ/]*VQ/o*eQ/p*fh/|*z.O0w2i4v5z7W7w8g8y9X9aQ0k+lQ0m+oQ2l:dQ2m:fQ2n:hQ2o.YS3T:S:TQ3h/XQ3i/YQ3m/[Q3}/wQ4f0lQ4h0oQ6O:lQ6P:nQ6T:YQ6U:[Q6V:^Q6[3aQ6c3kQ6g3sQ6m3yQ6o4QQ6q4SQ7|:iQ7}:eQ8O:gQ8W6bQ8[6kQ8{:mQ8|:oQ8}8SQ9b:rQ9k:sQ:{;ZQ;X;cQ;Y;dQ;e;gR;f;hloOXr!X#`%]&d&f&g&i,],b1b1eQ!dPS#bZ#kQ&n!^U'Y!l4m7UQ'p#OQ(s#xQ)d$jS,U&]&`Q,Y&aQ,h&mQ,m&uQ-P'SQ.a(qQ.q)eQ0P*{Q0g+gQ1],XQ2P-RQ2g.PQ3[.lQ3{/uQ4t0xQ5V1YQ5W1ZQ5Y1[Q5[1^Q5c1gQ5y2jQ6Y3XQ7Y4wQ7g5ZQ7i5]Q7j5^Q7y5}Q8h7ZR8p7h#UcOPXZr!X!^!l#`#k#x%]&]&`&a&d&f&g&i&m&u'S(q*{+g,X,],b-R.P/u0x1Y1Z1[1^1b1e1g2j4m4w5Z5]5^5}7U7Z7hQ#UWQ#aYQ%asQ%btQ%duS's#S'vQ'y#VQ(e#qQ(l#uQ(t#{Q(u#|Q(v#}Q(w$OQ(x$PQ(y$QQ(z$RQ({$SQ(|$TQ(}$UQ)O$VQ)Q$XQ)T$^Q)X$bW)c$j)e.l3XQ*x%cQ+^%pS,s&y1vQ-b'dS-g't-iQ-l'|Q-n(TQ.X(iQ._(mQ.c9lQ.e9oQ.f9pQ.g9qQ.v)pQ/x*sQ1q,nQ1t,qQ2U-ZQ2]-oQ2q.]Q2v9tQ2w9uQ2x9vQ2y9wQ2z9xQ2{9yQ2|9zQ2}9{Q3O9|Q3P9}Q3Q:OQ3R:PQ3S.dQ3V:UQ3W:_Q3]:QQ4O/zQ4V0XQ5i:`Q5o2WQ5t2^Q6Q2rQ6R:aQ6W:cQ6X:jQ7P4kQ7n5gQ7r5pQ7{:kQ8P:pQ8Q:qQ8v7tQ9U8cQ9]8tQ9n#OR;Q;^R#WWR&{!cY!qQ'Q,}0u4pS&w!c,uQ']!oS'g!r!uS'i!v4rS,r&x'PS-^'^'_Q-`'`Q1{,{R2Z-_R(k#tR(n#uQ!dQT,|'Q,}]!nQ!o'Q,}0u4pQ#l]R'Z9mT#gZ%ZS#fZ%ZU%y|},ZU(W#d#e#hS-r(X(YQ-v(ZQ0h+hQ2`-sU2a-t-u-wS5v2b2cR7u5w`#YW#S#V%v't'}+e-mt#cZ|}#d#e#h%Z(X(Y(Z+h-s-t-u-w2b2c5wQ1_,ZQ1r,oQ5e1jQ7m5fT:x&y+fT#]W%vS#[W%vS'u#S'}S'z#V+eS,t&y+fT-h't-mT'O!c%wQ$hfR)j$mT)_$h)`R3Z.kT*O$u*QR*W$xQ/}*zQ2e.OQ4s0wQ5{2iQ7X4vQ7x5zQ8e7WQ8w7wQ9W8gQ9`8yQ9e9XR9h9alpOXr!X#`%]&d&f&g&i,],b1b1eQ&^!TR,Q&ZV%z|},ZR0q+qR,P&XQ%szR+c%tR+X%nT&b!U&eT&c!U&eT1d,b1e",
  nodeNames: "⚠ ArithOp ArithOp LineComment BlockComment Script ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 364,
  context: trackNewline,
  nodeProps: [
    ["group", -26, 6, 14, 16, 62, 199, 203, 206, 207, 209, 212, 215, 225, 227, 233, 235, 237, 239, 242, 248, 254, 256, 258, 260, 262, 264, 265, "Statement", -32, 10, 11, 25, 28, 29, 35, 45, 48, 49, 51, 56, 64, 72, 76, 78, 80, 81, 103, 104, 113, 114, 131, 134, 136, 137, 138, 139, 141, 142, 162, 163, 165, "Expression", -23, 24, 26, 30, 34, 36, 38, 166, 168, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 193, 195, 197, 198, "Type", -3, 84, 96, 102, "ClassItem"],
    ["openedBy", 31, "InterpolationStart", 50, "[", 54, "{", 69, "(", 143, "JSXStartTag", 155, "JSXStartTag JSXStartCloseTag"],
    ["closedBy", 33, "InterpolationEnd", 44, "]", 55, "}", 70, ")", 144, "JSXSelfCloseEndTag JSXEndTag", 160, "JSXEndTag"]
  ],
  propSources: [jsHighlight],
  skippedNodes: [0, 3, 4, 268],
  repeatNodeCount: 33,
  tokenData: "$>y(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tu>PuvBavwDxwxGgxyMvyz! Qz{!![{|!%O|}!&]}!O!%O!O!P!'g!P!Q!1w!Q!R#0t!R![#3T![!]#@T!]!^#Aa!^!_#Bk!_!`#GS!`!a#In!a!b#N{!b!c$$z!c!}>P!}#O$&U#O#P$'`#P#Q$,w#Q#R$.R#R#S>P#S#T$/`#T#o$0j#o#p$4z#p#q$5p#q#r$7Q#r#s$8^#s$f%Z$f$g+g$g#BY>P#BY#BZ$9h#BZ$IS>P$IS$I_$9h$I_$I|>P$I|$I}$<s$I}$JO$<s$JO$JT>P$JT$JU$9h$JU$KV>P$KV$KW$9h$KW&FU>P&FU&FV$9h&FV;'S>P;'S;=`BZ<%l?HT>P?HT?HU$9h?HUO>P(n%d_$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$d&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$d&j'z!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU'z!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$d&j'wpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU'wpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$d&j'wp'z!b'm(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST'x#S$d&j'n(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$d&j'wp'z!b'n(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$d&j!l$Ip'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#q$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#q$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2b3l_'v$(n$d&j'z!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k*r4r_$d&j'z!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k)`5vX$d&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q)`6jT$_#t$d&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#t6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y#t7bO$_#t#t7eP;=`<%l6y)`7kP;=`<%l5q*r7w]$_#t$d&j'z!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}%W8uZ'z!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p%W9oU$_#t'z!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}%W:UP;=`<%l8p*r:[P;=`<%l4k#%|:hg$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}st%Ztu<Puw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}<P!}#O%Z#O#P&c#P#R%Z#R#S<P#S#T%Z#T#o<P#o#p*g#p$g%Z$g;'S<P;'S;=`=y<%lO<P#%|<[i$d&j(a!L^'wp'z!bOY%ZYZ&cZr%Zrs&}st%Ztu<Puw%Zwx(rx!Q%Z!Q![<P![!^%Z!^!_*g!_!c%Z!c!}<P!}#O%Z#O#P&c#P#R%Z#R#S<P#S#T%Z#T#o<P#o#p*g#p$g%Z$g;'S<P;'S;=`=y<%lO<P#%|=|P;=`<%l<P(CS>`k$d&j'wp'z!b(U!LY't&;d$W#tOY%ZYZ&cZr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$g%Z$g;'S>P;'S;=`BZ<%lO>P+d@`k$d&j'wp'z!b$W#tOY%ZYZ&cZr%Zrs&}st%Ztu@Tuw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![@T![!^%Z!^!_*g!_!c%Z!c!}@T!}#O%Z#O#P&c#P#R%Z#R#S@T#S#T%Z#T#o@T#o#p*g#p$g%Z$g;'S@T;'S;=`BT<%lO@T+dBWP;=`<%l@T(CSB^P;=`<%l>P%#SBl`$d&j'wp'z!b#i$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SCy_$d&j#{$Id'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%DfETa(j%<v$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sv%ZvwFYwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SFe`$d&j#u$Id'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2bGp_'y$)`$d&j'wpOYHoYZIuZrHorsIuswHowxKVx!^Ho!^!_LX!_#OHo#O#PIu#P#oHo#o#pLX#p;'SHo;'S;=`Mp<%lOHo*QHv_$d&j'wpOYHoYZIuZrHorsIuswHowxKVx!^Ho!^!_LX!_#OHo#O#PIu#P#oHo#o#pLX#p;'SHo;'S;=`Mp<%lOHo)`IzX$d&jOwIuwx6cx!^Iu!^!_Jg!_#oIu#o#pJg#p;'SIu;'S;=`KP<%lOIu#tJjTOwJgwx7]x;'SJg;'S;=`Jy<%lOJg#tJ|P;=`<%lJg)`KSP;=`<%lIu*QK`]$_#t$d&j'wpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r$fL^Z'wpOYLXYZJgZrLXrsJgswLXwxMPx#OLX#O#PJg#P;'SLX;'S;=`Mj<%lOLX$fMWU$_#t'wpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r$fMmP;=`<%lLX*QMsP;=`<%lHo(*QNR_!h(!b$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l! ]_!gM|$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!!ib$d&j'wp'z!b'u#)d#j$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!#q{!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!#|`$d&j'wp'z!b#g$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!%Z`$d&j'wp'z!bk&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!&h_!V&;l$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!'rc$d&j'wp'z!by'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!(}!P!Q%Z!Q![!+g![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!)Wa$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!*]!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!*h_!UMt$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!+rg$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!+g![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S!+g#S#X%Z#X#Y!-Z#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!-dg$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!.{|}%Z}!O!.{!O!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!/Uc$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!0lc$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!2Sf$d&j'wp'z!b#h$IdOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}xz!3hz{#$s{!P!3h!P!Q#&Y!Q!^!3h!^!_!Mh!_!`#-x!`!a#/_!a!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(r!3sb$d&j'wp'z!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(Q!5U`$d&j'z!b!RSOY!4{YZ&cZw!4{wx!6Wx!P!4{!P!Q!=o!Q!^!4{!^!_!?g!_!}!4{!}#O!Bn#O#P!<w#P#o!4{#o#p!?g#p;'S!4{;'S;=`!Cw<%lO!4{&n!6_^$d&j!RSOY!6WYZ&cZ!P!6W!P!Q!7Z!Q!^!6W!^!_!8g!_!}!6W!}#O!;U#O#P!<w#P#o!6W#o#p!8g#p;'S!6W;'S;=`!=i<%lO!6W&n!7ba$d&j!RSO!^&c!_#Z&c#Z#[!7Z#[#]&c#]#^!7Z#^#a&c#a#b!7Z#b#g&c#g#h!7Z#h#i&c#i#j!7Z#j#m&c#m#n!7Z#n#o&c#p;'S&c;'S;=`&w<%lO&cS!8lX!RSOY!8gZ!P!8g!P!Q!9X!Q!}!8g!}#O!9p#O#P!:o#P;'S!8g;'S;=`!;O<%lO!8gS!9^U!RS#Z#[!9X#]#^!9X#a#b!9X#g#h!9X#i#j!9X#m#n!9XS!9sVOY!9pZ#O!9p#O#P!:Y#P#Q!8g#Q;'S!9p;'S;=`!:i<%lO!9pS!:]SOY!9pZ;'S!9p;'S;=`!:i<%lO!9pS!:lP;=`<%l!9pS!:rSOY!8gZ;'S!8g;'S;=`!;O<%lO!8gS!;RP;=`<%l!8g&n!;Z[$d&jOY!;UYZ&cZ!^!;U!^!_!9p!_#O!;U#O#P!<P#P#Q!6W#Q#o!;U#o#p!9p#p;'S!;U;'S;=`!<q<%lO!;U&n!<UX$d&jOY!;UYZ&cZ!^!;U!^!_!9p!_#o!;U#o#p!9p#p;'S!;U;'S;=`!<q<%lO!;U&n!<tP;=`<%l!;U&n!<|X$d&jOY!6WYZ&cZ!^!6W!^!_!8g!_#o!6W#o#p!8g#p;'S!6W;'S;=`!=i<%lO!6W&n!=lP;=`<%l!6W(Q!=xi$d&j'z!b!RSOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!=o#[#]&}#]#^!=o#^#a&}#a#b!=o#b#g&}#g#h!=o#h#i&}#i#j!=o#j#m&}#m#n!=o#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!?nZ'z!b!RSOY!?gZw!?gwx!8gx!P!?g!P!Q!@a!Q!}!?g!}#O!Ap#O#P!:o#P;'S!?g;'S;=`!Bh<%lO!?g!f!@hb'z!b!RSOY'}Zw'}x#O'}#P#Z'}#Z#[!@a#[#]'}#]#^!@a#^#a'}#a#b!@a#b#g'}#g#h!@a#h#i'}#i#j!@a#j#m'}#m#n!@a#n;'S'};'S;=`(f<%lO'}!f!AuX'z!bOY!ApZw!Apwx!9px#O!Ap#O#P!:Y#P#Q!?g#Q;'S!Ap;'S;=`!Bb<%lO!Ap!f!BeP;=`<%l!Ap!f!BkP;=`<%l!?g(Q!Bu^$d&j'z!bOY!BnYZ&cZw!Bnwx!;Ux!^!Bn!^!_!Ap!_#O!Bn#O#P!<P#P#Q!4{#Q#o!Bn#o#p!Ap#p;'S!Bn;'S;=`!Cq<%lO!Bn(Q!CtP;=`<%l!Bn(Q!CzP;=`<%l!4{'`!DW`$d&j'wp!RSOY!C}YZ&cZr!C}rs!6Ws!P!C}!P!Q!EY!Q!^!C}!^!_!GQ!_!}!C}!}#O!JX#O#P!<w#P#o!C}#o#p!GQ#p;'S!C};'S;=`!Kb<%lO!C}'`!Eci$d&j'wp!RSOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!EY#[#](r#]#^!EY#^#a(r#a#b!EY#b#g(r#g#h!EY#h#i(r#i#j!EY#j#m(r#m#n!EY#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!GXZ'wp!RSOY!GQZr!GQrs!8gs!P!GQ!P!Q!Gz!Q!}!GQ!}#O!IZ#O#P!:o#P;'S!GQ;'S;=`!JR<%lO!GQt!HRb'wp!RSOY)rZr)rs#O)r#P#Z)r#Z#[!Gz#[#])r#]#^!Gz#^#a)r#a#b!Gz#b#g)r#g#h!Gz#h#i)r#i#j!Gz#j#m)r#m#n!Gz#n;'S)r;'S;=`*Z<%lO)rt!I`X'wpOY!IZZr!IZrs!9ps#O!IZ#O#P!:Y#P#Q!GQ#Q;'S!IZ;'S;=`!I{<%lO!IZt!JOP;=`<%l!IZt!JUP;=`<%l!GQ'`!J`^$d&j'wpOY!JXYZ&cZr!JXrs!;Us!^!JX!^!_!IZ!_#O!JX#O#P!<P#P#Q!C}#Q#o!JX#o#p!IZ#p;'S!JX;'S;=`!K[<%lO!JX'`!K_P;=`<%l!JX'`!KeP;=`<%l!C}(r!Ksk$d&j'wp'z!b!RSOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[!Kh#[#]%Z#]#^!Kh#^#a%Z#a#b!Kh#b#g%Z#g#h!Kh#h#i%Z#i#j!Kh#j#m%Z#m#n!Kh#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W!Mq]'wp'z!b!RSOY!MhZr!Mhrs!?gsw!Mhwx!GQx!P!Mh!P!Q!Nj!Q!}!Mh!}#O#!U#O#P!:o#P;'S!Mh;'S;=`##U<%lO!Mh#W!Nse'wp'z!b!RSOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[!Nj#[#]*g#]#^!Nj#^#a*g#a#b!Nj#b#g*g#g#h!Nj#h#i*g#i#j!Nj#j#m*g#m#n!Nj#n;'S*g;'S;=`+Z<%lO*g#W#!]Z'wp'z!bOY#!UZr#!Urs!Apsw#!Uwx!IZx#O#!U#O#P!:Y#P#Q!Mh#Q;'S#!U;'S;=`##O<%lO#!U#W##RP;=`<%l#!U#W##XP;=`<%l!Mh(r##e`$d&j'wp'z!bOY##[YZ&cZr##[rs!Bnsw##[wx!JXx!^##[!^!_#!U!_#O##[#O#P!<P#P#Q!3h#Q#o##[#o#p#!U#p;'S##[;'S;=`#$g<%lO##[(r#$jP;=`<%l##[(r#$pP;=`<%l!3h(CS#%Qb$d&j'wp'z!b'o(;d!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(CS#&e_$d&j'wp'z!bR(;dOY#&YYZ&cZr#&Yrs#'dsw#&Ywx#*tx!^#&Y!^!_#,s!_#O#&Y#O#P#(f#P#o#&Y#o#p#,s#p;'S#&Y;'S;=`#-r<%lO#&Y(Bb#'m]$d&j'z!bR(;dOY#'dYZ&cZw#'dwx#(fx!^#'d!^!_#)w!_#O#'d#O#P#(f#P#o#'d#o#p#)w#p;'S#'d;'S;=`#*n<%lO#'d(AO#(mX$d&jR(;dOY#(fYZ&cZ!^#(f!^!_#)Y!_#o#(f#o#p#)Y#p;'S#(f;'S;=`#)q<%lO#(f(;d#)_SR(;dOY#)YZ;'S#)Y;'S;=`#)k<%lO#)Y(;d#)nP;=`<%l#)Y(AO#)tP;=`<%l#(f(<v#*OW'z!bR(;dOY#)wZw#)wwx#)Yx#O#)w#O#P#)Y#P;'S#)w;'S;=`#*h<%lO#)w(<v#*kP;=`<%l#)w(Bb#*qP;=`<%l#'d(Ap#*}]$d&j'wpR(;dOY#*tYZ&cZr#*trs#(fs!^#*t!^!_#+v!_#O#*t#O#P#(f#P#o#*t#o#p#+v#p;'S#*t;'S;=`#,m<%lO#*t(<U#+}W'wpR(;dOY#+vZr#+vrs#)Ys#O#+v#O#P#)Y#P;'S#+v;'S;=`#,g<%lO#+v(<U#,jP;=`<%l#+v(Ap#,pP;=`<%l#*t(=h#,|Y'wp'z!bR(;dOY#,sZr#,srs#)wsw#,swx#+vx#O#,s#O#P#)Y#P;'S#,s;'S;=`#-l<%lO#,s(=h#-oP;=`<%l#,s(CS#-uP;=`<%l#&Y%#W#.Vb$d&j#{$Id'wp'z!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h+h#/lb$T#t$d&j'wp'z!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h$/l#1Pp$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!+g!P!Q%Z!Q![#3T![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S#3T#S#U%Z#U#V#6_#V#X%Z#X#Y!-Z#Y#b%Z#b#c#5T#c#d#9g#d#l%Z#l#m#<i#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#3`k$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!+g!P!Q%Z!Q![#3T![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S#3T#S#X%Z#X#Y!-Z#Y#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#5`_$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#6hd$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#7v!R!S#7v!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#7v#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#8Rf$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#7v!R!S#7v!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#7v#S#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#9pc$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#:{!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#:{#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;We$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#:{!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#:{#S#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#<rg$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#>Z![!^%Z!^!_*g!_!c%Z!c!i#>Z!i#O%Z#O#P&c#P#R%Z#R#S#>Z#S#T%Z#T#Z#>Z#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>fi$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#>Z![!^%Z!^!_*g!_!c%Z!c!i#>Z!i#O%Z#O#P&c#P#R%Z#R#S#>Z#S#T%Z#T#Z#>Z#Z#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#@b_!a$b$d&j#y%<f'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Al_^l$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS#Bz^'}!*v!e'.r'wp'z!b$U)d(nSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Cv!Q!^*g!^!_#Dl!_!`#F^!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#DPX$f&j'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#DuZ#k$Id'wp'z!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Eh!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#EqX#{$Id'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#FgX#l$Id'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh#G_a#X%?x$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a#Hd!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W#Ho_#d$Ih$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#I}adBf#l$Id$a#|$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`#KS!`!a#L^!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#K__#l$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#Lia#k$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`!a#Mn!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#My`#k$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$ Wc(b$Ip$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$!c!P!^%Z!^!_*g!_!a%Z!a!b$#m!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$!n_z'#p$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$#x`$d&j#v$Id'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$%V_!x!Ln$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$&a_|(8n$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$'eZ$d&jO!^$(W!^!_$(n!_#i$(W#i#j$(s#j#l$(W#l#m$*f#m#o$(W#o#p$(n#p;'S$(W;'S;=`$,q<%lO$(W(n$(_T[#S$d&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$(sO[#S(n$(x[$d&jO!Q&c!Q![$)n![!^&c!_!c&c!c!i$)n!i#T&c#T#Z$)n#Z#o&c#o#p$,U#p;'S&c;'S;=`&w<%lO&c(n$)sZ$d&jO!Q&c!Q![$*f![!^&c!_!c&c!c!i$*f!i#T&c#T#Z$*f#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$*kZ$d&jO!Q&c!Q![$+^![!^&c!_!c&c!c!i$+^!i#T&c#T#Z$+^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$+cZ$d&jO!Q&c!Q![$(W![!^&c!_!c&c!c!i$(W!i#T&c#T#Z$(W#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$,XR!Q![$,b!c!i$,b#T#Z$,b#S$,eS!Q![$,b!c!i$,b#T#Z$,b#q#r$(n(n$,tP;=`<%l$(W!'l$-S_!SM|$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$.^`#s$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$/k_$d&j'wp'z!b(R&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$0yk$d&j'wp'z!b(U!LY't&;d$Y#tOY%ZYZ&cZr%Zrs&}st%Ztu$0juw%Zwx(rx}%Z}!O$2n!O!Q%Z!Q![$0j![!^%Z!^!_*g!_!c%Z!c!}$0j!}#O%Z#O#P&c#P#R%Z#R#S$0j#S#T%Z#T#o$0j#o#p*g#p$g%Z$g;'S$0j;'S;=`$4t<%lO$0j+d$2yk$d&j'wp'z!b$Y#tOY%ZYZ&cZr%Zrs&}st%Ztu$2nuw%Zwx(rx}%Z}!O$2n!O!Q%Z!Q![$2n![!^%Z!^!_*g!_!c%Z!c!}$2n!}#O%Z#O#P&c#P#R%Z#R#S$2n#S#T%Z#T#o$2n#o#p*g#p$g%Z$g;'S$2n;'S;=`$4n<%lO$2n+d$4qP;=`<%l$2n(CS$4wP;=`<%l$0j!5p$5TX!X!3l'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Df$5{a(i%<v$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$#m#q;'S%Z;'S;=`+a<%lO%Z%#`$7__!W$I`o`$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$8i_!mS$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$9y|$d&j'wp'z!b'm(;d(U!LY't&;d$W#tOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$f%Z$f$g+g$g#BY>P#BY#BZ$9h#BZ$IS>P$IS$I_$9h$I_$JT>P$JT$JU$9h$JU$KV>P$KV$KW$9h$KW&FU>P&FU&FV$9h&FV;'S>P;'S;=`BZ<%l?HT>P?HT?HU$9h?HUO>P(CS$=Uk$d&j'wp'z!b'n(;d(U!LY't&;d$W#tOY%ZYZ&cZr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$g%Z$g;'S>P;'S;=`BZ<%lO>P",
  tokenizers: [noSemicolon, incdecToken, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOq~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!O~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(T~~", 141, 326), new LocalTokenGroup("j~RQYZXz{^~^O'q~~aP!P!Qd~iO'r~~", 25, 308)],
  topRules: { "Script": [0, 5], "SingleExpression": [1, 266], "SingleClassItem": [2, 267] },
  dialects: { jsx: 12686, ts: 12688 },
  dynamicPrecedences: { "76": 1, "78": 1, "163": 1, "191": 1 },
  specialized: [{ term: 312, get: (value) => spec_identifier[value] || -1 }, { term: 328, get: (value) => spec_word[value] || -1 }, { term: 67, get: (value) => spec_LessThan[value] || -1 }],
  tokenPrec: 12712
});
const snippets = [
  /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
];
const cache = /* @__PURE__ */ new NodeWeakMap();
const ScopeNodes = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function defID(type) {
  return (node, def) => {
    let id2 = node.node.getChild("VariableDefinition");
    if (id2)
      def(id2, type);
    return true;
  };
}
const functionContext = ["FunctionDeclaration"];
const gatherCompletions = {
  FunctionDeclaration: /* @__PURE__ */ defID("function"),
  ClassDeclaration: /* @__PURE__ */ defID("class"),
  ClassExpression: () => true,
  EnumDeclaration: /* @__PURE__ */ defID("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
  NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
  VariableDefinition(node, def) {
    if (!node.matchContext(functionContext))
      def(node, "variable");
  },
  TypeDefinition(node, def) {
    def(node, "type");
  },
  __proto__: null
};
function getScope(doc2, node) {
  let cached = cache.get(node);
  if (cached)
    return cached;
  let completions = [], top2 = true;
  function def(node2, type) {
    let name2 = doc2.sliceString(node2.from, node2.to);
    completions.push({ label: name2, type });
  }
  node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
    if (top2) {
      top2 = false;
    } else if (node2.name) {
      let gather = gatherCompletions[node2.name];
      if (gather && gather(node2, def) || ScopeNodes.has(node2.name))
        return false;
    } else if (node2.to - node2.from > 8192) {
      for (let c2 of getScope(doc2, node2.node))
        completions.push(c2);
      return false;
    }
  });
  cache.set(node, completions);
  return completions;
}
const Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
const dontComplete = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  ".",
  "?."
];
function localCompletionSource(context) {
  let inner = syntaxTree$1(context.state).resolveInner(context.pos, -1);
  if (dontComplete.indexOf(inner.name) > -1)
    return null;
  let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
  if (!isWord && !context.explicit)
    return null;
  let options = [];
  for (let pos = inner; pos; pos = pos.parent) {
    if (ScopeNodes.has(pos.name))
      options = options.concat(getScope(context.state.doc, pos));
  }
  return {
    options,
    from: isWord ? inner.from : context.pos,
    validFor: Identifier
  };
}
const javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "javascript",
  parser: /* @__PURE__ */ parser$2.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: flatIndent,
        SwitchBody: (context) => {
          let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
          return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
        ArrowFunction: (cx) => cx.baseIndent + cx.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^{/ }),
        JSXElement(context) {
          let closed = /^\s*<\//.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        JSXEscape(context) {
          let closed = /\s*\}/.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(context) {
          return context.column(context.node.from) + context.unit;
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
        BlockComment(tree) {
          return { from: tree.from + 2, to: tree.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
});
const jsxSublanguage = {
  test: (node) => /^JSX/.test(node.name),
  facet: /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
};
const typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" }, "typescript");
const jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ sublanguageProp.add((n2) => n2.isTop ? [jsxSublanguage] : void 0)]
});
const tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ sublanguageProp.add((n2) => n2.isTop ? [jsxSublanguage] : void 0)]
}, "typescript");
const keywords = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map((kw) => ({ label: kw, type: "keyword" }));
function javascript(config2 = {}) {
  let lang = config2.jsx ? config2.typescript ? tsxLanguage : jsxLanguage : config2.typescript ? typescriptLanguage : javascriptLanguage;
  return new LanguageSupport(lang, [
    javascriptLanguage.data.of({
      autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))
    }),
    javascriptLanguage.data.of({
      autocomplete: localCompletionSource
    }),
    config2.jsx ? autoCloseTags$1 : []
  ]);
}
function findOpenTag(node) {
  for (; ; ) {
    if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
      return node;
    if (node.name == "JSXEscape" || !node.parent)
      return null;
    node = node.parent;
  }
}
function elementName$1(doc2, tree, max = doc2.length) {
  for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
    if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" || ch.name == "JSXMemberExpression")
      return doc2.sliceString(ch.from, Math.min(ch.to, max));
  }
  return "";
}
function isEndTag(node) {
  return node && (node.name == "JSXEndTag" || node.name == "JSXSelfCloseEndTag");
}
const android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
const autoCloseTags$1 = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to, text) => {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly || from != to || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from, -1))
    return false;
  let { state } = view;
  let changes = state.changeByRange((range2) => {
    var _a2;
    let { head } = range2, around = syntaxTree$1(state).resolveInner(head, -1), name2;
    if (around.name == "JSXStartTag")
      around = around.parent;
    if (around.name == "JSXAttributeValue" && around.to > head)
      ;
    else if (text == ">" && around.name == "JSXFragmentTag") {
      return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></>` } };
    } else if (text == "/" && around.name == "JSXFragmentTag") {
      let empty = around.parent, base2 = empty === null || empty === void 0 ? void 0 : empty.parent;
      if (empty.from == head - 1 && ((_a2 = base2.lastChild) === null || _a2 === void 0 ? void 0 : _a2.name) != "JSXEndTag" && (name2 = elementName$1(state.doc, base2 === null || base2 === void 0 ? void 0 : base2.firstChild, head))) {
        let insert2 = `/${name2}>`;
        return { range: EditorSelection.cursor(head + insert2.length), changes: { from: head, insert: insert2 } };
      }
    } else if (text == ">") {
      let openTag = findOpenTag(around);
      if (openTag && !isEndTag(openTag.lastChild) && state.sliceDoc(head, head + 2) != "</" && (name2 = elementName$1(state.doc, openTag, head)))
        return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name2}>` } };
    }
    return { range: range2 };
  });
  if (changes.changes.empty)
    return false;
  view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
  return true;
});
const Targets = ["_blank", "_self", "_top", "_parent"];
const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
const Methods = ["get", "post", "put", "delete"];
const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
const Bool = ["true", "false"];
const S = {};
const Tags = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: Targets,
      hreflang: null
    }
  },
  abbr: S,
  address: S,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: S,
  aside: S,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: S,
  base: { attrs: { href: null, target: Targets } },
  bdi: S,
  bdo: S,
  blockquote: { attrs: { cite: null } },
  body: S,
  br: S,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Encs,
      formmethod: Methods,
      formnovalidate: ["novalidate"],
      formtarget: Targets,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: S,
  center: S,
  cite: S,
  code: S,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: S,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: S,
  div: S,
  dl: S,
  dt: S,
  em: S,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: S,
  figure: S,
  footer: S,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": Charsets,
      autocomplete: ["on", "off"],
      enctype: Encs,
      method: Methods,
      novalidate: ["novalidate"],
      target: Targets
    }
  },
  h1: S,
  h2: S,
  h3: S,
  h4: S,
  h5: S,
  h6: S,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: S,
  hgroup: S,
  hr: S,
  html: {
    attrs: { manifest: null }
  },
  i: S,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Encs,
      formmethod: Methods,
      formnovalidate: ["novalidate"],
      formtarget: Targets,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: S,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: S,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: S,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: Charsets,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: S,
  noscript: S,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: S,
  param: { attrs: { name: null, value: null } },
  pre: S,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: S,
  rt: S,
  ruby: S,
  samp: S,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: Charsets
    }
  },
  section: S,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: S,
  source: { attrs: { src: null, type: null, media: null } },
  span: S,
  strong: S,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: S,
  summary: S,
  sup: S,
  table: S,
  tbody: S,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: S,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: S,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: S,
  time: { attrs: { datetime: null } },
  title: S,
  tr: S,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: S,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: S
};
const GlobalAttrs = {
  accesskey: null,
  class: null,
  contenteditable: Bool,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: Bool,
  autocorrect: Bool,
  autocapitalize: Bool,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": Bool,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": Bool,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": Bool,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": Bool,
  "aria-hidden": Bool,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": Bool,
  "aria-multiselectable": Bool,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": Bool,
  "aria-relevant": null,
  "aria-required": Bool,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
};
const eventAttributes = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n2) => "on" + n2);
for (let a2 of eventAttributes)
  GlobalAttrs[a2] = null;
class Schema {
  constructor(extraTags, extraAttrs) {
    this.tags = Object.assign(Object.assign({}, Tags), extraTags);
    this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
    this.allTags = Object.keys(this.tags);
    this.globalAttrNames = Object.keys(this.globalAttrs);
  }
}
Schema.default = /* @__PURE__ */ new Schema();
function elementName(doc2, tree, max = doc2.length) {
  if (!tree)
    return "";
  let tag = tree.firstChild;
  let name2 = tag && tag.getChild("TagName");
  return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
}
function findParentElement(tree, skip = false) {
  for (; tree; tree = tree.parent)
    if (tree.name == "Element") {
      if (skip)
        skip = false;
      else
        return tree;
    }
  return null;
}
function allowedChildren(doc2, tree, schema) {
  let parentInfo = schema.tags[elementName(doc2, findParentElement(tree))];
  return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
}
function openTags(doc2, tree) {
  let open = [];
  for (let parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {
    let tagName = elementName(doc2, parent);
    if (tagName && parent.lastChild.name == "CloseTag")
      break;
    if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
      open.push(tagName);
  }
  return open;
}
const identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
function completeTag(state, schema, tree, from, to) {
  let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
  let parent = findParentElement(tree, true);
  return {
    from,
    to,
    options: allowedChildren(state.doc, parent, schema).map((tagName) => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({
      label: "/" + tag,
      apply: "/" + tag + end,
      type: "type",
      boost: 99 - i
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function completeCloseTag(state, tree, from, to) {
  let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
  return {
    from,
    to,
    options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
    validFor: identifier
  };
}
function completeStartTag(state, schema, tree, pos) {
  let options = [], level = 0;
  for (let tagName of allowedChildren(state.doc, tree, schema))
    options.push({ label: "<" + tagName, type: "type" });
  for (let open of openTags(state.doc, tree))
    options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
  return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function completeAttrName(state, schema, tree, from, to) {
  let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
  let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
  let names = info && info.globalAttrs === false ? localAttrs : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
  return {
    from,
    to,
    options: names.map((attrName) => ({ label: attrName, type: "property" })),
    validFor: identifier
  };
}
function completeAttrValue(state, schema, tree, from, to) {
  var _a2;
  let nameNode = (_a2 = tree.parent) === null || _a2 === void 0 ? void 0 : _a2.getChild("AttributeName");
  let options = [], token = void 0;
  if (nameNode) {
    let attrName = state.sliceDoc(nameNode.from, nameNode.to);
    let attrs = schema.globalAttrs[attrName];
    if (!attrs) {
      let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
      attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
    }
    if (attrs) {
      let base2 = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
      if (/^['"]/.test(base2)) {
        token = base2[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
        quoteStart = "";
        quoteEnd = state.sliceDoc(to, to + 1) == base2[0] ? "" : base2[0];
        base2 = base2.slice(1);
        from++;
      } else {
        token = /^[^\s<>='"]*$/;
      }
      for (let value of attrs)
        options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
    }
  }
  return { from, to, options, validFor: token };
}
function htmlCompletionFor(schema, context) {
  let { state, pos } = context, around = syntaxTree$1(state).resolveInner(pos), tree = around.resolve(pos, -1);
  for (let scan = pos, before; around == tree && (before = tree.childBefore(scan)); ) {
    let last2 = before.lastChild;
    if (!last2 || !last2.type.isError || last2.from < last2.to)
      break;
    around = tree = before;
    scan = last2.from;
  }
  if (tree.name == "TagName") {
    return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos) : completeTag(state, schema, tree, tree.from, pos);
  } else if (tree.name == "StartTag") {
    return completeTag(state, schema, tree, pos, pos);
  } else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
    return completeCloseTag(state, tree, pos, pos);
  } else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
    return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
  } else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
    return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
  } else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
    return completeStartTag(state, schema, tree, pos);
  } else {
    return null;
  }
}
function htmlCompletionSourceWith(config2) {
  let { extraTags, extraGlobalAttributes: extraAttrs } = config2;
  let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
  return (context) => htmlCompletionFor(schema, context);
}
const defaultNesting = [
  {
    tag: "script",
    attrs: (attrs) => attrs.type == "text/typescript" || attrs.lang == "ts",
    parser: typescriptLanguage.parser
  },
  {
    tag: "script",
    attrs: (attrs) => attrs.type == "text/babel" || attrs.type == "text/jsx",
    parser: jsxLanguage.parser
  },
  {
    tag: "script",
    attrs: (attrs) => attrs.type == "text/typescript-jsx",
    parser: tsxLanguage.parser
  },
  {
    tag: "script",
    attrs(attrs) {
      return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
    },
    parser: javascriptLanguage.parser
  },
  {
    tag: "style",
    attrs(attrs) {
      return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
    },
    parser: cssLanguage.parser
  }
];
const defaultAttrs = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ cssLanguage.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ eventAttributes.map((name2) => ({ name: name2, parser: javascriptLanguage.parser })));
const htmlPlain = /* @__PURE__ */ LRLanguage.define({
  name: "html",
  parser: /* @__PURE__ */ parser$3.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Element(context) {
          let after = /^(\s*)(<\/)?/.exec(context.textAfter);
          if (context.node.to <= context.pos + after[0].length)
            return context.continue();
          return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(context) {
          return context.column(context.node.from) + context.unit;
        },
        Document(context) {
          if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
            return context.continue();
          let endElt = null, close;
          for (let cur = context.node; ; ) {
            let last2 = cur.lastChild;
            if (!last2 || last2.name != "Element" || last2.to != cur.to)
              break;
            endElt = cur = last2;
          }
          if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
            return context.lineIndent(endElt.from) + context.unit;
          return null;
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        Element(node) {
          let first2 = node.firstChild, last2 = node.lastChild;
          if (!first2 || first2.name != "OpenTag")
            return null;
          return { from: first2.to, to: last2.name == "CloseTag" ? last2.from : node.to };
        }
      }),
      /* @__PURE__ */ bracketMatchingHandle.add({
        "OpenTag CloseTag": (node) => node.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
});
const htmlLanguage = /* @__PURE__ */ htmlPlain.configure({
  wrap: /* @__PURE__ */ configureNesting(defaultNesting, defaultAttrs)
});
function html(config2 = {}) {
  let dialect = "", wrap;
  if (config2.matchClosingTags === false)
    dialect = "noMatch";
  if (config2.selfClosingTags === true)
    dialect = (dialect ? dialect + " " : "") + "selfClosing";
  if (config2.nestedLanguages && config2.nestedLanguages.length || config2.nestedAttributes && config2.nestedAttributes.length)
    wrap = configureNesting((config2.nestedLanguages || []).concat(defaultNesting), (config2.nestedAttributes || []).concat(defaultAttrs));
  let lang = wrap ? htmlPlain.configure({ wrap, dialect }) : dialect ? htmlLanguage.configure({ dialect }) : htmlLanguage;
  return new LanguageSupport(lang, [
    htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config2) }),
    config2.autoCloseTags !== false ? autoCloseTags : [],
    javascript().support,
    css$1().support
  ]);
}
const selfClosers = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
const autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to, text) => {
  if (view.composing || view.state.readOnly || from != to || text != ">" && text != "/" || !htmlLanguage.isActiveAt(view.state, from, -1))
    return false;
  let { state } = view;
  let changes = state.changeByRange((range2) => {
    var _a2, _b2, _c2;
    let { head } = range2, around = syntaxTree$1(state).resolveInner(head, -1), name2;
    if (around.name == "TagName" || around.name == "StartTag")
      around = around.parent;
    if (text == ">" && around.name == "OpenTag") {
      if (((_b2 = (_a2 = around.parent) === null || _a2 === void 0 ? void 0 : _a2.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "CloseTag" && (name2 = elementName(state.doc, around.parent, head)) && !selfClosers.has(name2)) {
        let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
        let insert2 = `${hasRightBracket ? "" : ">"}</${name2}>`;
        return { range: EditorSelection.cursor(head + 1), changes: { from: head + (hasRightBracket ? 1 : 0), insert: insert2 } };
      }
    } else if (text == "/" && around.name == "OpenTag") {
      let empty = around.parent, base2 = empty === null || empty === void 0 ? void 0 : empty.parent;
      if (empty.from == head - 1 && ((_c2 = base2.lastChild) === null || _c2 === void 0 ? void 0 : _c2.name) != "CloseTag" && (name2 = elementName(state.doc, base2, head)) && !selfClosers.has(name2)) {
        let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
        let insert2 = `/${name2}${hasRightBracket ? "" : ">"}`;
        let pos = head + insert2.length + (hasRightBracket ? 1 : 0);
        return { range: EditorSelection.cursor(pos), changes: { from: head, insert: insert2 } };
      }
    }
    return { range: range2 };
  });
  if (changes.changes.empty)
    return false;
  view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
  return true;
});
var lib$2;
var hasRequiredLib$2;
function requireLib$2() {
  if (hasRequiredLib$2)
    return lib$2;
  hasRequiredLib$2 = 1;
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var ANSI_COLORS = [[{ color: "0, 0, 0", "class": "ansi-black" }, { color: "187, 0, 0", "class": "ansi-red" }, { color: "0, 187, 0", "class": "ansi-green" }, { color: "187, 187, 0", "class": "ansi-yellow" }, { color: "0, 0, 187", "class": "ansi-blue" }, { color: "187, 0, 187", "class": "ansi-magenta" }, { color: "0, 187, 187", "class": "ansi-cyan" }, { color: "255,255,255", "class": "ansi-white" }], [{ color: "85, 85, 85", "class": "ansi-bright-black" }, { color: "255, 85, 85", "class": "ansi-bright-red" }, { color: "0, 255, 0", "class": "ansi-bright-green" }, { color: "255, 255, 85", "class": "ansi-bright-yellow" }, { color: "85, 85, 255", "class": "ansi-bright-blue" }, { color: "255, 85, 255", "class": "ansi-bright-magenta" }, { color: "85, 255, 255", "class": "ansi-bright-cyan" }, { color: "255, 255, 255", "class": "ansi-bright-white" }]];
  var Anser2 = function() {
    _createClass(Anser3, null, [{
      key: "escapeForHtml",
      /**
       * Anser.escapeForHtml
       * Escape the input HTML.
       *
       * This does the minimum escaping of text to make it compliant with HTML.
       * In particular, the '&','<', and '>' characters are escaped. This should
       * be run prior to `ansiToHtml`.
       *
       * @name Anser.escapeForHtml
       * @function
       * @param {String} txt The input text (containing the ANSI snippets).
       * @returns {String} The escaped html.
       */
      value: function escapeForHtml(txt) {
        return new Anser3().escapeForHtml(txt);
      }
      /**
       * Anser.linkify
       * Adds the links in the HTML.
       *
       * This replaces any links in the text with anchor tags that display the
       * link. The links should have at least one whitespace character
       * surrounding it. Also, you should apply this after you have run
       * `ansiToHtml` on the text.
       *
       * @name Anser.linkify
       * @function
       * @param {String} txt The input text.
       * @returns {String} The HTML containing the <a> tags (unescaped).
       */
    }, {
      key: "linkify",
      value: function linkify(txt) {
        return new Anser3().linkify(txt);
      }
      /**
       * Anser.ansiToHtml
       * This replaces ANSI terminal escape codes with SPAN tags that wrap the
       * content.
       *
       * This function only interprets ANSI SGR (Select Graphic Rendition) codes
       * that can be represented in HTML.
       * For example, cursor movement codes are ignored and hidden from output.
       * The default style uses colors that are very close to the prescribed
       * standard. The standard assumes that the text will have a black
       * background. These colors are set as inline styles on the SPAN tags.
       *
       * Another option is to set `use_classes: true` in the options argument.
       * This will instead set classes on the spans so the colors can be set via
       * CSS. The class names used are of the format `ansi-*-fg/bg` and
       * `ansi-bright-*-fg/bg` where `*` is the color name,
       * i.e black/red/green/yellow/blue/magenta/cyan/white.
       *
       * @name Anser.ansiToHtml
       * @function
       * @param {String} txt The input text.
       * @param {Object} options The options passed to the ansiToHTML method.
       * @returns {String} The HTML output.
       */
    }, {
      key: "ansiToHtml",
      value: function ansiToHtml(txt, options) {
        return new Anser3().ansiToHtml(txt, options);
      }
      /**
       * Anser.ansiToJson
       * Converts ANSI input into JSON output.
       *
       * @name Anser.ansiToJson
       * @function
       * @param {String} txt The input text.
       * @param {Object} options The options passed to the ansiToHTML method.
       * @returns {String} The HTML output.
       */
    }, {
      key: "ansiToJson",
      value: function ansiToJson(txt, options) {
        return new Anser3().ansiToJson(txt, options);
      }
      /**
       * Anser.ansiToText
       * Converts ANSI input into text output.
       *
       * @name Anser.ansiToText
       * @function
       * @param {String} txt The input text.
       * @returns {String} The text output.
       */
    }, {
      key: "ansiToText",
      value: function ansiToText(txt) {
        return new Anser3().ansiToText(txt);
      }
      /**
       * Anser
       * The `Anser` class.
       *
       * @name Anser
       * @function
       * @returns {Anser}
       */
    }]);
    function Anser3() {
      _classCallCheck(this, Anser3);
      this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;
      this.bright = 0;
      this.decorations = [];
    }
    _createClass(Anser3, [{
      key: "setupPalette",
      value: function setupPalette() {
        this.PALETTE_COLORS = [];
        for (var i = 0; i < 2; ++i) {
          for (var j2 = 0; j2 < 8; ++j2) {
            this.PALETTE_COLORS.push(ANSI_COLORS[i][j2].color);
          }
        }
        var levels = [0, 95, 135, 175, 215, 255];
        var format2 = function format3(r2, g2, b2) {
          return levels[r2] + ", " + levels[g2] + ", " + levels[b2];
        };
        for (var _r = 0; _r < 6; ++_r) {
          for (var _g = 0; _g < 6; ++_g) {
            for (var _b2 = 0; _b2 < 6; ++_b2) {
              this.PALETTE_COLORS.push(format2(_r, _g, _b2));
            }
          }
        }
        var level = 8;
        for (var _i = 0; _i < 24; ++_i, level += 10) {
          this.PALETTE_COLORS.push(format2(level, level, level));
        }
      }
      /**
       * escapeForHtml
       * Escapes the input text.
       *
       * @name escapeForHtml
       * @function
       * @param {String} txt The input text.
       * @returns {String} The escpaed HTML output.
       */
    }, {
      key: "escapeForHtml",
      value: function escapeForHtml(txt) {
        return txt.replace(/[&<>\"]/gm, function(str) {
          return str == "&" ? "&amp;" : str == '"' ? "&quot;" : str == "<" ? "&lt;" : str == ">" ? "&gt;" : "";
        });
      }
      /**
       * linkify
       * Adds HTML link elements.
       *
       * @name linkify
       * @function
       * @param {String} txt The input text.
       * @returns {String} The HTML output containing link elements.
       */
    }, {
      key: "linkify",
      value: function linkify(txt) {
        return txt.replace(/(https?:\/\/[^\s]+)/gm, function(str) {
          return '<a href="' + str + '">' + str + "</a>";
        });
      }
      /**
       * ansiToHtml
       * Converts ANSI input into HTML output.
       *
       * @name ansiToHtml
       * @function
       * @param {String} txt The input text.
       * @param {Object} options The options passed ot the `process` method.
       * @returns {String} The HTML output.
       */
    }, {
      key: "ansiToHtml",
      value: function ansiToHtml(txt, options) {
        return this.process(txt, options, true);
      }
      /**
       * ansiToJson
       * Converts ANSI input into HTML output.
       *
       * @name ansiToJson
       * @function
       * @param {String} txt The input text.
       * @param {Object} options The options passed ot the `process` method.
       * @returns {String} The JSON output.
       */
    }, {
      key: "ansiToJson",
      value: function ansiToJson(txt, options) {
        options = options || {};
        options.json = true;
        options.clearLine = false;
        return this.process(txt, options, true);
      }
      /**
       * ansiToText
       * Converts ANSI input into HTML output.
       *
       * @name ansiToText
       * @function
       * @param {String} txt The input text.
       * @returns {String} The text output.
       */
    }, {
      key: "ansiToText",
      value: function ansiToText(txt) {
        return this.process(txt, {}, false);
      }
      /**
       * process
       * Processes the input.
       *
       * @name process
       * @function
       * @param {String} txt The input text.
       * @param {Object} options An object passed to `processChunk` method, extended with:
       *
       *  - `json` (Boolean): If `true`, the result will be an object.
       *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.
       *
       * @param {Boolean} markup
       */
    }, {
      key: "process",
      value: function process2(txt, options, markup) {
        var _this = this;
        var self2 = this;
        var raw_text_chunks = txt.split(/\033\[/);
        var first_chunk = raw_text_chunks.shift();
        if (options === void 0 || options === null) {
          options = {};
        }
        options.clearLine = /\r/.test(txt);
        var color_chunks = raw_text_chunks.map(function(chunk) {
          return _this.processChunk(chunk, options, markup);
        });
        if (options && options.json) {
          var first2 = self2.processChunkJson("");
          first2.content = first_chunk;
          first2.clearLine = options.clearLine;
          color_chunks.unshift(first2);
          if (options.remove_empty) {
            color_chunks = color_chunks.filter(function(c2) {
              return !c2.isEmpty();
            });
          }
          return color_chunks;
        } else {
          color_chunks.unshift(first_chunk);
        }
        return color_chunks.join("");
      }
      /**
       * processChunkJson
       * Processes the current chunk into json output.
       *
       * @name processChunkJson
       * @function
       * @param {String} text The input text.
       * @param {Object} options An object containing the following fields:
       *
       *  - `json` (Boolean): If `true`, the result will be an object.
       *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.
       *
       * @param {Boolean} markup If false, the colors will not be parsed.
       * @return {Object} The result object:
       *
       *  - `content` (String): The text.
       *  - `fg` (String|null): The foreground color.
       *  - `bg` (String|null): The background color.
       *  - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).
       *  - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).
       *  - `clearLine` (Boolean): `true` if a carriageReturn \r was fount at end of line.
       *  - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.
       *  - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.
       *
       */
    }, {
      key: "processChunkJson",
      value: function processChunkJson(text, options, markup) {
        options = typeof options == "undefined" ? {} : options;
        var use_classes = options.use_classes = typeof options.use_classes != "undefined" && options.use_classes;
        var key = options.key = use_classes ? "class" : "color";
        var result = {
          content: text,
          fg: null,
          bg: null,
          fg_truecolor: null,
          bg_truecolor: null,
          isInverted: false,
          clearLine: options.clearLine,
          decoration: null,
          decorations: [],
          was_processed: false,
          isEmpty: function isEmpty() {
            return !result.content;
          }
        };
        var matches = text.match(/^([!\x3c-\x3f]*)([\d;]*)([\x20-\x2c]*[\x40-\x7e])([\s\S]*)/m);
        if (!matches)
          return result;
        result.content = matches[4];
        var nums = matches[2].split(";");
        if (matches[1] !== "" || matches[3] !== "m") {
          return result;
        }
        if (!markup) {
          return result;
        }
        var self2 = this;
        while (nums.length > 0) {
          var num_str = nums.shift();
          var num = parseInt(num_str);
          if (isNaN(num) || num === 0) {
            self2.fg = self2.bg = null;
            self2.decorations = [];
          } else if (num === 1) {
            self2.decorations.push("bold");
          } else if (num === 2) {
            self2.decorations.push("dim");
          } else if (num === 3) {
            self2.decorations.push("italic");
          } else if (num === 4) {
            self2.decorations.push("underline");
          } else if (num === 5) {
            self2.decorations.push("blink");
          } else if (num === 7) {
            self2.decorations.push("reverse");
          } else if (num === 8) {
            self2.decorations.push("hidden");
          } else if (num === 9) {
            self2.decorations.push("strikethrough");
          } else if (num === 21) {
            self2.removeDecoration("bold");
          } else if (num === 22) {
            self2.removeDecoration("bold");
            self2.removeDecoration("dim");
          } else if (num === 23) {
            self2.removeDecoration("italic");
          } else if (num === 24) {
            self2.removeDecoration("underline");
          } else if (num === 25) {
            self2.removeDecoration("blink");
          } else if (num === 27) {
            self2.removeDecoration("reverse");
          } else if (num === 28) {
            self2.removeDecoration("hidden");
          } else if (num === 29) {
            self2.removeDecoration("strikethrough");
          } else if (num === 39) {
            self2.fg = null;
          } else if (num === 49) {
            self2.bg = null;
          } else if (num >= 30 && num < 38) {
            self2.fg = ANSI_COLORS[0][num % 10][key];
          } else if (num >= 90 && num < 98) {
            self2.fg = ANSI_COLORS[1][num % 10][key];
          } else if (num >= 40 && num < 48) {
            self2.bg = ANSI_COLORS[0][num % 10][key];
          } else if (num >= 100 && num < 108) {
            self2.bg = ANSI_COLORS[1][num % 10][key];
          } else if (num === 38 || num === 48) {
            var is_foreground = num === 38;
            if (nums.length >= 1) {
              var mode = nums.shift();
              if (mode === "5" && nums.length >= 1) {
                var palette_index = parseInt(nums.shift());
                if (palette_index >= 0 && palette_index <= 255) {
                  if (!use_classes) {
                    if (!this.PALETTE_COLORS) {
                      self2.setupPalette();
                    }
                    if (is_foreground) {
                      self2.fg = this.PALETTE_COLORS[palette_index];
                    } else {
                      self2.bg = this.PALETTE_COLORS[palette_index];
                    }
                  } else {
                    var klass = palette_index >= 16 ? "ansi-palette-" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8]["class"];
                    if (is_foreground) {
                      self2.fg = klass;
                    } else {
                      self2.bg = klass;
                    }
                  }
                }
              } else if (mode === "2" && nums.length >= 3) {
                var r2 = parseInt(nums.shift());
                var g2 = parseInt(nums.shift());
                var b2 = parseInt(nums.shift());
                if (r2 >= 0 && r2 <= 255 && g2 >= 0 && g2 <= 255 && b2 >= 0 && b2 <= 255) {
                  var color2 = r2 + ", " + g2 + ", " + b2;
                  if (!use_classes) {
                    if (is_foreground) {
                      self2.fg = color2;
                    } else {
                      self2.bg = color2;
                    }
                  } else {
                    if (is_foreground) {
                      self2.fg = "ansi-truecolor";
                      self2.fg_truecolor = color2;
                    } else {
                      self2.bg = "ansi-truecolor";
                      self2.bg_truecolor = color2;
                    }
                  }
                }
              }
            }
          }
        }
        if (self2.fg === null && self2.bg === null && self2.decorations.length === 0) {
          return result;
        } else {
          result.fg = self2.fg;
          result.bg = self2.bg;
          result.fg_truecolor = self2.fg_truecolor;
          result.bg_truecolor = self2.bg_truecolor;
          result.decorations = self2.decorations;
          result.decoration = self2.decorations.slice(-1).pop() || null;
          result.was_processed = true;
          return result;
        }
      }
      /**
       * processChunk
       * Processes the current chunk of text.
       *
       * @name processChunk
       * @function
       * @param {String} text The input text.
       * @param {Object} options An object containing the following fields:
       *
       *  - `json` (Boolean): If `true`, the result will be an object.
       *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.
       *
       * @param {Boolean} markup If false, the colors will not be parsed.
       * @return {Object|String} The result (object if `json` is wanted back or string otherwise).
       */
    }, {
      key: "processChunk",
      value: function processChunk(text, options, markup) {
        var _this2 = this;
        options = options || {};
        var jsonChunk = this.processChunkJson(text, options, markup);
        var use_classes = options.use_classes;
        jsonChunk.decorations = jsonChunk.decorations.filter(function(decoration) {
          if (decoration === "reverse") {
            if (!jsonChunk.fg) {
              jsonChunk.fg = ANSI_COLORS[0][7][use_classes ? "class" : "color"];
            }
            if (!jsonChunk.bg) {
              jsonChunk.bg = ANSI_COLORS[0][0][use_classes ? "class" : "color"];
            }
            var tmpFg = jsonChunk.fg;
            jsonChunk.fg = jsonChunk.bg;
            jsonChunk.bg = tmpFg;
            var tmpFgTrue = jsonChunk.fg_truecolor;
            jsonChunk.fg_truecolor = jsonChunk.bg_truecolor;
            jsonChunk.bg_truecolor = tmpFgTrue;
            jsonChunk.isInverted = true;
            return false;
          }
          return true;
        });
        if (options.json) {
          return jsonChunk;
        }
        if (jsonChunk.isEmpty()) {
          return "";
        }
        if (!jsonChunk.was_processed) {
          return jsonChunk.content;
        }
        var colors = [];
        var decorations2 = [];
        var textDecorations = [];
        var data = {};
        var render_data = function render_data2(data2) {
          var fragments = [];
          var key = void 0;
          for (key in data2) {
            if (data2.hasOwnProperty(key)) {
              fragments.push("data-" + key + '="' + _this2.escapeForHtml(data2[key]) + '"');
            }
          }
          return fragments.length > 0 ? " " + fragments.join(" ") : "";
        };
        if (jsonChunk.isInverted) {
          data["ansi-is-inverted"] = "true";
        }
        if (jsonChunk.fg) {
          if (use_classes) {
            colors.push(jsonChunk.fg + "-fg");
            if (jsonChunk.fg_truecolor !== null) {
              data["ansi-truecolor-fg"] = jsonChunk.fg_truecolor;
              jsonChunk.fg_truecolor = null;
            }
          } else {
            colors.push("color:rgb(" + jsonChunk.fg + ")");
          }
        }
        if (jsonChunk.bg) {
          if (use_classes) {
            colors.push(jsonChunk.bg + "-bg");
            if (jsonChunk.bg_truecolor !== null) {
              data["ansi-truecolor-bg"] = jsonChunk.bg_truecolor;
              jsonChunk.bg_truecolor = null;
            }
          } else {
            colors.push("background-color:rgb(" + jsonChunk.bg + ")");
          }
        }
        jsonChunk.decorations.forEach(function(decoration) {
          if (use_classes) {
            decorations2.push("ansi-" + decoration);
            return;
          }
          if (decoration === "bold") {
            decorations2.push("font-weight:bold");
          } else if (decoration === "dim") {
            decorations2.push("opacity:0.5");
          } else if (decoration === "italic") {
            decorations2.push("font-style:italic");
          } else if (decoration === "hidden") {
            decorations2.push("visibility:hidden");
          } else if (decoration === "strikethrough") {
            textDecorations.push("line-through");
          } else {
            textDecorations.push(decoration);
          }
        });
        if (textDecorations.length) {
          decorations2.push("text-decoration:" + textDecorations.join(" "));
        }
        if (use_classes) {
          return '<span class="' + colors.concat(decorations2).join(" ") + '"' + render_data(data) + ">" + jsonChunk.content + "</span>";
        } else {
          return '<span style="' + colors.concat(decorations2).join(";") + '"' + render_data(data) + ">" + jsonChunk.content + "</span>";
        }
      }
    }, {
      key: "removeDecoration",
      value: function removeDecoration(decoration) {
        var index = this.decorations.indexOf(decoration);
        if (index >= 0) {
          this.decorations.splice(index, 1);
        }
      }
    }]);
    return Anser3;
  }();
  lib$2 = Anser2;
  return lib$2;
}
var libExports = requireLib$2();
const Anser = /* @__PURE__ */ getDefaultExportFromCjs(libExports);
var escapeCarriage = { exports: {} };
var hasRequiredEscapeCarriage;
function requireEscapeCarriage() {
  if (hasRequiredEscapeCarriage)
    return escapeCarriage.exports;
  hasRequiredEscapeCarriage = 1;
  function escapeCarriageReturn(txt) {
    if (!txt)
      return "";
    if (!/\r/.test(txt))
      return txt;
    txt = txt.replace(/\r+\n/gm, "\n");
    while (/\r./.test(txt)) {
      txt = txt.replace(/^([^\r\n]*)\r+([^\r\n]+)/gm, function(_, base2, insert2) {
        return insert2 + base2.slice(insert2.length);
      });
    }
    return txt;
  }
  function findLongestString(arr) {
    var longest = 0;
    for (var i = 0; i < arr.length; i++) {
      if (arr[longest].length <= arr[i].length) {
        longest = i;
      }
    }
    return longest;
  }
  function escapeSingleLineSafe(txt) {
    if (!/\r/.test(txt))
      return txt;
    var arr = txt.split("\r");
    var res = [];
    while (arr.length > 0) {
      var longest = findLongestString(arr);
      res.push(arr[longest]);
      arr = arr.slice(longest + 1);
    }
    return res.join("\r");
  }
  function escapeCarriageReturnSafe(txt) {
    if (!txt)
      return "";
    if (!/\r/.test(txt))
      return txt;
    if (!/\n/.test(txt))
      return escapeSingleLineSafe(txt);
    txt = txt.replace(/\r+\n/gm, "\n");
    var idx = txt.lastIndexOf("\n");
    return escapeCarriageReturn(txt.slice(0, idx)) + "\n" + escapeSingleLineSafe(txt.slice(idx + 1));
  }
  escapeCarriage.exports = escapeCarriageReturn;
  escapeCarriage.exports.escapeCarriageReturn = escapeCarriageReturn;
  escapeCarriage.exports.escapeCarriageReturnSafe = escapeCarriageReturnSafe;
  return escapeCarriage.exports;
}
var escapeCarriageExports = requireEscapeCarriage();
var lzString = { exports: {} };
lzString.exports;
var hasRequiredLzString;
function requireLzString() {
  if (hasRequiredLzString)
    return lzString.exports;
  hasRequiredLzString = 1;
  (function(module) {
    var LZString2 = function() {
      var f2 = String.fromCharCode;
      var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
      var baseReverseDic = {};
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {};
          for (var i = 0; i < alphabet.length; i++) {
            baseReverseDic[alphabet][alphabet.charAt(i)] = i;
          }
        }
        return baseReverseDic[alphabet][character];
      }
      var LZString3 = {
        compressToBase64: function(input) {
          if (input == null)
            return "";
          var res = LZString3._compress(input, 6, function(a2) {
            return keyStrBase64.charAt(a2);
          });
          switch (res.length % 4) {
            default:
            case 0:
              return res;
            case 1:
              return res + "===";
            case 2:
              return res + "==";
            case 3:
              return res + "=";
          }
        },
        decompressFromBase64: function(input) {
          if (input == null)
            return "";
          if (input == "")
            return null;
          return LZString3._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrBase64, input.charAt(index));
          });
        },
        compressToUTF16: function(input) {
          if (input == null)
            return "";
          return LZString3._compress(input, 15, function(a2) {
            return f2(a2 + 32);
          }) + " ";
        },
        decompressFromUTF16: function(compressed) {
          if (compressed == null)
            return "";
          if (compressed == "")
            return null;
          return LZString3._decompress(compressed.length, 16384, function(index) {
            return compressed.charCodeAt(index) - 32;
          });
        },
        //compress into uint8array (UCS-2 big endian format)
        compressToUint8Array: function(uncompressed) {
          var compressed = LZString3.compress(uncompressed);
          var buf = new Uint8Array(compressed.length * 2);
          for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
            var current_value = compressed.charCodeAt(i);
            buf[i * 2] = current_value >>> 8;
            buf[i * 2 + 1] = current_value % 256;
          }
          return buf;
        },
        //decompress from uint8array (UCS-2 big endian format)
        decompressFromUint8Array: function(compressed) {
          if (compressed === null || compressed === void 0) {
            return LZString3.decompress(compressed);
          } else {
            var buf = new Array(compressed.length / 2);
            for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {
              buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
            }
            var result = [];
            buf.forEach(function(c2) {
              result.push(f2(c2));
            });
            return LZString3.decompress(result.join(""));
          }
        },
        //compress into a string that is already URI encoded
        compressToEncodedURIComponent: function(input) {
          if (input == null)
            return "";
          return LZString3._compress(input, 6, function(a2) {
            return keyStrUriSafe.charAt(a2);
          });
        },
        //decompress from an output of compressToEncodedURIComponent
        decompressFromEncodedURIComponent: function(input) {
          if (input == null)
            return "";
          if (input == "")
            return null;
          input = input.replace(/ /g, "+");
          return LZString3._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrUriSafe, input.charAt(index));
          });
        },
        compress: function(uncompressed) {
          return LZString3._compress(uncompressed, 16, function(a2) {
            return f2(a2);
          });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null)
            return "";
          var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii);
            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
              context_dictionary[context_c] = context_dictSize++;
              context_dictionaryToCreate[context_c] = true;
            }
            context_wc = context_w + context_c;
            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
              context_w = context_wc;
            } else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 8; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 16; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              context_dictionary[context_wc] = context_dictSize++;
              context_w = String(context_c);
            }
          }
          if (context_w !== "") {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 8; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              } else {
                value = 1;
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 16; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i = 0; i < context_numBits; i++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
          }
          value = 2;
          for (i = 0; i < context_numBits; i++) {
            context_data_val = context_data_val << 1 | value & 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          while (true) {
            context_data_val = context_data_val << 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            } else
              context_data_position++;
          }
          return context_data.join("");
        },
        decompress: function(compressed) {
          if (compressed == null)
            return "";
          if (compressed == "")
            return null;
          return LZString3._decompress(compressed.length, 32768, function(index) {
            return compressed.charCodeAt(index);
          });
        },
        _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i, w2, bits, resb, maxpower, power, c2, data = { val: getNextValue(0), position: resetValue, index: 1 };
          for (i = 0; i < 3; i += 1) {
            dictionary[i] = i;
          }
          bits = 0;
          maxpower = Math.pow(2, 2);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (bits) {
            case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c2 = f2(bits);
              break;
            case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c2 = f2(bits);
              break;
            case 2:
              return "";
          }
          dictionary[3] = c2;
          w2 = c2;
          result.push(c2);
          while (true) {
            if (data.index > length) {
              return "";
            }
            bits = 0;
            maxpower = Math.pow(2, numBits);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (c2 = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f2(bits);
                c2 = dictSize - 1;
                enlargeIn--;
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f2(bits);
                c2 = dictSize - 1;
                enlargeIn--;
                break;
              case 2:
                return result.join("");
            }
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
            if (dictionary[c2]) {
              entry = dictionary[c2];
            } else {
              if (c2 === dictSize) {
                entry = w2 + w2.charAt(0);
              } else {
                return null;
              }
            }
            result.push(entry);
            dictionary[dictSize++] = w2 + entry.charAt(0);
            enlargeIn--;
            w2 = entry;
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
          }
        }
      };
      return LZString3;
    }();
    if (module != null) {
      module.exports = LZString2;
    } else if (typeof angular !== "undefined" && angular != null) {
      angular.module("LZString", []).factory("LZString", function() {
        return LZString2;
      });
    }
  })(lzString);
  return lzString.exports;
}
var lzStringExports = requireLzString();
const LZString = /* @__PURE__ */ getDefaultExportFromCjs(lzStringExports);
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s2, i = 1, n2 = arguments.length; i < n2; i++) {
      s2 = arguments[i];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s2); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i]))
        t2[p2[i]] = s2[p2[i]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P2, generator2) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator2.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator2["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray$1(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var SVG = function(props) {
  return jsxRuntimeExports.jsx("svg", __assign({ fill: "currentColor", height: "16", viewBox: "0 0 16 16", width: "16", xmlns: "http://www.w3.org/2000/svg" }, props), void 0);
};
var SignInIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, __assign({ viewBox: "0 0 48 48" }, { children: [jsxRuntimeExports.jsx("title", { children: "Sign in" }, void 0), jsxRuntimeExports.jsx("path", { d: "M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z" }, void 0)] }), void 0);
};
var SignOutIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, __assign({ viewBox: "0 0 48 48" }, { children: [jsxRuntimeExports.jsx("title", { children: "Sign out" }, void 0), jsxRuntimeExports.jsx("path", { d: "M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z" }, void 0)] }), void 0);
};
var RestartIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, __assign({ fill: "none", stroke: "currentColor" }, { children: [jsxRuntimeExports.jsx("title", { children: "Restart script" }, void 0), jsxRuntimeExports.jsx("path", { d: "M8 2C4.68629 2 2 4.68629 2 8C2 10.0946 3.07333 11.9385 4.7 13.0118", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M14.0005 7.9998C14.0005 5.82095 12.8391 3.91335 11.1016 2.8623", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M14.0003 2.3335H11.167C10.8908 2.3335 10.667 2.55735 10.667 2.8335V5.66683", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M1.99967 13.6665L4.83301 13.6665C5.10915 13.6665 5.33301 13.4426 5.33301 13.1665L5.33301 10.3332", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M10 10L12 12L10 14", strokeLinecap: "round", strokeLinejoin: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M14.667 14L12.667 14", strokeLinecap: "round", strokeLinejoin: "round" }, void 0)] }), void 0);
};
var RunIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, { children: [jsxRuntimeExports.jsx("title", { children: "Run sandbox" }, void 0), jsxRuntimeExports.jsx("path", { d: "M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z" }, void 0)] }, void 0);
};
var BackwardIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, { children: [jsxRuntimeExports.jsx("title", { children: "Click to go back" }, void 0), jsxRuntimeExports.jsx("path", { d: "M9.64645 12.3536C9.84171 12.5488 10.1583 12.5488 10.3536 12.3536C10.5488 12.1583 10.5488 11.8417 10.3536 11.6464L9.64645 12.3536ZM10.3536 4.35355C10.5488 4.15829 10.5488 3.84171 10.3536 3.64644C10.1583 3.45118 9.84171 3.45118 9.64645 3.64644L10.3536 4.35355ZM6.07072 7.92929L5.71716 7.57573L6.07072 7.92929ZM10.3536 11.6464L6.42427 7.71716L5.71716 8.42426L9.64645 12.3536L10.3536 11.6464ZM6.42427 8.28284L10.3536 4.35355L9.64645 3.64644L5.71716 7.57573L6.42427 8.28284ZM6.42427 7.71716C6.58048 7.87337 6.58048 8.12663 6.42427 8.28284L5.71716 7.57573C5.48285 7.81005 5.48285 8.18995 5.71716 8.42426L6.42427 7.71716Z" }, void 0)] }, void 0);
};
var ForwardIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, { children: [jsxRuntimeExports.jsx("title", { children: "Click to go forward" }, void 0), jsxRuntimeExports.jsx("path", { d: "M6.35355 3.64645C6.15829 3.45118 5.84171 3.45118 5.64645 3.64645C5.45118 3.84171 5.45118 4.15829 5.64645 4.35355L6.35355 3.64645ZM5.64645 11.6464C5.45118 11.8417 5.45118 12.1583 5.64645 12.3536C5.84171 12.5488 6.15829 12.5488 6.35355 12.3536L5.64645 11.6464ZM9.92929 8.07071L10.2828 8.42426L9.92929 8.07071ZM5.64645 4.35355L9.57574 8.28284L10.2828 7.57574L6.35355 3.64645L5.64645 4.35355ZM9.57574 7.71716L5.64645 11.6464L6.35355 12.3536L10.2828 8.42426L9.57574 7.71716ZM9.57574 8.28284C9.41952 8.12663 9.41953 7.87337 9.57574 7.71716L10.2828 8.42426C10.5172 8.18995 10.5172 7.81005 10.2828 7.57574L9.57574 8.28284Z" }, void 0)] }, void 0);
};
var RefreshIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, { children: [jsxRuntimeExports.jsx("title", { children: "Refresh preview" }, void 0), jsxRuntimeExports.jsx("path", { clipRule: "evenodd", d: "M3.83325 7.99992C3.83325 5.69867 5.69853 3.83325 7.99934 3.83325C9.81246 3.83325 11.3563 4.99195 11.9285 6.61097C11.9396 6.6425 11.9536 6.67221 11.97 6.69992H8.80005C8.52391 6.69992 8.30005 6.92378 8.30005 7.19992C8.30005 7.47606 8.52391 7.69992 8.80005 7.69992H12.5667C12.8981 7.69992 13.1667 7.43129 13.1667 7.09992V3.33325C13.1667 3.05711 12.9429 2.83325 12.6667 2.83325C12.3906 2.83325 12.1667 3.05711 12.1667 3.33325V4.94608C11.2268 3.66522 9.7106 2.83325 7.99934 2.83325C5.14613 2.83325 2.83325 5.14651 2.83325 7.99992C2.83325 10.8533 5.14613 13.1666 7.99934 13.1666C9.91218 13.1666 11.5815 12.1266 12.474 10.5836C12.6123 10.3446 12.5306 10.0387 12.2915 9.90044C12.0525 9.76218 11.7466 9.84387 11.6084 10.0829C10.8873 11.3296 9.54072 12.1666 7.99934 12.1666C5.69853 12.1666 3.83325 10.3012 3.83325 7.99992Z", fillRule: "evenodd" }, void 0)] }, void 0);
};
var CleanIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, __assign({ fill: "none", stroke: "currentColor" }, { children: [jsxRuntimeExports.jsx("title", { children: "Clean" }, void 0), jsxRuntimeExports.jsx("circle", { cx: "7.99998", cy: "8.00004", r: "4.66667", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M4.66669 4.66663L11.3334 11.3333" }, void 0)] }), void 0);
};
var ExportIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, __assign({ fill: "none", stroke: "currentColor" }, { children: [jsxRuntimeExports.jsx("title", { children: "Open on CodeSandbox" }, void 0), jsxRuntimeExports.jsx("path", { d: "M6.66665 3.33337H4.33331C3.78103 3.33337 3.33331 3.78109 3.33331 4.33337V11.6667C3.33331 12.219 3.78103 12.6667 4.33331 12.6667H11.6666C12.2189 12.6667 12.6666 12.219 12.6666 11.6667V9.33337", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M10 3.33337H12.5667C12.6219 3.33337 12.6667 3.37815 12.6667 3.43337V6.00004", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M7.33331 8.66668L12.5333 3.46667", strokeLinecap: "round" }, void 0)] }), void 0);
};
var CloseIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, __assign({ stroke: "currentColor" }, { children: [jsxRuntimeExports.jsx("title", { children: "Close file" }, void 0), jsxRuntimeExports.jsx("path", { d: "M12 4L4 12", strokeLinecap: "round" }, void 0), jsxRuntimeExports.jsx("path", { d: "M4 4L12 12", strokeLinecap: "round" }, void 0)] }), void 0);
};
var ConsoleIcon = function() {
  return jsxRuntimeExports.jsxs(SVG, { children: [jsxRuntimeExports.jsx("title", { children: "Open browser console" }, void 0), jsxRuntimeExports.jsx("path", { d: "M5.65871 3.62037C5.44905 3.44066 5.1334 3.46494 4.95368 3.6746C4.77397 3.88427 4.79825 4.19992 5.00792 4.37963L5.65871 3.62037ZM5.00792 11.6204C4.79825 11.8001 4.77397 12.1157 4.95368 12.3254C5.1334 12.5351 5.44905 12.5593 5.65871 12.3796L5.00792 11.6204ZM9.9114 7.92407L10.2368 7.54445L9.9114 7.92407ZM5.00792 4.37963L9.586 8.3037L10.2368 7.54445L5.65871 3.62037L5.00792 4.37963ZM9.586 7.6963L5.00792 11.6204L5.65871 12.3796L10.2368 8.45555L9.586 7.6963ZM9.586 8.3037C9.39976 8.14407 9.39976 7.85594 9.586 7.6963L10.2368 8.45555C10.5162 8.2161 10.5162 7.7839 10.2368 7.54445L9.586 8.3037Z" }, void 0), jsxRuntimeExports.jsx("path", { d: "M10 11.5C9.72386 11.5 9.5 11.7239 9.5 12C9.5 12.2761 9.72386 12.5 10 12.5V11.5ZM14.6667 12.5C14.9428 12.5 15.1667 12.2761 15.1667 12C15.1667 11.7239 14.9428 11.5 14.6667 11.5V12.5ZM10 12.5H14.6667V11.5H10V12.5Z" }, void 0)] }, void 0);
};
var _a$a;
var defaultLight = {
  colors: {
    surface1: "#ffffff",
    surface2: "#EFEFEF",
    surface3: "#F3F3F3",
    disabled: "#C5C5C5",
    base: "#323232",
    clickable: "#808080",
    hover: "#4D4D4D",
    accent: "#3973E0",
    error: "#EA3323",
    errorSurface: "#FCF1F0",
    warning: "#6A4516",
    warningSurface: "#FEF2C0"
  },
  syntax: {
    plain: "#151515",
    comment: { color: "#999", fontStyle: "italic" },
    keyword: "#7C5AE3",
    tag: "#0971F1",
    punctuation: "#3B3B3B",
    definition: "#85A600",
    property: "#3B3B3B",
    static: "#3B3B3B",
    string: "#2E6BD0"
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: "13px",
    lineHeight: "20px"
  }
};
var defaultDark = {
  colors: {
    surface1: "#151515",
    surface2: "#252525",
    surface3: "#2F2F2F",
    disabled: "#4D4D4D",
    base: "#808080",
    clickable: "#999999",
    hover: "#C5C5C5",
    accent: "#E5E5E5",
    error: "#FFB4A6",
    errorSurface: "#690000",
    warning: "#E7C400",
    warningSurface: "#3A3000"
  },
  syntax: {
    plain: "#FFFFFF",
    comment: { color: "#757575", fontStyle: "italic" },
    keyword: "#77B7D7",
    tag: "#DFAB5C",
    punctuation: "#ffffff",
    definition: "#86D9CA",
    property: "#77B7D7",
    static: "#C64640",
    string: "#977CDC"
  },
  font: {
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    size: "13px",
    lineHeight: "20px"
  }
};
var SANDPACK_THEMES = {
  light: defaultLight,
  dark: defaultDark,
  auto: typeof window !== "undefined" ? ((_a$a = window === null || window === void 0 ? void 0 : window.matchMedia) === null || _a$a === void 0 ? void 0 : _a$a.call(window, "(prefers-color-scheme: dark)").matches) ? defaultDark : defaultLight : defaultLight
};
var getFileName = function(filePath) {
  var lastIndexOfSlash = filePath.lastIndexOf("/");
  return filePath.slice(lastIndexOfSlash + 1);
};
var calculateNearestUniquePath = function(currentPath, otherPaths) {
  var currentPathParts = (currentPath[0] === "/" ? currentPath.slice(1) : currentPath).split("/");
  var resultPathParts = [];
  if (currentPathParts.length === 1) {
    resultPathParts.unshift(currentPathParts[0]);
  } else {
    for (var fileIndex = 0; fileIndex < otherPaths.length; fileIndex++) {
      var otherPathParts = otherPaths[fileIndex].split("/");
      for (var partsFromEnd = 1; partsFromEnd <= currentPathParts.length; partsFromEnd++) {
        var currentPathPart = currentPathParts[currentPathParts.length - partsFromEnd];
        var otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd];
        if (resultPathParts.length < partsFromEnd) {
          resultPathParts.unshift(currentPathPart);
        }
        if (currentPathPart !== otherPathPart) {
          break;
        }
      }
    }
  }
  if (resultPathParts.length < currentPathParts.length) {
    resultPathParts.unshift("..");
  }
  return resultPathParts.join("/");
};
var isDarkColor = function(color2) {
  var r2 = 0;
  var g2 = 0;
  var b2 = 0;
  if (color2.startsWith("#")) {
    if (color2.length < 7) {
      return true;
    }
    r2 = parseInt(color2.substr(1, 2), 16);
    g2 = parseInt(color2.substr(3, 2), 16);
    b2 = parseInt(color2.substr(5, 2), 16);
  } else {
    var rgbValues = color2.replace("rgb(", "").replace("rgba(", "").replace(")", "").split(",");
    if (rgbValues.length < 3) {
      return true;
    }
    r2 = parseInt(rgbValues[0], 10);
    g2 = parseInt(rgbValues[1], 10);
    b2 = parseInt(rgbValues[2], 10);
  }
  var yiq = (r2 * 299 + g2 * 587 + b2 * 114) / 1e3;
  return yiq < 128;
};
var lastCount = 0;
var generateRandomId = function() {
  var random = +(Date.now().toString(10).substr(0, 4) + lastCount++);
  return random.toString(16);
};
var _a$9;
var THEME_PREFIX = "sp";
var createTheme$1 = (_a$9 = X({
  prefix: THEME_PREFIX
}), _a$9.createTheme), css = _a$9.css;
_a$9.getCssText;
var keyframes = _a$9.keyframes;
var defaultVariables = {
  space: new Array(11).fill(" ").reduce(function(acc, _, index) {
    var _a2;
    return __assign(__assign({}, acc), (_a2 = {}, _a2[index + 1] = (index + 1) * 4 + "px", _a2));
  }, {}),
  border: { radius: "4px" },
  layout: { height: "300px", headerHeight: "40px" },
  transitions: { "default": "150ms ease" },
  zIndices: {
    base: "1",
    overlay: "2",
    top: "3"
  }
};
var standardizeStitchesTheme = function(theme3) {
  var syntaxEntries = Object.entries(theme3.syntax);
  var syntax = syntaxEntries.reduce(function(tokenAcc, _a2) {
    var _b2;
    var tokenName = _a2[0], tokenValue = _a2[1];
    var newValues = (_b2 = {}, _b2["color-" + tokenName] = tokenValue, _b2);
    if (typeof tokenValue === "object") {
      newValues = Object.entries(tokenValue).reduce(function(valueAcc, _a3) {
        var _b3;
        var styleProp = _a3[0], styleValue = _a3[1];
        return __assign(__assign({}, valueAcc), (_b3 = {}, _b3[styleProp + "-" + tokenName] = styleValue, _b3));
      }, {});
    }
    return __assign(__assign({}, tokenAcc), newValues);
  }, {});
  return __assign(__assign({}, defaultVariables), { colors: theme3.colors, font: theme3.font, syntax });
};
var standardizeTheme = function(inputTheme) {
  var _a2, _b2, _c2, _d, _e;
  if (inputTheme === void 0) {
    inputTheme = "light";
  }
  var defaultLightThemeKey = "default";
  if (typeof inputTheme === "string") {
    var predefinedTheme = SANDPACK_THEMES[inputTheme];
    if (!predefinedTheme) {
      throw new Error("[sandpack-react]: invalid theme '" + inputTheme + "' provided.");
    }
    return {
      theme: predefinedTheme,
      id: inputTheme,
      mode: isDarkColor(predefinedTheme.colors.surface1) ? "dark" : "light"
    };
  }
  var mode = isDarkColor((_b2 = (_a2 = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) === null || _a2 === void 0 ? void 0 : _a2.surface1) !== null && _b2 !== void 0 ? _b2 : defaultLight.colors.surface1) ? "dark" : "light";
  var baseTheme2 = mode === "dark" ? defaultDark : defaultLight;
  var colorsByMode = __assign(__assign({}, baseTheme2.colors), (_c2 = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) !== null && _c2 !== void 0 ? _c2 : {});
  var syntaxByMode = __assign(__assign({}, baseTheme2.syntax), (_d = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.syntax) !== null && _d !== void 0 ? _d : {});
  var fontByMode = __assign(__assign({}, baseTheme2.font), (_e = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.font) !== null && _e !== void 0 ? _e : {});
  var theme3 = {
    colors: colorsByMode,
    syntax: syntaxByMode,
    font: fontByMode
  };
  var id2 = inputTheme ? simpleHashFunction(JSON.stringify(theme3)) : defaultLightThemeKey;
  return {
    theme: theme3,
    id: "sp-" + id2,
    mode
  };
};
var simpleHashFunction = function(str) {
  var hash2 = 0;
  for (var i = 0; i < str.length; hash2 &= hash2) {
    hash2 = 31 * hash2 + str.charCodeAt(i++);
  }
  return Math.abs(hash2);
};
var fakeCss = function() {
  return "";
};
fakeCss.toString = fakeCss;
var ClassNamesContext = reactExports.createContext({});
var ClassNamesProvider = function(_a2) {
  var children = _a2.children, classes = _a2.classes;
  return jsxRuntimeExports.jsx(ClassNamesContext.Provider, __assign({ value: classes || {} }, { children }), void 0);
};
var useClassNames = function() {
  var contextClassNames = reactExports.useContext(ClassNamesContext);
  return function sandpackClassNames(customClassName, allClassNames) {
    if (allClassNames === void 0) {
      allClassNames = [];
    }
    var custom = THEME_PREFIX + "-" + customClassName;
    return joinClassNames.apply(void 0, __spreadArray$1(__spreadArray$1([], allClassNames, false), [custom, contextClassNames[custom]], false));
  };
};
var joinClassNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(Boolean).join(" ");
};
var wrapperClassName$3 = css({
  all: "initial",
  fontSize: "$font$size",
  fontFamily: "$font$body",
  display: "block",
  boxSizing: "border-box",
  textRendering: "optimizeLegibility",
  WebkitTapHighlightColor: "transparent",
  WebkitFontSmoothing: "subpixel-antialiased",
  variants: {
    variant: {
      dark: { colorScheme: "dark" },
      light: { colorScheme: "light" }
    }
  },
  "@media screen and (min-resolution: 2dppx)": {
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale"
  },
  "*": { boxSizing: "border-box" },
  ".sp-wrapper:focus": { outline: "0" }
});
var SandpackThemeContext = reactExports.createContext({
  theme: defaultLight,
  id: "light",
  mode: "light"
});
var SandpackThemeProvider = function(_a2) {
  var themeFromProps = _a2.theme, children = _a2.children, className = _a2.className, props = __rest(_a2, ["theme", "children", "className"]);
  var _b2 = standardizeTheme(themeFromProps), theme3 = _b2.theme, id2 = _b2.id, mode = _b2.mode;
  var classNames = useClassNames();
  var themeClassName = reactExports.useMemo(function() {
    return createTheme$1(id2, standardizeStitchesTheme(theme3));
  }, [theme3, id2]);
  return jsxRuntimeExports.jsx(SandpackThemeContext.Provider, __assign({ value: { theme: theme3, id: id2, mode } }, { children: jsxRuntimeExports.jsx("div", __assign({ className: classNames("wrapper", [
    themeClassName,
    wrapperClassName$3({ variant: mode }),
    className
  ]) }, props, { children }), void 0) }), void 0);
};
SandpackThemeContext.Consumer;
var commonFiles = {
  "/styles.css": {
    code: "body {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n\nh1 {\n  font-size: 1.5rem;\n}"
  }
};
var ASTRO_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/pages/index.astro": {
      code: '---\nimport "../styles.css";\nconst data = "world";\n---\n\n<h1>Hello {data}</h1>\n\n<style>\n  h1 {\n    font-size: 1.5rem;\n  }\n</style>'
    },
    ".env": {
      code: 'ASTRO_TELEMETRY_DISABLED="1"'
    },
    "/package.json": {
      code: JSON.stringify({
        dependencies: {
          astro: "^1.6.12",
          "esbuild-wasm": "^0.15.16"
        },
        scripts: {
          dev: "astro dev",
          start: "astro dev",
          build: "astro build",
          preview: "astro preview",
          astro: "astro"
        }
      })
    }
  },
  main: "/src/pages/index.astro",
  environment: "node"
};
var NEXTJS_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/pages/_app.js": {
    code: "import '../styles.css'\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}"
  }, "/pages/index.js": {
    code: 'export default function Home({ data }) {\n  return (\n    <div>\n      <h1>Hello {data}</h1>\n    </div>\n  );\n}\n  \nexport function getServerSideProps() {\n  return {\n    props: { data: "world" },\n  }\n}\n'
  }, "/next.config.js": {
    code: "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n}\n\nmodule.exports = nextConfig\n"
  }, "/package.json": {
    code: JSON.stringify({
      name: "my-app",
      version: "0.1.0",
      private: true,
      scripts: {
        dev: "NEXT_TELEMETRY_DISABLED=1 next dev",
        build: "next build",
        start: "next start",
        lint: "next lint"
      },
      dependencies: {
        next: "12.1.6",
        react: "18.2.0",
        "react-dom": "18.2.0",
        "@next/swc-wasm-nodejs": "12.1.6"
      }
    })
  } }),
  main: "/pages/index.js",
  environment: "node"
};
var NODE_TEMPLATE = {
  files: {
    "/index.js": {
      code: "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n  res.end('Hello world');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});"
    },
    "/package.json": {
      code: JSON.stringify({
        dependencies: {},
        scripts: { start: "node index.js" },
        main: "index.js"
      })
    }
  },
  main: "/index.js",
  environment: "node"
};
var VITE_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/index.js": {
    code: 'import "./styles.css";\n\ndocument.getElementById("app").innerHTML = `\n<h1>Hello world</h1>\n`;\n'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/index.js"><\/script>\n  </body>\n</html>\n'
  }, "/package.json": {
    code: JSON.stringify({
      scripts: {
        dev: "vite",
        build: "vite build",
        preview: "vite preview"
      },
      devDependencies: {
        vite: "4.1.4",
        "esbuild-wasm": "0.17.12"
      }
    })
  } }),
  main: "/index.js",
  environment: "node"
};
var VITE_REACT_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.jsx": {
    code: 'export default function App() {\n  const data = "world"\n\n  return <h1>Hello {data}</h1>\n}\n'
  }, "/index.jsx": {
    code: 'import { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = createRoot(document.getElementById("root"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.jsx"><\/script>\n  </body>\n</html>\n'
  }, "/package.json": {
    code: JSON.stringify({
      scripts: {
        dev: "vite",
        build: "vite build",
        preview: "vite preview"
      },
      dependencies: {
        react: "^18.2.0",
        "react-dom": "^18.2.0"
      },
      devDependencies: {
        "@vitejs/plugin-react": "3.1.0",
        vite: "4.1.4",
        "esbuild-wasm": "0.17.12"
      }
    })
  }, "/vite.config.js": {
    code: 'import { defineConfig } from "vite";\nimport react from "@vitejs/plugin-react";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n});\n'
  } }),
  main: "/App.jsx",
  environment: "node"
};
var VITE_REACT_TS_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.tsx": {
    code: 'export default function App() {\n  const data: string = "world"\n\n  return <h1>Hello {data}</h1>\n}\n'
  }, "/index.tsx": {
    code: 'import { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\nimport React from "react";\n\nconst root = createRoot(document.getElementById("root") as HTMLElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.tsx"><\/script>\n  </body>\n</html>\n'
  }, "/tsconfig.json": {
    code: JSON.stringify({
      compilerOptions: {
        target: "ESNext",
        useDefineForClassFields: true,
        lib: ["DOM", "DOM.Iterable", "ESNext"],
        allowJs: false,
        skipLibCheck: true,
        esModuleInterop: false,
        allowSyntheticDefaultImports: true,
        strict: true,
        forceConsistentCasingInFileNames: true,
        module: "ESNext",
        moduleResolution: "Node",
        resolveJsonModule: true,
        isolatedModules: true,
        noEmit: true,
        jsx: "react-jsx"
      },
      include: ["src"],
      references: [{ path: "./tsconfig.node.json" }]
    }, null, 2)
  }, "/tsconfig.node.json": {
    code: JSON.stringify({
      compilerOptions: {
        composite: true,
        module: "ESNext",
        moduleResolution: "Node",
        allowSyntheticDefaultImports: true
      },
      include: ["vite.config.ts"]
    }, null, 2)
  }, "/package.json": {
    code: JSON.stringify({
      scripts: {
        dev: "vite",
        build: "tsc && vite build",
        preview: "vite preview"
      },
      dependencies: {
        react: "^18.2.0",
        "react-dom": "^18.2.0"
      },
      devDependencies: {
        "@types/react": "^18.0.28",
        "@types/react-dom": "^18.0.11",
        "@vitejs/plugin-react": "^3.1.0",
        typescript: "^4.9.5",
        vite: "4.1.4",
        "esbuild-wasm": "^0.17.12"
      }
    }, null, 2)
  }, "/vite-env.d.ts": {
    code: '/// <reference types="vite/client" />'
  }, "/vite.config.ts": {
    code: "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})\n"
  } }),
  main: "/App.tsx",
  environment: "node"
};
var VITE_PREACT_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.jsx": {
    code: 'export default function App() {\n  const data = "world"\n\n  return <h1>Hello {data}</h1>\n}\n'
  }, "/index.jsx": {
    code: 'import { render } from "preact";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = document.getElementById("root");\nrender(<App />, root);\n'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.jsx"><\/script>\n  </body>\n</html>\n'
  }, "/package.json": {
    code: JSON.stringify({
      scripts: {
        dev: "vite",
        build: "vite build",
        preview: "vite preview"
      },
      dependencies: {
        "preact": "^10.16.0"
      },
      devDependencies: {
        "@preact/preset-vite": "^2.5.0",
        vite: "4.1.4",
        "esbuild-wasm": "0.17.12"
      }
    })
  }, "/vite.config.js": {
    code: `import { defineConfig } from "vite";
import preact from '@preact/preset-vite'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [preact()],
});
`
  } }),
  main: "/App.jsx",
  environment: "node"
};
var VITE_PREACT_TS_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.tsx": {
    code: 'export default function App() {\n  const data: string = "world"\n\n  return <h1>Hello {data}</h1>\n}\n'
  }, "/index.tsx": {
    code: 'import { render } from "preact";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = document.getElementById("root") as HTMLElement;\nrender(<App />, root);\n'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/index.tsx"><\/script>\n  </body>\n</html>\n'
  }, "/tsconfig.json": {
    code: JSON.stringify({
      compilerOptions: {
        target: "ESNext",
        useDefineForClassFields: true,
        lib: ["DOM", "DOM.Iterable", "ESNext"],
        allowJs: false,
        skipLibCheck: true,
        esModuleInterop: false,
        allowSyntheticDefaultImports: true,
        strict: true,
        forceConsistentCasingInFileNames: true,
        module: "ESNext",
        moduleResolution: "Node",
        resolveJsonModule: true,
        isolatedModules: true,
        noEmit: true,
        jsx: "react-jsx",
        jsxImportSource: "preact"
      },
      include: ["src"],
      references: [{ path: "./tsconfig.node.json" }]
    }, null, 2)
  }, "/tsconfig.node.json": {
    code: JSON.stringify({
      compilerOptions: {
        composite: true,
        module: "ESNext",
        moduleResolution: "Node",
        allowSyntheticDefaultImports: true
      },
      include: ["vite.config.ts"]
    }, null, 2)
  }, "/package.json": {
    code: JSON.stringify({
      scripts: {
        dev: "vite",
        build: "tsc && vite build",
        preview: "vite preview"
      },
      dependencies: {
        "preact": "^10.16.0"
      },
      devDependencies: {
        "@preact/preset-vite": "^2.5.0",
        typescript: "^4.9.5",
        vite: "4.1.4",
        "esbuild-wasm": "^0.17.12"
      }
    }, null, 2)
  }, "/vite-env.d.ts": {
    code: '/// <reference types="vite/client" />'
  }, "/vite.config.ts": {
    code: "import { defineConfig } from 'vite'\nimport preact from '@preact/preset-vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [preact()],\n})\n"
  } }),
  main: "/App.tsx",
  environment: "node"
};
var VITE_SVELTE_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/App.svelte": {
      code: '<script>\nconst data = "world";\n<\/script>\n\n<h1>Hello {data}</h1>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>'
    },
    "/src/main.js": {
      code: `import App from './App.svelte'
import "./styles.css"

const app = new App({
  target: document.getElementById('app'),
})

export default app`
    },
    "/index.html": {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.js"><\/script>\n  </body>\n</html>\n'
    },
    "/vite.config.js": {
      code: "import { defineConfig } from 'vite'\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svelte()],\n})"
    },
    "/package.json": {
      code: JSON.stringify({
        type: "module",
        scripts: {
          dev: "vite"
        },
        devDependencies: {
          "@sveltejs/vite-plugin-svelte": "^2.0.2",
          svelte: "^3.55.1",
          vite: "4.0.4",
          "esbuild-wasm": "^0.17.12"
        }
      })
    }
  },
  main: "/src/App.svelte",
  environment: "node"
};
var VITE_SVELTE_TS_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/App.svelte": {
      code: '<script lang="ts">\nconst data: string = "world";\n<\/script>\n\n<h1>Hello {data}</h1>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>'
    },
    "/src/main.ts": {
      code: `import App from './App.svelte'
import "./styles.css"

const app = new App({
  target: document.getElementById('app'),
})

export default app`
    },
    "/index.html": {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.ts"><\/script>\n  </body>\n</html>\n'
    },
    "/vite-env.d.ts": {
      code: '/// <reference types="svelte" />\n/// <reference types="vite/client" />'
    },
    "svelte.config.js": {
      code: "import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'\n\nexport default {\n  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\n  // for more information about preprocessors\n  preprocess: vitePreprocess(),\n}\n"
    },
    "/vite.config.ts": {
      code: "import { defineConfig } from 'vite'\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svelte()],\n})"
    },
    "tsconfig.json": {
      code: JSON.stringify({
        "extends": "@tsconfig/svelte/tsconfig.json",
        compilerOptions: {
          target: "ESNext",
          useDefineForClassFields: true,
          module: "ESNext",
          resolveJsonModule: true,
          allowJs: true,
          checkJs: true,
          isolatedModules: true
        },
        include: [
          "src/**/*.d.ts",
          "src/**/*.ts",
          "src/**/*.js",
          "src/**/*.svelte"
        ],
        references: [{ path: "./tsconfig.node.json" }]
      }, null, 2)
    },
    "tsconfig.node.json": {
      code: JSON.stringify({
        compilerOptions: {
          composite: true,
          module: "ESNext",
          moduleResolution: "Node"
        },
        include: ["vite.config.ts"]
      }, null, 2)
    },
    "/package.json": {
      code: JSON.stringify({
        type: "module",
        scripts: {
          dev: "vite"
        },
        devDependencies: {
          "@sveltejs/vite-plugin-svelte": "^2.0.2",
          "@tsconfig/svelte": "^3.0.0",
          svelte: "^3.55.1",
          "svelte-check": "^2.10.3",
          tslib: "^2.5.0",
          vite: "4.1.4",
          "esbuild-wasm": "^0.17.12"
        }
      }, null, 2)
    }
  },
  main: "/src/App.svelte",
  environment: "node"
};
var VITE_VUE_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/App.vue": {
      code: '<script setup>\nimport { ref } from "vue";\n\nconst data = ref("world");\n<\/script>\n\n<template>\n  <h1>Hello {{ data }}</h1>\n</template>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>'
    },
    "/src/main.js": {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css"
            
createApp(App).mount('#app')            
`
    },
    "/index.html": {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.js"><\/script>\n  </body>\n</html>\n'
    },
    "/vite.config.js": {
      code: "import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()]\n})\n"
    },
    "/package.json": {
      code: JSON.stringify({
        scripts: {
          dev: "vite",
          build: "vite build",
          preview: "vite preview"
        },
        dependencies: {
          vue: "^3.2.45"
        },
        devDependencies: {
          "@vitejs/plugin-vue": "3.2.0",
          vite: "4.1.4",
          "esbuild-wasm": "0.17.12"
        }
      })
    }
  },
  main: "/src/App.vue",
  environment: "node"
};
var VITE_VUE_TS_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/App.vue": {
      code: '<script setup lang="ts">\nimport { ref } from "vue";\n\nconst data = ref<string>("world");\n<\/script>\n\n<template>\n  <h1>Hello {{ data }}</h1>\n</template>\n\n<style>\nh1 {\n  font-size: 1.5rem;\n}\n</style>'
    },
    "/src/main.ts": {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css"

createApp(App).mount('#app')
`
    },
    "/index.html": {
      code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.ts"><\/script>\n  </body>\n</html>\n'
    },
    "/vite-env.d.ts": {
      code: '/// <reference types="vite/client" />'
    },
    "/vite.config.ts": {
      code: "import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()]\n})\n"
    },
    "tsconfig.json": {
      code: JSON.stringify({
        compilerOptions: {
          target: "ESNext",
          useDefineForClassFields: true,
          module: "ESNext",
          moduleResolution: "Node",
          strict: true,
          jsx: "preserve",
          resolveJsonModule: true,
          isolatedModules: true,
          esModuleInterop: true,
          lib: ["ESNext", "DOM"],
          skipLibCheck: true,
          noEmit: true
        },
        include: [
          "src/**/*.ts",
          "src/**/*.d.ts",
          "src/**/*.tsx",
          "src/**/*.vue"
        ],
        references: [{ path: "./tsconfig.node.json" }]
      }, null, 2)
    },
    "tsconfig.node.json": {
      code: JSON.stringify({
        compilerOptions: {
          composite: true,
          module: "ESNext",
          moduleResolution: "Node",
          allowSyntheticDefaultImports: true
        },
        include: ["vite.config.ts"]
      }, null, 2)
    },
    "/package.json": {
      code: JSON.stringify({
        scripts: {
          dev: "vite",
          build: "tsc && vite build",
          preview: "vite preview"
        },
        dependencies: {
          vue: "^3.2.47"
        },
        devDependencies: {
          "@vitejs/plugin-vue": "^4.0.0",
          vite: "4.1.4",
          "vue-tsc": "^1.2.0",
          typescript: "^4.9.5",
          "esbuild-wasm": "^0.17.12"
        }
      }, null, 2)
    }
  },
  main: "/src/App.vue",
  environment: "node"
};
var ANGULAR_TEMPLATE = {
  files: {
    "/src/app/app.component.css": commonFiles["/styles.css"],
    "/src/app/app.component.html": {
      code: "<div>\n<h1>{{ helloWorld }}</h1>\n</div>     \n"
    },
    "/src/app/app.component.ts": {
      code: 'import { Component } from "@angular/core";\n\n@Component({\n  selector: "app-root",\n  templateUrl: "./app.component.html",\n  styleUrls: ["./app.component.css"]\n})\nexport class AppComponent {\n  helloWorld = "Hello world";\n}           \n'
    },
    "/src/app/app.module.ts": {
      code: 'import { BrowserModule } from "@angular/platform-browser";\nimport { NgModule } from "@angular/core";\n      \nimport { AppComponent } from "./app.component";\n      \n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}       \n'
    },
    "/src/index.html": {
      code: '<!doctype html>\n<html lang="en">\n      \n<head>\n  <meta charset="utf-8">\n  <title>Angular</title>\n  <base href="/">\n      \n  <meta name="viewport" content="width=device-width, initial-scale=1">\n  <link rel="icon" type="image/x-icon" href="favicon.ico">\n</head>\n      \n<body>\n   <app-root></app-root>\n</body>\n      \n</html>\n'
    },
    "/src/main.ts": {
      code: 'import { enableProdMode } from "@angular/core";\nimport { platformBrowserDynamic } from "@angular/platform-browser-dynamic";\n      \nimport { AppModule } from "./app/app.module";      \n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n      \n'
    },
    "/src/polyfills.ts": {
      code: 'import "core-js/proposals/reflect-metadata";   \n      import "zone.js/dist/zone";\n'
    },
    "/package.json": {
      code: JSON.stringify({
        dependencies: {
          "@angular/core": "^11.2.0",
          "@angular/platform-browser": "^11.2.0",
          "@angular/platform-browser-dynamic": "^11.2.0",
          "@angular/common": "^11.2.0",
          "@angular/compiler": "^11.2.0",
          "zone.js": "0.11.3",
          "core-js": "3.8.3",
          rxjs: "6.6.3"
        },
        main: "/src/main.ts"
      })
    }
  },
  main: "/src/app/app.component.ts",
  environment: "angular-cli"
};
var REACT_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.js": {
    code: "export default function App() {\n  return <h1>Hello world</h1>\n}\n"
  }, "/index.js": {
    code: 'import React, { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = createRoot(document.getElementById("root"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);'
  }, "/public/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id="root"></div>\n  </body>\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {
        react: "^18.0.0",
        "react-dom": "^18.0.0",
        "react-scripts": "^5.0.0"
      },
      main: "/index.js"
    })
  } }),
  main: "/App.js",
  environment: "create-react-app"
};
var REACT_TYPESCRIPT_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "tsconfig.json": {
    code: '{\n  "include": [\n    "./**/*"\n  ],\n  "compilerOptions": {\n    "strict": true,\n    "esModuleInterop": true,\n    "lib": [ "dom", "es2015" ],\n    "jsx": "react-jsx"\n  }\n}'
  }, "/App.tsx": {
    code: "export default function App(): JSX.Element {\n  return <h1>Hello world</h1>\n}\n"
  }, "/index.tsx": {
    code: 'import React, { StrictMode } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./styles.css";\n\nimport App from "./App";\n\nconst root = createRoot(document.getElementById("root"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);'
  }, "/public/index.html": {
    code: '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body>\n    <div id="root"></div>\n  </body>\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {
        react: "^18.0.0",
        "react-dom": "^18.0.0",
        "react-scripts": "^4.0.0"
      },
      devDependencies: {
        "@types/react": "^18.0.0",
        "@types/react-dom": "^18.0.0",
        typescript: "^4.0.0"
      },
      main: "/index.tsx"
    })
  } }),
  main: "/App.tsx",
  environment: "create-react-app"
};
var SOLID_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.tsx": {
    code: 'import { Component } from "solid-js";\n\nconst App: Component = () => {\n  return <h1>Hello world</h1>\n};\n\nexport default App;'
  }, "/index.tsx": {
    code: 'import { render } from "solid-js/web";\nimport App from "./App";\n\nimport "./styles.css";\n\nrender(() => <App />, document.getElementById("app"));'
  }, "/index.html": {
    code: '<html>\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n<body>\n  <div id="app"></div>\n  <script src="src/index.tsx"><\/script>\n</body>\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {
        "solid-js": "1.3.15"
      },
      main: "/index.tsx"
    })
  } }),
  main: "/App.tsx",
  environment: "solid"
};
var SVELTE_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/App.svelte": {
    code: "<style>\n  h1 {\n    font-size: 1.5rem;\n  }\n</style>\n\n<script>\n  let name = 'world';\n<\/script>\n\n<main>\n  <h1>Hello {name}</h1>\n</main>"
  }, "/index.js": {
    code: 'import App from "./App.svelte";\nimport "./styles.css";\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;\n      '
  }, "/public/index.html": {
    code: '<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf8" />\n    <meta name="viewport" content="width=device-width" />\n\n    <title>Svelte app</title>\n\n    <link rel="stylesheet" href="public/bundle.css" />\n  </head>\n\n  <body>\n    <script src="bundle.js"><\/script>\n  </body>\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {
        svelte: "^3.0.0"
      },
      main: "/index.js"
    })
  } }),
  main: "/App.svelte",
  environment: "svelte"
};
var TEST_TYPESCRIPT_TEMPLATE = {
  files: {
    "tsconfig.json": {
      code: '{\n  "include": [\n    "./**/*"\n  ],\n  "compilerOptions": {\n    "strict": true,\n    "esModuleInterop": true,\n    "lib": [ "dom", "es2015" ],\n    "jsx": "react-jsx"\n  }\n}'
    },
    "/add.ts": {
      code: "export const add = (a: number, b: number): number => a + b;"
    },
    "/add.test.ts": {
      code: "import { add } from './add';\n\ndescribe('add', () => {\n  test('Commutative Law of Addition', () => {\n    expect(add(1, 2)).toBe(add(2, 1));\n  });\n});"
    },
    "package.json": {
      code: JSON.stringify({
        dependencies: {},
        devDependencies: { typescript: "^4.0.0" },
        main: "/add.ts"
      })
    }
  },
  main: "/add.test.ts",
  environment: "parcel",
  mode: "tests"
};
var VANILLA_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/index.js": {
    code: 'import "./styles.css";\n\ndocument.getElementById("app").innerHTML = `\n<h1>Hello world</h1>\n`;\n'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n\n<body>\n  <div id="app"></div>\n\n  <script src="index.js">\n  <\/script>\n</body>\n\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {},
      main: "/index.js"
    })
  } }),
  main: "/index.js",
  environment: "parcel"
};
var VANILLA_TYPESCRIPT_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "tsconfig.json": {
    code: '{\n  "compilerOptions": {\n    "strict": true,\n    "module": "commonjs",\n    "jsx": "preserve",\n    "esModuleInterop": true,\n    "sourceMap": true,\n    "allowJs": true,\n    "lib": [\n      "es6",\n      "dom"\n    ],\n    "rootDir": "src",\n    "moduleResolution": "node"\n  }\n}'
  }, "/index.ts": {
    code: 'import "./styles.css";\n\ndocument.getElementById("app").innerHTML = `\n<h1>Hello world</h1>\n`;\n'
  }, "/index.html": {
    code: '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n</head>\n\n<body>\n  <div id="app"></div>\n\n  <script src="index.ts">\n  <\/script>\n</body>\n\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {},
      devDependencies: {
        typescript: "^4.0.0"
      },
      main: "/index.ts"
    })
  } }),
  main: "/index.ts",
  environment: "parcel"
};
var VUE_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/App.vue": {
      code: "<template>\n  <h1>Hello {{ msg }}</h1>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nconst msg = ref('world');\n<\/script>"
    },
    "/src/main.js": {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css";

createApp(App).mount('#app')
`
    },
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>codesandbox</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but codesandbox doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
`
    },
    "/package.json": {
      code: JSON.stringify({
        name: "vue3",
        version: "0.1.0",
        private: true,
        main: "/src/main.js",
        scripts: {
          serve: "vue-cli-service serve",
          build: "vue-cli-service build"
        },
        dependencies: {
          "core-js": "^3.26.1",
          vue: "^3.2.45"
        },
        devDependencies: {
          "@vue/cli-plugin-babel": "^5.0.8",
          "@vue/cli-service": "^5.0.8"
        }
      })
    }
  },
  main: "/src/App.vue",
  environment: "vue-cli"
};
var VUE_TS_TEMPLATE = {
  files: {
    "/src/styles.css": commonFiles["/styles.css"],
    "/src/App.vue": {
      code: `<template>
  <h1>Hello {{ msg }}</h1>
</template>

<script setup lang="ts">
import { ref } from 'vue';
const msg = ref<string>('world');
<\/script>`
    },
    "/src/main.ts": {
      code: `import { createApp } from 'vue'
import App from './App.vue'
import "./styles.css";

createApp(App).mount('#app')
`
    },
    "/src/shims-vue.d.ts": '/* eslint-disable */\ndeclare module "*.vue" {\n  import type { DefineComponent } from "vue";\n  const component: DefineComponent<{}, {}, any>;\n  export default component;\n}',
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>codesandbox</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but codesandbox doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
`
    },
    "/package.json": {
      code: JSON.stringify({
        name: "vue3-ts",
        version: "0.1.0",
        private: true,
        main: "/src/main.ts",
        scripts: {
          serve: "vue-cli-service serve",
          build: "vue-cli-service build"
        },
        dependencies: {
          "core-js": "^3.26.1",
          vue: "^3.2.45"
        },
        devDependencies: {
          "@vue/cli-plugin-babel": "^5.0.8",
          "@vue/cli-plugin-typescript": "^5.0.8",
          "@vue/cli-service": "^5.0.8",
          typescript: "^4.9.3"
        }
      })
    },
    "/tsconfig.json": {
      code: JSON.stringify({
        compilerOptions: {
          target: "esnext",
          module: "esnext",
          strict: true,
          jsx: "preserve",
          moduleResolution: "node",
          experimentalDecorators: true,
          skipLibCheck: true,
          esModuleInterop: true,
          allowSyntheticDefaultImports: true,
          forceConsistentCasingInFileNames: true,
          useDefineForClassFields: true,
          sourceMap: false,
          baseUrl: ".",
          types: ["webpack-env"],
          paths: {
            "@/*": ["src/*"]
          },
          lib: ["esnext", "dom", "dom.iterable", "scripthost"]
        },
        include: [
          "src/**/*.ts",
          "src/**/*.tsx",
          "src/**/*.vue",
          "tests/**/*.ts",
          "tests/**/*.tsx"
        ],
        exclude: ["node_modules"]
      })
    }
  },
  main: "/src/App.vue",
  environment: "vue-cli"
};
var STATIC_TEMPLATE = {
  files: __assign(__assign({}, commonFiles), { "/index.html": {
    code: '<!DOCTYPE html>\n<html>\n\n<head>\n  <title>Parcel Sandbox</title>\n  <meta charset="UTF-8" />\n  <link rel="stylesheet" href="/styles.css" />\n</head>\n\n<body>\n  <h1>Hello world</h1>\n</body>\n\n</html>'
  }, "/package.json": {
    code: JSON.stringify({
      dependencies: {},
      main: "/index.html"
    })
  } }),
  main: "/index.html",
  environment: "static"
};
var SANDBOX_TEMPLATES = {
  static: STATIC_TEMPLATE,
  angular: ANGULAR_TEMPLATE,
  react: REACT_TEMPLATE,
  "react-ts": REACT_TYPESCRIPT_TEMPLATE,
  solid: SOLID_TEMPLATE,
  svelte: SVELTE_TEMPLATE,
  "test-ts": TEST_TYPESCRIPT_TEMPLATE,
  "vanilla-ts": VANILLA_TYPESCRIPT_TEMPLATE,
  vanilla: VANILLA_TEMPLATE,
  vue: VUE_TEMPLATE,
  "vue-ts": VUE_TS_TEMPLATE,
  node: NODE_TEMPLATE,
  nextjs: NEXTJS_TEMPLATE,
  vite: VITE_TEMPLATE,
  "vite-react": VITE_REACT_TEMPLATE,
  "vite-react-ts": VITE_REACT_TS_TEMPLATE,
  "vite-preact": VITE_PREACT_TEMPLATE,
  "vite-preact-ts": VITE_PREACT_TS_TEMPLATE,
  "vite-vue": VITE_VUE_TEMPLATE,
  "vite-vue-ts": VITE_VUE_TS_TEMPLATE,
  "vite-svelte": VITE_SVELTE_TEMPLATE,
  "vite-svelte-ts": VITE_SVELTE_TS_TEMPLATE,
  astro: ASTRO_TEMPLATE
};
var getSandpackStateFromProps = function(props) {
  var _a2, _b2, _c2, _d, _e, _f;
  var normalizedFilesPath = normalizePath(props.files);
  var projectSetup = combineTemplateFilesToSetup({
    template: props.template,
    customSetup: props.customSetup,
    files: normalizedFilesPath
  });
  var visibleFiles = normalizePath((_b2 = (_a2 = props.options) === null || _a2 === void 0 ? void 0 : _a2.visibleFiles) !== null && _b2 !== void 0 ? _b2 : []);
  var activeFile = ((_c2 = props.options) === null || _c2 === void 0 ? void 0 : _c2.activeFile) ? resolveFile((_d = props.options) === null || _d === void 0 ? void 0 : _d.activeFile, projectSetup.files) : void 0;
  if (visibleFiles.length === 0 && normalizedFilesPath) {
    Object.keys(normalizedFilesPath).forEach(function(filePath) {
      var file = normalizedFilesPath[filePath];
      if (typeof file === "string") {
        visibleFiles.push(filePath);
        return;
      }
      if (!activeFile && file.active) {
        activeFile = filePath;
        if (file.hidden === true) {
          visibleFiles.push(filePath);
        }
      }
      if (!file.hidden) {
        visibleFiles.push(filePath);
      }
    });
  }
  if (visibleFiles.length === 0) {
    visibleFiles = [projectSetup.main];
  }
  if (projectSetup.entry && !projectSetup.files[projectSetup.entry]) {
    projectSetup.entry = resolveFile(projectSetup.entry, projectSetup.files);
  }
  if (!activeFile && projectSetup.main) {
    activeFile = projectSetup.main;
  }
  if (!activeFile || !projectSetup.files[activeFile]) {
    activeFile = visibleFiles[0];
  }
  if (!visibleFiles.includes(activeFile)) {
    visibleFiles.push(activeFile);
  }
  var files = addPackageJSONIfNeeded(projectSetup.files, (_e = projectSetup.dependencies) !== null && _e !== void 0 ? _e : {}, (_f = projectSetup.devDependencies) !== null && _f !== void 0 ? _f : {}, projectSetup.entry);
  var existOpenPath = visibleFiles.filter(function(path) {
    return files[path];
  });
  return {
    visibleFiles: existOpenPath,
    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
    activeFile,
    files,
    environment: projectSetup.environment,
    shouldUpdatePreview: true
  };
};
var resolveFile = function(path, files) {
  var normalizedFilesPath = normalizePath(files);
  var normalizedPath = normalizePath(path);
  if (normalizedPath in normalizedFilesPath) {
    return normalizedPath;
  }
  if (!path) {
    return null;
  }
  var resolvedPath = null;
  var index = 0;
  var strategies = [".js", ".jsx", ".ts", ".tsx"];
  while (!resolvedPath && index < strategies.length) {
    var removeExtension = normalizedPath.split(".")[0];
    var attemptPath = "" + removeExtension + strategies[index];
    if (normalizedFilesPath[attemptPath] !== void 0) {
      resolvedPath = attemptPath;
    }
    index++;
  }
  return resolvedPath;
};
var combineTemplateFilesToSetup = function(_a2) {
  var files = _a2.files, template = _a2.template, customSetup = _a2.customSetup;
  if (!template) {
    if (!customSetup) {
      var defaultTemplate = SANDBOX_TEMPLATES.vanilla;
      return __assign(__assign({}, defaultTemplate), { files: __assign(__assign({}, defaultTemplate.files), convertedFilesToBundlerFiles(files)) });
    }
    if (!files || Object.keys(files).length === 0) {
      throw new Error("[sandpack-react]: without a template, you must pass at least one file");
    }
    return __assign(__assign({}, customSetup), { files: convertedFilesToBundlerFiles(files) });
  }
  var baseTemplate = SANDBOX_TEMPLATES[template];
  if (!baseTemplate) {
    throw new Error('[sandpack-react]: invalid template "' + template + '" provided');
  }
  if (!customSetup && !files) {
    return baseTemplate;
  }
  return {
    /**
     * The input setup might have files in the simple form Record<string, string>
     * so we convert them to the sandbox template format
     */
    files: convertedFilesToBundlerFiles(__assign(__assign({}, baseTemplate.files), files)),
    /**
     * Merge template dependencies and user custom dependencies.
     * As a rule, the custom dependencies must overwrite the template ones.
     */
    dependencies: __assign(__assign({}, baseTemplate.dependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.dependencies),
    devDependencies: __assign(__assign({}, baseTemplate.devDependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.devDependencies),
    entry: normalizePath(customSetup === null || customSetup === void 0 ? void 0 : customSetup.entry),
    main: baseTemplate.main,
    environment: (customSetup === null || customSetup === void 0 ? void 0 : customSetup.environment) || baseTemplate.environment
  };
};
var convertedFilesToBundlerFiles = function(files) {
  if (!files)
    return {};
  return Object.keys(files).reduce(function(acc, key) {
    if (typeof files[key] === "string") {
      acc[key] = { code: files[key] };
    } else {
      acc[key] = files[key];
    }
    return acc;
  }, {});
};
var useAppState = function(props, files) {
  var _a2 = reactExports.useState({
    editorState: "pristine",
    teamId: props.teamId
  }), state = _a2[0], setState = _a2[1];
  var originalStateFromProps = getSandpackStateFromProps(props);
  var editorState = dequal(originalStateFromProps.files, files) ? "pristine" : "dirty";
  if (editorState !== state.editorState) {
    setState(function(prev) {
      return __assign(__assign({}, prev), { editorState });
    });
  }
  return state;
};
var BUNDLER_TIMEOUT = 4e4;
var useClient = function(_a2, filesState) {
  var _b2, _c2, _d;
  var options = _a2.options, customSetup = _a2.customSetup, teamId = _a2.teamId;
  options !== null && options !== void 0 ? options : options = {};
  customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};
  var initModeFromProps = (options === null || options === void 0 ? void 0 : options.initMode) || "lazy";
  var _e = reactExports.useState({
    startRoute: options === null || options === void 0 ? void 0 : options.startRoute,
    bundlerState: void 0,
    error: null,
    initMode: initModeFromProps,
    reactDevTools: void 0,
    status: ((_b2 = options === null || options === void 0 ? void 0 : options.autorun) !== null && _b2 !== void 0 ? _b2 : true) ? "initial" : "idle"
  }), state = _e[0], setState = _e[1];
  var intersectionObserver2 = reactExports.useRef(null);
  var lazyAnchorRef = reactExports.useRef(null);
  var registeredIframes = reactExports.useRef({});
  var clients = reactExports.useRef({});
  var timeoutHook = reactExports.useRef(null);
  var unsubscribeClientListeners = reactExports.useRef({});
  var unsubscribe = reactExports.useRef();
  var queuedListeners = reactExports.useRef({ global: {} });
  var debounceHook = reactExports.useRef();
  var prevEnvironment = reactExports.useRef(filesState.environment);
  var createClient = reactExports.useCallback(function(iframe, clientId, clientPropsOverride) {
    return __awaiter(void 0, void 0, void 0, function() {
      var timeOut, shouldSetTimeout, client2, globalListeners;
      var _a3, _b3, _c3;
      return __generator(this, function(_d2) {
        switch (_d2.label) {
          case 0:
            if (clients.current[clientId]) {
              clients.current[clientId].destroy();
            }
            options !== null && options !== void 0 ? options : options = {};
            customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};
            timeOut = (_a3 = options === null || options === void 0 ? void 0 : options.bundlerTimeOut) !== null && _a3 !== void 0 ? _a3 : BUNDLER_TIMEOUT;
            if (timeoutHook.current) {
              clearTimeout(timeoutHook.current);
            }
            shouldSetTimeout = typeof unsubscribe.current !== "function";
            if (shouldSetTimeout) {
              timeoutHook.current = setTimeout(function() {
                unregisterAllClients();
                setState(function(prev) {
                  return __assign(__assign({}, prev), { status: "timeout" });
                });
              }, timeOut);
            }
            return [4, loadSandpackClient(iframe, {
              files: filesState.files,
              template: filesState.environment
            }, {
              externalResources: options.externalResources,
              bundlerURL: options.bundlerURL,
              startRoute: (_b3 = clientPropsOverride === null || clientPropsOverride === void 0 ? void 0 : clientPropsOverride.startRoute) !== null && _b3 !== void 0 ? _b3 : options.startRoute,
              fileResolver: options.fileResolver,
              skipEval: (_c3 = options.skipEval) !== null && _c3 !== void 0 ? _c3 : false,
              logLevel: options.logLevel,
              showOpenInCodeSandbox: false,
              showErrorScreen: true,
              showLoadingScreen: false,
              reactDevTools: state.reactDevTools,
              customNpmRegistries: customSetup === null || customSetup === void 0 ? void 0 : customSetup.npmRegistries,
              teamId
            })];
          case 1:
            client2 = _d2.sent();
            if (typeof unsubscribe.current !== "function") {
              unsubscribe.current = client2.listen(handleMessage);
            }
            unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || {};
            if (queuedListeners.current[clientId]) {
              Object.keys(queuedListeners.current[clientId]).forEach(function(listenerId) {
                var listener = queuedListeners.current[clientId][listenerId];
                var unsubscribe2 = client2.listen(listener);
                unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe2;
              });
              queuedListeners.current[clientId] = {};
            }
            globalListeners = Object.entries(queuedListeners.current.global);
            globalListeners.forEach(function(_a4) {
              var listenerId = _a4[0], listener = _a4[1];
              var unsubscribe2 = client2.listen(listener);
              unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe2;
            });
            clients.current[clientId] = client2;
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [filesState.environment, filesState.files, state.reactDevTools]);
  var unregisterAllClients = reactExports.useCallback(function() {
    Object.keys(clients.current).map(unregisterBundler);
    if (typeof unsubscribe.current === "function") {
      unsubscribe.current();
      unsubscribe.current = void 0;
    }
  }, []);
  var runSandpack = reactExports.useCallback(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            return [4, Promise.all(Object.entries(registeredIframes.current).map(function(_a4) {
              var clientId = _a4[0], _b3 = _a4[1], iframe = _b3.iframe, _c3 = _b3.clientPropsOverride, clientPropsOverride = _c3 === void 0 ? {} : _c3;
              return __awaiter(void 0, void 0, void 0, function() {
                return __generator(this, function(_d2) {
                  switch (_d2.label) {
                    case 0:
                      return [4, createClient(iframe, clientId, clientPropsOverride)];
                    case 1:
                      _d2.sent();
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }))];
          case 1:
            _a3.sent();
            setState(function(prev) {
              return __assign(__assign({}, prev), { error: null, status: "running" });
            });
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [createClient]);
  var initializeSandpackIframe = reactExports.useCallback(function() {
    var _a3, _b3, _c3;
    var autorun = (_a3 = options === null || options === void 0 ? void 0 : options.autorun) !== null && _a3 !== void 0 ? _a3 : true;
    if (!autorun) {
      return;
    }
    var observerOptions = (_b3 = options === null || options === void 0 ? void 0 : options.initModeObserverOptions) !== null && _b3 !== void 0 ? _b3 : {
      rootMargin: "1000px 0px"
    };
    if (intersectionObserver2.current && lazyAnchorRef.current) {
      (_c3 = intersectionObserver2.current) === null || _c3 === void 0 ? void 0 : _c3.unobserve(lazyAnchorRef.current);
    }
    if (lazyAnchorRef.current && state.initMode === "lazy") {
      intersectionObserver2.current = new IntersectionObserver(function(entries) {
        var _a4;
        if (entries.some(function(entry) {
          return entry.isIntersecting;
        })) {
          runSandpack();
          if (lazyAnchorRef.current) {
            (_a4 = intersectionObserver2.current) === null || _a4 === void 0 ? void 0 : _a4.unobserve(lazyAnchorRef.current);
          }
        }
      }, observerOptions);
      intersectionObserver2.current.observe(lazyAnchorRef.current);
    } else if (lazyAnchorRef.current && state.initMode === "user-visible") {
      intersectionObserver2.current = new IntersectionObserver(function(entries) {
        if (entries.some(function(entry) {
          return entry.isIntersecting;
        })) {
          runSandpack();
        } else {
          Object.keys(clients.current).map(unregisterBundler);
          unregisterAllClients();
        }
      }, observerOptions);
      intersectionObserver2.current.observe(lazyAnchorRef.current);
    } else {
      runSandpack();
    }
  }, [
    options === null || options === void 0 ? void 0 : options.autorun,
    options === null || options === void 0 ? void 0 : options.initModeObserverOptions,
    runSandpack,
    state.initMode,
    unregisterAllClients
  ]);
  var registerBundler = reactExports.useCallback(function(iframe, clientId, clientPropsOverride) {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            registeredIframes.current[clientId] = {
              iframe,
              clientPropsOverride
            };
            if (!(state.status === "running"))
              return [3, 2];
            return [4, createClient(iframe, clientId, clientPropsOverride)];
          case 1:
            _a3.sent();
            _a3.label = 2;
          case 2:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [createClient, state.status]);
  var unregisterBundler = function(clientId) {
    var _a3, _b3;
    var client2 = clients.current[clientId];
    if (client2) {
      client2.destroy();
      (_a3 = client2.iframe.contentWindow) === null || _a3 === void 0 ? void 0 : _a3.location.replace("about:blank");
      client2.iframe.removeAttribute("src");
      delete clients.current[clientId];
    }
    delete registeredIframes.current[clientId];
    if (timeoutHook.current) {
      clearTimeout(timeoutHook.current);
    }
    var unsubscribeQueuedClients = Object.values((_b3 = unsubscribeClientListeners.current[clientId]) !== null && _b3 !== void 0 ? _b3 : {});
    unsubscribeQueuedClients.forEach(function(listenerOfClient) {
      var listenerFunctions = Object.values(listenerOfClient);
      listenerFunctions.forEach(function(unsubscribe2) {
        return unsubscribe2();
      });
    });
    var status = Object.keys(clients.current).length > 0 ? "running" : "idle";
    setState(function(prev) {
      return __assign(__assign({}, prev), { status });
    });
  };
  var handleMessage = function(msg) {
    if (msg.type === "start") {
      setState(function(prev) {
        return __assign(__assign({}, prev), { error: null });
      });
    } else if (msg.type === "state") {
      setState(function(prev) {
        return __assign(__assign({}, prev), { bundlerState: msg.state });
      });
    } else if (msg.type === "done" && !msg.compilatonError || msg.type === "connected") {
      if (timeoutHook.current) {
        clearTimeout(timeoutHook.current);
      }
      setState(function(prev) {
        return __assign(__assign({}, prev), { error: null });
      });
    } else if (msg.type === "action" && msg.action === "show-error") {
      setState(function(prev) {
        return __assign(__assign({}, prev), { error: extractErrorDetails(msg) });
      });
    } else if (msg.type === "action" && msg.action === "notification" && msg.notificationType === "error") {
      setState(function(prev) {
        return __assign(__assign({}, prev), { error: { message: msg.title } });
      });
    }
  };
  var registerReactDevTools = function(value) {
    setState(function(prev) {
      return __assign(__assign({}, prev), { reactDevTools: value });
    });
  };
  var recompileMode = (_c2 = options === null || options === void 0 ? void 0 : options.recompileMode) !== null && _c2 !== void 0 ? _c2 : "delayed";
  var recompileDelay = (_d = options === null || options === void 0 ? void 0 : options.recompileDelay) !== null && _d !== void 0 ? _d : 500;
  var dispatchMessage = function(message, clientId) {
    if (state.status !== "running") {
      console.warn("[sandpack-react]: dispatch cannot be called while in idle mode");
      return;
    }
    if (clientId) {
      clients.current[clientId].dispatch(message);
    } else {
      Object.values(clients.current).forEach(function(client2) {
        client2.dispatch(message);
      });
    }
  };
  var addListener = function(listener, clientId) {
    if (clientId) {
      if (clients.current[clientId]) {
        var unsubscribeListener = clients.current[clientId].listen(listener);
        return unsubscribeListener;
      } else {
        var listenerId_1 = generateRandomId();
        queuedListeners.current[clientId] = queuedListeners.current[clientId] || {};
        unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || {};
        queuedListeners.current[clientId][listenerId_1] = listener;
        var unsubscribeListener = function() {
          if (queuedListeners.current[clientId][listenerId_1]) {
            delete queuedListeners.current[clientId][listenerId_1];
          } else if (unsubscribeClientListeners.current[clientId][listenerId_1]) {
            unsubscribeClientListeners.current[clientId][listenerId_1]();
            delete unsubscribeClientListeners.current[clientId][listenerId_1];
          }
        };
        return unsubscribeListener;
      }
    } else {
      var listenerId_2 = generateRandomId();
      queuedListeners.current.global[listenerId_2] = listener;
      var clientsList = Object.values(clients.current);
      var currentClientUnsubscribeListeners_1 = clientsList.map(function(client2) {
        return client2.listen(listener);
      });
      var unsubscribeListener = function() {
        currentClientUnsubscribeListeners_1.forEach(function(unsubscribe2) {
          return unsubscribe2();
        });
        delete queuedListeners.current.global[listenerId_2];
        Object.values(unsubscribeClientListeners.current).forEach(function(client2) {
          var _a3;
          (_a3 = client2 === null || client2 === void 0 ? void 0 : client2[listenerId_2]) === null || _a3 === void 0 ? void 0 : _a3.call(client2);
        });
      };
      return unsubscribeListener;
    }
  };
  reactExports.useEffect(function watchFileChanges() {
    if (state.status !== "running" || !filesState.shouldUpdatePreview) {
      return;
    }
    if (prevEnvironment.current !== filesState.environment) {
      prevEnvironment.current = filesState.environment;
      Object.entries(clients.current).forEach(function(_a3) {
        var key = _a3[0], client2 = _a3[1];
        registerBundler(client2.iframe, key);
      });
    }
    if (recompileMode === "immediate") {
      Object.values(clients.current).forEach(function(client2) {
        if (client2.status === "done") {
          client2.updateSandbox({
            files: filesState.files,
            template: filesState.environment
          });
        }
      });
    }
    if (recompileMode === "delayed") {
      if (typeof window === "undefined")
        return;
      window.clearTimeout(debounceHook.current);
      debounceHook.current = window.setTimeout(function() {
        Object.values(clients.current).forEach(function(client2) {
          if (client2.status === "done") {
            client2.updateSandbox({
              files: filesState.files,
              template: filesState.environment
            });
          }
        });
      }, recompileDelay);
    }
    return function() {
      window.clearTimeout(debounceHook.current);
    };
  }, [
    filesState.files,
    filesState.environment,
    filesState.shouldUpdatePreview,
    recompileDelay,
    recompileMode,
    registerBundler,
    state.status
  ]);
  reactExports.useEffect(function watchInitMode() {
    if (initModeFromProps !== state.initMode) {
      setState(function(prev) {
        return __assign(__assign({}, prev), { initMode: initModeFromProps });
      });
      initializeSandpackIframe();
    }
  }, [initModeFromProps, initializeSandpackIframe, state.initMode]);
  reactExports.useEffect(function() {
    return function unmountClient() {
      if (typeof unsubscribe.current === "function") {
        unsubscribe.current();
      }
      if (timeoutHook.current) {
        clearTimeout(timeoutHook.current);
      }
      if (debounceHook.current) {
        clearTimeout(debounceHook.current);
      }
      if (intersectionObserver2.current) {
        intersectionObserver2.current.disconnect();
      }
    };
  }, []);
  return [
    state,
    {
      clients: clients.current,
      initializeSandpackIframe,
      runSandpack,
      registerBundler,
      unregisterBundler,
      registerReactDevTools,
      addListener,
      dispatchMessage,
      lazyAnchorRef,
      unsubscribeClientListenersRef: unsubscribeClientListeners,
      queuedListenersRef: queuedListeners
    }
  ];
};
var useFiles = function(props) {
  var originalStateFromProps = getSandpackStateFromProps(props);
  var _a2 = reactExports.useState(originalStateFromProps), state = _a2[0], setState = _a2[1];
  var isMountedRef = reactExports.useRef(false);
  reactExports.useEffect(function() {
    if (isMountedRef.current) {
      setState(getSandpackStateFromProps(props));
    } else {
      isMountedRef.current = true;
    }
  }, [props.files, props.customSetup, props.template]);
  var updateFile = function(pathOrFiles, code2, shouldUpdatePreview) {
    if (shouldUpdatePreview === void 0) {
      shouldUpdatePreview = true;
    }
    setState(function(prev) {
      var _a3;
      var files = prev.files;
      if (typeof pathOrFiles === "string" && typeof code2 === "string") {
        files = __assign(__assign({}, files), (_a3 = {}, _a3[pathOrFiles] = { code: code2 }, _a3));
      } else if (typeof pathOrFiles === "object") {
        files = __assign(__assign({}, files), convertedFilesToBundlerFiles(pathOrFiles));
      }
      return __assign(__assign({}, prev), { files: normalizePath(files), shouldUpdatePreview });
    });
  };
  var operations = {
    openFile: function(path) {
      setState(function(_a3) {
        var visibleFiles = _a3.visibleFiles, rest2 = __rest(_a3, ["visibleFiles"]);
        var newPaths = visibleFiles.includes(path) ? visibleFiles : __spreadArray$1(__spreadArray$1([], visibleFiles, true), [path], false);
        return __assign(__assign({}, rest2), { activeFile: path, visibleFiles: newPaths });
      });
    },
    resetFile: function(path) {
      setState(function(prevState) {
        var _a3;
        return __assign(__assign({}, prevState), { files: __assign(__assign({}, prevState.files), (_a3 = {}, _a3[path] = originalStateFromProps.files[path], _a3)) });
      });
    },
    resetAllFiles: function() {
      setState(function(prev) {
        return __assign(__assign({}, prev), { files: originalStateFromProps.files });
      });
    },
    setActiveFile: function(activeFile) {
      if (state.files[activeFile]) {
        setState(function(prev) {
          return __assign(__assign({}, prev), { activeFile });
        });
      }
    },
    updateCurrentFile: function(code2, shouldUpdatePreview) {
      if (shouldUpdatePreview === void 0) {
        shouldUpdatePreview = true;
      }
      updateFile(state.activeFile, code2, shouldUpdatePreview);
    },
    updateFile,
    addFile: updateFile,
    closeFile: function(path) {
      if (state.visibleFiles.length === 1) {
        return;
      }
      setState(function(_a3) {
        var visibleFiles = _a3.visibleFiles, activeFile = _a3.activeFile, prev = __rest(_a3, ["visibleFiles", "activeFile"]);
        var indexOfRemovedPath = visibleFiles.indexOf(path);
        var newPaths = visibleFiles.filter(function(openPath) {
          return openPath !== path;
        });
        return __assign(__assign({}, prev), { activeFile: path === activeFile ? indexOfRemovedPath === 0 ? visibleFiles[1] : visibleFiles[indexOfRemovedPath - 1] : activeFile, visibleFiles: newPaths });
      });
    },
    deleteFile: function(path, shouldUpdatePreview) {
      if (shouldUpdatePreview === void 0) {
        shouldUpdatePreview = true;
      }
      setState(function(_a3) {
        var visibleFiles = _a3.visibleFiles, files = _a3.files, activeFile = _a3.activeFile, rest2 = __rest(_a3, ["visibleFiles", "files", "activeFile"]);
        var newFiles = __assign({}, files);
        delete newFiles[path];
        var remainingVisibleFiles = visibleFiles.filter(function(openPath) {
          return openPath !== path;
        });
        var deletedLastVisibleFile = remainingVisibleFiles.length === 0;
        if (deletedLastVisibleFile) {
          var nextFile = Object.keys(files)[Object.keys(files).length - 1];
          return __assign(__assign({}, rest2), { visibleFiles: [nextFile], activeFile: nextFile, files: newFiles, shouldUpdatePreview });
        }
        return __assign(__assign({}, rest2), { visibleFiles: remainingVisibleFiles, activeFile: path === activeFile ? remainingVisibleFiles[remainingVisibleFiles.length - 1] : activeFile, files: newFiles, shouldUpdatePreview });
      });
    }
  };
  return [
    __assign(__assign({}, state), { visibleFilesFromProps: originalStateFromProps.visibleFiles }),
    operations
  ];
};
var Sandpack$1 = reactExports.createContext(null);
var SandpackProvider = function(props) {
  var _a2, _b2;
  var children = props.children, options = props.options, style = props.style, className = props.className, theme3 = props.theme;
  var _c2 = useFiles(props), fileState = _c2[0], fileOperations2 = _c2[1];
  var _d = useClient(props, fileState), clientState = _d[0], _e = _d[1], dispatchMessage = _e.dispatchMessage, addListener = _e.addListener, clientOperations = __rest(_e, ["dispatchMessage", "addListener"]);
  var appState = useAppState(props, fileState.files);
  reactExports.useEffect(function() {
    clientOperations.initializeSandpackIframe();
  }, []);
  return jsxRuntimeExports.jsx(Sandpack$1.Provider, __assign({ value: __assign(__assign(__assign(__assign(__assign(__assign({}, fileState), clientState), appState), fileOperations2), clientOperations), { autoReload: (_b2 = (_a2 = props.options) === null || _a2 === void 0 ? void 0 : _a2.autoReload) !== null && _b2 !== void 0 ? _b2 : true, listen: addListener, dispatch: dispatchMessage }) }, { children: jsxRuntimeExports.jsx(ClassNamesProvider, __assign({ classes: options === null || options === void 0 ? void 0 : options.classes }, { children: jsxRuntimeExports.jsx(SandpackThemeProvider, __assign({ className, style, theme: theme3 }, { children }), void 0) }), void 0) }), void 0);
};
Sandpack$1.Consumer;
function useSandpack() {
  var sandpack2 = reactExports.useContext(Sandpack$1);
  if (sandpack2 === null) {
    throw new Error('[sandpack-react]: "useSandpack" must be wrapped by a "SandpackProvider"');
  }
  var dispatch = sandpack2.dispatch, listen = sandpack2.listen, rest2 = __rest(sandpack2, ["dispatch", "listen"]);
  return {
    sandpack: __assign({}, rest2),
    dispatch,
    listen
  };
}
var useActiveCode = function() {
  var _a2, _b2, _c2;
  var sandpack2 = useSandpack().sandpack;
  return {
    code: (_a2 = sandpack2.files[sandpack2.activeFile]) === null || _a2 === void 0 ? void 0 : _a2.code,
    readOnly: (_c2 = (_b2 = sandpack2.files[sandpack2.activeFile]) === null || _b2 === void 0 ? void 0 : _b2.readOnly) !== null && _c2 !== void 0 ? _c2 : false,
    updateCode: sandpack2.updateCurrentFile
  };
};
var _a$8, _b$2, _c;
var iconStandaloneClassName = css({
  svg: { margin: "auto" }
});
var buttonClassName = css((_a$8 = {
  appearance: "none",
  outline: "none",
  display: "flex",
  alignItems: "center",
  fontSize: "inherit",
  fontFamily: "inherit",
  backgroundColor: "transparent",
  transition: "color $default, background $default",
  cursor: "pointer",
  color: "$colors$clickable",
  border: 0,
  textDecoration: "none",
  "&:disabled": { color: "$colors$disabled" },
  "&:hover:not(:disabled,[data-active='true'])": { color: "$colors$hover" },
  '&[data-active="true"]': { color: "$colors$accent" },
  svg: {
    minWidth: "$space$4",
    width: "$space$4",
    height: "$space$4"
  }
}, _a$8["&." + iconStandaloneClassName] = {
  padding: "$space$1",
  height: "$space$7",
  display: "flex"
}, // If there's a children besides the icon
_a$8["&." + iconStandaloneClassName + "&:not(:has(span))"] = {
  width: "$space$7"
}, _a$8["&." + iconStandaloneClassName + "&:has(svg + span)"] = {
  paddingRight: "$space$3",
  paddingLeft: "$space$2",
  gap: "$space$1"
}, _a$8));
var roundedButtonClassName = css({
  backgroundColor: "$colors$surface2",
  borderRadius: "99999px",
  border: "1px solid $colors$surface3",
  '&[data-active="true"]': {
    color: "$colors$surface1",
    background: "$colors$accent"
  },
  "&:hover:not(:disabled,[data-active='true'])": {
    backgroundColor: "$colors$surface3"
  }
});
var iconClassName = css({ padding: 0 });
var fadeIn = keyframes({
  "0%": {
    opacity: 0
  },
  "100%": {
    opacity: 1
  }
});
var absoluteClassName = css({
  position: "absolute",
  bottom: "0",
  left: "0",
  right: "0",
  top: "0",
  margin: "0",
  overflow: "auto",
  height: "100%",
  zIndex: "$top"
});
var errorClassName = css((_b$2 = {
  whiteSpace: "pre-wrap",
  padding: "$space$10",
  backgroundColor: "$colors$surface1",
  display: "flex",
  gap: "$space$2",
  flexDirection: "column"
}, _b$2["." + buttonClassName] = {
  width: "auto",
  gap: "$space$2",
  padding: "0 $space$3 0 $space$2",
  marginTop: "$space$1"
}, _b$2.variants = {
  solidBg: {
    "true": {
      backgroundColor: "$colors$errorSurface"
    }
  }
}, _b$2));
var errorBundlerClassName = css((_c = {
  padding: "$space$10",
  backgroundColor: "$colors$surface1"
}, _c["." + buttonClassName] = {
  marginTop: "$space$6",
  width: "auto",
  gap: "$space$2",
  padding: "0 $space$3 0 $space$2"
}, _c));
var errorMessageClassName = css({
  animation: fadeIn + " 150ms ease",
  color: "$colors$error",
  display: "flex",
  flexDirection: "column",
  gap: "$space$3",
  variants: {
    errorCode: { "true": { fontFamily: "$font$mono" } }
  },
  a: {
    color: "inherit"
  },
  p: {
    margin: 0
  }
});
var _a$7;
var tabsClassName = css({
  borderBottom: "1px solid $colors$surface2",
  background: "$colors$surface1"
});
var tabsScrollableClassName = css({
  padding: "0 $space$2",
  overflow: "auto",
  display: "flex",
  flexWrap: "nowrap",
  alignItems: "stretch",
  minHeight: "40px",
  marginBottom: "-1px"
});
var closeButtonClassName = css({
  padding: "0 $space$1 0 $space$1",
  borderRadius: "$border$radius",
  marginLeft: "$space$1",
  width: "$space$5",
  visibility: "hidden",
  svg: {
    width: "$space$3",
    height: "$space$3",
    display: "block",
    position: "relative",
    top: 1
  }
});
var tabButton = css((_a$7 = {
  padding: "0 $space$2",
  height: "$layout$headerHeight",
  whiteSpace: "nowrap",
  "&:focus": { outline: "none" }
}, _a$7["&:hover > ." + closeButtonClassName] = { visibility: "unset" }, _a$7));
var FileTabs = function(_a2) {
  var closableTabs = _a2.closableTabs, className = _a2.className, props = __rest(_a2, ["closableTabs", "className"]);
  var sandpack2 = useSandpack().sandpack;
  var classNames = useClassNames();
  var activeFile = sandpack2.activeFile, visibleFiles = sandpack2.visibleFiles, setActiveFile = sandpack2.setActiveFile;
  var handleCloseFile = function(ev) {
    ev.stopPropagation();
    var tabElm = ev.target.closest("[data-active]");
    var pathToClose = tabElm === null || tabElm === void 0 ? void 0 : tabElm.getAttribute("title");
    if (!pathToClose) {
      return;
    }
    sandpack2.closeFile(pathToClose);
  };
  var getTriggerText = function(currentPath) {
    var documentFileName = getFileName(currentPath);
    var pathsWithDuplicateFileNames = visibleFiles.reduce(function(prev, curr) {
      if (curr === currentPath) {
        return prev;
      }
      var fileName = getFileName(curr);
      if (fileName === documentFileName) {
        prev.push(curr);
        return prev;
      }
      return prev;
    }, []);
    if (pathsWithDuplicateFileNames.length === 0) {
      return documentFileName;
    } else {
      return calculateNearestUniquePath(currentPath, pathsWithDuplicateFileNames);
    }
  };
  return jsxRuntimeExports.jsx("div", __assign({ className: classNames("tabs", [tabsClassName, className]), translate: "no" }, props, { children: jsxRuntimeExports.jsx("div", __assign({ "aria-label": "Select active file", className: classNames("tabs-scrollable-container", [
    tabsScrollableClassName
  ]), role: "tablist" }, { children: visibleFiles.map(function(filePath) {
    return jsxRuntimeExports.jsxs("button", __assign({ "aria-selected": filePath === activeFile, className: classNames("tab-button", [buttonClassName, tabButton]), "data-active": filePath === activeFile, onClick: function() {
      return setActiveFile(filePath);
    }, role: "tab", title: filePath, type: "button" }, { children: [getTriggerText(filePath), closableTabs && visibleFiles.length > 1 && jsxRuntimeExports.jsx("span", __assign({ className: classNames("close-button", [closeButtonClassName]), onClick: handleCloseFile }, { children: jsxRuntimeExports.jsx(CloseIcon, {}, void 0) }), void 0)] }), filePath);
  }) }), void 0) }), void 0);
};
var RoundedButton = function(_a2) {
  var onClick = _a2.onClick, className = _a2.className, children = _a2.children;
  var classNames = useClassNames();
  return jsxRuntimeExports.jsx("button", __assign({ className: classNames("button", [
    classNames("icon-standalone"),
    buttonClassName,
    iconStandaloneClassName,
    roundedButtonClassName,
    className
  ]), onClick, type: "button" }, { children }), void 0);
};
var runButtonClassName = css({
  position: "absolute",
  bottom: "$space$2",
  right: "$space$2",
  paddingRight: "$space$3"
});
var RunButton$1 = function(_a2) {
  _a2.className;
  var onClick = _a2.onClick, props = __rest(_a2, ["className", "onClick"]);
  var sandpack2 = useSandpack().sandpack;
  return jsxRuntimeExports.jsxs(RoundedButton, __assign({ className: runButtonClassName.toString(), onClick: function(event) {
    sandpack2.runSandpack();
    onClick === null || onClick === void 0 ? void 0 : onClick(event);
  } }, props, { children: [jsxRuntimeExports.jsx(RunIcon, {}, void 0), jsxRuntimeExports.jsx("span", { children: "Run" }, void 0)] }), void 0);
};
var _a$6;
var stackClassName = css((_a$6 = {
  display: "flex",
  flexDirection: "column",
  width: "100%",
  position: "relative",
  backgroundColor: "$colors$surface1",
  gap: 1
}, _a$6["&:has(." + THEME_PREFIX + "-stack)"] = {
  backgroundColor: "$colors$surface2"
}, _a$6));
var SandpackStack = function(_a2) {
  var className = _a2.className, props = __rest(_a2, ["className"]);
  var classNames = useClassNames();
  return jsxRuntimeExports.jsx("div", __assign({ className: classNames("stack", [stackClassName, className]) }, props), void 0);
};
var useSandpackTheme = function() {
  var _a2 = reactExports.useContext(SandpackThemeContext), theme3 = _a2.theme, id2 = _a2.id, mode = _a2.mode;
  return { theme: theme3, themeId: id2, themeMode: mode };
};
var shallowEqual = function(a2, b2) {
  if (a2.length !== b2.length)
    return false;
  var result = true;
  for (var index = 0; index < a2.length; index++) {
    if (a2[index] !== b2[index]) {
      result = false;
      break;
    }
  }
  return result;
};
var getCodeMirrorPosition = function(doc2, _a2) {
  var line = _a2.line, column = _a2.column;
  return doc2.line(line).from + (column !== null && column !== void 0 ? column : 0) - 1;
};
var getEditorTheme = function() {
  return EditorView.theme({
    "&": {
      backgroundColor: "var(--" + THEME_PREFIX + "-colors-surface1)",
      color: "var(--" + THEME_PREFIX + "-syntax-color-plain)",
      height: "100%"
    },
    ".cm-matchingBracket, .cm-nonmatchingBracket, &.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      color: "inherit",
      backgroundColor: "rgba(128,128,128,.25)",
      backgroundBlendMode: "difference"
    },
    "&.cm-editor.cm-focused": {
      outline: "none"
    },
    ".cm-activeLine": {
      backgroundColor: "var(--" + THEME_PREFIX + "-colors-surface3)",
      borderRadius: "var(--" + THEME_PREFIX + "-border-radius)"
    },
    ".cm-errorLine": {
      backgroundColor: "var(--" + THEME_PREFIX + "-colors-errorSurface)",
      borderRadius: "var(--" + THEME_PREFIX + "-border-radius)"
    },
    ".cm-content": {
      caretColor: "var(--" + THEME_PREFIX + "-colors-accent)",
      padding: "0 var(--" + THEME_PREFIX + "-space-4)"
    },
    ".cm-scroller": {
      fontFamily: "var(--" + THEME_PREFIX + "-font-mono)",
      lineHeight: "var(--" + THEME_PREFIX + "-font-lineHeight)"
    },
    ".cm-gutters": {
      backgroundColor: "var(--" + THEME_PREFIX + "-colors-surface1)",
      color: "var(--" + THEME_PREFIX + "-colors-disabled)",
      border: "none",
      paddingLeft: "var(--" + THEME_PREFIX + "-space-1)"
    },
    ".cm-gutter.cm-lineNumbers": {
      fontSize: ".6em"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      lineHeight: "var(--" + THEME_PREFIX + "-font-lineHeight)",
      minWidth: "var(--" + THEME_PREFIX + "-space-5)"
    },
    ".cm-content .cm-line": { paddingLeft: "var(--" + THEME_PREFIX + "-space-1)" },
    ".cm-content.cm-readonly .cm-line": { paddingLeft: 0 }
  });
};
var classNameToken = function(name2) {
  return THEME_PREFIX + "-syntax-" + name2;
};
var styleTokens = function() {
  var syntaxHighLightTokens = [
    "string",
    "plain",
    "comment",
    "keyword",
    "definition",
    "punctuation",
    "property",
    "tag",
    "static"
  ];
  return syntaxHighLightTokens.reduce(function(acc, token) {
    var _a2;
    return __assign(__assign({}, acc), (_a2 = {}, _a2["." + classNameToken(token)] = {
      color: "$syntax$color$" + token,
      fontStyle: "$syntax$fontStyle$" + token
    }, _a2));
  }, {});
};
var getSyntaxHighlight = function(theme3) {
  return HighlightStyle.define([
    { tag: tags$1.link, textDecoration: "underline" },
    { tag: tags$1.emphasis, fontStyle: "italic" },
    { tag: tags$1.strong, fontWeight: "bold" },
    {
      tag: tags$1.keyword,
      "class": classNameToken("keyword")
    },
    {
      tag: [tags$1.atom, tags$1.number, tags$1.bool],
      "class": classNameToken("static")
    },
    {
      tag: tags$1.variableName,
      "class": classNameToken("plain")
    },
    {
      // Standard tags, e.g <h1 />
      tag: tags$1.standard(tags$1.tagName),
      "class": classNameToken("tag")
    },
    {
      tag: [
        // Highlight function call
        tags$1["function"](tags$1.variableName),
        // Highlight function definition differently (eg: functional component def in React)
        tags$1.definition(tags$1["function"](tags$1.variableName)),
        // "Custom tags", meaning React component
        tags$1.tagName
      ],
      "class": classNameToken("definition")
    },
    {
      tag: tags$1.propertyName,
      "class": classNameToken("property")
    },
    {
      tag: [tags$1.literal, tags$1.inserted],
      "class": classNameToken(theme3.syntax.string ? "string" : "static")
    },
    {
      tag: tags$1.punctuation,
      "class": classNameToken("punctuation")
    },
    {
      tag: [tags$1.comment, tags$1.quote],
      "class": classNameToken("comment")
    }
  ]);
};
var getLanguageFromFile = function(filePath, fileType, additionalLanguages) {
  if (!filePath && !fileType)
    return "javascript";
  var extension = fileType;
  if (!extension && filePath) {
    var extensionDotIndex = filePath.lastIndexOf(".");
    extension = filePath.slice(extensionDotIndex + 1);
  }
  for (var _i = 0, additionalLanguages_1 = additionalLanguages; _i < additionalLanguages_1.length; _i++) {
    var additionalLanguage = additionalLanguages_1[_i];
    if (extension === additionalLanguage.name || additionalLanguage.extensions.includes(extension || "")) {
      return additionalLanguage.name;
    }
  }
  switch (extension) {
    case "ts":
    case "tsx":
      return "typescript";
    case "html":
    case "svelte":
    case "vue":
    case "astro":
      return "html";
    case "css":
    case "less":
    case "scss":
      return "css";
    case "js":
    case "jsx":
    case "json":
    default:
      return "javascript";
  }
};
var getCodeMirrorLanguage = function(extension, additionalLanguages) {
  var options = {
    javascript: javascript({ jsx: true, typescript: false }),
    typescript: javascript({ jsx: true, typescript: true }),
    html: html(),
    css: css$1()
  };
  for (var _i = 0, additionalLanguages_2 = additionalLanguages; _i < additionalLanguages_2.length; _i++) {
    var additionalLanguage = additionalLanguages_2[_i];
    if (extension === additionalLanguage.name) {
      return additionalLanguage.language;
    }
  }
  return options[extension];
};
var useCombinedRefs = function() {
  var refs = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    refs[_i] = arguments[_i];
  }
  return reactExports.useCallback(
    function(element) {
      return refs.forEach(function(ref) {
        if (!ref) {
          return;
        }
        if (typeof ref === "function") {
          return ref(element);
        }
        ref.current = element;
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs
  );
};
function highlightDecorators(positions) {
  return ViewPlugin.fromClass(
    /** @class */
    function() {
      function class_1(view) {
        this.decorations = this.getDecoration(view);
      }
      class_1.prototype.update = function(update) {
        return;
      };
      class_1.prototype.getDecoration = function(view) {
        if (!positions)
          return Decoration.none;
        var rangesDecorators = positions.map(function(item) {
          var _a2, _b2, _c2;
          var lineDeco2 = Decoration.line({
            attributes: { "class": (_a2 = item.className) !== null && _a2 !== void 0 ? _a2 : "" }
          });
          var markDeco = Decoration.mark({
            "class": (_b2 = item.className) !== null && _b2 !== void 0 ? _b2 : "",
            attributes: (_c2 = item.elementAttributes) !== null && _c2 !== void 0 ? _c2 : void 0
          });
          var positionLineStart = getCodeMirrorPosition(view.state.doc, {
            line: item.line,
            column: item.startColumn
          }) + 1;
          if (item.startColumn && item.endColumn) {
            var positionLineEnd = getCodeMirrorPosition(view.state.doc, {
              line: item.line,
              column: item.endColumn
            }) + 1;
            return markDeco.range(positionLineStart, positionLineEnd);
          }
          return lineDeco2.range(positionLineStart);
        });
        return Decoration.set(rangesDecorators);
      };
      return class_1;
    }(),
    {
      decorations: function(v2) {
        return v2.decorations;
      }
    }
  );
}
function highlightInlineError() {
  return activeLineHighlighter;
}
var lineDeco = Decoration.line({ attributes: { "class": "cm-errorLine" } });
var activeLineHighlighter = ViewPlugin.fromClass(
  /** @class */
  function() {
    function class_1() {
      this.decorations = Decoration.none;
    }
    class_1.prototype.update = function(update) {
      var _this = this;
      update.transactions.forEach(function(trans) {
        var errorValue = trans.annotation("show-error");
        if (errorValue !== void 0) {
          var position = getCodeMirrorPosition(update.view.state.doc, {
            line: errorValue
          }) + 1;
          _this.decorations = Decoration.set([lineDeco.range(position)]);
        } else if (trans.annotation("remove-errors")) {
          _this.decorations = Decoration.none;
        }
      });
    };
    return class_1;
  }(),
  {
    decorations: function(v2) {
      return v2.decorations;
    }
  }
);
var _a$5, _b$1;
var placeholderClassName = css({
  margin: "0",
  display: "block",
  fontFamily: "$font$mono",
  fontSize: "$font$size",
  color: "$syntax$color$plain",
  lineHeight: "$font$lineHeight"
});
var tokensClassName = css(styleTokens());
var editorClassName = css((_a$5 = {
  flex: 1,
  position: "relative",
  overflow: "auto",
  background: "$colors$surface1",
  ".cm-scroller": {
    padding: "$space$4 0"
  }
}, _a$5["." + placeholderClassName] = {
  padding: "$space$4 0"
}, /**
 * For iOS: prevent browser zoom when clicking on sandbox.
 * Does NOT apply to code blocks.
 */
_a$5["@media screen and (max-width: 768px)"] = {
  "@supports (-webkit-overflow-scrolling: touch)": {
    ".cm-content": { fontSize: "16px" }
  }
}, _a$5));
var cmClassName = css({
  margin: "0",
  outline: "none",
  height: "100%"
});
var readOnlyClassName = css((_b$1 = {
  fontFamily: "$font$mono",
  fontSize: "0.8em",
  position: "absolute",
  right: "$space$2",
  bottom: "$space$2",
  zIndex: "$top",
  color: "$colors$clickable",
  backgroundColor: "$colors$surface2",
  borderRadius: "99999px",
  padding: "calc($space$1 / 2) $space$2"
}, _b$1["& + ." + buttonClassName] = {
  right: "calc($space$11 * 2)"
}, _b$1));
var useSyntaxHighlight = function(_a2) {
  var langSupport = _a2.langSupport, highlightTheme = _a2.highlightTheme, _b2 = _a2.code, code2 = _b2 === void 0 ? "" : _b2;
  var tree = langSupport.language.parser.parse(code2);
  var offSet = 0;
  var codeElementsRender = [];
  var addElement = function(to, className) {
    if (to > offSet) {
      var children = code2.slice(offSet, to);
      codeElementsRender.push(className ? reactExports.createElement("span", {
        children,
        className,
        key: "" + to + offSet
      }) : children);
      offSet = to;
    }
  };
  highlightTree(tree, highlightTheme, function(from, to, className) {
    addElement(from, "");
    addElement(to, className);
  });
  if (offSet < code2.length && (code2 === null || code2 === void 0 ? void 0 : code2.includes("\n"))) {
    codeElementsRender.push("\n\n");
  }
  return codeElementsRender;
};
var CodeMirror = reactExports.forwardRef(function(_a2, ref) {
  var _b2 = _a2.code, code2 = _b2 === void 0 ? "" : _b2, filePath = _a2.filePath, fileType = _a2.fileType, onCodeUpdate = _a2.onCodeUpdate, _c2 = _a2.showLineNumbers, showLineNumbers = _c2 === void 0 ? false : _c2, _d = _a2.showInlineErrors, showInlineErrors = _d === void 0 ? false : _d, _e = _a2.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a2.editorState, editorState = _f === void 0 ? "pristine" : _f, _g = _a2.readOnly, readOnly2 = _g === void 0 ? false : _g, _h = _a2.showReadOnly, showReadOnly = _h === void 0 ? true : _h, decorators = _a2.decorators, _j = _a2.initMode, initMode = _j === void 0 ? "lazy" : _j, _k = _a2.extensions, extensions = _k === void 0 ? [] : _k, _l = _a2.extensionsKeymap, extensionsKeymap = _l === void 0 ? [] : _l, _m = _a2.additionalLanguages, additionalLanguages = _m === void 0 ? [] : _m;
  var wrapper = reactExports.useRef(null);
  var combinedRef = useCombinedRefs(wrapper, ref);
  var cmView = reactExports.useRef();
  var _o = useSandpackTheme(), theme3 = _o.theme, themeId = _o.themeId;
  var _p = reactExports.useState(code2), internalCode = _p[0], setInternalCode = _p[1];
  var _q = reactExports.useState(initMode === "immediate"), shouldInitEditor = _q[0], setShouldInitEditor = _q[1];
  var classNames = useClassNames();
  var listen = useSandpack().listen;
  var prevExtension = reactExports.useRef([]);
  var prevExtensionKeymap = reactExports.useRef([]);
  var isIntersecting = useIntersectionObserver(wrapper, {
    rootMargin: "600px 0px",
    threshold: 0.2
  }).isIntersecting;
  reactExports.useImperativeHandle(ref, function() {
    return {
      getCodemirror: function() {
        return cmView.current;
      }
    };
  });
  reactExports.useEffect(function() {
    var mode = initMode === "lazy" || initMode === "user-visible";
    if (mode && isIntersecting) {
      setShouldInitEditor(true);
    }
  }, [initMode, isIntersecting]);
  var languageExtension = getLanguageFromFile(filePath, fileType, additionalLanguages);
  var langSupport = getCodeMirrorLanguage(languageExtension, additionalLanguages);
  var highlightTheme = getSyntaxHighlight(theme3);
  var syntaxHighlightRender = useSyntaxHighlight({
    langSupport,
    highlightTheme,
    code: code2
  });
  var sortedDecorators = reactExports.useMemo(function() {
    return decorators ? decorators.sort(function(d1, d2) {
      return d1.line - d2.line;
    }) : decorators;
  }, [decorators]);
  reactExports.useEffect(function() {
    if (!wrapper.current || !shouldInitEditor)
      return;
    var customCommandsKeymap = [
      {
        key: "Tab",
        run: function(view2) {
          var _a3, _b3;
          indentMore(view2);
          var customKey = extensionsKeymap.find(function(_a4) {
            var key = _a4.key;
            return key === "Tab";
          });
          return (_b3 = (_a3 = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a3 === void 0 ? void 0 : _a3.call(customKey, view2)) !== null && _b3 !== void 0 ? _b3 : true;
        }
      },
      {
        key: "Shift-Tab",
        run: function(_a3) {
          var _b3, _c3;
          var state = _a3.state, dispatch = _a3.dispatch;
          indentLess({ state, dispatch });
          var customKey = extensionsKeymap.find(function(_a4) {
            var key = _a4.key;
            return key === "Shift-Tab";
          });
          return (_c3 = (_b3 = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _b3 === void 0 ? void 0 : _b3.call(customKey, view)) !== null && _c3 !== void 0 ? _c3 : true;
        }
      },
      {
        key: "Escape",
        run: function() {
          if (readOnly2)
            return true;
          if (wrapper.current) {
            wrapper.current.focus();
          }
          return true;
        }
      },
      {
        key: "mod-Backspace",
        run: deleteGroupBackward
      }
    ];
    var extensionList = __spreadArray$1(__spreadArray$1([
      highlightSpecialChars(),
      history(),
      closeBrackets()
    ], extensions, true), [
      keymap.of(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1([], closeBracketsKeymap, true), defaultKeymap, true), historyKeymap, true), customCommandsKeymap, true), extensionsKeymap, true)),
      langSupport,
      getEditorTheme(),
      syntaxHighlighting(highlightTheme)
    ], false);
    if (readOnly2) {
      extensionList.push(EditorState.readOnly.of(true));
      extensionList.push(EditorView.editable.of(false));
    } else {
      extensionList.push(bracketMatching());
      extensionList.push(highlightActiveLine());
    }
    if (sortedDecorators) {
      extensionList.push(highlightDecorators(sortedDecorators));
    }
    if (wrapContent) {
      extensionList.push(EditorView.lineWrapping);
    }
    if (showLineNumbers) {
      extensionList.push(lineNumbers());
    }
    if (showInlineErrors) {
      extensionList.push(highlightInlineError());
    }
    var parentDiv = wrapper.current;
    var existingPlaceholder = parentDiv.querySelector(".sp-pre-placeholder");
    if (existingPlaceholder) {
      parentDiv.removeChild(existingPlaceholder);
    }
    var view = new EditorView({
      doc: code2,
      extensions: extensionList,
      parent: parentDiv,
      dispatch: function(tr) {
        view.update([tr]);
        if (tr.docChanged) {
          var newCode = tr.newDoc.sliceString(0, tr.newDoc.length);
          setInternalCode(newCode);
          onCodeUpdate === null || onCodeUpdate === void 0 ? void 0 : onCodeUpdate(newCode);
        }
      }
    });
    view.contentDOM.setAttribute("data-gramm", "false");
    view.contentDOM.setAttribute("data-lt-active", "false");
    view.contentDOM.setAttribute("aria-label", filePath ? "Code Editor for " + getFileName(filePath) : "Code Editor");
    if (readOnly2) {
      view.contentDOM.classList.add("cm-readonly");
    } else {
      view.contentDOM.setAttribute("tabIndex", "-1");
    }
    cmView.current = view;
    return function() {
      var _a3;
      (_a3 = cmView.current) === null || _a3 === void 0 ? void 0 : _a3.destroy();
    };
  }, [
    shouldInitEditor,
    showLineNumbers,
    wrapContent,
    themeId,
    sortedDecorators,
    readOnly2
  ]);
  reactExports.useEffect(function applyExtensions() {
    var view = cmView.current;
    var dependenciesAreDiff = !shallowEqual(extensions, prevExtension.current) || !shallowEqual(extensionsKeymap, prevExtensionKeymap.current);
    if (view && dependenciesAreDiff) {
      view.dispatch({
        effects: StateEffect.appendConfig.of(extensions)
      });
      view.dispatch({
        effects: StateEffect.appendConfig.of(keymap.of(__spreadArray$1([], extensionsKeymap, true)))
      });
      prevExtension.current = extensions;
      prevExtensionKeymap.current = extensionsKeymap;
    }
  }, [extensions, extensionsKeymap]);
  reactExports.useEffect(function() {
    if (cmView.current && editorState === "dirty" && window.matchMedia("(min-width: 768px)").matches) {
      cmView.current.contentDOM.focus();
    }
  }, []);
  reactExports.useEffect(function() {
    if (cmView.current && typeof code2 === "string" && code2 !== internalCode) {
      var view = cmView.current;
      var selection = view.state.selection.ranges.some(function(_a3) {
        var to = _a3.to, from = _a3.from;
        return to > code2.length || from > code2.length;
      }) ? EditorSelection.cursor(code2.length) : view.state.selection;
      var changes = { from: 0, to: view.state.doc.length, insert: code2 };
      view.dispatch({ changes, selection });
    }
  }, [code2]);
  reactExports.useEffect(function messageToInlineError() {
    if (!showInlineErrors)
      return;
    var unsubscribe = listen(function(message) {
      var view = cmView.current;
      if (message.type === "success") {
        view === null || view === void 0 ? void 0 : view.dispatch({
          // @ts-ignore
          annotations: [new Annotation("remove-errors", true)]
        });
      } else if (message.type === "action" && message.action === "show-error" && message.path === filePath && message.line) {
        view === null || view === void 0 ? void 0 : view.dispatch({
          // @ts-ignore
          annotations: [new Annotation("show-error", message.line)]
        });
      }
    });
    return function() {
      return unsubscribe();
    };
  }, [listen, showInlineErrors]);
  var handleContainerKeyDown = function(evt) {
    if (evt.key === "Enter" && cmView.current) {
      evt.preventDefault();
      cmView.current.contentDOM.focus();
    }
  };
  var gutterLineOffset = function() {
    var offset = 4;
    if (showLineNumbers) {
      offset += 6;
    }
    if (!readOnly2) {
      offset += 1;
    }
    return "var(--" + THEME_PREFIX + "-space-" + offset + ")";
  };
  if (readOnly2) {
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("pre", __assign({ ref: combinedRef, className: classNames("cm", [
      classNames(editorState),
      classNames(languageExtension),
      cmClassName,
      tokensClassName
    ]), translate: "no" }, { children: jsxRuntimeExports.jsx("code", __assign({ className: classNames("pre-placeholder", [placeholderClassName]), style: { marginLeft: gutterLineOffset() } }, { children: syntaxHighlightRender }), void 0) }), void 0), readOnly2 && showReadOnly && jsxRuntimeExports.jsx("span", __assign({ className: classNames("read-only", [readOnlyClassName]) }, {}, { children: "Read-only" }), void 0)] }, void 0);
  }
  return jsxRuntimeExports.jsx("div", __assign({ ref: combinedRef, "aria-autocomplete": "list", "aria-label": filePath ? "Code Editor for " + getFileName(filePath) : "Code Editor", "aria-multiline": "true", className: classNames("cm", [
    classNames(editorState),
    classNames(languageExtension),
    cmClassName,
    tokensClassName
  ]), onKeyDown: handleContainerKeyDown, role: "textbox", tabIndex: 0, translate: "no", suppressHydrationWarning: true }, { children: jsxRuntimeExports.jsx("pre", __assign({ className: classNames("pre-placeholder", [placeholderClassName]), style: { marginLeft: gutterLineOffset() } }, { children: syntaxHighlightRender }), void 0) }), void 0);
});
reactExports.forwardRef(function(_a2, ref) {
  var showTabs = _a2.showTabs, _b2 = _a2.showLineNumbers, showLineNumbers = _b2 === void 0 ? false : _b2, _c2 = _a2.showInlineErrors, showInlineErrors = _c2 === void 0 ? false : _c2, _d = _a2.showRunButton, showRunButton = _d === void 0 ? true : _d, _e = _a2.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a2.closableTabs, closableTabs = _f === void 0 ? false : _f, initMode = _a2.initMode, extensions = _a2.extensions, extensionsKeymap = _a2.extensionsKeymap, readOnly2 = _a2.readOnly, showReadOnly = _a2.showReadOnly, additionalLanguages = _a2.additionalLanguages, className = _a2.className, props = __rest(_a2, ["showTabs", "showLineNumbers", "showInlineErrors", "showRunButton", "wrapContent", "closableTabs", "initMode", "extensions", "extensionsKeymap", "readOnly", "showReadOnly", "additionalLanguages", "className"]);
  var sandpack2 = useSandpack().sandpack;
  var _g = useActiveCode(), code2 = _g.code, updateCode = _g.updateCode, readOnlyFile = _g.readOnly;
  var activeFile = sandpack2.activeFile, status = sandpack2.status, editorState = sandpack2.editorState;
  var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack2.visibleFiles.length > 1;
  var classNames = useClassNames();
  var handleCodeUpdate = function(newCode, shouldUpdatePreview) {
    if (shouldUpdatePreview === void 0) {
      shouldUpdatePreview = true;
    }
    updateCode(newCode, shouldUpdatePreview);
  };
  return jsxRuntimeExports.jsxs(SandpackStack, __assign({ className: classNames("editor", [className]) }, props, { children: [shouldShowTabs && jsxRuntimeExports.jsx(FileTabs, { closableTabs }, void 0), jsxRuntimeExports.jsxs("div", __assign({ className: classNames("code-editor", [editorClassName]) }, { children: [jsxRuntimeExports.jsx(CodeMirror, { ref, additionalLanguages, code: code2, editorState, extensions, extensionsKeymap, filePath: activeFile, initMode: initMode || sandpack2.initMode, onCodeUpdate: function(newCode) {
    var _a3;
    return handleCodeUpdate(newCode, (_a3 = sandpack2.autoReload) !== null && _a3 !== void 0 ? _a3 : true);
  }, readOnly: readOnly2 || readOnlyFile, showInlineErrors, showLineNumbers, showReadOnly, wrapContent }, activeFile), showRunButton && (!sandpack2.autoReload || status === "idle") ? jsxRuntimeExports.jsx(RunButton$1, {}, void 0) : null] }), void 0)] }), void 0);
});
reactExports.forwardRef(function(_a2, ref) {
  var showTabs = _a2.showTabs, showLineNumbers = _a2.showLineNumbers, decorators = _a2.decorators, propCode = _a2.code, initMode = _a2.initMode, wrapContent = _a2.wrapContent, additionalLanguages = _a2.additionalLanguages, props = __rest(_a2, ["showTabs", "showLineNumbers", "decorators", "code", "initMode", "wrapContent", "additionalLanguages"]);
  var sandpack2 = useSandpack().sandpack;
  var code2 = useActiveCode().code;
  var classNames = useClassNames();
  var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack2.visibleFiles.length > 1;
  return jsxRuntimeExports.jsxs(SandpackStack, __assign({ className: classNames("editor-viewer") }, props, { children: [shouldShowTabs ? jsxRuntimeExports.jsx(FileTabs, {}, void 0) : null, jsxRuntimeExports.jsx("div", __assign({ className: classNames("code-editor", [editorClassName]) }, { children: jsxRuntimeExports.jsx(CodeMirror, { ref, additionalLanguages, code: propCode !== null && propCode !== void 0 ? propCode : code2, decorators, filePath: sandpack2.activeFile, initMode: initMode || sandpack2.initMode, showLineNumbers, showReadOnly: false, wrapContent, readOnly: true }, void 0) }), void 0), sandpack2.status === "idle" ? jsxRuntimeExports.jsx(RunButton$1, {}, void 0) : null] }), void 0);
});
var _a$4, _b;
var layoutClassName = css((_a$4 = {
  border: "1px solid $colors$surface2",
  display: "flex",
  flexWrap: "wrap",
  alignItems: "stretch",
  borderRadius: "$border$radius",
  overflow: "hidden",
  position: "relative",
  backgroundColor: "$colors$surface2",
  gap: 1
}, _a$4["> ." + stackClassName] = {
  flexGrow: 1,
  flexShrink: 1,
  flexBasis: "0",
  height: "$layout$height",
  overflow: "hidden",
  "@media print": {
    height: "auto",
    display: "block"
  },
  "@media screen and (max-width: 768px)": (_b = {}, _b["&:not(." + THEME_PREFIX + "-preview, ." + THEME_PREFIX + "-editor, ." + THEME_PREFIX + "-preset-column)"] = {
    height: "calc($layout$height / 2)"
  }, /* triggers the layout break at the 768px breakpoint, not when the component is less then 700px */
  _b.minWidth = "100%;", _b)
}, _a$4["> ." + THEME_PREFIX + "-file-explorer"] = {
  flex: 0.2,
  minWidth: 200,
  "@media screen and (max-width: 768px)": {
    flex: 1
  }
}, _a$4));
var SandpackLayout = reactExports.forwardRef(function(_a2, ref) {
  var children = _a2.children, className = _a2.className, props = __rest(_a2, ["children", "className"]);
  var sandpack2 = useSandpack().sandpack;
  var classNames = useClassNames();
  var combinedRef = useCombinedRefs(sandpack2.lazyAnchorRef, ref);
  return jsxRuntimeExports.jsx("div", __assign({ ref: combinedRef, className: classNames("layout", [layoutClassName, className]) }, props, { children }), void 0);
});
var useErrorMessage = function() {
  var _a2;
  var sandpack2 = useSandpack().sandpack;
  var error = sandpack2.error;
  return (_a2 = error === null || error === void 0 ? void 0 : error.message) !== null && _a2 !== void 0 ? _a2 : null;
};
var FADE_ANIMATION_DURATION = 200;
var useLoadingOverlayState = function(clientId, externalLoading) {
  var _a2 = useSandpack(), sandpack2 = _a2.sandpack, listen = _a2.listen;
  var _b2 = reactExports.useState("LOADING"), state = _b2[0], setState = _b2[1];
  reactExports.useEffect(function() {
    var unsubscribe = listen(function(message) {
      if (message.type === "start" && message.firstLoad === true) {
        setState("LOADING");
      }
      if (message.type === "done") {
        setState(function(prev) {
          return prev === "LOADING" ? "PRE_FADING" : "HIDDEN";
        });
      }
    }, clientId);
    return function() {
      unsubscribe();
    };
  }, [clientId, sandpack2.status === "idle"]);
  reactExports.useEffect(function() {
    var fadeTimeout;
    if (state === "PRE_FADING" && !externalLoading) {
      setState("FADING");
    } else if (state === "FADING") {
      fadeTimeout = setTimeout(function() {
        return setState("HIDDEN");
      }, FADE_ANIMATION_DURATION);
    }
    return function() {
      clearTimeout(fadeTimeout);
    };
  }, [state, externalLoading]);
  if (sandpack2.status === "timeout") {
    return "TIMEOUT";
  }
  if (sandpack2.status !== "running") {
    return "HIDDEN";
  }
  return state;
};
var useSandpackNavigation = function(clientId) {
  var dispatch = useSandpack().dispatch;
  return {
    refresh: function() {
      return dispatch({ type: "refresh" }, clientId);
    },
    back: function() {
      return dispatch({ type: "urlback" }, clientId);
    },
    forward: function() {
      return dispatch({ type: "urlforward" }, clientId);
    }
  };
};
var useSandpackClient = function(clientPropsOverride) {
  var _a2 = useSandpack(), sandpack2 = _a2.sandpack, listen = _a2.listen, dispatch = _a2.dispatch;
  var iframeRef = reactExports.useRef(null);
  var clientId = reactExports.useRef(generateRandomId());
  reactExports.useEffect(function() {
    var iframeElement = iframeRef.current;
    var clientIdValue = clientId.current;
    if (iframeElement !== null) {
      sandpack2.registerBundler(iframeElement, clientIdValue, clientPropsOverride);
    }
    return function() {
      return sandpack2.unregisterBundler(clientIdValue);
    };
  }, []);
  var getClient = function() {
    return sandpack2.clients[clientId.current] || null;
  };
  return {
    sandpack: sandpack2,
    getClient,
    clientId: clientId.current,
    iframe: iframeRef,
    listen: function(listener) {
      return listen(listener, clientId.current);
    },
    dispatch: function(message) {
      return dispatch(message, clientId.current);
    }
  };
};
var useSandpackShell = function(clientId) {
  var dispatch = useSandpack().dispatch;
  return {
    restart: function() {
      return dispatch({ type: "shell/restart" }, clientId);
    },
    openPreview: function() {
      return dispatch({ type: "shell/openPreview" }, clientId);
    }
  };
};
var mapProgressMessage = function(originalMessage, firstTotalPending) {
  var _a2;
  switch (originalMessage.state) {
    case "downloading_manifest":
      return "[1/3] Downloading manifest";
    case "downloaded_module":
      return "[2/3] Downloaded " + originalMessage.name + " (" + (firstTotalPending - originalMessage.totalPending) + "/" + firstTotalPending + ")";
    case "starting_command":
      return "[3/3] Starting command";
    case "command_running":
      return '[3/3] Running "' + ((_a2 = originalMessage.command) === null || _a2 === void 0 ? void 0 : _a2.trim()) + '"';
  }
};
var useSandpackPreviewProgress = function(props) {
  var _a2 = reactExports.useState(false), isReady = _a2[0], setIsReady = _a2[1];
  var _b2 = reactExports.useState(), totalDependencies = _b2[0], setTotalDependencies = _b2[1];
  var _c2 = reactExports.useState(null), loadingMessage = _c2[0], setLoadingMessage = _c2[1];
  var timeout = props === null || props === void 0 ? void 0 : props.timeout;
  var clientId = props === null || props === void 0 ? void 0 : props.clientId;
  var listen = useSandpack().listen;
  reactExports.useEffect(function() {
    var timer2;
    var unsubscribe = listen(function(message) {
      if (message.type === "start" && message.firstLoad) {
        setIsReady(false);
      }
      if (timeout) {
        timer2 = setTimeout(function() {
          setLoadingMessage(null);
        }, timeout);
      }
      if (message.type === "shell/progress" && !isReady) {
        if (!totalDependencies && message.data.state === "downloaded_module") {
          setTotalDependencies(message.data.totalPending);
        }
        if (totalDependencies !== void 0) {
          setLoadingMessage(mapProgressMessage(message.data, totalDependencies));
        }
      }
      if (message.type === "done" && message.compilatonError === false) {
        setLoadingMessage(null);
        setIsReady(true);
        clearTimeout(timer2);
      }
    }, clientId);
    return function() {
      if (timer2) {
        clearTimeout(timer2);
      }
      unsubscribe();
    };
  }, [clientId, isReady, totalDependencies, timeout]);
  return loadingMessage;
};
var MAX_MESSAGE_COUNT$1 = 400 * 2;
var useSandpackShellStdout = function(_a2) {
  var clientId = _a2.clientId, _b2 = _a2.maxMessageCount, maxMessageCount = _b2 === void 0 ? MAX_MESSAGE_COUNT$1 : _b2;
  _a2.resetOnPreviewRestart;
  var _d = reactExports.useState([]), logs = _d[0], setLogs = _d[1];
  var listen = useSandpack().listen;
  reactExports.useEffect(function() {
    var unsubscribe = listen(function(message) {
      if (message.type === "start") {
        setLogs([]);
      } else if (message.type === "stdout" && message.payload.data && Boolean(message.payload.data.trim())) {
        setLogs(function(prev) {
          var messages2 = __spreadArray$1(__spreadArray$1([], prev, true), [
            { data: message.payload.data, id: generateRandomId() }
          ], false);
          while (messages2.length > maxMessageCount) {
            messages2.shift();
          }
          return messages2;
        });
      }
    }, clientId);
    return unsubscribe;
  }, [maxMessageCount, clientId]);
  return { logs, reset: function() {
    return setLogs([]);
  } };
};
var mapBundlerErrors = function(originalMessage) {
  var errorMessage = originalMessage.replace("[sandpack-client]: ", "");
  if (/process.exit/.test(errorMessage)) {
    var exitCode = errorMessage.match(/process.exit\((\d+)\)/);
    if (!exitCode)
      return errorMessage;
    if (Number(exitCode[1]) === 0) {
      return "Server is not running, would you like to start it again?";
    }
    return "Server has crashed with status code " + exitCode[1] + ", would you like to restart the server?";
  }
  return errorMessage;
};
var ErrorOverlay = function(props) {
  var children = props.children, className = props.className, otherProps = __rest(props, ["children", "className"]);
  var errorMessage = useErrorMessage();
  var restart = useSandpackShell().restart;
  var classNames = useClassNames();
  var _a2 = useSandpack().sandpack, runSandpack = _a2.runSandpack, teamId = _a2.teamId;
  var dispatch = useSandpack().dispatch;
  if (!errorMessage && !children) {
    return null;
  }
  var isSandpackBundlerError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith("[sandpack-client]");
  var privateDependencyError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.includes("NPM_REGISTRY_UNAUTHENTICATED_REQUEST");
  var onSignIn = function() {
    if (teamId) {
      dispatch({ type: "sign-in", teamId });
    }
  };
  if (privateDependencyError) {
    return jsxRuntimeExports.jsxs("div", __assign({ className: classNames("overlay", [
      classNames("error"),
      absoluteClassName,
      errorBundlerClassName,
      className
    ]) }, props, { children: [jsxRuntimeExports.jsx("p", __assign({ className: classNames("error-message", [errorMessageClassName]) }, { children: jsxRuntimeExports.jsx("strong", { children: "Unable to fetch required dependency." }, void 0) }), void 0), jsxRuntimeExports.jsx("div", __assign({ className: classNames("error-message", [errorMessageClassName]) }, { children: jsxRuntimeExports.jsxs("p", { children: ["Authentication required. Please sign in to your account (make sure to allow pop-ups to this page) and try again. If the issue persists, contact", " ", jsxRuntimeExports.jsx("a", __assign({ href: "mailto:hello@codesandbox.io?subject=Sandpack Timeout Error" }, { children: "support" }), void 0), " ", "for further assistance."] }, void 0) }), void 0), jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsxs("button", __assign({ className: classNames("button", [
      buttonClassName,
      iconStandaloneClassName,
      roundedButtonClassName
    ]), onClick: onSignIn }, { children: [jsxRuntimeExports.jsx(SignInIcon, {}, void 0), jsxRuntimeExports.jsx("span", { children: "Sign in" }, void 0)] }), void 0) }, void 0)] }), void 0);
  }
  if (isSandpackBundlerError && errorMessage) {
    return jsxRuntimeExports.jsx("div", __assign({ className: classNames("overlay", [
      classNames("error"),
      absoluteClassName,
      errorBundlerClassName,
      className
    ]) }, otherProps, { children: jsxRuntimeExports.jsxs("div", __assign({ className: classNames("error-message", [errorMessageClassName]) }, { children: [jsxRuntimeExports.jsx("p", __assign({ className: classNames("error-title", [css({ fontWeight: "bold" })]) }, { children: "Couldn't connect to server" }), void 0), jsxRuntimeExports.jsx("p", { children: mapBundlerErrors(errorMessage) }, void 0), jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsxs("button", __assign({ className: classNames("button", [
      classNames("icon-standalone"),
      buttonClassName,
      iconStandaloneClassName,
      roundedButtonClassName
    ]), onClick: function() {
      restart();
      runSandpack();
    }, title: "Restart script", type: "button" }, { children: [jsxRuntimeExports.jsx(RestartIcon, {}, void 0), " ", jsxRuntimeExports.jsx("span", { children: "Restart" }, void 0)] }), void 0) }, void 0)] }), void 0) }), void 0);
  }
  return jsxRuntimeExports.jsxs("div", __assign({ className: classNames("overlay", [
    classNames("error"),
    absoluteClassName,
    errorClassName({ solidBg: true }),
    className
  ]), translate: "no" }, otherProps, { children: [jsxRuntimeExports.jsx("p", __assign({ className: classNames("error-message", [errorMessageClassName]) }, { children: jsxRuntimeExports.jsx("strong", { children: "Something went wrong" }, void 0) }), void 0), jsxRuntimeExports.jsx("p", __assign({ className: classNames("error-message", [
    errorMessageClassName({ errorCode: true })
  ]) }, { children: errorMessage || children }), void 0)] }), void 0);
};
function ansiToJSON(input, use_classes) {
  if (use_classes === void 0) {
    use_classes = false;
  }
  input = escapeCarriageExports.escapeCarriageReturn(fixBackspace(input));
  return Anser.ansiToJson(input, {
    json: true,
    remove_empty: true,
    use_classes
  });
}
function createClass(bundle) {
  var classNames = "";
  if (bundle.bg) {
    classNames += bundle.bg + "-bg ";
  }
  if (bundle.fg) {
    classNames += bundle.fg + "-fg ";
  }
  if (bundle.decoration) {
    classNames += "ansi-" + bundle.decoration + " ";
  }
  if (classNames === "") {
    return null;
  }
  classNames = classNames.substring(0, classNames.length - 1);
  return classNames;
}
function createStyle(bundle) {
  var style = {};
  if (bundle.bg) {
    style.backgroundColor = "rgb(" + bundle.bg + ")";
  }
  if (bundle.fg) {
    style.color = "rgb(" + bundle.fg + ")";
  }
  switch (bundle.decoration) {
    case "bold":
      style.fontWeight = "bold";
      break;
    case "dim":
      style.opacity = "0.5";
      break;
    case "italic":
      style.fontStyle = "italic";
      break;
    case "hidden":
      style.visibility = "hidden";
      break;
    case "strikethrough":
      style.textDecoration = "line-through";
      break;
    case "underline":
      style.textDecoration = "underline";
      break;
    case "blink":
      style.textDecoration = "blink";
      break;
  }
  return style;
}
function convertBundleIntoReact(linkify, useClasses, bundle, key) {
  var style = useClasses ? null : createStyle(bundle);
  var className = useClasses ? createClass(bundle) : null;
  if (!linkify) {
    return reactExports.createElement("span", { style, key, className }, bundle.content);
  }
  var content2 = [];
  var linkRegex = /(\s|^)(https?:\/\/(?:www\.|(?!www))[^\s.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/g;
  var index = 0;
  var match;
  while ((match = linkRegex.exec(bundle.content)) !== null) {
    var pre = match[1], url = match[2];
    var startIndex = match.index + pre.length;
    if (startIndex > index) {
      content2.push(bundle.content.substring(index, startIndex));
    }
    var href = url.startsWith("www.") ? "http://" + url : url;
    content2.push(reactExports.createElement("a", {
      key: index,
      href,
      target: "_blank"
    }, "" + url));
    index = linkRegex.lastIndex;
  }
  if (index < bundle.content.length) {
    content2.push(bundle.content.substring(index));
  }
  return reactExports.createElement("span", { style, key, className }, content2);
}
function Ansi(props) {
  var className = props.className, useClasses = props.useClasses, children = props.children, linkify = props.linkify;
  return reactExports.createElement("code", { className }, ansiToJSON(children !== null && children !== void 0 ? children : "", useClasses !== null && useClasses !== void 0 ? useClasses : false).map(convertBundleIntoReact.bind(null, linkify !== null && linkify !== void 0 ? linkify : false, useClasses !== null && useClasses !== void 0 ? useClasses : false)));
}
function fixBackspace(txt) {
  var tmp = txt;
  do {
    txt = tmp;
    tmp = txt.replace(/[^\n]\x08/gm, "");
  } while (tmp.length < txt.length);
  return txt;
}
var StdoutList = function(_a2) {
  var data = _a2.data;
  var classNames = useClassNames();
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: data.map(function(_a3) {
    var data2 = _a3.data, id2 = _a3.id;
    return jsxRuntimeExports.jsx("div", __assign({ className: classNames("console-item", [consoleItemClassName$1]) }, { children: jsxRuntimeExports.jsx(Ansi, { children: data2 }, void 0) }), id2);
  }) }, void 0);
};
var consoleItemClassName$1 = css({
  width: "100%",
  padding: "$space$3 $space$2",
  fontSize: ".85em",
  position: "relative",
  whiteSpace: "pre",
  "&:not(:first-child):after": {
    content: "",
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    height: 1,
    background: "$colors$surface3"
  }
});
var getParameters = function(parameters) {
  return LZString.compressToBase64(JSON.stringify(parameters)).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
};
var CSB_URL = "https://codesandbox.io/api/v1/sandboxes/define";
var getFileParameters = function(files, environment) {
  var normalizedFiles = Object.keys(files).reduce(function(prev, next) {
    var _a2;
    var fileName = next.replace("/", "");
    var value = {
      content: files[next].code,
      isBinary: false
    };
    return __assign(__assign({}, prev), (_a2 = {}, _a2[fileName] = value, _a2));
  }, {});
  return getParameters(__assign({ files: normalizedFiles }, environment ? { template: environment } : null));
};
var UnstyledOpenInCodeSandboxButton = function(_a2) {
  var _b2, _c2, _d;
  var children = _a2.children, props = __rest(_a2, ["children"]);
  var sandpack2 = useSandpack().sandpack;
  var formRef = reactExports.useRef(null);
  var _e = reactExports.useState(), paramsValues = _e[0], setParamsValues = _e[1];
  reactExports.useEffect(function debounce() {
    var timer2 = setTimeout(function() {
      var params = getFileParameters(sandpack2.files, sandpack2.environment);
      var searchParams = new URLSearchParams({
        parameters: params,
        query: new URLSearchParams({
          file: sandpack2.activeFile,
          utm_medium: "sandpack"
        }).toString()
      });
      setParamsValues(searchParams);
    }, 600);
    return function() {
      clearTimeout(timer2);
    };
  }, [sandpack2.activeFile, sandpack2.environment, sandpack2.files]);
  if (((_d = (_c2 = (_b2 = paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.get) === null || _b2 === void 0 ? void 0 : _b2.call(paramsValues, "parameters")) === null || _c2 === void 0 ? void 0 : _c2.length) !== null && _d !== void 0 ? _d : 0) > 1500) {
    return jsxRuntimeExports.jsxs("button", __assign({ onClick: function() {
      var _a3;
      return (_a3 = formRef.current) === null || _a3 === void 0 ? void 0 : _a3.submit();
    }, title: "Open in CodeSandbox", type: "button" }, props, { children: [jsxRuntimeExports.jsxs("form", __assign({ ref: formRef, action: CSB_URL, method: "POST", style: { visibility: "hidden" }, target: "_blank" }, { children: [jsxRuntimeExports.jsx("input", { name: "environment", type: "hidden", value: sandpack2.environment === "node" ? "server" : sandpack2.environment }, void 0), Array.from(paramsValues, function(_a3) {
      var key = _a3[0], value = _a3[1];
      return jsxRuntimeExports.jsx("input", { name: key, type: "hidden", value }, key);
    })] }), void 0), children] }), void 0);
  }
  return jsxRuntimeExports.jsx("a", __assign({ href: CSB_URL + "?" + (paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.toString()) + "&environment=" + (sandpack2.environment === "node" ? "server" : sandpack2.environment), rel: "noreferrer noopener", target: "_blank", title: "Open in CodeSandbox" }, props, { children }), void 0);
};
var OpenInCodeSandboxButton = function() {
  var classNames = useClassNames();
  return jsxRuntimeExports.jsxs(UnstyledOpenInCodeSandboxButton, __assign({ className: classNames("button", [
    classNames("icon-standalone"),
    buttonClassName,
    iconStandaloneClassName,
    roundedButtonClassName
  ]) }, { children: [jsxRuntimeExports.jsx(ExportIcon, {}, void 0), jsxRuntimeExports.jsx("span", { children: "Open Sandbox" }, void 0)] }), void 0);
};
var _a$3;
var cubeClassName = css({
  transform: "translate(-4px, 9px) scale(0.13, 0.13)",
  "*": { position: "absolute", width: "96px", height: "96px" }
});
var wrapperClassName$2 = css((_a$3 = {
  position: "absolute",
  right: "$space$2",
  bottom: "$space$2",
  zIndex: "$top",
  width: "32px",
  height: "32px",
  borderRadius: "$border$radius"
}, _a$3["." + cubeClassName] = { display: "flex" }, _a$3[".sp-button." + buttonClassName] = { display: "none" }, _a$3["&:hover .sp-button." + buttonClassName] = { display: "flex" }, _a$3["&:hover .sp-button." + buttonClassName + " > span"] = { display: "none" }, _a$3["&:hover ." + cubeClassName] = { display: "none" }, _a$3));
var cubeRotate = keyframes({
  "0%": {
    transform: "rotateX(-25.5deg) rotateY(45deg)"
  },
  "100%": {
    transform: "rotateX(-25.5deg) rotateY(405deg)"
  }
});
var sidesClassNames = css({
  animation: cubeRotate + " 1s linear infinite",
  animationFillMode: "forwards",
  transformStyle: "preserve-3d",
  transform: "rotateX(-25.5deg) rotateY(45deg)",
  "*": {
    border: "10px solid $colors$clickable",
    borderRadius: "8px",
    background: "$colors$surface1"
  },
  ".top": {
    transform: "rotateX(90deg) translateZ(44px)",
    transformOrigin: "50% 50%"
  },
  ".bottom": {
    transform: "rotateX(-90deg) translateZ(44px)",
    transformOrigin: "50% 50%"
  },
  ".front": {
    transform: "rotateY(0deg) translateZ(44px)",
    transformOrigin: "50% 50%"
  },
  ".back": {
    transform: "rotateY(-180deg) translateZ(44px)",
    transformOrigin: "50% 50%"
  },
  ".left": {
    transform: "rotateY(-90deg) translateZ(44px)",
    transformOrigin: "50% 50%"
  },
  ".right": {
    transform: "rotateY(90deg) translateZ(44px)",
    transformOrigin: "50% 50%"
  }
});
var Loading = function(_a2) {
  var className = _a2.className, showOpenInCodeSandbox = _a2.showOpenInCodeSandbox, props = __rest(_a2, ["className", "showOpenInCodeSandbox"]);
  var classNames = useClassNames();
  return jsxRuntimeExports.jsxs("div", __assign({ className: classNames("cube-wrapper", [wrapperClassName$2, className]), title: "Open in CodeSandbox" }, props, { children: [showOpenInCodeSandbox && jsxRuntimeExports.jsx(OpenInCodeSandboxButton, {}, void 0), jsxRuntimeExports.jsx("div", __assign({ className: classNames("cube", [cubeClassName]) }, { children: jsxRuntimeExports.jsxs("div", __assign({ className: classNames("sides", [sidesClassNames]) }, { children: [jsxRuntimeExports.jsx("div", { className: "top" }, void 0), jsxRuntimeExports.jsx("div", { className: "right" }, void 0), jsxRuntimeExports.jsx("div", { className: "bottom" }, void 0), jsxRuntimeExports.jsx("div", { className: "left" }, void 0), jsxRuntimeExports.jsx("div", { className: "front" }, void 0), jsxRuntimeExports.jsx("div", { className: "back" }, void 0)] }), void 0) }), void 0)] }), void 0);
};
var loadingClassName = css({
  backgroundColor: "$colors$surface1"
});
var LoadingOverlay = function(_a2) {
  var clientId = _a2.clientId, loading = _a2.loading, className = _a2.className, style = _a2.style, showOpenInCodeSandbox = _a2.showOpenInCodeSandbox, props = __rest(_a2, ["clientId", "loading", "className", "style", "showOpenInCodeSandbox"]);
  var classNames = useClassNames();
  var _b2 = useSandpack().sandpack, runSandpack = _b2.runSandpack, environment = _b2.environment;
  var _c2 = reactExports.useState(false), shouldShowStdout = _c2[0], setShouldShowStdout = _c2[1];
  var loadingOverlayState = useLoadingOverlayState(clientId, loading);
  var progressMessage = useSandpackPreviewProgress({ clientId });
  var stdoutData = useSandpackShellStdout({ clientId }).logs;
  reactExports.useEffect(function() {
    var timer2;
    if (progressMessage === null || progressMessage === void 0 ? void 0 : progressMessage.includes("Running")) {
      timer2 = setTimeout(function() {
        setShouldShowStdout(true);
      }, 3e3);
    }
    return function() {
      if (timer2) {
        clearTimeout(timer2);
      }
    };
  }, [progressMessage]);
  if (loadingOverlayState === "HIDDEN") {
    return null;
  }
  if (loadingOverlayState === "TIMEOUT") {
    return jsxRuntimeExports.jsx("div", __assign({ className: classNames("overlay", [
      classNames("error"),
      absoluteClassName,
      errorClassName,
      errorBundlerClassName,
      className
    ]) }, props, { children: jsxRuntimeExports.jsxs("div", __assign({ className: classNames("error-message", [errorMessageClassName]) }, { children: [jsxRuntimeExports.jsx("p", __assign({ className: classNames("error-title", [css({ fontWeight: "bold" })]) }, { children: "Couldn't connect to server" }), void 0), jsxRuntimeExports.jsx("div", __assign({ className: classNames("error-message", [errorMessageClassName]) }, { children: jsxRuntimeExports.jsxs("p", { children: ["This means sandpack cannot connect to the runtime or your network is having some issues. Please check the network tab in your browser and try again. If the problem persists, report it via", " ", jsxRuntimeExports.jsx("a", __assign({ href: "mailto:hello@codesandbox.io?subject=Sandpack Timeout Error" }, { children: "email" }), void 0), " ", "or submit an issue on", " ", jsxRuntimeExports.jsx("a", __assign({ href: "https://github.com/codesandbox/sandpack/issues", rel: "noreferrer noopener", target: "_blank" }, { children: "GitHub." }), void 0)] }, void 0) }), void 0), jsxRuntimeExports.jsxs("p", __assign({ className: classNames("error-message", [
      errorMessageClassName({ errorCode: true })
    ]) }, { children: ["ENV: ", environment, jsxRuntimeExports.jsx("br", {}, void 0), "ERROR: TIME_OUT"] }), void 0), jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsxs("button", __assign({ className: classNames("button", [
      classNames("icon-standalone"),
      buttonClassName,
      iconStandaloneClassName,
      roundedButtonClassName
    ]), onClick: runSandpack, title: "Restart script", type: "button" }, { children: [jsxRuntimeExports.jsx(RestartIcon, {}, void 0), " ", jsxRuntimeExports.jsx("span", { children: "Try again" }, void 0)] }), void 0) }, void 0)] }), void 0) }), void 0);
  }
  var stillLoading = loadingOverlayState === "LOADING" || loadingOverlayState === "PRE_FADING";
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs("div", __assign({ className: classNames("overlay", [
    classNames("loading"),
    absoluteClassName,
    loadingClassName,
    className
  ]), style: __assign(__assign({}, style), { opacity: stillLoading ? 1 : 0, transition: "opacity " + FADE_ANIMATION_DURATION + "ms ease-out" }) }, props, { children: [shouldShowStdout && jsxRuntimeExports.jsx("div", __assign({ className: stdoutPreview.toString() }, { children: jsxRuntimeExports.jsx(StdoutList, { data: stdoutData }, void 0) }), void 0), jsxRuntimeExports.jsx(Loading, { showOpenInCodeSandbox }, void 0)] }), void 0), progressMessage && jsxRuntimeExports.jsx("div", __assign({ className: progressClassName$1.toString() }, { children: jsxRuntimeExports.jsx("p", { children: progressMessage }, void 0) }), void 0)] }, void 0);
};
var stdoutPreview = css({
  position: "absolute",
  left: 0,
  right: 0,
  bottom: "$space$8",
  overflow: "auto",
  opacity: 0.5,
  overflowX: "hidden"
});
var progressClassName$1 = css({
  position: "absolute",
  left: "$space$5",
  bottom: "$space$4",
  zIndex: "$top",
  color: "$colors$clickable",
  animation: fadeIn + " 150ms ease",
  fontFamily: "$font$mono",
  fontSize: ".8em",
  width: "75%",
  p: {
    whiteSpace: "nowrap",
    margin: 0,
    textOverflow: "ellipsis",
    overflow: "hidden"
  }
});
var DependenciesProgress = function(_a2) {
  var clientId = _a2.clientId;
  var progressMessage = useSandpackPreviewProgress({
    timeout: 3e3,
    clientId
  });
  if (!progressMessage) {
    return null;
  }
  return jsxRuntimeExports.jsx("div", __assign({ className: progressClassName.toString() }, { children: jsxRuntimeExports.jsx("p", { children: progressMessage }, void 0) }), void 0);
};
var progressClassName = css({
  position: "absolute",
  left: "$space$5",
  bottom: "$space$4",
  zIndex: "$top",
  color: "$colors$clickable",
  animation: fadeIn + " 150ms ease",
  fontFamily: "$font$mono",
  fontSize: ".8em",
  width: "75%",
  p: {
    whiteSpace: "nowrap",
    margin: 0,
    textOverflow: "ellipsis",
    overflow: "hidden"
  }
});
css({
  borderRadius: "0",
  width: "100%",
  padding: 0,
  marginBottom: "$space$2",
  span: {
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  },
  svg: {
    marginRight: "$space$1"
  }
});
css({
  padding: "$space$3",
  overflow: "auto",
  height: "100%"
});
var splitUrl = function(url) {
  var match = url.match(/(https?:\/\/.*?)\//);
  if (match && match[1]) {
    return [match[1], url.replace(match[1], "")];
  }
  return [url, "/"];
};
var navigatorClassName = css({
  display: "flex",
  alignItems: "center",
  height: "$layout$headerHeight",
  borderBottom: "1px solid $colors$surface2",
  padding: "$space$3 $space$2",
  background: "$colors$surface1"
});
var inputClassName = css({
  backgroundColor: "$colors$surface2",
  color: "$colors$clickable",
  padding: "$space$1 $space$3",
  borderRadius: "99999px",
  border: "1px solid $colors$surface2",
  height: "24px",
  lineHeight: "24px",
  fontSize: "inherit",
  outline: "none",
  flex: 1,
  marginLeft: "$space$4",
  width: "0",
  transition: "background $transitions$default",
  "&:hover": {
    backgroundColor: "$colors$surface3"
  },
  "&:focus": {
    backgroundColor: "$surface1",
    border: "1px solid $colors$accent",
    color: "$colors$base"
  }
});
var Navigator = function(_a2) {
  var _b2;
  var clientId = _a2.clientId, onURLChange = _a2.onURLChange, className = _a2.className, startRoute = _a2.startRoute, props = __rest(_a2, ["clientId", "onURLChange", "className", "startRoute"]);
  var _c2 = reactExports.useState(""), baseUrl = _c2[0], setBaseUrl = _c2[1];
  var _d = useSandpack(), sandpack2 = _d.sandpack, dispatch = _d.dispatch, listen = _d.listen;
  var _e = reactExports.useState((_b2 = startRoute !== null && startRoute !== void 0 ? startRoute : sandpack2.startRoute) !== null && _b2 !== void 0 ? _b2 : "/"), relativeUrl = _e[0], setRelativeUrl = _e[1];
  var _f = reactExports.useState(false), backEnabled = _f[0], setBackEnabled = _f[1];
  var _g = reactExports.useState(false), forwardEnabled = _g[0], setForwardEnabled = _g[1];
  var classNames = useClassNames();
  reactExports.useEffect(function() {
    var unsub = listen(function(message) {
      if (message.type === "urlchange") {
        var url = message.url, back = message.back, forward = message.forward;
        var _a3 = splitUrl(url), newBaseUrl = _a3[0], newRelativeUrl = _a3[1];
        setBaseUrl(newBaseUrl);
        setRelativeUrl(newRelativeUrl);
        setBackEnabled(back);
        setForwardEnabled(forward);
      }
    }, clientId);
    return function() {
      return unsub();
    };
  }, []);
  var handleInputChange = function(e) {
    var path = e.target.value.startsWith("/") ? e.target.value : "/" + e.target.value;
    setRelativeUrl(path);
  };
  var handleKeyDown = function(e) {
    if (e.code === "Enter") {
      e.preventDefault();
      e.stopPropagation();
      if (typeof onURLChange === "function") {
        onURLChange(baseUrl + e.currentTarget.value);
      }
    }
  };
  var handleRefresh = function() {
    dispatch({ type: "refresh" });
  };
  var handleBack = function() {
    dispatch({ type: "urlback" });
  };
  var handleForward = function() {
    dispatch({ type: "urlforward" });
  };
  var buttonsClassNames = classNames("button", [
    classNames("icon"),
    buttonClassName,
    iconClassName,
    css({
      minWidth: "$space$6",
      justifyContent: "center"
    })
  ]);
  return jsxRuntimeExports.jsxs("div", __assign({ className: classNames("navigator", [navigatorClassName, className]) }, props, { children: [jsxRuntimeExports.jsx("button", __assign({ "aria-label": "Go back one page", className: buttonsClassNames, disabled: !backEnabled, onClick: handleBack, type: "button" }, { children: jsxRuntimeExports.jsx(BackwardIcon, {}, void 0) }), void 0), jsxRuntimeExports.jsx("button", __assign({ "aria-label": "Go forward one page", className: buttonsClassNames, disabled: !forwardEnabled, onClick: handleForward, type: "button" }, { children: jsxRuntimeExports.jsx(ForwardIcon, {}, void 0) }), void 0), jsxRuntimeExports.jsx("button", __assign({ "aria-label": "Refresh page", className: buttonsClassNames, onClick: handleRefresh, type: "button" }, { children: jsxRuntimeExports.jsx(RefreshIcon, {}, void 0) }), void 0), jsxRuntimeExports.jsx("input", { "aria-label": "Current Sandpack URL", className: classNames("input", [inputClassName]), name: "Current Sandpack URL", onChange: handleInputChange, onKeyDown: handleKeyDown, type: "text", value: relativeUrl }, void 0)] }), void 0);
};
var _a$2;
var previewClassName = css((_a$2 = {
  flex: 1,
  display: "flex",
  flexDirection: "column",
  background: "white",
  overflow: "auto",
  position: "relative"
}, _a$2["." + THEME_PREFIX + "-bridge-frame"] = {
  border: 0,
  position: "absolute",
  left: "$space$2",
  bottom: "$space$2",
  zIndex: "$top",
  height: 12,
  width: "30%",
  mixBlendMode: "multiply",
  pointerEvents: "none"
}, _a$2));
var previewIframe = css({
  border: "0",
  outline: "0",
  width: "100%",
  height: "100%",
  minHeight: "160px",
  maxHeight: "2000px",
  flex: 1
});
var previewActionsClassName$1 = css({
  display: "flex",
  position: "absolute",
  bottom: "$space$2",
  right: "$space$2",
  zIndex: "$overlay",
  gap: "$space$2"
});
var SandpackPreview = reactExports.forwardRef(function(_a2, ref) {
  var _b2 = _a2.showNavigator, showNavigator = _b2 === void 0 ? false : _b2, _c2 = _a2.showRefreshButton, showRefreshButton = _c2 === void 0 ? true : _c2, _d = _a2.showOpenInCodeSandbox, showOpenInCodeSandbox = _d === void 0 ? true : _d, _e = _a2.showSandpackErrorOverlay, showSandpackErrorOverlay = _e === void 0 ? true : _e;
  _a2.showOpenNewtab;
  var _g = _a2.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a2.actionsChildren, actionsChildren = _h === void 0 ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}, void 0) : _h, children = _a2.children, className = _a2.className, _j = _a2.startRoute, startRoute = _j === void 0 ? "/" : _j, props = __rest(_a2, ["showNavigator", "showRefreshButton", "showOpenInCodeSandbox", "showSandpackErrorOverlay", "showOpenNewtab", "showRestartButton", "actionsChildren", "children", "className", "startRoute"]);
  var _k = useSandpackClient({ startRoute }), sandpack2 = _k.sandpack, listen = _k.listen, iframe = _k.iframe, getClient = _k.getClient, clientId = _k.clientId, dispatch = _k.dispatch;
  var _l = reactExports.useState(null), iframeComputedHeight = _l[0], setComputedAutoHeight = _l[1];
  var status = sandpack2.status;
  var refresh = useSandpackNavigation(clientId).refresh;
  var restart = useSandpackShell(clientId).restart;
  var classNames = useClassNames();
  reactExports.useEffect(function() {
    var unsubscribe = listen(function(message) {
      if (message.type === "resize") {
        setComputedAutoHeight(message.height);
      }
    });
    return unsubscribe;
  }, []);
  reactExports.useImperativeHandle(ref, function() {
    return {
      clientId,
      getClient
    };
  }, [getClient, clientId]);
  var handleNewURL = function(newUrl) {
    if (!iframe.current) {
      return;
    }
    iframe.current.src = newUrl;
  };
  return jsxRuntimeExports.jsxs(SandpackStack, __assign({ className: classNames("preview", [className]) }, props, { children: [showNavigator && jsxRuntimeExports.jsx(Navigator, { clientId, onURLChange: handleNewURL, startRoute }, void 0), jsxRuntimeExports.jsxs("div", __assign({ className: classNames("preview-container", [previewClassName]) }, { children: [jsxRuntimeExports.jsx("iframe", { ref: iframe, className: classNames("preview-iframe", [previewIframe]), style: {
    // set height based on the content only in auto mode
    // and when the computed height was returned by the bundler
    height: iframeComputedHeight ? iframeComputedHeight : void 0
  }, title: "Sandpack Preview" }, void 0), jsxRuntimeExports.jsxs("div", __assign({ className: classNames("preview-actions", [previewActionsClassName$1]) }, { children: [actionsChildren, showRestartButton && sandpack2.environment === "node" && jsxRuntimeExports.jsx(RoundedButton, __assign({ onClick: restart }, { children: jsxRuntimeExports.jsx(RestartIcon, {}, void 0) }), void 0), !showNavigator && showRefreshButton && status === "running" && jsxRuntimeExports.jsx(RoundedButton, __assign({ onClick: refresh }, { children: jsxRuntimeExports.jsx(RefreshIcon, {}, void 0) }), void 0), sandpack2.teamId && jsxRuntimeExports.jsx("button", __assign({ className: classNames("button", [
    classNames("icon-standalone"),
    buttonClassName,
    iconStandaloneClassName,
    roundedButtonClassName
  ]), onClick: function() {
    return dispatch({ type: "sign-out" });
  }, title: "Sign out", type: "button" }, { children: jsxRuntimeExports.jsx(SignOutIcon, {}, void 0) }), void 0), showOpenInCodeSandbox && jsxRuntimeExports.jsx(OpenInCodeSandboxButton, {}, void 0)] }), void 0), jsxRuntimeExports.jsx(LoadingOverlay, { clientId, showOpenInCodeSandbox }, void 0), showSandpackErrorOverlay && jsxRuntimeExports.jsx(ErrorOverlay, {}, void 0), children] }), void 0)] }), void 0);
});
var _a$1;
css((_a$1 = {
  display: "flex",
  flexDirection: "column",
  width: "100%",
  position: "relative",
  overflow: "auto",
  minHeight: "160px",
  flex: 1
}, _a$1["." + THEME_PREFIX + "-stack"] = {
  height: "100%"
}, _a$1));
css({
  justifyContent: "space-between",
  borderBottom: "1px solid $colors$surface2",
  padding: "0 $space$2",
  fontFamily: "$font$mono",
  height: "$layout$headerHeight",
  minHeight: "$layout$headerHeight",
  overflowX: "auto",
  whiteSpace: "nowrap"
});
css({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  gap: "$space$2"
});
var color = css({
  variants: {
    status: {
      pass: { color: "var(--test-pass)" },
      fail: { color: "var(--test-fail)" },
      skip: { color: "var(--test-skip)" },
      title: { color: "var(--test-title)" }
    }
  }
});
color({ status: "pass" });
color({ status: "fail" });
color({ status: "skip" });
color({ status: "title" });
var background = css({
  variants: {
    status: {
      pass: { background: "var(--test-pass)", color: "$colors$surface1" },
      fail: { background: "var(--test-fail)", color: "$colors$surface1" },
      run: { background: "var(--test-run)", color: "$colors$surface1" }
    }
  }
});
background({ status: "run" });
background({ status: "pass" });
background({ status: "fail" });
css({
  marginLeft: "$space$4"
});
css({
  marginBottom: "$space$2",
  color: "$colors$clickable"
});
css({
  marginBottom: "$space$2",
  color: "$colors$hover"
});
css({
  marginLeft: "$space$2"
});
css({
  marginRight: "$space$2"
});
css({
  color: "$colors$hover",
  marginBottom: "$space$2"
});
css({
  marginLeft: "$space$4"
});
css({
  color: "$colors$hover",
  fontSize: "$font$size",
  padding: "$space$2",
  whiteSpace: "pre-wrap"
});
css({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  marginBottom: "$space$2"
});
css({
  marginBottom: "$space$2"
});
css({
  fontWeight: "bold"
});
css({
  borderRadius: "calc($border$radius / 2)"
});
css({
  padding: "$space$1 $space$2",
  fontFamily: "$font$mono",
  textTransform: "uppercase",
  marginRight: "$space$2"
});
css({
  fontFamily: "$font$mono",
  cursor: "pointer",
  display: "inline-block"
});
css({
  color: "$colors$clickable",
  textDecorationStyle: "dotted",
  textDecorationLine: "underline"
});
css({
  color: "$colors$hover",
  fontWeight: "bold",
  textDecorationStyle: "dotted",
  textDecorationLine: "underline"
});
css({
  marginBottom: "$space$2"
});
css({
  fontWeight: "bold",
  color: "$colors$hover",
  whiteSpace: "pre-wrap"
});
css({
  fontWeight: "bold",
  color: "$colors$clickable"
});
css({
  display: "flex",
  position: "absolute",
  bottom: "$space$2",
  right: "$space$2",
  zIndex: "$overlay",
  "> *": { marginLeft: "$space$2" }
});
css({
  padding: "$space$4",
  height: "100%",
  overflow: "auto",
  display: "flex",
  flexDirection: "column",
  position: "relative",
  fontFamily: "$font$mono"
});
css({
  fontWeight: "bold",
  color: "$colors$base"
});
var SYNTAX_ERROR_PATTERN = ["SyntaxError: ", "Error in sandbox:"];
var CLEAR_LOG = {
  id: "random",
  method: "clear",
  data: ["Console was cleared"]
};
var TRANSFORMED_TYPE_KEY = "@t";
var TRANSFORMED_TYPE_KEY_ALTERNATE = "#@t";
var CIRCULAR_REF_KEY = "@r";
var MAX_LENGTH_STRING = 1e4;
var MAX_NEST_LEVEL = 2;
var MAX_KEYS = 400;
var MAX_MESSAGE_COUNT = MAX_KEYS * 2;
var GLOBAL = function getGlobal() {
  var savedEval = eval;
  return savedEval("this");
}();
var ARRAY_BUFFER_SUPPORTED = typeof ArrayBuffer === "function";
var MAP_SUPPORTED = typeof Map === "function";
var SET_SUPPORTED = typeof Set === "function";
var Arithmetic;
(function(Arithmetic2) {
  Arithmetic2[Arithmetic2["infinity"] = 0] = "infinity";
  Arithmetic2[Arithmetic2["minusInfinity"] = 1] = "minusInfinity";
  Arithmetic2[Arithmetic2["minusZero"] = 2] = "minusZero";
})(Arithmetic || (Arithmetic = {}));
var transformers = {
  Arithmetic: function(data) {
    if (data === Arithmetic.infinity)
      return Infinity;
    if (data === Arithmetic.minusInfinity)
      return -Infinity;
    if (data === Arithmetic.minusZero)
      return -0;
    return data;
  },
  HTMLElement: function(data) {
    var sandbox = document.implementation.createHTMLDocument("sandbox");
    try {
      var element = sandbox.createElement(data.tagName);
      element.innerHTML = data.innerHTML;
      for (var _i = 0, _a2 = Object.keys(data.attributes); _i < _a2.length; _i++) {
        var attribute = _a2[_i];
        try {
          element.setAttribute(attribute, data.attributes[attribute]);
        } catch (_b2) {
        }
      }
      return element;
    } catch (e) {
      return data;
    }
  },
  Function: function(data) {
    var tempFun = function() {
    };
    Object.defineProperty(tempFun, "toString", {
      value: function() {
        return "function " + data.name + "() {" + data.body + "}";
      }
    });
    return tempFun;
  },
  "[[NaN]]": function() {
    return NaN;
  },
  "[[undefined]]": function() {
    return void 0;
  },
  "[[Date]]": function(val) {
    var date = /* @__PURE__ */ new Date();
    date.setTime(val);
    return date;
  },
  "[[RegExp]]": function(val) {
    return new RegExp(val.src, val.flags);
  },
  "[[Error]]": function(val) {
    var Ctor = GLOBAL[val.name] || Error;
    var err = new Ctor(val.message);
    err.stack = val.stack;
    return err;
  },
  "[[ArrayBuffer]]": function(val) {
    if (ARRAY_BUFFER_SUPPORTED) {
      var buffer = new ArrayBuffer(val.length);
      var view = new Int8Array(buffer);
      view.set(val);
      return buffer;
    }
    return val;
  },
  "[[TypedArray]]": function(val) {
    return typeof GLOBAL[val.ctorName] === "function" ? new GLOBAL[val.ctorName](val.arr) : val.arr;
  },
  "[[Map]]": function(val) {
    if (MAP_SUPPORTED) {
      var map2 = /* @__PURE__ */ new Map();
      for (var i = 0; i < val.length; i += 2)
        map2.set(val[i], val[i + 1]);
      return map2;
    }
    var kvArr = [];
    for (var j2 = 0; j2 < val.length; j2 += 2)
      kvArr.push([val[i], val[i + 1]]);
    return kvArr;
  },
  "[[Set]]": function(val) {
    if (SET_SUPPORTED) {
      var set = /* @__PURE__ */ new Set();
      for (var i = 0; i < val.length; i++)
        set.add(val[i]);
      return set;
    }
    return val;
  }
};
var formatSymbols = function(message) {
  var _a2;
  if (typeof message === "string" || typeof message === "number" || message === null) {
    return message;
  } else if (Array.isArray(message)) {
    return message.map(formatSymbols);
  } else if (typeof message == "object" && TRANSFORMED_TYPE_KEY in message) {
    var type = message[TRANSFORMED_TYPE_KEY];
    var transform = transformers[type];
    return transform(message.data);
  } else if (typeof message == "object" && TRANSFORMED_TYPE_KEY_ALTERNATE in message) {
    var type = message[TRANSFORMED_TYPE_KEY_ALTERNATE];
    var transform = transformers[type];
    return transform(message.data);
  } else if (typeof message == "object" && ((_a2 = message.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "NodeList") {
    var NodeList_1 = {};
    Object.entries(message).forEach(function(_a3) {
      var key = _a3[0], value = _a3[1];
      NodeList_1[key] = formatSymbols(value);
    });
    return NodeList_1;
  }
  return message;
};
var arrayToString = function(output, references2, level) {
  var mergeArray = output.reduce(function(acc, curr, index) {
    return "" + acc + (index ? ", " : "") + fromConsoleToString(curr, references2, level);
  }, "");
  return "[" + mergeArray + "]";
};
var objectToString = function(output, references2, level) {
  var constructorName = output.constructor.name !== "Object" ? output.constructor.name + " " : "";
  if (level > MAX_NEST_LEVEL) {
    return constructorName;
  }
  var entries = Object.entries(output);
  var formattedObject = Object.entries(output).reduce(function(acc, _a2, index) {
    var key = _a2[0], value = _a2[1];
    var comma = index === 0 ? "" : ", ";
    var breakLine = entries.length > 10 ? "\n  " : "";
    var formatted = fromConsoleToString(value, references2, level);
    if (index === MAX_KEYS) {
      return acc + breakLine + "...";
    } else if (index > MAX_KEYS) {
      return acc;
    }
    return acc + ("" + comma + breakLine + key + ": ") + formatted;
  }, "");
  return constructorName + "{ " + formattedObject + (entries.length > 10 ? "\n" : " ") + "}";
};
var fromConsoleToString = function(message, references2, level) {
  var _a2;
  if (level === void 0) {
    level = 0;
  }
  try {
    var output_1 = formatSymbols(message);
    if (Array.isArray(output_1)) {
      return arrayToString(output_1, references2, level + 1);
    }
    switch (typeof output_1) {
      case "string":
        return ('"' + output_1 + '"').slice(0, MAX_LENGTH_STRING);
      case "number":
      case "function":
      case "symbol":
        return output_1.toString();
      case "boolean":
        return String(output_1);
      case "undefined":
        return "undefined";
      case "object":
      default:
        if (output_1 instanceof RegExp || output_1 instanceof Error || output_1 instanceof Date) {
          return output_1.toString();
        }
        if (output_1 === null) {
          return String(null);
        }
        if (output_1 instanceof HTMLElement) {
          return output_1.outerHTML.slice(0, MAX_LENGTH_STRING);
        }
        if (Object.entries(output_1).length === 0) {
          return "{}";
        }
        if (CIRCULAR_REF_KEY in output_1) {
          if (level > MAX_NEST_LEVEL) {
            return "Unable to print information";
          }
          var newMessage = references2[output_1[CIRCULAR_REF_KEY]];
          return fromConsoleToString(newMessage, references2, level + 1);
        }
        if (((_a2 = output_1.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "NodeList") {
          var length_1 = output_1.length;
          var nodes = new Array(length_1).fill(null).map(function(_, index) {
            return fromConsoleToString(output_1[index], references2);
          });
          return "NodeList(" + output_1.length + ")[" + nodes + "]";
        }
        return objectToString(output_1, references2, level + 1);
    }
  } catch (_b2) {
    return "Unable to print information";
  }
};
var getType = function(message) {
  switch (message) {
    case "warn":
      return "warning";
    case "clear":
      return "clear";
    case "error":
      return "error";
    case "log":
    case "info":
    default:
      return "info";
  }
};
var _a;
var ConsoleList = function(_a2) {
  var data = _a2.data;
  var classNames = useClassNames();
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: data.map(function(_a3, logIndex, references2) {
    var data2 = _a3.data, id2 = _a3.id, method = _a3.method;
    if (!data2)
      return null;
    if (Array.isArray(data2)) {
      return jsxRuntimeExports.jsx(reactExports.Fragment, { children: data2.map(function(msg, msgIndex) {
        var fixReferences = references2.slice(logIndex, references2.length);
        return jsxRuntimeExports.jsx("div", __assign({ className: classNames("console-item", [
          consoleItemClassName({ variant: getType(method) })
        ]) }, { children: jsxRuntimeExports.jsx(CodeMirror, { code: method === "clear" ? msg : fromConsoleToString(msg, fixReferences), fileType: "js", initMode: "user-visible", showReadOnly: false, readOnly: true, wrapContent: true }, void 0) }), id2 + "-" + msgIndex);
      }) }, id2);
    }
    return null;
  }) }, void 0);
};
var consoleItemClassName = css((_a = {
  width: "100%",
  padding: "$space$3 $space$2",
  fontSize: ".8em",
  position: "relative",
  "&:not(:first-child):after": {
    content: "",
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    height: 1,
    background: "$colors$surface3"
  },
  /**
   * Editor reset
   */
  ".sp-cm": {
    padding: 0
  },
  ".cm-editor": {
    background: "none"
  },
  ".cm-content": {
    padding: 0
  }
}, _a["." + THEME_PREFIX + "-pre-placeholder"] = {
  margin: "0 !important",
  fontSize: "1em"
}, _a.variants = {
  variant: {
    error: {
      color: "$colors$error",
      background: "$colors$errorSurface",
      "&:not(:first-child):after": {
        background: "$colors$error",
        opacity: 0.07
      }
    },
    warning: {
      color: "$colors$warning",
      background: "$colors$warningSurface",
      "&:not(:first-child):after": {
        background: "$colors$warning",
        opacity: 0.07
      }
    },
    clear: {
      fontStyle: "italic"
    },
    info: {}
  }
}, _a));
var wrapperClassName = css({
  justifyContent: "space-between",
  borderBottom: "1px solid $colors$surface2",
  padding: "0 $space$2",
  fontFamily: "$font$mono",
  height: "$layout$headerHeight",
  minHeight: "$layout$headerHeight",
  overflowX: "auto",
  whiteSpace: "nowrap"
});
var flexClassName = css({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  gap: "$space$2"
});
var Header = function(_a2) {
  var currentTab = _a2.currentTab, setCurrentTab = _a2.setCurrentTab, node = _a2.node;
  var classNames = useClassNames();
  var buttonsClassName = classNames("console-header-button", [
    buttonClassName,
    roundedButtonClassName,
    css({ padding: "$space$1 $space$3" })
  ]);
  return jsxRuntimeExports.jsxs("div", __assign({ className: classNames("console-header", [
    wrapperClassName,
    flexClassName
  ]) }, { children: [jsxRuntimeExports.jsxs("p", __assign({ className: classNames("console-header-title", [
    css({
      lineHeight: 1,
      margin: 0,
      color: "$colors$base",
      fontSize: "$font$size",
      display: "flex",
      alignItems: "center",
      gap: "$space$2"
    })
  ]) }, { children: [jsxRuntimeExports.jsx(ConsoleIcon, {}, void 0), jsxRuntimeExports.jsx("span", { children: "Terminal" }, void 0)] }), void 0), node && jsxRuntimeExports.jsxs("div", __assign({ className: classNames("console-header-actions", [flexClassName]) }, { children: [jsxRuntimeExports.jsx("button", __assign({ className: buttonsClassName, "data-active": currentTab === "server", onClick: function() {
    return setCurrentTab("server");
  }, type: "button" }, { children: "Server" }), void 0), jsxRuntimeExports.jsx("button", __assign({ className: buttonsClassName, "data-active": currentTab === "client", onClick: function() {
    return setCurrentTab("client");
  }, type: "button" }, { children: "Client" }), void 0)] }), void 0)] }), void 0);
};
var useSandpackConsole = function(_a2) {
  var clientId = _a2.clientId, _b2 = _a2.maxMessageCount, maxMessageCount = _b2 === void 0 ? MAX_MESSAGE_COUNT : _b2, _c2 = _a2.showSyntaxError, showSyntaxError = _c2 === void 0 ? false : _c2, _d = _a2.resetOnPreviewRestart, resetOnPreviewRestart = _d === void 0 ? false : _d;
  var _e = reactExports.useState([]), logs = _e[0], setLogs = _e[1];
  var listen = useSandpack().listen;
  reactExports.useEffect(function() {
    var unsubscribe = listen(function(message) {
      if (resetOnPreviewRestart && message.type === "start") {
        setLogs([]);
      } else if (message.type === "console" && message.codesandbox) {
        var payloadLog = Array.isArray(message.log) ? message.log : [message.log];
        if (payloadLog.find(function(_a3) {
          var method = _a3.method;
          return method === "clear";
        })) {
          return setLogs([CLEAR_LOG]);
        }
        var logsMessages_1 = showSyntaxError ? payloadLog : payloadLog.filter(function(messageItem) {
          var _a3, _b3, _c3;
          var messagesWithoutSyntaxErrors = (_c3 = (_b3 = (_a3 = messageItem === null || messageItem === void 0 ? void 0 : messageItem.data) === null || _a3 === void 0 ? void 0 : _a3.filter) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, function(dataItem) {
            if (typeof dataItem !== "string")
              return true;
            var matches = SYNTAX_ERROR_PATTERN.filter(function(lookFor) {
              return dataItem.startsWith(lookFor);
            });
            return matches.length === 0;
          })) !== null && _c3 !== void 0 ? _c3 : [];
          return messagesWithoutSyntaxErrors.length > 0;
        });
        if (!logsMessages_1)
          return;
        setLogs(function(prev) {
          var messages2 = __spreadArray$1(__spreadArray$1([], prev, true), logsMessages_1, true).filter(function(value, index, self2) {
            return index === self2.findIndex(function(s2) {
              return s2.id === value.id;
            });
          });
          while (messages2.length > maxMessageCount) {
            messages2.shift();
          }
          return messages2;
        });
      }
    }, clientId);
    return unsubscribe;
  }, [showSyntaxError, maxMessageCount, clientId, resetOnPreviewRestart]);
  return { logs, reset: function() {
    return setLogs([]);
  } };
};
reactExports.forwardRef(function(_a2, ref) {
  var _b2;
  var _c2 = _a2.showHeader, showHeader = _c2 === void 0 ? true : _c2, _d = _a2.showSyntaxError, showSyntaxError = _d === void 0 ? false : _d, maxMessageCount = _a2.maxMessageCount, onLogsChange = _a2.onLogsChange, className = _a2.className;
  _a2.showSetupProgress;
  var _f = _a2.resetOnPreviewRestart, resetOnPreviewRestart = _f === void 0 ? false : _f, _g = _a2.actionsChildren, actionsChildren = _g === void 0 ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}, void 0) : _g, _h = _a2.standalone, standalone = _h === void 0 ? false : _h, props = __rest(_a2, ["showHeader", "showSyntaxError", "maxMessageCount", "onLogsChange", "className", "showSetupProgress", "resetOnPreviewRestart", "actionsChildren", "standalone"]);
  var environment = useSandpack().sandpack.environment;
  var _j = useSandpackClient(), iframe = _j.iframe, internalClientId = _j.clientId;
  var restart = useSandpackShell().restart;
  var _k = reactExports.useState(environment === "node" ? "server" : "client"), currentTab = _k[0], setCurrentTab = _k[1];
  var clientId = standalone ? internalClientId : void 0;
  var _l = useSandpackConsole({
    maxMessageCount,
    showSyntaxError,
    resetOnPreviewRestart,
    clientId
  }), consoleData = _l.logs, resetConsole = _l.reset;
  var _m = useSandpackShellStdout({
    maxMessageCount,
    resetOnPreviewRestart,
    clientId
  }), stdoutData = _m.logs, resetStdout = _m.reset;
  var wrapperRef = reactExports.useRef(null);
  reactExports.useEffect(function() {
    onLogsChange === null || onLogsChange === void 0 ? void 0 : onLogsChange(consoleData);
    if (wrapperRef.current) {
      wrapperRef.current.scrollTop = wrapperRef.current.scrollHeight;
    }
  }, [onLogsChange, consoleData, stdoutData, currentTab]);
  var isServerTab = currentTab === "server";
  var isNodeEnvironment = environment === "node";
  reactExports.useImperativeHandle(ref, function() {
    return {
      reset: function() {
        resetConsole();
        resetStdout();
      }
    };
  });
  var classNames = useClassNames();
  return jsxRuntimeExports.jsxs(SandpackStack, __assign({ className: classNames("console", [
    css((_b2 = {
      height: "100%",
      background: "$surface1",
      iframe: { display: "none" }
    }, _b2["." + THEME_PREFIX + "-bridge-frame"] = {
      display: "block",
      border: 0,
      position: "absolute",
      left: "$space$2",
      bottom: "$space$2",
      zIndex: "$top",
      height: 12,
      width: "30%",
      mixBlendMode: "multiply",
      pointerEvents: "none"
    }, _b2)),
    className
  ]) }, props, { children: [showHeader && isNodeEnvironment && jsxRuntimeExports.jsx(Header, { currentTab, node: isNodeEnvironment, setCurrentTab }, void 0), jsxRuntimeExports.jsx("div", __assign({ ref: wrapperRef, className: classNames("console-list", [
    css({ overflow: "auto", scrollBehavior: "smooth" })
  ]) }, { children: isServerTab ? jsxRuntimeExports.jsx(StdoutList, { data: stdoutData }, void 0) : jsxRuntimeExports.jsx(ConsoleList, { data: consoleData }, void 0) }), void 0), jsxRuntimeExports.jsxs("div", __assign({ className: classNames("console-actions", [
    css({
      position: "absolute",
      bottom: "$space$2",
      right: "$space$2",
      display: "flex",
      gap: "$space$2"
    })
  ]) }, { children: [actionsChildren, isServerTab && jsxRuntimeExports.jsx(RoundedButton, __assign({ onClick: function() {
    restart();
    resetConsole();
    resetStdout();
  } }, { children: jsxRuntimeExports.jsx(RestartIcon, {}, void 0) }), void 0), jsxRuntimeExports.jsx(RoundedButton, __assign({ onClick: function() {
    if (currentTab === "client") {
      resetConsole();
    } else {
      resetStdout();
    }
  } }, { children: jsxRuntimeExports.jsx(CleanIcon, {}, void 0) }), void 0)] }), void 0), standalone && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(DependenciesProgress, { clientId }, void 0), jsxRuntimeExports.jsx("iframe", { ref: iframe }, void 0)] }, void 0)] }), void 0);
});
css({
  position: "absolute",
  zIndex: "$top",
  variants: {
    direction: {
      vertical: {
        right: 0,
        left: 0,
        height: 10,
        cursor: "ns-resize"
      },
      horizontal: {
        top: 0,
        bottom: 0,
        width: 10,
        cursor: "ew-resize"
      }
    }
  },
  "@media screen and (max-width: 768px)": {
    display: "none"
  }
});
css({
  position: "relative",
  strong: {
    background: "$colors$clickable",
    color: "$colors$surface1",
    minWidth: 12,
    height: 12,
    padding: "0 2px",
    borderRadius: 12,
    fontSize: 8,
    lineHeight: "12px",
    position: "absolute",
    top: 0,
    right: 0,
    fontWeight: "normal"
  }
});
css({
  width: "100%",
  overflow: "hidden"
});
css({
  flexDirection: "row-reverse",
  "@media screen and (max-width: 768px)": {
    flexFlow: "wrap-reverse !important",
    flexDirection: "initial"
  }
});
class TransferObject {
  constructor() {
  }
}
class PanelTransfer extends TransferObject {
  constructor(viewId, groupId, panelId) {
    super();
    this.viewId = viewId;
    this.groupId = groupId;
    this.panelId = panelId;
  }
}
class PaneTransfer extends TransferObject {
  constructor(viewId, paneId) {
    super();
    this.viewId = viewId;
    this.paneId = paneId;
  }
}
class LocalSelectionTransfer {
  constructor() {
  }
  static getInstance() {
    return LocalSelectionTransfer.INSTANCE;
  }
  hasData(proto) {
    return proto && proto === this.proto;
  }
  clearData(proto) {
    if (this.hasData(proto)) {
      this.proto = void 0;
      this.data = void 0;
    }
  }
  getData(proto) {
    if (this.hasData(proto)) {
      return this.data;
    }
    return void 0;
  }
  setData(data, proto) {
    if (proto) {
      this.data = data;
      this.proto = proto;
    }
  }
}
LocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();
function getPanelData() {
  const panelTransfer = LocalSelectionTransfer.getInstance();
  const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);
  if (!isPanelEvent) {
    return void 0;
  }
  return panelTransfer.getData(PanelTransfer.prototype)[0];
}
function getPaneData() {
  const paneTransfer = LocalSelectionTransfer.getInstance();
  const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);
  if (!isPanelEvent) {
    return void 0;
  }
  return paneTransfer.getData(PaneTransfer.prototype)[0];
}
var Event$1;
(function(Event2) {
  Event2.any = (...children) => {
    return (listener) => {
      const disposables = children.map((child) => child(listener));
      return {
        dispose: () => {
          disposables.forEach((d2) => {
            d2.dispose();
          });
        }
      };
    };
  };
})(Event$1 || (Event$1 = {}));
class LeakageMonitor {
  constructor() {
    this.events = /* @__PURE__ */ new Map();
  }
  get size() {
    return this.events.size;
  }
  add(event, stacktrace) {
    this.events.set(event, stacktrace);
  }
  delete(event) {
    this.events.delete(event);
  }
  clear() {
    this.events.clear();
  }
}
class Stacktrace {
  static create() {
    var _a2;
    return new Stacktrace((_a2 = new Error().stack) !== null && _a2 !== void 0 ? _a2 : "");
  }
  constructor(value) {
    this.value = value;
  }
  print() {
    console.warn(this.value);
  }
}
class Listener {
  constructor(callback, stacktrace) {
    this.callback = callback;
    this.stacktrace = stacktrace;
  }
}
class Emitter {
  static setLeakageMonitorEnabled(isEnabled) {
    if (isEnabled !== Emitter.ENABLE_TRACKING) {
      Emitter.MEMORY_LEAK_WATCHER.clear();
    }
    Emitter.ENABLE_TRACKING = isEnabled;
  }
  constructor(options) {
    this.options = options;
    this._listeners = [];
    this._disposed = false;
  }
  get event() {
    if (!this._event) {
      this._event = (callback) => {
        var _a2;
        if (((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.replay) && this._last !== void 0) {
          callback(this._last);
        }
        const listener = new Listener(callback, Emitter.ENABLE_TRACKING ? Stacktrace.create() : void 0);
        this._listeners.push(listener);
        return {
          dispose: () => {
            const index = this._listeners.indexOf(listener);
            if (index > -1) {
              this._listeners.splice(index, 1);
            }
          }
        };
      };
      if (Emitter.ENABLE_TRACKING) {
        Emitter.MEMORY_LEAK_WATCHER.add(this._event, Stacktrace.create());
      }
    }
    return this._event;
  }
  fire(e) {
    this._last = e;
    for (const listener of this._listeners) {
      listener.callback(e);
    }
  }
  dispose() {
    if (!this._disposed) {
      this._disposed = true;
      if (this._listeners.length > 0) {
        if (Emitter.ENABLE_TRACKING) {
          queueMicrotask(() => {
            var _a2;
            for (const listener of this._listeners) {
              console.warn((_a2 = listener.stacktrace) === null || _a2 === void 0 ? void 0 : _a2.print());
            }
          });
        }
        this._listeners = [];
      }
      if (Emitter.ENABLE_TRACKING && this._event) {
        Emitter.MEMORY_LEAK_WATCHER.delete(this._event);
      }
    }
  }
}
Emitter.ENABLE_TRACKING = false;
Emitter.MEMORY_LEAK_WATCHER = new LeakageMonitor();
function addDisposableWindowListener(element, type, listener, options) {
  element.addEventListener(type, listener, options);
  return {
    dispose: () => {
      element.removeEventListener(type, listener, options);
    }
  };
}
function addDisposableListener(element, type, listener, options) {
  element.addEventListener(type, listener, options);
  return {
    dispose: () => {
      element.removeEventListener(type, listener, options);
    }
  };
}
class TickDelayedEvent {
  constructor() {
    this._onFired = new Emitter();
    this.onEvent = this._onFired.event;
  }
  fire() {
    if (this.timer) {
      clearTimeout(this.timer);
    }
    this.timer = setTimeout(() => {
      this._onFired.fire();
      clearTimeout(this.timer);
    });
  }
  dispose() {
    this._onFired.dispose();
  }
}
var Disposable;
(function(Disposable2) {
  Disposable2.NONE = {
    dispose: () => {
    }
  };
})(Disposable || (Disposable = {}));
class CompositeDisposable {
  get isDisposed() {
    return this._isDisposed;
  }
  static from(...args) {
    return new CompositeDisposable(...args);
  }
  constructor(...args) {
    this._isDisposed = false;
    this._disposables = args;
  }
  addDisposables(...args) {
    args.forEach((arg) => this._disposables.push(arg));
  }
  dispose() {
    this._disposables.forEach((arg) => arg.dispose());
    this._isDisposed = true;
  }
}
class MutableDisposable {
  constructor() {
    this._disposable = Disposable.NONE;
  }
  set value(disposable2) {
    if (this._disposable) {
      this._disposable.dispose();
    }
    this._disposable = disposable2;
  }
  dispose() {
    if (this._disposable) {
      this._disposable.dispose();
      this._disposable = Disposable.NONE;
    }
  }
}
function watchElementResize(element, cb) {
  const observer = new ResizeObserver((entires) => {
    requestAnimationFrame(() => {
      const firstEntry = entires[0];
      cb(firstEntry);
    });
  });
  observer.observe(element);
  return {
    dispose: () => {
      observer.unobserve(element);
      observer.disconnect();
    }
  };
}
const removeClasses = (element, ...classes) => {
  for (const classname of classes) {
    if (element.classList.contains(classname)) {
      element.classList.remove(classname);
    }
  }
};
const addClasses = (element, ...classes) => {
  for (const classname of classes) {
    if (!element.classList.contains(classname)) {
      element.classList.add(classname);
    }
  }
};
const toggleClass = (element, className, isToggled) => {
  const hasClass = element.classList.contains(className);
  if (isToggled && !hasClass) {
    element.classList.add(className);
  }
  if (!isToggled && hasClass) {
    element.classList.remove(className);
  }
};
function isAncestor(testChild, testAncestor) {
  while (testChild) {
    if (testChild === testAncestor) {
      return true;
    }
    testChild = testChild.parentNode;
  }
  return false;
}
function getElementsByTagName(tag) {
  return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);
}
function trackFocus(element) {
  return new FocusTracker(element);
}
class FocusTracker extends CompositeDisposable {
  constructor(element) {
    super();
    this._onDidFocus = new Emitter();
    this.onDidFocus = this._onDidFocus.event;
    this._onDidBlur = new Emitter();
    this.onDidBlur = this._onDidBlur.event;
    this.addDisposables(this._onDidFocus, this._onDidBlur);
    let hasFocus = isAncestor(document.activeElement, element);
    let loosingFocus = false;
    const onFocus = () => {
      loosingFocus = false;
      if (!hasFocus) {
        hasFocus = true;
        this._onDidFocus.fire();
      }
    };
    const onBlur = () => {
      if (hasFocus) {
        loosingFocus = true;
        window.setTimeout(() => {
          if (loosingFocus) {
            loosingFocus = false;
            hasFocus = false;
            this._onDidBlur.fire();
          }
        }, 0);
      }
    };
    this._refreshStateHandler = () => {
      const currentNodeHasFocus = isAncestor(document.activeElement, element);
      if (currentNodeHasFocus !== hasFocus) {
        if (hasFocus) {
          onBlur();
        } else {
          onFocus();
        }
      }
    };
    if (element instanceof HTMLElement) {
      this.addDisposables(addDisposableListener(element, "focus", onFocus, true));
      this.addDisposables(addDisposableListener(element, "blur", onBlur, true));
    } else {
      this.addDisposables(addDisposableWindowListener(element, "focus", onFocus, true));
      this.addDisposables(addDisposableWindowListener(element, "blur", onBlur, true));
    }
  }
  refreshState() {
    this._refreshStateHandler();
  }
}
function createComponent(id2, componentName, components2 = {}, frameworkComponents = {}, createFrameworkComponent, fallback) {
  const Component = typeof componentName === "string" ? components2[componentName] : void 0;
  const FrameworkComponent = typeof componentName === "string" ? frameworkComponents[componentName] : void 0;
  if (Component && FrameworkComponent) {
    throw new Error(`Cannot create '${id2}'. component '${componentName}' registered as both a component and frameworkComponent`);
  }
  if (FrameworkComponent) {
    if (!createFrameworkComponent) {
      throw new Error(`Cannot create '${id2}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`);
    }
    return createFrameworkComponent.createComponent(id2, componentName, FrameworkComponent);
  }
  if (!Component) {
    if (fallback) {
      return fallback();
    }
    throw new Error(`Cannot create '${id2}', no component '${componentName}' provided`);
  }
  return new Component(id2, componentName);
}
function tail(arr) {
  if (arr.length === 0) {
    throw new Error("Invalid tail call");
  }
  return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];
}
function last(arr) {
  return arr.length > 0 ? arr[arr.length - 1] : void 0;
}
function sequenceEquals(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
  }
  return true;
}
function pushToStart(arr, value) {
  const index = arr.indexOf(value);
  if (index > -1) {
    arr.splice(index, 1);
    arr.unshift(value);
  }
}
function pushToEnd(arr, value) {
  const index = arr.indexOf(value);
  if (index > -1) {
    arr.splice(index, 1);
    arr.push(value);
  }
}
function firstIndex(array, fn) {
  for (let i = 0; i < array.length; i++) {
    const element = array[i];
    if (fn(element)) {
      return i;
    }
  }
  return -1;
}
const clamp = (value, min, max) => {
  if (min > max) {
    throw new Error(`${min} > ${max} is an invalid condition`);
  }
  return Math.min(max, Math.max(value, min));
};
const sequentialNumberGenerator = () => {
  let value = 1;
  return { next: () => (value++).toString() };
};
const range = (from, to) => {
  const result = [];
  if (typeof to !== "number") {
    to = from;
    from = 0;
  }
  if (from <= to) {
    for (let i = from; i < to; i++) {
      result.push(i);
    }
  } else {
    for (let i = from; i > to; i--) {
      result.push(i);
    }
  }
  return result;
};
class ViewItem {
  set size(size) {
    this._size = size;
  }
  get size() {
    return this._size;
  }
  get cachedVisibleSize() {
    return this._cachedVisibleSize;
  }
  get visible() {
    return typeof this._cachedVisibleSize === "undefined";
  }
  get minimumSize() {
    return this.visible ? this.view.minimumSize : 0;
  }
  get viewMinimumSize() {
    return this.view.minimumSize;
  }
  get maximumSize() {
    return this.visible ? this.view.maximumSize : 0;
  }
  get viewMaximumSize() {
    return this.view.maximumSize;
  }
  get priority() {
    return this.view.priority;
  }
  get snap() {
    return !!this.view.snap;
  }
  set enabled(enabled) {
    this.container.style.pointerEvents = enabled ? "" : "none";
  }
  constructor(container, view, size, disposable2) {
    this.container = container;
    this.view = view;
    this.disposable = disposable2;
    this._cachedVisibleSize = void 0;
    if (typeof size === "number") {
      this._size = size;
      this._cachedVisibleSize = void 0;
      container.classList.add("visible");
    } else {
      this._size = 0;
      this._cachedVisibleSize = size.cachedVisibleSize;
    }
  }
  setVisible(visible, size) {
    var _a2;
    if (visible === this.visible) {
      return;
    }
    if (visible) {
      this.size = clamp((_a2 = this._cachedVisibleSize) !== null && _a2 !== void 0 ? _a2 : 0, this.viewMinimumSize, this.viewMaximumSize);
      this._cachedVisibleSize = void 0;
    } else {
      this._cachedVisibleSize = typeof size === "number" ? size : this.size;
      this.size = 0;
    }
    this.container.classList.toggle("visible", visible);
    if (this.view.setVisible) {
      this.view.setVisible(visible);
    }
  }
  dispose() {
    this.disposable.dispose();
    return this.view;
  }
}
var Orientation;
(function(Orientation2) {
  Orientation2["HORIZONTAL"] = "HORIZONTAL";
  Orientation2["VERTICAL"] = "VERTICAL";
})(Orientation || (Orientation = {}));
var SashState;
(function(SashState2) {
  SashState2[SashState2["MAXIMUM"] = 0] = "MAXIMUM";
  SashState2[SashState2["MINIMUM"] = 1] = "MINIMUM";
  SashState2[SashState2["DISABLED"] = 2] = "DISABLED";
  SashState2[SashState2["ENABLED"] = 3] = "ENABLED";
})(SashState || (SashState = {}));
var LayoutPriority;
(function(LayoutPriority2) {
  LayoutPriority2["Low"] = "low";
  LayoutPriority2["High"] = "high";
  LayoutPriority2["Normal"] = "normal";
})(LayoutPriority || (LayoutPriority = {}));
var Sizing;
(function(Sizing2) {
  Sizing2.Distribute = { type: "distribute" };
  function Split(index) {
    return { type: "split", index };
  }
  Sizing2.Split = Split;
  function Invisible(cachedVisibleSize) {
    return { type: "invisible", cachedVisibleSize };
  }
  Sizing2.Invisible = Invisible;
})(Sizing || (Sizing = {}));
class Splitview {
  get size() {
    return this._size;
  }
  set size(value) {
    this._size = value;
  }
  get orthogonalSize() {
    return this._orthogonalSize;
  }
  set orthogonalSize(value) {
    this._orthogonalSize = value;
  }
  get length() {
    return this.viewItems.length;
  }
  get proportions() {
    return this._proportions ? [...this._proportions] : void 0;
  }
  get orientation() {
    return this._orientation;
  }
  set orientation(value) {
    this._orientation = value;
    const tmp = this.size;
    this.size = this.orthogonalSize;
    this.orthogonalSize = tmp;
    removeClasses(this.element, "horizontal", "vertical");
    this.element.classList.add(this.orientation == Orientation.HORIZONTAL ? "horizontal" : "vertical");
  }
  get minimumSize() {
    return this.viewItems.reduce((r2, item) => r2 + item.minimumSize, 0);
  }
  get maximumSize() {
    return this.length === 0 ? Number.POSITIVE_INFINITY : this.viewItems.reduce((r2, item) => r2 + item.maximumSize, 0);
  }
  get startSnappingEnabled() {
    return this._startSnappingEnabled;
  }
  set startSnappingEnabled(startSnappingEnabled) {
    if (this._startSnappingEnabled === startSnappingEnabled) {
      return;
    }
    this._startSnappingEnabled = startSnappingEnabled;
    this.updateSashEnablement();
  }
  get endSnappingEnabled() {
    return this._endSnappingEnabled;
  }
  set endSnappingEnabled(endSnappingEnabled) {
    if (this._endSnappingEnabled === endSnappingEnabled) {
      return;
    }
    this._endSnappingEnabled = endSnappingEnabled;
    this.updateSashEnablement();
  }
  constructor(container, options) {
    this.container = container;
    this.viewItems = [];
    this.sashes = [];
    this._size = 0;
    this._orthogonalSize = 0;
    this.contentSize = 0;
    this._proportions = void 0;
    this._startSnappingEnabled = true;
    this._endSnappingEnabled = true;
    this._onDidSashEnd = new Emitter();
    this.onDidSashEnd = this._onDidSashEnd.event;
    this._onDidAddView = new Emitter();
    this.onDidAddView = this._onDidAddView.event;
    this._onDidRemoveView = new Emitter();
    this.onDidRemoveView = this._onDidRemoveView.event;
    this.resize = (index, delta, sizes = this.viewItems.map((x2) => x2.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {
      if (index < 0 || index > this.viewItems.length) {
        return 0;
      }
      const upIndexes = range(index, -1);
      const downIndexes = range(index + 1, this.viewItems.length);
      if (highPriorityIndexes) {
        for (const i of highPriorityIndexes) {
          pushToStart(upIndexes, i);
          pushToStart(downIndexes, i);
        }
      }
      if (lowPriorityIndexes) {
        for (const i of lowPriorityIndexes) {
          pushToEnd(upIndexes, i);
          pushToEnd(downIndexes, i);
        }
      }
      const upItems = upIndexes.map((i) => this.viewItems[i]);
      const upSizes = upIndexes.map((i) => sizes[i]);
      const downItems = downIndexes.map((i) => this.viewItems[i]);
      const downSizes = downIndexes.map((i) => sizes[i]);
      const minDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].minimumSize - sizes[i], 0);
      const maxDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].maximumSize - sizes[i], 0);
      const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].minimumSize, 0);
      const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].maximumSize, 0);
      const minDelta = Math.max(minDeltaUp, minDeltaDown);
      const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
      let snapped = false;
      if (snapBefore) {
        const snapView = this.viewItems[snapBefore.index];
        const visible = delta >= snapBefore.limitDelta;
        snapped = visible !== snapView.visible;
        snapView.setVisible(visible, snapBefore.size);
      }
      if (!snapped && snapAfter) {
        const snapView = this.viewItems[snapAfter.index];
        const visible = delta < snapAfter.limitDelta;
        snapped = visible !== snapView.visible;
        snapView.setVisible(visible, snapAfter.size);
      }
      if (snapped) {
        return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);
      }
      const tentativeDelta = clamp(delta, minDelta, maxDelta);
      let actualDelta = 0;
      let deltaUp = tentativeDelta;
      for (let i = 0; i < upItems.length; i++) {
        const item = upItems[i];
        const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);
        const viewDelta = size - upSizes[i];
        actualDelta += viewDelta;
        deltaUp -= viewDelta;
        item.size = size;
      }
      let deltaDown = actualDelta;
      for (let i = 0; i < downItems.length; i++) {
        const item = downItems[i];
        const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);
        const viewDelta = size - downSizes[i];
        deltaDown += viewDelta;
        item.size = size;
      }
      return delta;
    };
    this._orientation = options.orientation;
    this.element = this.createContainer();
    this.proportionalLayout = options.proportionalLayout === void 0 ? true : !!options.proportionalLayout;
    this.viewContainer = this.createViewContainer();
    this.sashContainer = this.createSashContainer();
    this.element.appendChild(this.sashContainer);
    this.element.appendChild(this.viewContainer);
    this.container.appendChild(this.element);
    this.style(options.styles);
    if (options.descriptor) {
      this._size = options.descriptor.size;
      options.descriptor.views.forEach((viewDescriptor, index) => {
        const sizing = viewDescriptor.visible === void 0 || viewDescriptor.visible ? viewDescriptor.size : {
          type: "invisible",
          cachedVisibleSize: viewDescriptor.size
        };
        const view = viewDescriptor.view;
        this.addView(
          view,
          sizing,
          index,
          true
          // true skip layout
        );
      });
      this.contentSize = this.viewItems.reduce((r2, i) => r2 + i.size, 0);
      this.saveProportions();
    }
  }
  style(styles) {
    if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === "transparent") {
      removeClasses(this.element, "separator-border");
      this.element.style.removeProperty("--dv-separator-border");
    } else {
      addClasses(this.element, "separator-border");
      if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {
        this.element.style.setProperty("--dv-separator-border", styles.separatorBorder);
      }
    }
  }
  isViewVisible(index) {
    if (index < 0 || index >= this.viewItems.length) {
      throw new Error("Index out of bounds");
    }
    const viewItem = this.viewItems[index];
    return viewItem.visible;
  }
  setViewVisible(index, visible) {
    if (index < 0 || index >= this.viewItems.length) {
      throw new Error("Index out of bounds");
    }
    toggleClass(this.container, "visible", visible);
    const viewItem = this.viewItems[index];
    toggleClass(this.container, "visible", visible);
    viewItem.setVisible(visible, viewItem.size);
    this.distributeEmptySpace(index);
    this.layoutViews();
    this.saveProportions();
  }
  getViewSize(index) {
    if (index < 0 || index >= this.viewItems.length) {
      return -1;
    }
    return this.viewItems[index].size;
  }
  resizeView(index, size) {
    if (index < 0 || index >= this.viewItems.length) {
      return;
    }
    const indexes = range(this.viewItems.length).filter((i) => i !== index);
    const lowPriorityIndexes = [
      ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
      index
    ];
    const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
    const item = this.viewItems[index];
    size = Math.round(size);
    size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this._size));
    item.size = size;
    this.relayout(lowPriorityIndexes, highPriorityIndexes);
  }
  getViews() {
    return this.viewItems.map((x2) => x2.view);
  }
  onDidChange(item, size) {
    const index = this.viewItems.indexOf(item);
    if (index < 0 || index >= this.viewItems.length) {
      return;
    }
    size = typeof size === "number" ? size : item.size;
    size = clamp(size, item.minimumSize, item.maximumSize);
    item.size = size;
    this.relayout([index]);
  }
  addView(view, size = { type: "distribute" }, index = this.viewItems.length, skipLayout) {
    const container = document.createElement("div");
    container.className = "view";
    container.appendChild(view.element);
    let viewSize;
    if (typeof size === "number") {
      viewSize = size;
    } else if (size.type === "split") {
      viewSize = this.getViewSize(size.index) / 2;
    } else if (size.type === "invisible") {
      viewSize = { cachedVisibleSize: size.cachedVisibleSize };
    } else {
      viewSize = view.minimumSize;
    }
    const disposable2 = view.onDidChange((newSize) => this.onDidChange(viewItem, newSize.size));
    const viewItem = new ViewItem(container, view, viewSize, {
      dispose: () => {
        disposable2.dispose();
        this.viewContainer.removeChild(container);
      }
    });
    if (index === this.viewItems.length) {
      this.viewContainer.appendChild(container);
    } else {
      this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));
    }
    this.viewItems.splice(index, 0, viewItem);
    if (this.viewItems.length > 1) {
      const sash = document.createElement("div");
      sash.className = "sash";
      const onPointerStart = (event) => {
        for (const item of this.viewItems) {
          item.enabled = false;
        }
        const iframes = [
          ...getElementsByTagName("iframe"),
          ...getElementsByTagName("webview")
        ];
        for (const iframe of iframes) {
          iframe.style.pointerEvents = "none";
        }
        const start = this._orientation === Orientation.HORIZONTAL ? event.clientX : event.clientY;
        const sashIndex = firstIndex(this.sashes, (s2) => s2.container === sash);
        const sizes = this.viewItems.map((x2) => x2.size);
        let snapBefore;
        let snapAfter;
        const upIndexes = range(sashIndex, -1);
        const downIndexes = range(sashIndex + 1, this.viewItems.length);
        const minDeltaUp = upIndexes.reduce((r2, i) => r2 + (this.viewItems[i].minimumSize - sizes[i]), 0);
        const maxDeltaUp = upIndexes.reduce((r2, i) => r2 + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);
        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r2, i) => r2 + (sizes[i] - this.viewItems[i].minimumSize), 0);
        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r2, i) => r2 + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);
        const minDelta = Math.max(minDeltaUp, minDeltaDown);
        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
        if (typeof snapBeforeIndex === "number") {
          const snappedViewItem = this.viewItems[snapBeforeIndex];
          const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
          snapBefore = {
            index: snapBeforeIndex,
            limitDelta: snappedViewItem.visible ? minDelta - halfSize : minDelta + halfSize,
            size: snappedViewItem.size
          };
        }
        if (typeof snapAfterIndex === "number") {
          const snappedViewItem = this.viewItems[snapAfterIndex];
          const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
          snapAfter = {
            index: snapAfterIndex,
            limitDelta: snappedViewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,
            size: snappedViewItem.size
          };
        }
        const onPointerMove = (event2) => {
          const current = this._orientation === Orientation.HORIZONTAL ? event2.clientX : event2.clientY;
          const delta = current - start;
          this.resize(sashIndex, delta, sizes, void 0, void 0, minDelta, maxDelta, snapBefore, snapAfter);
          this.distributeEmptySpace();
          this.layoutViews();
        };
        const end = () => {
          for (const item of this.viewItems) {
            item.enabled = true;
          }
          for (const iframe of iframes) {
            iframe.style.pointerEvents = "auto";
          }
          this.saveProportions();
          document.removeEventListener("pointermove", onPointerMove);
          document.removeEventListener("pointerup", end);
          document.removeEventListener("pointercancel", end);
          this._onDidSashEnd.fire(void 0);
        };
        document.addEventListener("pointermove", onPointerMove);
        document.addEventListener("pointerup", end);
        document.addEventListener("pointercancel", end);
      };
      sash.addEventListener("pointerdown", onPointerStart);
      const sashItem = {
        container: sash,
        disposable: () => {
          sash.removeEventListener("pointerdown", onPointerStart);
          this.sashContainer.removeChild(sash);
        }
      };
      this.sashContainer.appendChild(sash);
      this.sashes.push(sashItem);
    }
    if (!skipLayout) {
      this.relayout([index]);
    }
    if (!skipLayout && typeof size !== "number" && size.type === "distribute") {
      this.distributeViewSizes();
    }
    this._onDidAddView.fire(view);
  }
  distributeViewSizes() {
    const flexibleViewItems = [];
    let flexibleSize = 0;
    for (const item of this.viewItems) {
      if (item.maximumSize - item.minimumSize > 0) {
        flexibleViewItems.push(item);
        flexibleSize += item.size;
      }
    }
    const size = Math.floor(flexibleSize / flexibleViewItems.length);
    for (const item of flexibleViewItems) {
      item.size = clamp(size, item.minimumSize, item.maximumSize);
    }
    const indexes = range(this.viewItems.length);
    const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
    const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
    this.relayout(lowPriorityIndexes, highPriorityIndexes);
  }
  removeView(index, sizing, skipLayout = false) {
    const viewItem = this.viewItems.splice(index, 1)[0];
    viewItem.dispose();
    if (this.viewItems.length >= 1) {
      const sashIndex = Math.max(index - 1, 0);
      const sashItem = this.sashes.splice(sashIndex, 1)[0];
      sashItem.disposable();
    }
    if (!skipLayout) {
      this.relayout();
    }
    if (sizing && sizing.type === "distribute") {
      this.distributeViewSizes();
    }
    this._onDidRemoveView.fire(viewItem.view);
    return viewItem.view;
  }
  getViewCachedVisibleSize(index) {
    if (index < 0 || index >= this.viewItems.length) {
      throw new Error("Index out of bounds");
    }
    const viewItem = this.viewItems[index];
    return viewItem.cachedVisibleSize;
  }
  moveView(from, to) {
    const cachedVisibleSize = this.getViewCachedVisibleSize(from);
    const sizing = typeof cachedVisibleSize === "undefined" ? this.getViewSize(from) : Sizing.Invisible(cachedVisibleSize);
    const view = this.removeView(from, void 0, true);
    this.addView(view, sizing, to);
  }
  layout(size, orthogonalSize) {
    const previousSize = Math.max(this.size, this.contentSize);
    this.size = size;
    this.orthogonalSize = orthogonalSize;
    if (!this.proportions) {
      const indexes = range(this.viewItems.length);
      const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
      const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
      this.resize(this.viewItems.length - 1, size - previousSize, void 0, lowPriorityIndexes, highPriorityIndexes);
    } else {
      for (let i = 0; i < this.viewItems.length; i++) {
        const item = this.viewItems[i];
        item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);
      }
    }
    this.distributeEmptySpace();
    this.layoutViews();
  }
  relayout(lowPriorityIndexes, highPriorityIndexes) {
    const contentSize = this.viewItems.reduce((r2, i) => r2 + i.size, 0);
    this.resize(this.viewItems.length - 1, this._size - contentSize, void 0, lowPriorityIndexes, highPriorityIndexes);
    this.distributeEmptySpace();
    this.layoutViews();
    this.saveProportions();
  }
  distributeEmptySpace(lowPriorityIndex) {
    const contentSize = this.viewItems.reduce((r2, i) => r2 + i.size, 0);
    let emptyDelta = this.size - contentSize;
    const indexes = range(this.viewItems.length - 1, -1);
    const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
    const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
    for (const index of highPriorityIndexes) {
      pushToStart(indexes, index);
    }
    for (const index of lowPriorityIndexes) {
      pushToEnd(indexes, index);
    }
    if (typeof lowPriorityIndex === "number") {
      pushToEnd(indexes, lowPriorityIndex);
    }
    for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {
      const item = this.viewItems[indexes[i]];
      const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);
      const viewDelta = size - item.size;
      emptyDelta -= viewDelta;
      item.size = size;
    }
  }
  saveProportions() {
    if (this.proportionalLayout && this.contentSize > 0) {
      this._proportions = this.viewItems.map((i) => i.size / this.contentSize);
    }
  }
  layoutViews() {
    this.contentSize = this.viewItems.reduce((r2, i) => r2 + i.size, 0);
    let sum = 0;
    const x2 = [];
    this.updateSashEnablement();
    for (let i = 0; i < this.viewItems.length - 1; i++) {
      sum += this.viewItems[i].size;
      x2.push(sum);
      const offset = Math.min(Math.max(0, sum - 2), this.size - 4);
      if (this._orientation === Orientation.HORIZONTAL) {
        this.sashes[i].container.style.left = `${offset}px`;
        this.sashes[i].container.style.top = `0px`;
      }
      if (this._orientation === Orientation.VERTICAL) {
        this.sashes[i].container.style.left = `0px`;
        this.sashes[i].container.style.top = `${offset}px`;
      }
    }
    this.viewItems.forEach((view, i) => {
      if (this._orientation === Orientation.HORIZONTAL) {
        view.container.style.width = `${view.size}px`;
        view.container.style.left = i == 0 ? "0px" : `${x2[i - 1]}px`;
        view.container.style.top = "";
        view.container.style.height = "";
      }
      if (this._orientation === Orientation.VERTICAL) {
        view.container.style.height = `${view.size}px`;
        view.container.style.top = i == 0 ? "0px" : `${x2[i - 1]}px`;
        view.container.style.width = "";
        view.container.style.left = "";
      }
      view.view.layout(view.size, this._orthogonalSize);
    });
  }
  findFirstSnapIndex(indexes) {
    for (const index of indexes) {
      const viewItem = this.viewItems[index];
      if (!viewItem.visible) {
        continue;
      }
      if (viewItem.snap) {
        return index;
      }
    }
    for (const index of indexes) {
      const viewItem = this.viewItems[index];
      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {
        return void 0;
      }
      if (!viewItem.visible && viewItem.snap) {
        return index;
      }
    }
    return void 0;
  }
  updateSashEnablement() {
    let previous = false;
    const collapsesDown = this.viewItems.map((i) => previous = i.size - i.minimumSize > 0 || previous);
    previous = false;
    const expandsDown = this.viewItems.map((i) => previous = i.maximumSize - i.size > 0 || previous);
    const reverseViews = [...this.viewItems].reverse();
    previous = false;
    const collapsesUp = reverseViews.map((i) => previous = i.size - i.minimumSize > 0 || previous).reverse();
    previous = false;
    const expandsUp = reverseViews.map((i) => previous = i.maximumSize - i.size > 0 || previous).reverse();
    let position = 0;
    for (let index = 0; index < this.sashes.length; index++) {
      const sash = this.sashes[index];
      const viewItem = this.viewItems[index];
      position += viewItem.size;
      const min = !(collapsesDown[index] && expandsUp[index + 1]);
      const max = !(expandsDown[index] && collapsesUp[index + 1]);
      if (min && max) {
        const upIndexes = range(index, -1);
        const downIndexes = range(index + 1, this.viewItems.length);
        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
        const snappedBefore = typeof snapBeforeIndex === "number" && !this.viewItems[snapBeforeIndex].visible;
        const snappedAfter = typeof snapAfterIndex === "number" && !this.viewItems[snapAfterIndex].visible;
        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {
          this.updateSash(sash, SashState.MINIMUM);
        } else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {
          this.updateSash(sash, SashState.MAXIMUM);
        } else {
          this.updateSash(sash, SashState.DISABLED);
        }
      } else if (min && !max) {
        this.updateSash(sash, SashState.MINIMUM);
      } else if (!min && max) {
        this.updateSash(sash, SashState.MAXIMUM);
      } else {
        this.updateSash(sash, SashState.ENABLED);
      }
    }
  }
  updateSash(sash, state) {
    toggleClass(sash.container, "disabled", state === SashState.DISABLED);
    toggleClass(sash.container, "enabled", state === SashState.ENABLED);
    toggleClass(sash.container, "maximum", state === SashState.MAXIMUM);
    toggleClass(sash.container, "minimum", state === SashState.MINIMUM);
  }
  createViewContainer() {
    const element = document.createElement("div");
    element.className = "view-container";
    return element;
  }
  createSashContainer() {
    const element = document.createElement("div");
    element.className = "sash-container";
    return element;
  }
  createContainer() {
    const element = document.createElement("div");
    const orientationClassname = this._orientation === Orientation.HORIZONTAL ? "horizontal" : "vertical";
    element.className = `split-view-container ${orientationClassname}`;
    return element;
  }
  dispose() {
    this._onDidSashEnd.dispose();
    this._onDidAddView.dispose();
    this._onDidRemoveView.dispose();
    for (let i = 0; i < this.element.children.length; i++) {
      if (this.element.children.item(i) === this.element) {
        this.element.removeChild(this.element);
        break;
      }
    }
    for (const viewItem of this.viewItems) {
      viewItem.dispose();
    }
    this.element.remove();
  }
}
class Paneview extends CompositeDisposable {
  get onDidAddView() {
    return this.splitview.onDidAddView;
  }
  get onDidRemoveView() {
    return this.splitview.onDidRemoveView;
  }
  get minimumSize() {
    return this.splitview.minimumSize;
  }
  get maximumSize() {
    return this.splitview.maximumSize;
  }
  get orientation() {
    return this.splitview.orientation;
  }
  get size() {
    return this.splitview.size;
  }
  get orthogonalSize() {
    return this.splitview.orthogonalSize;
  }
  constructor(container, options) {
    var _a2;
    super();
    this.paneItems = [];
    this.skipAnimation = false;
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this._orientation = (_a2 = options.orientation) !== null && _a2 !== void 0 ? _a2 : Orientation.VERTICAL;
    this.element = document.createElement("div");
    this.element.className = "pane-container";
    container.appendChild(this.element);
    this.splitview = new Splitview(this.element, {
      orientation: this._orientation,
      proportionalLayout: false,
      descriptor: options.descriptor
    });
    this.getPanes().forEach((pane) => {
      const disposable2 = new CompositeDisposable(pane.onDidChangeExpansionState(() => {
        this.setupAnimation();
        this._onDidChange.fire(void 0);
      }));
      const paneItem = {
        pane,
        disposable: {
          dispose: () => {
            disposable2.dispose();
          }
        }
      };
      this.paneItems.push(paneItem);
      pane.orthogonalSize = this.splitview.orthogonalSize;
    });
    this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {
      this._onDidChange.fire(void 0);
    }), this.splitview.onDidAddView(() => {
      this._onDidChange.fire();
    }), this.splitview.onDidRemoveView(() => {
      this._onDidChange.fire();
    }));
  }
  addPane(pane, size, index = this.splitview.length, skipLayout = false) {
    const disposable2 = pane.onDidChangeExpansionState(() => {
      this.setupAnimation();
      this._onDidChange.fire(void 0);
    });
    const paneItem = {
      pane,
      disposable: {
        dispose: () => {
          disposable2.dispose();
        }
      }
    };
    this.paneItems.splice(index, 0, paneItem);
    pane.orthogonalSize = this.splitview.orthogonalSize;
    this.splitview.addView(pane, size, index, skipLayout);
  }
  getViewSize(index) {
    return this.splitview.getViewSize(index);
  }
  getPanes() {
    return this.splitview.getViews();
  }
  removePane(index, options = { skipDispose: false }) {
    const paneItem = this.paneItems.splice(index, 1)[0];
    this.splitview.removeView(index);
    if (!options.skipDispose) {
      paneItem.disposable.dispose();
      paneItem.pane.dispose();
    }
    return paneItem;
  }
  moveView(from, to) {
    if (from === to) {
      return;
    }
    const view = this.removePane(from, { skipDispose: true });
    this.skipAnimation = true;
    try {
      this.addPane(view.pane, view.pane.size, to, false);
    } finally {
      this.skipAnimation = false;
    }
  }
  layout(size, orthogonalSize) {
    this.splitview.layout(size, orthogonalSize);
  }
  setupAnimation() {
    if (this.skipAnimation) {
      return;
    }
    if (this.animationTimer) {
      clearTimeout(this.animationTimer);
      this.animationTimer = void 0;
    }
    addClasses(this.element, "animated");
    this.animationTimer = setTimeout(() => {
      this.animationTimer = void 0;
      removeClasses(this.element, "animated");
    }, 200);
  }
  dispose() {
    super.dispose();
    if (this.animationTimer) {
      clearTimeout(this.animationTimer);
      this.animationTimer = void 0;
    }
    this.paneItems.forEach((paneItem) => {
      paneItem.disposable.dispose();
      paneItem.pane.dispose();
    });
    this.paneItems = [];
    this.splitview.dispose();
    this.element.remove();
  }
}
class LeafNode {
  get minimumWidth() {
    return this.view.minimumWidth;
  }
  get maximumWidth() {
    return this.view.maximumWidth;
  }
  get minimumHeight() {
    return this.view.minimumHeight;
  }
  get maximumHeight() {
    return this.view.maximumHeight;
  }
  get priority() {
    return this.view.priority;
  }
  get snap() {
    return this.view.snap;
  }
  get minimumSize() {
    return this.orientation === Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;
  }
  get maximumSize() {
    return this.orientation === Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;
  }
  get minimumOrthogonalSize() {
    return this.orientation === Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;
  }
  get maximumOrthogonalSize() {
    return this.orientation === Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;
  }
  get orthogonalSize() {
    return this._orthogonalSize;
  }
  get size() {
    return this._size;
  }
  get element() {
    return this.view.element;
  }
  get width() {
    return this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;
  }
  get height() {
    return this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;
  }
  constructor(view, orientation, orthogonalSize, size = 0) {
    this.view = view;
    this.orientation = orientation;
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this._orthogonalSize = orthogonalSize;
    this._size = size;
    this._disposable = this.view.onDidChange((event) => {
      if (event) {
        this._onDidChange.fire({
          size: this.orientation === Orientation.VERTICAL ? event.width : event.height,
          orthogonalSize: this.orientation === Orientation.VERTICAL ? event.height : event.width
        });
      } else {
        this._onDidChange.fire({});
      }
    });
  }
  setVisible(visible) {
    if (this.view.setVisible) {
      this.view.setVisible(visible);
      this._onDidChange.fire({});
    }
  }
  layout(size, orthogonalSize) {
    this._size = size;
    this._orthogonalSize = orthogonalSize;
    this.view.layout(this.width, this.height);
  }
  dispose() {
    this._onDidChange.dispose();
    this._disposable.dispose();
  }
}
class BranchNode extends CompositeDisposable {
  get width() {
    return this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;
  }
  get height() {
    return this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;
  }
  get minimumSize() {
    return this.children.length === 0 ? 0 : Math.max(...this.children.map((c2) => c2.minimumOrthogonalSize));
  }
  get maximumSize() {
    return Math.min(...this.children.map((c2) => c2.maximumOrthogonalSize));
  }
  get minimumOrthogonalSize() {
    return this.splitview.minimumSize;
  }
  get maximumOrthogonalSize() {
    return this.splitview.maximumSize;
  }
  get orthogonalSize() {
    return this._orthogonalSize;
  }
  get size() {
    return this._size;
  }
  get minimumWidth() {
    return this.orientation === Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;
  }
  get minimumHeight() {
    return this.orientation === Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;
  }
  get maximumWidth() {
    return this.orientation === Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;
  }
  get maximumHeight() {
    return this.orientation === Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;
  }
  get priority() {
    if (this.children.length === 0) {
      return LayoutPriority.Normal;
    }
    const priorities = this.children.map((c2) => typeof c2.priority === "undefined" ? LayoutPriority.Normal : c2.priority);
    if (priorities.some((p2) => p2 === LayoutPriority.High)) {
      return LayoutPriority.High;
    } else if (priorities.some((p2) => p2 === LayoutPriority.Low)) {
      return LayoutPriority.Low;
    }
    return LayoutPriority.Normal;
  }
  constructor(orientation, proportionalLayout, styles, size, orthogonalSize, childDescriptors) {
    super();
    this.orientation = orientation;
    this.proportionalLayout = proportionalLayout;
    this.styles = styles;
    this._childrenDisposable = Disposable.NONE;
    this.children = [];
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this._orthogonalSize = orthogonalSize;
    this._size = size;
    this.element = document.createElement("div");
    this.element.className = "branch-node";
    if (!childDescriptors) {
      this.splitview = new Splitview(this.element, {
        orientation: this.orientation,
        proportionalLayout,
        styles
      });
      this.splitview.layout(this.size, this.orthogonalSize);
    } else {
      const descriptor = {
        views: childDescriptors.map((childDescriptor) => {
          return {
            view: childDescriptor.node,
            size: childDescriptor.node.size,
            visible: childDescriptor.node instanceof LeafNode && childDescriptor.visible !== void 0 ? childDescriptor.visible : true
          };
        }),
        size: this.size
      };
      this.children = childDescriptors.map((c2) => c2.node);
      this.splitview = new Splitview(this.element, {
        orientation: this.orientation,
        descriptor,
        proportionalLayout
      });
    }
    this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {
      this._onDidChange.fire({});
    }));
    this.setupChildrenEvents();
  }
  setVisible(visible) {
    for (const child of this.children) {
      child.setVisible(visible);
    }
  }
  isChildVisible(index) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("Invalid index");
    }
    return this.splitview.isViewVisible(index);
  }
  setChildVisible(index, visible) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("Invalid index");
    }
    if (this.splitview.isViewVisible(index) === visible) {
      return;
    }
    this.splitview.setViewVisible(index, visible);
  }
  moveChild(from, to) {
    if (from === to) {
      return;
    }
    if (from < 0 || from >= this.children.length) {
      throw new Error("Invalid from index");
    }
    if (from < to) {
      to--;
    }
    this.splitview.moveView(from, to);
    const child = this._removeChild(from);
    this._addChild(child, to);
  }
  getChildSize(index) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("Invalid index");
    }
    return this.splitview.getViewSize(index);
  }
  resizeChild(index, size) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("Invalid index");
    }
    this.splitview.resizeView(index, size);
  }
  layout(size, orthogonalSize) {
    this._size = orthogonalSize;
    this._orthogonalSize = size;
    this.splitview.layout(this.size, this.orthogonalSize);
  }
  addChild(node, size, index, skipLayout) {
    if (index < 0 || index > this.children.length) {
      throw new Error("Invalid index");
    }
    this.splitview.addView(node, size, index, skipLayout);
    this._addChild(node, index);
  }
  getChildCachedVisibleSize(index) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("Invalid index");
    }
    return this.splitview.getViewCachedVisibleSize(index);
  }
  removeChild(index, sizing) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("Invalid index");
    }
    this.splitview.removeView(index, sizing);
    return this._removeChild(index);
  }
  _addChild(node, index) {
    this.children.splice(index, 0, node);
    this.setupChildrenEvents();
  }
  _removeChild(index) {
    const [child] = this.children.splice(index, 1);
    this.setupChildrenEvents();
    return child;
  }
  setupChildrenEvents() {
    this._childrenDisposable.dispose();
    this._childrenDisposable = Event$1.any(...this.children.map((c2) => c2.onDidChange))((e) => {
      this._onDidChange.fire({ size: e.orthogonalSize });
    });
  }
  dispose() {
    this._childrenDisposable.dispose();
    this.splitview.dispose();
    this.children.forEach((child) => child.dispose());
    super.dispose();
  }
}
function findLeaf(candiateNode, last2) {
  if (candiateNode instanceof LeafNode) {
    return candiateNode;
  }
  if (candiateNode instanceof BranchNode) {
    return findLeaf(candiateNode.children[last2 ? candiateNode.children.length - 1 : 0], last2);
  }
  throw new Error("invalid node");
}
function flipNode(node, size, orthogonalSize) {
  if (node instanceof BranchNode) {
    const result = new BranchNode(orthogonal(node.orientation), node.proportionalLayout, node.styles, size, orthogonalSize);
    let totalSize = 0;
    for (let i = node.children.length - 1; i >= 0; i--) {
      const child = node.children[i];
      const childSize = child instanceof BranchNode ? child.orthogonalSize : child.size;
      let newSize = node.size === 0 ? 0 : Math.round(size * childSize / node.size);
      totalSize += newSize;
      if (i === 0) {
        newSize += size - totalSize;
      }
      result.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);
    }
    return result;
  } else {
    return new LeafNode(node.view, orthogonal(node.orientation), orthogonalSize);
  }
}
function indexInParent(element) {
  const parentElement = element.parentElement;
  if (!parentElement) {
    throw new Error("Invalid grid element");
  }
  let el = parentElement.firstElementChild;
  let index = 0;
  while (el !== element && el !== parentElement.lastElementChild && el) {
    el = el.nextElementSibling;
    index++;
  }
  return index;
}
function getGridLocation(element) {
  const parentElement = element.parentElement;
  if (!parentElement) {
    throw new Error("Invalid grid element");
  }
  if (/\bgrid-view\b/.test(parentElement.className)) {
    return [];
  }
  const index = indexInParent(parentElement);
  const ancestor = parentElement.parentElement.parentElement.parentElement;
  return [...getGridLocation(ancestor), index];
}
function getRelativeLocation(rootOrientation, location2, direction) {
  const orientation = getLocationOrientation(rootOrientation, location2);
  const directionOrientation = getDirectionOrientation(direction);
  if (orientation === directionOrientation) {
    const [rest2, _index] = tail(location2);
    let index = _index;
    if (direction === "right" || direction === "bottom") {
      index += 1;
    }
    return [...rest2, index];
  } else {
    const index = direction === "right" || direction === "bottom" ? 1 : 0;
    return [...location2, index];
  }
}
function getDirectionOrientation(direction) {
  return direction === "top" || direction === "bottom" ? Orientation.VERTICAL : Orientation.HORIZONTAL;
}
function getLocationOrientation(rootOrientation, location2) {
  return location2.length % 2 === 0 ? orthogonal(rootOrientation) : rootOrientation;
}
const orthogonal = (orientation) => orientation === Orientation.HORIZONTAL ? Orientation.VERTICAL : Orientation.HORIZONTAL;
function isGridBranchNode(node) {
  return !!node.children;
}
const serializeBranchNode = (node, orientation) => {
  const size = orientation === Orientation.VERTICAL ? node.box.width : node.box.height;
  if (!isGridBranchNode(node)) {
    if (typeof node.cachedVisibleSize === "number") {
      return {
        type: "leaf",
        data: node.view.toJSON(),
        size: node.cachedVisibleSize,
        visible: false
      };
    }
    return { type: "leaf", data: node.view.toJSON(), size };
  }
  return {
    type: "branch",
    data: node.children.map((c2) => serializeBranchNode(c2, orthogonal(orientation))),
    size
  };
};
class Gridview {
  get length() {
    return this._root ? this._root.children.length : 0;
  }
  get orientation() {
    return this.root.orientation;
  }
  set orientation(orientation) {
    if (this.root.orientation === orientation) {
      return;
    }
    const { size, orthogonalSize } = this.root;
    this.root = flipNode(this.root, orthogonalSize, size);
    this.root.layout(size, orthogonalSize);
  }
  get width() {
    return this.root.width;
  }
  get height() {
    return this.root.height;
  }
  get minimumWidth() {
    return this.root.minimumWidth;
  }
  get minimumHeight() {
    return this.root.minimumHeight;
  }
  get maximumWidth() {
    return this.root.maximumHeight;
  }
  get maximumHeight() {
    return this.root.maximumHeight;
  }
  serialize() {
    const root = serializeBranchNode(this.getView(), this.orientation);
    return {
      root,
      width: this.width,
      height: this.height,
      orientation: this.orientation
    };
  }
  dispose() {
    this.disposable.dispose();
    this._onDidChange.dispose();
    this.root.dispose();
    this.element.remove();
  }
  clear() {
    const orientation = this.root.orientation;
    this.root = new BranchNode(orientation, this.proportionalLayout, this.styles, this.root.size, this.root.orthogonalSize);
  }
  deserialize(json, deserializer) {
    const orientation = json.orientation;
    const height = orientation === Orientation.VERTICAL ? json.height : json.width;
    this._deserialize(json.root, orientation, deserializer, height);
  }
  _deserialize(root, orientation, deserializer, orthogonalSize) {
    this.root = this._deserializeNode(root, orientation, deserializer, orthogonalSize, true);
  }
  _deserializeNode(node, orientation, deserializer, orthogonalSize, isRoot = false) {
    let result;
    if (node.type === "branch") {
      const serializedChildren = node.data;
      const children = serializedChildren.map((serializedChild) => {
        return {
          node: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),
          visible: serializedChild.visible
        };
      });
      result = new BranchNode(orientation, this.proportionalLayout, this.styles, isRoot ? orthogonalSize : node.size, isRoot ? node.size : orthogonalSize, children);
    } else {
      result = new LeafNode(deserializer.fromJSON(node), orientation, orthogonalSize, node.size);
    }
    return result;
  }
  get root() {
    return this._root;
  }
  set root(root) {
    const oldRoot = this._root;
    if (oldRoot) {
      oldRoot.dispose();
      this.element.removeChild(oldRoot.element);
    }
    this._root = root;
    this.element.appendChild(this._root.element);
    this.disposable.value = this._root.onDidChange((e) => {
      this._onDidChange.fire(e);
    });
  }
  /**
   * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node
   * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node
   */
  insertOrthogonalSplitviewAtRoot() {
    if (!this._root) {
      return;
    }
    const oldRoot = this.root;
    oldRoot.element.remove();
    this._root = new BranchNode(orthogonal(oldRoot.orientation), this.proportionalLayout, this.styles, this.root.orthogonalSize, this.root.size);
    if (oldRoot.children.length === 1) {
      const childReference = oldRoot.children[0];
      const child = oldRoot.removeChild(0);
      child.dispose();
      oldRoot.dispose();
      this._root.addChild(
        /**
         * the child node will have the same orientation as the new root since
         * we are removing the inbetween node.
         * the entire 'tree' must be flipped recursively to ensure that the orientation
         * flips at each level
         */
        flipNode(childReference, childReference.orthogonalSize, childReference.size),
        Sizing.Distribute,
        0
      );
    } else {
      this._root.addChild(oldRoot, Sizing.Distribute, 0);
    }
    this.element.appendChild(this._root.element);
    this.disposable.value = this._root.onDidChange((e) => {
      this._onDidChange.fire(e);
    });
  }
  next(location2) {
    return this.progmaticSelect(location2);
  }
  previous(location2) {
    return this.progmaticSelect(location2, true);
  }
  getView(location2) {
    const node = location2 ? this.getNode(location2)[1] : this.root;
    return this._getViews(node, this.orientation);
  }
  _getViews(node, orientation, cachedVisibleSize) {
    const box = { height: node.height, width: node.width };
    if (node instanceof LeafNode) {
      return { box, view: node.view, cachedVisibleSize };
    }
    const children = [];
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);
      children.push(this._getViews(child, orthogonal(orientation), nodeCachedVisibleSize));
    }
    return { box, children };
  }
  progmaticSelect(location2, reverse = false) {
    const [path, node] = this.getNode(location2);
    if (!(node instanceof LeafNode)) {
      throw new Error("invalid location");
    }
    for (let i = path.length - 1; i > -1; i--) {
      const n2 = path[i];
      const l2 = location2[i] || 0;
      const canProgressInCurrentLevel = reverse ? l2 - 1 > -1 : l2 + 1 < n2.children.length;
      if (canProgressInCurrentLevel) {
        return findLeaf(n2.children[reverse ? l2 - 1 : l2 + 1], reverse);
      }
    }
    return findLeaf(this.root, reverse);
  }
  constructor(proportionalLayout, styles, orientation) {
    this.proportionalLayout = proportionalLayout;
    this.styles = styles;
    this.disposable = new MutableDisposable();
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this.element = document.createElement("div");
    this.element.className = "grid-view";
    this.root = new BranchNode(orientation, proportionalLayout, styles, 0, 0);
  }
  isViewVisible(location2) {
    const [rest2, index] = tail(location2);
    const [, parent] = this.getNode(rest2);
    if (!(parent instanceof BranchNode)) {
      throw new Error("Invalid from location");
    }
    return parent.isChildVisible(index);
  }
  setViewVisible(location2, visible) {
    const [rest2, index] = tail(location2);
    const [, parent] = this.getNode(rest2);
    if (!(parent instanceof BranchNode)) {
      throw new Error("Invalid from location");
    }
    parent.setChildVisible(index, visible);
  }
  moveView(parentLocation, from, to) {
    const [, parent] = this.getNode(parentLocation);
    if (!(parent instanceof BranchNode)) {
      throw new Error("Invalid location");
    }
    parent.moveChild(from, to);
  }
  addView(view, size, location2) {
    const [rest2, index] = tail(location2);
    const [pathToParent, parent] = this.getNode(rest2);
    if (parent instanceof BranchNode) {
      const node = new LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);
      parent.addChild(node, size, index);
    } else {
      const [grandParent, ..._] = [...pathToParent].reverse();
      const [parentIndex, ...__] = [...rest2].reverse();
      let newSiblingSize = 0;
      const newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);
      if (typeof newSiblingCachedVisibleSize === "number") {
        newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);
      }
      const child = grandParent.removeChild(parentIndex);
      child.dispose();
      const newParent = new BranchNode(parent.orientation, this.proportionalLayout, this.styles, parent.size, parent.orthogonalSize);
      grandParent.addChild(newParent, parent.size, parentIndex);
      const newSibling = new LeafNode(parent.view, grandParent.orientation, parent.size);
      newParent.addChild(newSibling, newSiblingSize, 0);
      if (typeof size !== "number" && size.type === "split") {
        size = { type: "split", index: 0 };
      }
      const node = new LeafNode(view, grandParent.orientation, parent.size);
      newParent.addChild(node, size, index);
    }
  }
  remove(view, sizing) {
    const location2 = getGridLocation(view.element);
    return this.removeView(location2, sizing);
  }
  removeView(location2, sizing) {
    const [rest2, index] = tail(location2);
    const [pathToParent, parent] = this.getNode(rest2);
    if (!(parent instanceof BranchNode)) {
      throw new Error("Invalid location");
    }
    const nodeToRemove = parent.children[index];
    if (!(nodeToRemove instanceof LeafNode)) {
      throw new Error("Invalid location");
    }
    parent.removeChild(index, sizing);
    nodeToRemove.dispose();
    if (parent.children.length !== 1) {
      return nodeToRemove.view;
    }
    const sibling = parent.children[0];
    if (pathToParent.length === 0) {
      if (sibling instanceof LeafNode) {
        return nodeToRemove.view;
      }
      parent.removeChild(0, sizing);
      this.root = sibling;
      return nodeToRemove.view;
    }
    const [grandParent, ..._] = [...pathToParent].reverse();
    const [parentIndex, ...__] = [...rest2].reverse();
    const isSiblingVisible = parent.isChildVisible(0);
    parent.removeChild(0, sizing);
    const sizes = grandParent.children.map((_size, i) => grandParent.getChildSize(i));
    grandParent.removeChild(parentIndex, sizing).dispose();
    if (sibling instanceof BranchNode) {
      sizes.splice(parentIndex, 1, ...sibling.children.map((c2) => c2.size));
      for (let i = 0; i < sibling.children.length; i++) {
        const child = sibling.children[i];
        grandParent.addChild(child, child.size, parentIndex + i);
      }
    } else {
      const newSibling = new LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);
      const siblingSizing = isSiblingVisible ? sibling.orthogonalSize : Sizing.Invisible(sibling.orthogonalSize);
      grandParent.addChild(newSibling, siblingSizing, parentIndex);
    }
    sibling.dispose();
    for (let i = 0; i < sizes.length; i++) {
      grandParent.resizeChild(i, sizes[i]);
    }
    return nodeToRemove.view;
  }
  layout(width, height) {
    const [size, orthogonalSize] = this.root.orientation === Orientation.HORIZONTAL ? [height, width] : [width, height];
    this.root.layout(size, orthogonalSize);
  }
  getNode(location2, node = this.root, path = []) {
    if (location2.length === 0) {
      return [path, node];
    }
    if (!(node instanceof BranchNode)) {
      throw new Error("Invalid location");
    }
    const [index, ...rest2] = location2;
    if (index < 0 || index >= node.children.length) {
      throw new Error("Invalid location");
    }
    const child = node.children[index];
    path.push(node);
    return this.getNode(rest2, child, path);
  }
}
class SplitviewApi {
  get minimumSize() {
    return this.component.minimumSize;
  }
  get maximumSize() {
    return this.component.maximumSize;
  }
  get height() {
    return this.component.height;
  }
  get width() {
    return this.component.width;
  }
  get length() {
    return this.component.length;
  }
  get orientation() {
    return this.component.orientation;
  }
  get panels() {
    return this.component.panels;
  }
  get onDidLayoutFromJSON() {
    return this.component.onDidLayoutFromJSON;
  }
  get onDidLayoutChange() {
    return this.component.onDidLayoutChange;
  }
  get onDidAddView() {
    return this.component.onDidAddView;
  }
  get onDidRemoveView() {
    return this.component.onDidRemoveView;
  }
  constructor(component) {
    this.component = component;
  }
  updateOptions(options) {
    this.component.updateOptions(options);
  }
  removePanel(panel, sizing) {
    this.component.removePanel(panel, sizing);
  }
  focus() {
    this.component.focus();
  }
  getPanel(id2) {
    return this.component.getPanel(id2);
  }
  layout(width, height) {
    return this.component.layout(width, height);
  }
  addPanel(options) {
    return this.component.addPanel(options);
  }
  movePanel(from, to) {
    this.component.movePanel(from, to);
  }
  fromJSON(data) {
    this.component.fromJSON(data);
  }
  toJSON() {
    return this.component.toJSON();
  }
  clear() {
    this.component.clear();
  }
}
class PaneviewApi {
  get minimumSize() {
    return this.component.minimumSize;
  }
  get maximumSize() {
    return this.component.maximumSize;
  }
  get height() {
    return this.component.height;
  }
  get width() {
    return this.component.width;
  }
  get panels() {
    return this.component.panels;
  }
  get onDidLayoutChange() {
    return this.component.onDidLayoutChange;
  }
  get onDidLayoutFromJSON() {
    return this.component.onDidLayoutFromJSON;
  }
  get onDidAddView() {
    return this.component.onDidAddView;
  }
  get onDidRemoveView() {
    return this.component.onDidRemoveView;
  }
  get onDidDrop() {
    const emitter = new Emitter();
    const disposable2 = this.component.onDidDrop((e) => {
      emitter.fire(Object.assign(Object.assign({}, e), { api: this }));
    });
    emitter.dispose = () => {
      disposable2.dispose();
      emitter.dispose();
    };
    return emitter.event;
  }
  constructor(component) {
    this.component = component;
  }
  removePanel(panel) {
    this.component.removePanel(panel);
  }
  getPanel(id2) {
    return this.component.getPanel(id2);
  }
  movePanel(from, to) {
    this.component.movePanel(from, to);
  }
  focus() {
    this.component.focus();
  }
  layout(width, height) {
    this.component.layout(width, height);
  }
  addPanel(options) {
    return this.component.addPanel(options);
  }
  fromJSON(data) {
    this.component.fromJSON(data);
  }
  toJSON() {
    return this.component.toJSON();
  }
  clear() {
    this.component.clear();
  }
}
class GridviewApi {
  get minimumHeight() {
    return this.component.minimumHeight;
  }
  get maximumHeight() {
    return this.component.maximumHeight;
  }
  get minimumWidth() {
    return this.component.minimumWidth;
  }
  get maximumWidth() {
    return this.component.maximumWidth;
  }
  get width() {
    return this.component.width;
  }
  get height() {
    return this.component.height;
  }
  get onDidLayoutChange() {
    return this.component.onDidLayoutChange;
  }
  get onDidAddPanel() {
    return this.component.onDidAddGroup;
  }
  get onDidRemovePanel() {
    return this.component.onDidRemoveGroup;
  }
  get onDidActivePanelChange() {
    return this.component.onDidActiveGroupChange;
  }
  get onDidLayoutFromJSON() {
    return this.component.onDidLayoutFromJSON;
  }
  get panels() {
    return this.component.groups;
  }
  get orientation() {
    return this.component.orientation;
  }
  set orientation(value) {
    this.component.updateOptions({ orientation: value });
  }
  constructor(component) {
    this.component = component;
  }
  focus() {
    this.component.focus();
  }
  layout(width, height, force = false) {
    this.component.layout(width, height, force);
  }
  addPanel(options) {
    return this.component.addPanel(options);
  }
  removePanel(panel, sizing) {
    this.component.removePanel(panel, sizing);
  }
  movePanel(panel, options) {
    this.component.movePanel(panel, options);
  }
  getPanel(id2) {
    return this.component.getPanel(id2);
  }
  fromJSON(data) {
    return this.component.fromJSON(data);
  }
  toJSON() {
    return this.component.toJSON();
  }
  clear() {
    this.component.clear();
  }
}
class DockviewApi {
  get id() {
    return this.component.id;
  }
  get width() {
    return this.component.width;
  }
  get height() {
    return this.component.height;
  }
  get minimumHeight() {
    return this.component.minimumHeight;
  }
  get maximumHeight() {
    return this.component.maximumHeight;
  }
  get minimumWidth() {
    return this.component.minimumWidth;
  }
  get maximumWidth() {
    return this.component.maximumWidth;
  }
  get size() {
    return this.component.size;
  }
  get totalPanels() {
    return this.component.totalPanels;
  }
  get onDidActiveGroupChange() {
    return this.component.onDidActiveGroupChange;
  }
  get onDidAddGroup() {
    return this.component.onDidAddGroup;
  }
  get onDidRemoveGroup() {
    return this.component.onDidRemoveGroup;
  }
  get onDidActivePanelChange() {
    return this.component.onDidActivePanelChange;
  }
  get onDidAddPanel() {
    return this.component.onDidAddPanel;
  }
  get onDidRemovePanel() {
    return this.component.onDidRemovePanel;
  }
  get onDidLayoutFromJSON() {
    return this.component.onDidLayoutFromJSON;
  }
  get onDidLayoutChange() {
    return this.component.onDidLayoutChange;
  }
  get onDidDrop() {
    return this.component.onDidDrop;
  }
  get panels() {
    return this.component.panels;
  }
  get groups() {
    return this.component.groups;
  }
  get activePanel() {
    return this.component.activePanel;
  }
  get activeGroup() {
    return this.component.activeGroup;
  }
  constructor(component) {
    this.component = component;
  }
  focus() {
    this.component.focus();
  }
  getPanel(id2) {
    return this.component.getGroupPanel(id2);
  }
  layout(width, height, force = false) {
    this.component.layout(width, height, force);
  }
  addPanel(options) {
    return this.component.addPanel(options);
  }
  addGroup(options) {
    return this.component.addGroup(options);
  }
  moveToNext(options) {
    this.component.moveToNext(options);
  }
  moveToPrevious(options) {
    this.component.moveToPrevious(options);
  }
  closeAllGroups() {
    return this.component.closeAllGroups();
  }
  removeGroup(group) {
    this.component.removeGroup(group);
  }
  getGroup(id2) {
    return this.component.getPanel(id2);
  }
  fromJSON(data) {
    this.component.fromJSON(data);
  }
  toJSON() {
    return this.component.toJSON();
  }
  clear() {
    this.component.clear();
  }
}
class DragAndDropObserver extends CompositeDisposable {
  constructor(element, callbacks) {
    super();
    this.element = element;
    this.callbacks = callbacks;
    this.target = null;
    this.registerListeners();
  }
  registerListeners() {
    this.addDisposables(addDisposableListener(this.element, "dragenter", (e) => {
      this.target = e.target;
      this.callbacks.onDragEnter(e);
    }, true));
    this.addDisposables(addDisposableListener(this.element, "dragover", (e) => {
      e.preventDefault();
      if (this.callbacks.onDragOver) {
        this.callbacks.onDragOver(e);
      }
    }, true));
    this.addDisposables(addDisposableListener(this.element, "dragleave", (e) => {
      if (this.target === e.target) {
        this.target = null;
        this.callbacks.onDragLeave(e);
      }
    }));
    this.addDisposables(addDisposableListener(this.element, "dragend", (e) => {
      this.target = null;
      this.callbacks.onDragEnd(e);
    }));
    this.addDisposables(addDisposableListener(this.element, "drop", (e) => {
      this.callbacks.onDrop(e);
    }));
  }
}
function numberOrFallback(maybeNumber, fallback) {
  return typeof maybeNumber === "number" ? maybeNumber : fallback;
}
function directionToPosition(direction) {
  switch (direction) {
    case "above":
      return "top";
    case "below":
      return "bottom";
    case "left":
      return "left";
    case "right":
      return "right";
    case "within":
      return "center";
    default:
      throw new Error(`invalid direction '${direction}'`);
  }
}
class Droptarget extends CompositeDisposable {
  get state() {
    return this._state;
  }
  constructor(element, options) {
    super();
    this.element = element;
    this.options = options;
    this._onDrop = new Emitter();
    this.onDrop = this._onDrop.event;
    const acceptedTargetZonesSet = new Set(this.options.acceptedTargetZones);
    this.addDisposables(this._onDrop, new DragAndDropObserver(this.element, {
      onDragEnter: () => void 0,
      onDragOver: (e) => {
        const width = this.element.clientWidth;
        const height = this.element.clientHeight;
        if (width === 0 || height === 0) {
          return;
        }
        const rect = e.currentTarget.getBoundingClientRect();
        const x2 = e.clientX - rect.left;
        const y2 = e.clientY - rect.top;
        const quadrant = this.calculateQuadrant(acceptedTargetZonesSet, x2, y2, width, height);
        if (quadrant === null) {
          this.removeDropTarget();
          return;
        }
        if (typeof this.options.canDisplayOverlay === "boolean") {
          if (!this.options.canDisplayOverlay) {
            return;
          }
        } else if (!this.options.canDisplayOverlay(e, quadrant)) {
          return;
        }
        if (!this.targetElement) {
          this.targetElement = document.createElement("div");
          this.targetElement.className = "drop-target-dropzone";
          this.overlayElement = document.createElement("div");
          this.overlayElement.className = "drop-target-selection";
          this._state = "center";
          this.targetElement.appendChild(this.overlayElement);
          this.element.classList.add("drop-target");
          this.element.append(this.targetElement);
        }
        if (this.options.acceptedTargetZones.length === 0) {
          return;
        }
        if (!this.targetElement || !this.overlayElement) {
          return;
        }
        this.toggleClasses(quadrant, width, height);
        this.setState(quadrant);
      },
      onDragLeave: () => {
        this.removeDropTarget();
      },
      onDragEnd: () => {
        this.removeDropTarget();
      },
      onDrop: (e) => {
        e.preventDefault();
        const state = this._state;
        this.removeDropTarget();
        if (state) {
          e.stopPropagation();
          this._onDrop.fire({ position: state, nativeEvent: e });
        }
      }
    }));
  }
  dispose() {
    this.removeDropTarget();
    super.dispose();
  }
  toggleClasses(quadrant, width, height) {
    var _a2, _b2, _c2, _d;
    if (!this.overlayElement) {
      return;
    }
    const isSmallX = width < 100;
    const isSmallY = height < 100;
    const isLeft = quadrant === "left";
    const isRight = quadrant === "right";
    const isTop = quadrant === "top";
    const isBottom = quadrant === "bottom";
    const rightClass = !isSmallX && isRight;
    const leftClass = !isSmallX && isLeft;
    const topClass = !isSmallY && isTop;
    const bottomClass = !isSmallY && isBottom;
    let size = 0.5;
    if (((_b2 = (_a2 = this.options.overlayModel) === null || _a2 === void 0 ? void 0 : _a2.size) === null || _b2 === void 0 ? void 0 : _b2.type) === "percentage") {
      size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;
    }
    if (((_d = (_c2 = this.options.overlayModel) === null || _c2 === void 0 ? void 0 : _c2.size) === null || _d === void 0 ? void 0 : _d.type) === "pixels") {
      if (rightClass || leftClass) {
        size = clamp(0, this.options.overlayModel.size.value, width) / width;
      }
      if (topClass || bottomClass) {
        size = clamp(0, this.options.overlayModel.size.value, height) / height;
      }
    }
    const translate = (1 - size) / 2;
    const scale = size;
    let transform;
    if (rightClass) {
      transform = `translateX(${100 * translate}%) scaleX(${scale})`;
    } else if (leftClass) {
      transform = `translateX(-${100 * translate}%) scaleX(${scale})`;
    } else if (topClass) {
      transform = `translateY(-${100 * translate}%) scaleY(${scale})`;
    } else if (bottomClass) {
      transform = `translateY(${100 * translate}%) scaleY(${scale})`;
    } else {
      transform = "";
    }
    this.overlayElement.style.transform = transform;
    toggleClass(this.overlayElement, "small-right", isSmallX && isRight);
    toggleClass(this.overlayElement, "small-left", isSmallX && isLeft);
    toggleClass(this.overlayElement, "small-top", isSmallY && isTop);
    toggleClass(this.overlayElement, "small-bottom", isSmallY && isBottom);
  }
  setState(quadrant) {
    switch (quadrant) {
      case "top":
        this._state = "top";
        break;
      case "left":
        this._state = "left";
        break;
      case "bottom":
        this._state = "bottom";
        break;
      case "right":
        this._state = "right";
        break;
      case "center":
        this._state = "center";
        break;
    }
  }
  calculateQuadrant(overlayType, x2, y2, width, height) {
    var _a2, _b2, _c2, _d, _e, _f;
    const isPercentage = ((_a2 = this.options.overlayModel) === null || _a2 === void 0 ? void 0 : _a2.activationSize) === void 0 || ((_c2 = (_b2 = this.options.overlayModel) === null || _b2 === void 0 ? void 0 : _b2.activationSize) === null || _c2 === void 0 ? void 0 : _c2.type) === "percentage";
    const value = numberOrFallback((_f = (_e = (_d = this.options) === null || _d === void 0 ? void 0 : _d.overlayModel) === null || _e === void 0 ? void 0 : _e.activationSize) === null || _f === void 0 ? void 0 : _f.value, 20);
    if (isPercentage) {
      return calculateQuadrantAsPercentage(overlayType, x2, y2, width, height, value);
    }
    return calculateQuadrantAsPixels(overlayType, x2, y2, width, height, value);
  }
  removeDropTarget() {
    if (this.targetElement) {
      this._state = void 0;
      this.element.removeChild(this.targetElement);
      this.targetElement = void 0;
      this.overlayElement = void 0;
      this.element.classList.remove("drop-target");
    }
  }
}
function calculateQuadrantAsPercentage(overlayType, x2, y2, width, height, threshold) {
  const xp = 100 * x2 / width;
  const yp = 100 * y2 / height;
  if (overlayType.has("left") && xp < threshold) {
    return "left";
  }
  if (overlayType.has("right") && xp > 100 - threshold) {
    return "right";
  }
  if (overlayType.has("top") && yp < threshold) {
    return "top";
  }
  if (overlayType.has("bottom") && yp > 100 - threshold) {
    return "bottom";
  }
  if (!overlayType.has("center")) {
    return null;
  }
  return "center";
}
function calculateQuadrantAsPixels(overlayType, x2, y2, width, height, threshold) {
  if (overlayType.has("left") && x2 < threshold) {
    return "left";
  }
  if (overlayType.has("right") && x2 > width - threshold) {
    return "right";
  }
  if (overlayType.has("top") && y2 < threshold) {
    return "top";
  }
  if (overlayType.has("bottom") && y2 > height - threshold) {
    return "bottom";
  }
  if (!overlayType.has("center")) {
    return null;
  }
  return "center";
}
class ContentContainer extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor() {
    super();
    this.disposable = new MutableDisposable();
    this._onDidFocus = new Emitter();
    this.onDidFocus = this._onDidFocus.event;
    this._onDidBlur = new Emitter();
    this.onDidBlur = this._onDidBlur.event;
    this._element = document.createElement("div");
    this._element.className = "content-container";
    this._element.tabIndex = -1;
    this.addDisposables(this._onDidFocus, this._onDidBlur);
  }
  show() {
    this.element.style.display = "";
  }
  hide() {
    this.element.style.display = "none";
  }
  openPanel(panel) {
    var _a2;
    if (this.panel === panel) {
      return;
    }
    if (this.panel) {
      if ((_a2 = this.panel.view) === null || _a2 === void 0 ? void 0 : _a2.content) {
        this._element.removeChild(this.panel.view.content.element);
      }
      this.panel = void 0;
    }
    this.panel = panel;
    const disposable2 = new CompositeDisposable();
    if (this.panel.view) {
      const _onDidFocus = this.panel.view.content.onDidFocus;
      const _onDidBlur = this.panel.view.content.onDidBlur;
      const focusTracker = trackFocus(this._element);
      disposable2.addDisposables(focusTracker, focusTracker.onDidFocus(() => this._onDidFocus.fire()), focusTracker.onDidBlur(() => this._onDidBlur.fire()));
      if (_onDidFocus) {
        disposable2.addDisposables(_onDidFocus(() => this._onDidFocus.fire()));
      }
      if (_onDidBlur) {
        disposable2.addDisposables(_onDidBlur(() => this._onDidBlur.fire()));
      }
      this._element.appendChild(this.panel.view.content.element);
    }
    this.disposable.value = disposable2;
  }
  layout(_width, _height) {
  }
  closePanel() {
    var _a2, _b2, _c2;
    if ((_c2 = (_b2 = (_a2 = this.panel) === null || _a2 === void 0 ? void 0 : _a2.view) === null || _b2 === void 0 ? void 0 : _b2.content) === null || _c2 === void 0 ? void 0 : _c2.element) {
      this._element.removeChild(this.panel.view.content.element);
      this.panel = void 0;
    }
  }
  dispose() {
    this.disposable.dispose();
    super.dispose();
  }
}
var DockviewDropTargets;
(function(DockviewDropTargets2) {
  DockviewDropTargets2[DockviewDropTargets2["Tab"] = 0] = "Tab";
  DockviewDropTargets2[DockviewDropTargets2["Panel"] = 1] = "Panel";
  DockviewDropTargets2[DockviewDropTargets2["TabContainer"] = 2] = "TabContainer";
  DockviewDropTargets2[DockviewDropTargets2["Edge"] = 3] = "Edge";
})(DockviewDropTargets || (DockviewDropTargets = {}));
class DragHandler extends CompositeDisposable {
  constructor(el) {
    super();
    this.el = el;
    this.dataDisposable = new MutableDisposable();
    this.pointerEventsDisposable = new MutableDisposable();
    this._onDragStart = new Emitter();
    this.onDragStart = this._onDragStart.event;
    this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);
    this.configure();
  }
  configure() {
    this.addDisposables(this._onDragStart, addDisposableListener(this.el, "dragstart", (event) => {
      const iframes = [
        ...getElementsByTagName("iframe"),
        ...getElementsByTagName("webview")
      ];
      this.pointerEventsDisposable.value = {
        dispose: () => {
          for (const iframe of iframes) {
            iframe.style.pointerEvents = "auto";
          }
        }
      };
      for (const iframe of iframes) {
        iframe.style.pointerEvents = "none";
      }
      this.el.classList.add("dv-dragged");
      setTimeout(() => this.el.classList.remove("dv-dragged"), 0);
      this.dataDisposable.value = this.getData(event.dataTransfer);
      if (event.dataTransfer) {
        event.dataTransfer.effectAllowed = "move";
        event.dataTransfer.setData("text/plain", "__dockview_internal_drag_event__");
      }
    }), addDisposableListener(this.el, "dragend", () => {
      this.pointerEventsDisposable.dispose();
      this.dataDisposable.dispose();
    }));
  }
}
class Tab extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor(panelId, accessor, group) {
    super();
    this.panelId = panelId;
    this.accessor = accessor;
    this.group = group;
    this._onChanged = new Emitter();
    this.onChanged = this._onChanged.event;
    this._onDropped = new Emitter();
    this.onDrop = this._onDropped.event;
    this._element = document.createElement("div");
    this._element.className = "tab";
    this._element.tabIndex = 0;
    this._element.draggable = true;
    toggleClass(this.element, "inactive-tab", true);
    this.addDisposables(this._onChanged, this._onDropped, new class Handler extends DragHandler {
      constructor() {
        super(...arguments);
        this.panelTransfer = LocalSelectionTransfer.getInstance();
      }
      getData() {
        this.panelTransfer.setData([new PanelTransfer(accessor.id, group.id, panelId)], PanelTransfer.prototype);
        return {
          dispose: () => {
            this.panelTransfer.clearData(PanelTransfer.prototype);
          }
        };
      }
    }(this._element));
    this.addDisposables(addDisposableListener(this._element, "mousedown", (event) => {
      if (event.defaultPrevented) {
        return;
      }
      event.stopPropagation();
      this._onChanged.fire(event);
    }));
    this.droptarget = new Droptarget(this._element, {
      acceptedTargetZones: ["center"],
      canDisplayOverlay: (event, position) => {
        if (this.group.locked) {
          return false;
        }
        const data = getPanelData();
        if (data && this.accessor.id === data.viewId) {
          if (data.panelId === null && data.groupId === this.group.id) {
            return false;
          }
          return this.panelId !== data.panelId;
        }
        return this.group.model.canDisplayOverlay(event, position, DockviewDropTargets.Tab);
      }
    });
    this.addDisposables(this.droptarget.onDrop((event) => {
      this._onDropped.fire(event);
    }), this.droptarget);
  }
  setActive(isActive) {
    toggleClass(this.element, "active-tab", isActive);
    toggleClass(this.element, "inactive-tab", !isActive);
  }
  setContent(part) {
    if (this.content) {
      this._element.removeChild(this.content.element);
    }
    this.content = part;
    this._element.appendChild(this.content.element);
  }
  dispose() {
    super.dispose();
  }
}
function addGhostImage(dataTransfer, ghostElement) {
  addClasses(ghostElement, "dv-dragged");
  document.body.appendChild(ghostElement);
  dataTransfer.setDragImage(ghostElement, 0, 0);
  setTimeout(() => {
    removeClasses(ghostElement, "dv-dragged");
    ghostElement.remove();
  }, 0);
}
class GroupDragHandler extends DragHandler {
  constructor(element, accessorId, group) {
    super(element);
    this.accessorId = accessorId;
    this.group = group;
    this.panelTransfer = LocalSelectionTransfer.getInstance();
  }
  getData(dataTransfer) {
    this.panelTransfer.setData([new PanelTransfer(this.accessorId, this.group.id, null)], PanelTransfer.prototype);
    const style = window.getComputedStyle(this.el);
    const bgColor = style.getPropertyValue("--dv-activegroup-visiblepanel-tab-background-color");
    const color2 = style.getPropertyValue("--dv-activegroup-visiblepanel-tab-color");
    if (dataTransfer) {
      const ghostElement = document.createElement("div");
      ghostElement.style.backgroundColor = bgColor;
      ghostElement.style.color = color2;
      ghostElement.style.padding = "2px 8px";
      ghostElement.style.height = "24px";
      ghostElement.style.fontSize = "11px";
      ghostElement.style.lineHeight = "20px";
      ghostElement.style.borderRadius = "12px";
      ghostElement.style.position = "absolute";
      ghostElement.textContent = `Multiple Panels (${this.group.size})`;
      addGhostImage(dataTransfer, ghostElement);
    }
    return {
      dispose: () => {
        this.panelTransfer.clearData(PanelTransfer.prototype);
      }
    };
  }
}
class VoidContainer extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor(accessor, group) {
    super();
    this.accessor = accessor;
    this.group = group;
    this._onDrop = new Emitter();
    this.onDrop = this._onDrop.event;
    this._element = document.createElement("div");
    this._element.className = "void-container";
    this._element.tabIndex = 0;
    this._element.draggable = true;
    this.addDisposables(this._onDrop, addDisposableListener(this._element, "click", () => {
      this.accessor.doSetGroupActive(this.group);
    }));
    const handler = new GroupDragHandler(this._element, accessor.id, group);
    this.voidDropTarget = new Droptarget(this._element, {
      acceptedTargetZones: ["center"],
      canDisplayOverlay: (event, position) => {
        var _a2;
        const data = getPanelData();
        if (data && this.accessor.id === data.viewId) {
          if (data.panelId === null && data.groupId === this.group.id) {
            return false;
          }
          return ((_a2 = last(this.group.panels)) === null || _a2 === void 0 ? void 0 : _a2.id) !== data.panelId;
        }
        return group.model.canDisplayOverlay(event, position, DockviewDropTargets.Panel);
      }
    });
    this.addDisposables(handler, this.voidDropTarget.onDrop((event) => {
      this._onDrop.fire(event);
    }), this.voidDropTarget);
  }
}
class TabsContainer extends CompositeDisposable {
  get panels() {
    return this.tabs.map((_) => _.value.panelId);
  }
  get size() {
    return this.tabs.length;
  }
  get hidden() {
    return this._hidden;
  }
  set hidden(value) {
    this._hidden = value;
    this.element.style.display = value ? "none" : "";
  }
  show() {
    if (!this.hidden) {
      this.element.style.display = "";
    }
  }
  hide() {
    this._element.style.display = "none";
  }
  setActionElement(element) {
    if (this.actions === element) {
      return;
    }
    if (this.actions) {
      this.actions.remove();
      this.actions = void 0;
    }
    if (element) {
      this.actionContainer.appendChild(element);
      this.actions = element;
    }
  }
  get element() {
    return this._element;
  }
  isActive(tab) {
    return this.selectedIndex > -1 && this.tabs[this.selectedIndex].value === tab;
  }
  indexOf(id2) {
    return this.tabs.findIndex((tab) => tab.value.panelId === id2);
  }
  constructor(accessor, group) {
    super();
    this.accessor = accessor;
    this.group = group;
    this.tabs = [];
    this.selectedIndex = -1;
    this._hidden = false;
    this._onDrop = new Emitter();
    this.onDrop = this._onDrop.event;
    this.addDisposables(this._onDrop);
    this._element = document.createElement("div");
    this._element.className = "tabs-and-actions-container";
    toggleClass(this._element, "dv-full-width-single-tab", this.accessor.options.singleTabMode === "fullwidth");
    this.addDisposables(this.accessor.onDidAddPanel((e) => {
      if (e.api.group === this.group) {
        toggleClass(this._element, "dv-single-tab", this.size === 1);
      }
    }), this.accessor.onDidRemovePanel((e) => {
      if (e.api.group === this.group) {
        toggleClass(this._element, "dv-single-tab", this.size === 1);
      }
    }));
    this.actionContainer = document.createElement("div");
    this.actionContainer.className = "action-container";
    this.tabContainer = document.createElement("div");
    this.tabContainer.className = "tabs-container";
    this.voidContainer = new VoidContainer(this.accessor, this.group);
    this._element.appendChild(this.tabContainer);
    this._element.appendChild(this.voidContainer.element);
    this._element.appendChild(this.actionContainer);
    this.addDisposables(this.voidContainer, this.voidContainer.onDrop((event) => {
      this._onDrop.fire({
        event: event.nativeEvent,
        index: this.tabs.length
      });
    }), addDisposableListener(this.tabContainer, "mousedown", (event) => {
      if (event.defaultPrevented) {
        return;
      }
      const isLeftClick = event.button === 0;
      if (isLeftClick) {
        this.accessor.doSetGroupActive(this.group);
      }
    }));
  }
  setActive(_isGroupActive) {
  }
  addTab(tab, index = this.tabs.length) {
    if (index < 0 || index > this.tabs.length) {
      throw new Error("invalid location");
    }
    this.tabContainer.insertBefore(tab.value.element, this.tabContainer.children[index]);
    this.tabs = [
      ...this.tabs.slice(0, index),
      tab,
      ...this.tabs.slice(index)
    ];
    if (this.selectedIndex < 0) {
      this.selectedIndex = index;
    }
  }
  delete(id2) {
    const index = this.tabs.findIndex((tab) => tab.value.panelId === id2);
    const tabToRemove = this.tabs.splice(index, 1)[0];
    const { value, disposable: disposable2 } = tabToRemove;
    disposable2.dispose();
    value.dispose();
    value.element.remove();
  }
  setActivePanel(panel) {
    this.tabs.forEach((tab) => {
      const isActivePanel = panel.id === tab.value.panelId;
      tab.value.setActive(isActivePanel);
    });
  }
  openPanel(panel, index = this.tabs.length) {
    var _a2;
    if (this.tabs.find((tab) => tab.value.panelId === panel.id)) {
      return;
    }
    const tabToAdd = new Tab(panel.id, this.accessor, this.group);
    if (!((_a2 = panel.view) === null || _a2 === void 0 ? void 0 : _a2.tab)) {
      throw new Error("invalid header component");
    }
    tabToAdd.setContent(panel.view.tab);
    const disposable2 = CompositeDisposable.from(tabToAdd.onChanged((event) => {
      var _a3;
      const alreadyFocused = panel.id === ((_a3 = this.group.model.activePanel) === null || _a3 === void 0 ? void 0 : _a3.id) && this.group.model.isContentFocused;
      const isLeftClick = event.button === 0;
      if (!isLeftClick || event.defaultPrevented) {
        return;
      }
      this.group.model.openPanel(panel, {
        skipFocus: alreadyFocused
      });
    }), tabToAdd.onDrop((event) => {
      this._onDrop.fire({
        event: event.nativeEvent,
        index: this.tabs.findIndex((x2) => x2.value === tabToAdd)
      });
    }));
    const value = { value: tabToAdd, disposable: disposable2 };
    this.addTab(value, index);
  }
  closePanel(panel) {
    this.delete(panel.id);
  }
  dispose() {
    super.dispose();
    for (const { value, disposable: disposable2 } of this.tabs) {
      disposable2.dispose();
      value.dispose();
    }
    this.tabs = [];
  }
}
class DockviewGroupPanelModel extends CompositeDisposable {
  get element() {
    throw new Error("not supported");
  }
  get activePanel() {
    return this._activePanel;
  }
  get locked() {
    return this._locked;
  }
  set locked(value) {
    this._locked = value;
    toggleClass(this.container, "locked-groupview", value);
  }
  get isActive() {
    return this._isGroupActive;
  }
  get panels() {
    return this._panels;
  }
  get size() {
    return this._panels.length;
  }
  get isEmpty() {
    return this._panels.length === 0;
  }
  get hasWatermark() {
    return !!(this.watermark && this.container.contains(this.watermark.element));
  }
  get header() {
    return this.tabsContainer;
  }
  get isContentFocused() {
    if (!document.activeElement) {
      return false;
    }
    return isAncestor(document.activeElement, this.contentContainer.element);
  }
  constructor(container, accessor, id2, options, groupPanel) {
    super();
    this.container = container;
    this.accessor = accessor;
    this.id = id2;
    this.options = options;
    this.groupPanel = groupPanel;
    this._isGroupActive = false;
    this._locked = false;
    this.mostRecentlyUsed = [];
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this._width = 0;
    this._height = 0;
    this._panels = [];
    this._onMove = new Emitter();
    this.onMove = this._onMove.event;
    this._onDidDrop = new Emitter();
    this.onDidDrop = this._onDidDrop.event;
    this._onDidAddPanel = new Emitter();
    this.onDidAddPanel = this._onDidAddPanel.event;
    this._onDidRemovePanel = new Emitter();
    this.onDidRemovePanel = this._onDidRemovePanel.event;
    this._onDidActivePanelChange = new Emitter();
    this.onDidActivePanelChange = this._onDidActivePanelChange.event;
    this.container.classList.add("groupview");
    this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);
    this.contentContainer = new ContentContainer();
    this.dropTarget = new Droptarget(this.contentContainer.element, {
      acceptedTargetZones: ["top", "bottom", "left", "right", "center"],
      canDisplayOverlay: (event, position) => {
        if (this.locked && position === "center") {
          return false;
        }
        const data = getPanelData();
        if (data && data.viewId === this.accessor.id) {
          if (data.groupId === this.id) {
            if (position === "center") {
              return false;
            }
            if (data.panelId === null) {
              return false;
            }
          }
          const groupHasOnePanelAndIsActiveDragElement = this._panels.length === 1 && data.groupId === this.id;
          return !groupHasOnePanelAndIsActiveDragElement;
        }
        return this.canDisplayOverlay(event, position, DockviewDropTargets.Panel);
      }
    });
    container.append(this.tabsContainer.element, this.contentContainer.element);
    this.header.hidden = !!options.hideHeader;
    this.locked = !!options.locked;
    this.addDisposables(this.tabsContainer.onDrop((event) => {
      this.handleDropEvent(event.event, "center", event.index);
    }), this.contentContainer.onDidFocus(() => {
      this.accessor.doSetGroupActive(this.groupPanel, true);
    }), this.contentContainer.onDidBlur(() => {
    }), this.dropTarget.onDrop((event) => {
      this.handleDropEvent(event.nativeEvent, event.position);
    }), this._onMove, this._onDidChange, this._onDidDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange);
  }
  initialize() {
    var _a2, _b2;
    if ((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.panels) {
      this.options.panels.forEach((panel) => {
        this.doAddPanel(panel);
      });
    }
    if ((_b2 = this.options) === null || _b2 === void 0 ? void 0 : _b2.activePanel) {
      this.openPanel(this.options.activePanel);
    }
    this.setActive(this.isActive, true, true);
    this.updateContainer();
    if (this.accessor.options.createGroupControlElement) {
      this._control = this.accessor.options.createGroupControlElement(this.groupPanel);
      this.addDisposables(this._control);
      this._control.init({
        containerApi: new DockviewApi(this.accessor),
        api: this.groupPanel.api
      });
      this.tabsContainer.setActionElement(this._control.element);
    }
  }
  indexOf(panel) {
    return this.tabsContainer.indexOf(panel.id);
  }
  toJSON() {
    var _a2;
    const result = {
      views: this.tabsContainer.panels,
      activeView: (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.id,
      id: this.id
    };
    if (this.locked) {
      result.locked = true;
    }
    if (this.header.hidden) {
      result.hideHeader = true;
    }
    return result;
  }
  moveToNext(options) {
    if (!options) {
      options = {};
    }
    if (!options.panel) {
      options.panel = this.activePanel;
    }
    const index = options.panel ? this.panels.indexOf(options.panel) : -1;
    let normalizedIndex;
    if (index < this.panels.length - 1) {
      normalizedIndex = index + 1;
    } else if (!options.suppressRoll) {
      normalizedIndex = 0;
    } else {
      return;
    }
    this.openPanel(this.panels[normalizedIndex]);
  }
  moveToPrevious(options) {
    if (!options) {
      options = {};
    }
    if (!options.panel) {
      options.panel = this.activePanel;
    }
    if (!options.panel) {
      return;
    }
    const index = this.panels.indexOf(options.panel);
    let normalizedIndex;
    if (index > 0) {
      normalizedIndex = index - 1;
    } else if (!options.suppressRoll) {
      normalizedIndex = this.panels.length - 1;
    } else {
      return;
    }
    this.openPanel(this.panels[normalizedIndex]);
  }
  containsPanel(panel) {
    return this.panels.includes(panel);
  }
  init(_params) {
  }
  update(_params) {
  }
  focus() {
    var _a2, _b2;
    (_b2 = (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.focus) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
  }
  openPanel(panel, options = {}) {
    if (typeof options.index !== "number" || options.index > this.panels.length) {
      options.index = this.panels.length;
    }
    const skipSetPanelActive = !!options.skipSetPanelActive;
    const skipSetGroupActive = !!options.skipSetGroupActive;
    panel.updateParentGroup(this.groupPanel, true);
    if (this._activePanel === panel) {
      if (!skipSetGroupActive) {
        this.accessor.doSetGroupActive(this.groupPanel);
      }
      return;
    }
    this.doAddPanel(panel, options.index, skipSetPanelActive);
    if (!skipSetPanelActive) {
      this.doSetActivePanel(panel);
    }
    if (!skipSetGroupActive) {
      this.accessor.doSetGroupActive(this.groupPanel, !!options.skipFocus);
    }
    this.updateContainer();
  }
  removePanel(groupItemOrId) {
    const id2 = typeof groupItemOrId === "string" ? groupItemOrId : groupItemOrId.id;
    const panelToRemove = this._panels.find((panel) => panel.id === id2);
    if (!panelToRemove) {
      throw new Error("invalid operation");
    }
    return this._removePanel(panelToRemove);
  }
  closeAllPanels() {
    if (this.panels.length > 0) {
      const arrPanelCpy = [...this.panels];
      for (const panel of arrPanelCpy) {
        this.doClose(panel);
      }
    } else {
      this.accessor.removeGroup(this.groupPanel);
    }
  }
  closePanel(panel) {
    this.doClose(panel);
  }
  doClose(panel) {
    this.accessor.removePanel(panel);
  }
  isPanelActive(panel) {
    return this._activePanel === panel;
  }
  updateActions(element) {
    this.tabsContainer.setActionElement(element);
  }
  setActive(isGroupActive, skipFocus = false, force = false) {
    var _a2, _b2, _c2, _d;
    if (!force && this.isActive === isGroupActive) {
      if (!skipFocus) {
        (_b2 = (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.focus) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      }
      return;
    }
    this._isGroupActive = isGroupActive;
    toggleClass(this.container, "active-group", isGroupActive);
    toggleClass(this.container, "inactive-group", !isGroupActive);
    this.tabsContainer.setActive(this.isActive);
    if (!this._activePanel && this.panels.length > 0) {
      this.doSetActivePanel(this.panels[0]);
    }
    this.updateContainer();
    if (isGroupActive) {
      if (!skipFocus) {
        (_d = (_c2 = this._activePanel) === null || _c2 === void 0 ? void 0 : _c2.focus) === null || _d === void 0 ? void 0 : _d.call(_c2);
      }
    }
  }
  layout(width, height) {
    var _a2;
    this._width = width;
    this._height = height;
    this.contentContainer.layout(this._width, this._height);
    if ((_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.layout) {
      this._activePanel.layout(this._width, this._height);
    }
  }
  _removePanel(panel) {
    const isActivePanel = this._activePanel === panel;
    this.doRemovePanel(panel);
    if (isActivePanel && this.panels.length > 0) {
      const nextPanel = this.mostRecentlyUsed[0];
      this.openPanel(nextPanel);
    }
    if (this._activePanel && this.panels.length === 0) {
      this.doSetActivePanel(void 0);
    }
    this.updateContainer();
    return panel;
  }
  doRemovePanel(panel) {
    const index = this.panels.indexOf(panel);
    if (this._activePanel === panel) {
      this.contentContainer.closePanel();
    }
    this.tabsContainer.delete(panel.id);
    this._panels.splice(index, 1);
    if (this.mostRecentlyUsed.includes(panel)) {
      this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);
    }
    this._onDidRemovePanel.fire({ panel });
  }
  doAddPanel(panel, index = this.panels.length, skipSetActive = false) {
    const existingPanel = this._panels.indexOf(panel);
    const hasExistingPanel = existingPanel > -1;
    this.tabsContainer.openPanel(panel, index);
    if (!skipSetActive) {
      this.contentContainer.openPanel(panel);
    }
    this.tabsContainer.show();
    this.contentContainer.show();
    if (hasExistingPanel) {
      return;
    }
    this.updateMru(panel);
    this.panels.splice(index, 0, panel);
    this._onDidAddPanel.fire({ panel });
  }
  doSetActivePanel(panel) {
    this._activePanel = panel;
    if (panel) {
      this.tabsContainer.setActivePanel(panel);
      panel.layout(this._width, this._height);
      this.updateMru(panel);
      this._onDidActivePanelChange.fire({ panel });
    }
  }
  updateMru(panel) {
    if (this.mostRecentlyUsed.includes(panel)) {
      this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);
    }
    this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];
  }
  updateContainer() {
    var _a2, _b2;
    toggleClass(this.container, "empty", this.isEmpty);
    this.panels.forEach((panel) => panel.updateParentGroup(this.groupPanel, this.isActive));
    if (this.isEmpty && !this.watermark) {
      const watermark = this.accessor.createWatermarkComponent();
      watermark.init({
        containerApi: new DockviewApi(this.accessor),
        group: this.groupPanel
      });
      this.watermark = watermark;
      addDisposableListener(this.watermark.element, "click", () => {
        if (!this.isActive) {
          this.accessor.doSetGroupActive(this.groupPanel);
        }
      });
      this.tabsContainer.hide();
      this.contentContainer.element.appendChild(this.watermark.element);
      this.watermark.updateParentGroup(this.groupPanel, true);
    }
    if (!this.isEmpty && this.watermark) {
      this.watermark.element.remove();
      (_b2 = (_a2 = this.watermark).dispose) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      this.watermark = void 0;
      this.tabsContainer.show();
    }
  }
  canDisplayOverlay(event, position, target) {
    if (this.accessor.options.showDndOverlay) {
      return this.accessor.options.showDndOverlay({
        nativeEvent: event,
        target,
        group: this.accessor.getPanel(this.id),
        position,
        getData: getPanelData
      });
    }
    return false;
  }
  handleDropEvent(event, position, index) {
    const data = getPanelData();
    if (data && data.viewId === this.accessor.id) {
      if (data.panelId === null) {
        const { groupId: groupId2 } = data;
        this._onMove.fire({
          target: position,
          groupId: groupId2,
          index
        });
        return;
      }
      const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;
      if (fromSameGroup && this.tabsContainer.size === 1) {
        return;
      }
      const { groupId, panelId } = data;
      const isSameGroup = this.id === groupId;
      if (isSameGroup && !position) {
        const oldIndex = this.tabsContainer.indexOf(panelId);
        if (oldIndex === index) {
          return;
        }
      }
      this._onMove.fire({
        target: position,
        groupId: data.groupId,
        itemId: data.panelId,
        index
      });
    } else {
      this._onDidDrop.fire({
        nativeEvent: event,
        position,
        index,
        getData: () => getPanelData()
      });
    }
  }
  dispose() {
    var _a2, _b2;
    super.dispose();
    (_b2 = (_a2 = this.watermark) === null || _a2 === void 0 ? void 0 : _a2.dispose) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
    for (const panel of this.panels) {
      panel.dispose();
    }
    this.dropTarget.dispose();
    this.tabsContainer.dispose();
    this.contentContainer.dispose();
  }
}
class Resizable extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor(parentElement) {
    super();
    if (parentElement) {
      this._element = parentElement;
    } else {
      this._element = document.createElement("div");
      this._element.style.height = "100%";
      this._element.style.width = "100%";
      this._element.className = "dv-resizable-container";
    }
    this.addDisposables(watchElementResize(this._element, (entry) => {
      if (this.isDisposed) {
        return;
      }
      const { width, height } = entry.contentRect;
      this.layout(width, height);
    }));
  }
}
const nextLayoutId$1 = sequentialNumberGenerator();
function toTarget(direction) {
  switch (direction) {
    case "left":
      return "left";
    case "right":
      return "right";
    case "above":
      return "top";
    case "below":
      return "bottom";
    case "within":
    default:
      return "center";
  }
}
class BaseGrid extends Resizable {
  get id() {
    return this._id;
  }
  get size() {
    return this._groups.size;
  }
  get groups() {
    return Array.from(this._groups.values()).map((_) => _.value);
  }
  get width() {
    return this.gridview.width;
  }
  get height() {
    return this.gridview.height;
  }
  get minimumHeight() {
    return this.gridview.minimumHeight;
  }
  get maximumHeight() {
    return this.gridview.maximumHeight;
  }
  get minimumWidth() {
    return this.gridview.minimumWidth;
  }
  get maximumWidth() {
    return this.gridview.maximumWidth;
  }
  get activeGroup() {
    return this._activeGroup;
  }
  constructor(options) {
    super(options.parentElement);
    this._id = nextLayoutId$1.next();
    this._groups = /* @__PURE__ */ new Map();
    this._onDidLayoutChange = new Emitter();
    this.onDidLayoutChange = this._onDidLayoutChange.event;
    this._onDidRemoveGroup = new Emitter();
    this.onDidRemoveGroup = this._onDidRemoveGroup.event;
    this._onDidAddGroup = new Emitter();
    this.onDidAddGroup = this._onDidAddGroup.event;
    this._onDidActiveGroupChange = new Emitter();
    this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
    this._bufferOnDidLayoutChange = new TickDelayedEvent();
    this.gridview = new Gridview(!!options.proportionalLayout, options.styles, options.orientation);
    this.element.appendChild(this.gridview.element);
    this.layout(0, 0, true);
    this.addDisposables(this.gridview.onDidChange(() => {
      this._bufferOnDidLayoutChange.fire();
    }), Event$1.any(this.onDidAddGroup, this.onDidRemoveGroup, this.onDidActiveGroupChange)(() => {
      this._bufferOnDidLayoutChange.fire();
    }), this._bufferOnDidLayoutChange.onEvent(() => {
      this._onDidLayoutChange.fire();
    }), this._bufferOnDidLayoutChange);
  }
  setVisible(panel, visible) {
    this.gridview.setViewVisible(getGridLocation(panel.element), visible);
    this._onDidLayoutChange.fire();
  }
  isVisible(panel) {
    return this.gridview.isViewVisible(getGridLocation(panel.element));
  }
  doAddGroup(group, location2 = [0], size) {
    this.gridview.addView(group, size !== null && size !== void 0 ? size : Sizing.Distribute, location2);
    this._onDidAddGroup.fire(group);
    this.doSetGroupActive(group);
  }
  doRemoveGroup(group, options) {
    if (!this._groups.has(group.id)) {
      throw new Error("invalid operation");
    }
    const item = this._groups.get(group.id);
    const view = this.gridview.remove(group, Sizing.Distribute);
    if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {
      item.disposable.dispose();
      item.value.dispose();
      this._groups.delete(group.id);
    }
    this._onDidRemoveGroup.fire(group);
    if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
      const groups = Array.from(this._groups.values());
      this.doSetGroupActive(groups.length > 0 ? groups[0].value : void 0);
    }
    return view;
  }
  getPanel(id2) {
    var _a2;
    return (_a2 = this._groups.get(id2)) === null || _a2 === void 0 ? void 0 : _a2.value;
  }
  doSetGroupActive(group, skipFocus) {
    var _a2, _b2, _c2;
    if (this._activeGroup === group) {
      return;
    }
    if (this._activeGroup) {
      this._activeGroup.setActive(false);
      if (!skipFocus) {
        (_b2 = (_a2 = this._activeGroup).focus) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      }
    }
    if (group) {
      group.setActive(true);
      if (!skipFocus) {
        (_c2 = group.focus) === null || _c2 === void 0 ? void 0 : _c2.call(group);
      }
    }
    this._activeGroup = group;
    this._onDidActiveGroupChange.fire(group);
  }
  removeGroup(group) {
    this.doRemoveGroup(group);
  }
  moveToNext(options) {
    var _a2;
    if (!options) {
      options = {};
    }
    if (!options.group) {
      if (!this.activeGroup) {
        return;
      }
      options.group = this.activeGroup;
    }
    const location2 = getGridLocation(options.group.element);
    const next = (_a2 = this.gridview.next(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
    this.doSetGroupActive(next);
  }
  moveToPrevious(options) {
    var _a2;
    if (!options) {
      options = {};
    }
    if (!options.group) {
      if (!this.activeGroup) {
        return;
      }
      options.group = this.activeGroup;
    }
    const location2 = getGridLocation(options.group.element);
    const next = (_a2 = this.gridview.previous(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
    this.doSetGroupActive(next);
  }
  layout(width, height, forceResize) {
    const different = forceResize || width !== this.width || height !== this.height;
    if (!different) {
      return;
    }
    this.gridview.element.style.height = `${height}px`;
    this.gridview.element.style.width = `${width}px`;
    this.gridview.layout(width, height);
  }
  dispose() {
    this._onDidActiveGroupChange.dispose();
    this._onDidAddGroup.dispose();
    this._onDidRemoveGroup.dispose();
    this._onDidLayoutChange.dispose();
    for (const group of this.groups) {
      group.dispose();
    }
    this.gridview.dispose();
    super.dispose();
  }
}
class PanelApiImpl extends CompositeDisposable {
  //
  get isFocused() {
    return this._isFocused;
  }
  get isActive() {
    return this._isActive;
  }
  get isVisible() {
    return this._isVisible;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  constructor(id2) {
    super();
    this.id = id2;
    this._isFocused = false;
    this._isActive = false;
    this._isVisible = true;
    this._width = 0;
    this._height = 0;
    this.panelUpdatesDisposable = new MutableDisposable();
    this._onDidDimensionChange = new Emitter({
      replay: true
    });
    this.onDidDimensionsChange = this._onDidDimensionChange.event;
    this._onDidChangeFocus = new Emitter({
      replay: true
    });
    this.onDidFocusChange = this._onDidChangeFocus.event;
    this._onFocusEvent = new Emitter();
    this.onFocusEvent = this._onFocusEvent.event;
    this._onDidVisibilityChange = new Emitter({
      replay: true
    });
    this.onDidVisibilityChange = this._onDidVisibilityChange.event;
    this._onVisibilityChange = new Emitter();
    this.onVisibilityChange = this._onVisibilityChange.event;
    this._onDidActiveChange = new Emitter({
      replay: true
    });
    this.onDidActiveChange = this._onDidActiveChange.event;
    this._onActiveChange = new Emitter();
    this.onActiveChange = this._onActiveChange.event;
    this._onUpdateParameters = new Emitter();
    this.onUpdateParameters = this._onUpdateParameters.event;
    this.addDisposables(this.onDidFocusChange((event) => {
      this._isFocused = event.isFocused;
    }), this.onDidActiveChange((event) => {
      this._isActive = event.isActive;
    }), this.onDidVisibilityChange((event) => {
      this._isVisible = event.isVisible;
    }), this.onDidDimensionsChange((event) => {
      this._width = event.width;
      this._height = event.height;
    }), this.panelUpdatesDisposable, this._onDidDimensionChange, this._onDidChangeFocus, this._onDidVisibilityChange, this._onDidActiveChange, this._onFocusEvent, this._onActiveChange, this._onVisibilityChange, this._onUpdateParameters);
  }
  initialize(panel) {
    this.panelUpdatesDisposable.value = this._onUpdateParameters.event((parameters) => {
      panel.update({
        params: parameters
      });
    });
  }
  setVisible(isVisible) {
    this._onVisibilityChange.fire({ isVisible });
  }
  setActive() {
    this._onActiveChange.fire();
  }
  updateParameters(parameters) {
    this._onUpdateParameters.fire(parameters);
  }
  dispose() {
    super.dispose();
  }
}
class SplitviewPanelApiImpl extends PanelApiImpl {
  //
  constructor(id2) {
    super(id2);
    this._onDidConstraintsChangeInternal = new Emitter();
    this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
    this._onDidConstraintsChange = new Emitter({
      replay: true
    });
    this.onDidConstraintsChange = this._onDidConstraintsChange.event;
    this._onDidSizeChange = new Emitter();
    this.onDidSizeChange = this._onDidSizeChange.event;
    this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
  }
  setConstraints(value) {
    this._onDidConstraintsChangeInternal.fire(value);
  }
  setSize(event) {
    this._onDidSizeChange.fire(event);
  }
}
class PaneviewPanelApiImpl extends SplitviewPanelApiImpl {
  set pane(pane) {
    this._pane = pane;
  }
  constructor(id2) {
    super(id2);
    this._onDidExpansionChange = new Emitter({
      replay: true
    });
    this.onDidExpansionChange = this._onDidExpansionChange.event;
    this._onMouseEnter = new Emitter({});
    this.onMouseEnter = this._onMouseEnter.event;
    this._onMouseLeave = new Emitter({});
    this.onMouseLeave = this._onMouseLeave.event;
    this.addDisposables(this._onDidExpansionChange, this._onMouseEnter, this._onMouseLeave);
  }
  setExpanded(isExpanded) {
    var _a2;
    (_a2 = this._pane) === null || _a2 === void 0 ? void 0 : _a2.setExpanded(isExpanded);
  }
  get isExpanded() {
    var _a2;
    return !!((_a2 = this._pane) === null || _a2 === void 0 ? void 0 : _a2.isExpanded());
  }
}
class BasePanelView extends CompositeDisposable {
  get element() {
    return this._element;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get params() {
    var _a2;
    return (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params;
  }
  constructor(id2, component, api2) {
    super();
    this.id = id2;
    this.component = component;
    this.api = api2;
    this._height = 0;
    this._width = 0;
    this._element = document.createElement("div");
    this._element.tabIndex = -1;
    this._element.style.outline = "none";
    this._element.style.height = "100%";
    this._element.style.width = "100%";
    this._element.style.overflow = "hidden";
    const focusTracker = trackFocus(this._element);
    this.addDisposables(this.api, focusTracker.onDidFocus(() => {
      this.api._onDidChangeFocus.fire({ isFocused: true });
    }), focusTracker.onDidBlur(() => {
      this.api._onDidChangeFocus.fire({ isFocused: false });
    }), focusTracker);
  }
  focus() {
    this.api._onFocusEvent.fire();
  }
  layout(width, height) {
    this._width = width;
    this._height = height;
    this.api._onDidDimensionChange.fire({ width, height });
    if (this.part) {
      if (this._params) {
        this.part.update(this._params.params);
      }
    }
  }
  init(parameters) {
    this._params = parameters;
    this.part = this.getComponent();
  }
  update(event) {
    var _a2, _b2;
    this._params = Object.assign(Object.assign({}, this._params), { params: Object.assign(Object.assign({}, (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params), event.params) });
    for (const key of Object.keys(event.params)) {
      if (event.params[key] === void 0) {
        delete this._params.params[key];
      }
    }
    (_b2 = this.part) === null || _b2 === void 0 ? void 0 : _b2.update({ params: this._params.params });
  }
  toJSON() {
    var _a2, _b2;
    const params = (_b2 = (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params) !== null && _b2 !== void 0 ? _b2 : {};
    return {
      id: this.id,
      component: this.component,
      params: Object.keys(params).length > 0 ? params : void 0
    };
  }
  dispose() {
    var _a2;
    this.api.dispose();
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
    super.dispose();
  }
}
class PaneviewPanel extends BasePanelView {
  set orientation(value) {
    this._orientation = value;
  }
  get orientation() {
    return this._orientation;
  }
  get minimumSize() {
    const headerSize = this.headerSize;
    const expanded = this.isExpanded();
    const minimumBodySize = expanded ? this._minimumBodySize : 0;
    return headerSize + minimumBodySize;
  }
  get maximumSize() {
    const headerSize = this.headerSize;
    const expanded = this.isExpanded();
    const maximumBodySize = expanded ? this._maximumBodySize : 0;
    return headerSize + maximumBodySize;
  }
  get size() {
    return this._size;
  }
  get orthogonalSize() {
    return this._orthogonalSize;
  }
  set orthogonalSize(size) {
    this._orthogonalSize = size;
  }
  get minimumBodySize() {
    return this._minimumBodySize;
  }
  set minimumBodySize(value) {
    this._minimumBodySize = typeof value === "number" ? value : 0;
  }
  get maximumBodySize() {
    return this._maximumBodySize;
  }
  set maximumBodySize(value) {
    this._maximumBodySize = typeof value === "number" ? value : Number.POSITIVE_INFINITY;
  }
  get headerVisible() {
    return this._headerVisible;
  }
  set headerVisible(value) {
    this._headerVisible = value;
    this.header.style.display = value ? "" : "none";
  }
  constructor(id2, component, headerComponent, orientation, isExpanded, isHeaderVisible) {
    super(id2, component, new PaneviewPanelApiImpl(id2));
    this.headerComponent = headerComponent;
    this._onDidChangeExpansionState = new Emitter({ replay: true });
    this.onDidChangeExpansionState = this._onDidChangeExpansionState.event;
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this.headerSize = 22;
    this._orthogonalSize = 0;
    this._size = 0;
    this._minimumBodySize = 100;
    this._maximumBodySize = Number.POSITIVE_INFINITY;
    this._isExpanded = false;
    this.expandedSize = 0;
    this.api.pane = this;
    this.api.initialize(this);
    this._isExpanded = isExpanded;
    this._headerVisible = isHeaderVisible;
    this._onDidChangeExpansionState.fire(this.isExpanded());
    this._orientation = orientation;
    this.element.classList.add("pane");
    this.addDisposables(this.api.onDidSizeChange((event) => {
      this._onDidChange.fire({ size: event.size });
    }), addDisposableListener(this.element, "mouseenter", (ev) => {
      this.api._onMouseEnter.fire(ev);
    }), addDisposableListener(this.element, "mouseleave", (ev) => {
      this.api._onMouseLeave.fire(ev);
    }));
    this.addDisposables(this._onDidChangeExpansionState, this.onDidChangeExpansionState((isPanelExpanded) => {
      this.api._onDidExpansionChange.fire({
        isExpanded: isPanelExpanded
      });
    }), this.api.onDidFocusChange((e) => {
      if (!this.header) {
        return;
      }
      if (e.isFocused) {
        addClasses(this.header, "focused");
      } else {
        removeClasses(this.header, "focused");
      }
    }));
    this.renderOnce();
  }
  setVisible(isVisible) {
    this.api._onDidVisibilityChange.fire({ isVisible });
  }
  setActive(isActive) {
    this.api._onDidActiveChange.fire({ isActive });
  }
  isExpanded() {
    return this._isExpanded;
  }
  setExpanded(expanded) {
    if (this._isExpanded === expanded) {
      return;
    }
    this._isExpanded = expanded;
    if (expanded) {
      if (this.animationTimer) {
        clearTimeout(this.animationTimer);
      }
      if (this.body) {
        this.element.appendChild(this.body);
      }
    } else {
      this.animationTimer = setTimeout(() => {
        var _a2;
        (_a2 = this.body) === null || _a2 === void 0 ? void 0 : _a2.remove();
      }, 200);
    }
    this._onDidChange.fire(expanded ? { size: this.width } : {});
    this._onDidChangeExpansionState.fire(expanded);
  }
  layout(size, orthogonalSize) {
    this._size = size;
    this._orthogonalSize = orthogonalSize;
    const [width, height] = this.orientation === Orientation.HORIZONTAL ? [size, orthogonalSize] : [orthogonalSize, size];
    if (this.isExpanded()) {
      this.expandedSize = width;
    }
    super.layout(width, height);
  }
  init(parameters) {
    var _a2, _b2;
    super.init(parameters);
    if (typeof parameters.minimumBodySize === "number") {
      this.minimumBodySize = parameters.minimumBodySize;
    }
    if (typeof parameters.maximumBodySize === "number") {
      this.maximumBodySize = parameters.maximumBodySize;
    }
    this.bodyPart = this.getBodyComponent();
    this.headerPart = this.getHeaderComponent();
    this.bodyPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
    this.headerPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
    (_a2 = this.body) === null || _a2 === void 0 ? void 0 : _a2.append(this.bodyPart.element);
    (_b2 = this.header) === null || _b2 === void 0 ? void 0 : _b2.append(this.headerPart.element);
    if (typeof parameters.isExpanded === "boolean") {
      this.setExpanded(parameters.isExpanded);
    }
  }
  toJSON() {
    const params = this._params;
    return Object.assign(Object.assign({}, super.toJSON()), { headerComponent: this.headerComponent, title: params.title });
  }
  renderOnce() {
    this.header = document.createElement("div");
    this.header.tabIndex = 0;
    this.header.className = "pane-header";
    this.header.style.height = `${this.headerSize}px`;
    this.header.style.lineHeight = `${this.headerSize}px`;
    this.header.style.minHeight = `${this.headerSize}px`;
    this.header.style.maxHeight = `${this.headerSize}px`;
    this.element.appendChild(this.header);
    this.body = document.createElement("div");
    this.body.className = "pane-body";
    this.element.appendChild(this.body);
  }
  // TODO slightly hacky by-pass of the component to create a body and header component
  getComponent() {
    return {
      update: (params) => {
        var _a2, _b2;
        (_a2 = this.bodyPart) === null || _a2 === void 0 ? void 0 : _a2.update({ params });
        (_b2 = this.headerPart) === null || _b2 === void 0 ? void 0 : _b2.update({ params });
      },
      dispose: () => {
        var _a2, _b2;
        (_a2 = this.bodyPart) === null || _a2 === void 0 ? void 0 : _a2.dispose();
        (_b2 = this.headerPart) === null || _b2 === void 0 ? void 0 : _b2.dispose();
      }
    };
  }
}
class DraggablePaneviewPanel extends PaneviewPanel {
  constructor(accessor, id2, component, headerComponent, orientation, isExpanded, disableDnd) {
    super(id2, component, headerComponent, orientation, isExpanded, true);
    this.accessor = accessor;
    this._onDidDrop = new Emitter();
    this.onDidDrop = this._onDidDrop.event;
    if (!disableDnd) {
      this.initDragFeatures();
    }
  }
  initDragFeatures() {
    if (!this.header) {
      return;
    }
    const id2 = this.id;
    const accessorId = this.accessor.id;
    this.header.draggable = true;
    this.handler = new class PaneDragHandler extends DragHandler {
      getData() {
        LocalSelectionTransfer.getInstance().setData([new PaneTransfer(accessorId, id2)], PaneTransfer.prototype);
        return {
          dispose: () => {
            LocalSelectionTransfer.getInstance().clearData(PaneTransfer.prototype);
          }
        };
      }
    }(this.header);
    this.target = new Droptarget(this.element, {
      acceptedTargetZones: ["top", "bottom"],
      overlayModel: {
        activationSize: { type: "percentage", value: 50 }
      },
      canDisplayOverlay: (event) => {
        const data = getPaneData();
        if (data) {
          if (data.paneId !== this.id && data.viewId === this.accessor.id) {
            return true;
          }
        }
        if (this.accessor.options.showDndOverlay) {
          return this.accessor.options.showDndOverlay({
            nativeEvent: event,
            getData: getPaneData,
            panel: this
          });
        }
        return false;
      }
    });
    this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop((event) => {
      this.onDrop(event);
    }));
  }
  onDrop(event) {
    const data = getPaneData();
    if (!data || data.viewId !== this.accessor.id) {
      this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, api: new PaneviewApi(this.accessor), getData: getPaneData }));
      return;
    }
    const containerApi = this._params.containerApi;
    const panelId = data.paneId;
    const existingPanel = containerApi.getPanel(panelId);
    if (!existingPanel) {
      this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, getData: getPaneData, api: new PaneviewApi(this.accessor) }));
      return;
    }
    const allPanels = containerApi.panels;
    const fromIndex = allPanels.indexOf(existingPanel);
    let toIndex = containerApi.panels.indexOf(this);
    if (event.position === "left" || event.position === "top") {
      toIndex = Math.max(0, toIndex - 1);
    }
    if (event.position === "right" || event.position === "bottom") {
      if (fromIndex > toIndex) {
        toIndex++;
      }
      toIndex = Math.min(allPanels.length - 1, toIndex);
    }
    containerApi.movePanel(fromIndex, toIndex);
  }
}
class GridviewPanelApiImpl extends PanelApiImpl {
  constructor(id2, panel) {
    super(id2);
    this._onDidConstraintsChangeInternal = new Emitter();
    this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
    this._onDidConstraintsChange = new Emitter({
      replay: true
    });
    this.onDidConstraintsChange = this._onDidConstraintsChange.event;
    this._onDidSizeChange = new Emitter();
    this.onDidSizeChange = this._onDidSizeChange.event;
    this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
    if (panel) {
      this.initialize(panel);
    }
  }
  setConstraints(value) {
    this._onDidConstraintsChangeInternal.fire(value);
  }
  setSize(event) {
    this._onDidSizeChange.fire(event);
  }
}
class GridviewPanel extends BasePanelView {
  get priority() {
    return this._priority;
  }
  get snap() {
    return this._snap;
  }
  get minimumWidth() {
    const width = typeof this._minimumWidth === "function" ? this._minimumWidth() : this._minimumWidth;
    if (width !== this._evaluatedMinimumWidth) {
      this._evaluatedMinimumWidth = width;
      this.updateConstraints();
    }
    return width;
  }
  get minimumHeight() {
    const height = typeof this._minimumHeight === "function" ? this._minimumHeight() : this._minimumHeight;
    if (height !== this._evaluatedMinimumHeight) {
      this._evaluatedMinimumHeight = height;
      this.updateConstraints();
    }
    return height;
  }
  get maximumHeight() {
    const height = typeof this._maximumHeight === "function" ? this._maximumHeight() : this._maximumHeight;
    if (height !== this._evaluatedMaximumHeight) {
      this._evaluatedMaximumHeight = height;
      this.updateConstraints();
    }
    return height;
  }
  get maximumWidth() {
    const width = typeof this._maximumWidth === "function" ? this._maximumWidth() : this._maximumWidth;
    if (width !== this._evaluatedMaximumWidth) {
      this._evaluatedMaximumWidth = width;
      this.updateConstraints();
    }
    return width;
  }
  get isActive() {
    return this.api.isActive;
  }
  constructor(id2, component, options) {
    super(id2, component, new GridviewPanelApiImpl(id2));
    this._evaluatedMinimumWidth = 0;
    this._evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;
    this._evaluatedMinimumHeight = 0;
    this._evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;
    this._minimumWidth = 0;
    this._minimumHeight = 0;
    this._maximumWidth = Number.MAX_SAFE_INTEGER;
    this._maximumHeight = Number.MAX_SAFE_INTEGER;
    this._snap = false;
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    if (typeof (options === null || options === void 0 ? void 0 : options.minimumWidth) === "number") {
      this._minimumWidth = options.minimumWidth;
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.maximumWidth) === "number") {
      this._maximumWidth = options.maximumWidth;
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.minimumHeight) === "number") {
      this._minimumHeight = options.minimumHeight;
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.maximumHeight) === "number") {
      this._maximumHeight = options.maximumHeight;
    }
    this.api.initialize(this);
    this.addDisposables(this.api.onVisibilityChange((event) => {
      const { isVisible } = event;
      const { accessor } = this._params;
      accessor.setVisible(this, isVisible);
    }), this.api.onActiveChange(() => {
      const { accessor } = this._params;
      accessor.setActive(this);
    }), this.api.onDidConstraintsChangeInternal((event) => {
      if (typeof event.minimumWidth === "number" || typeof event.minimumWidth === "function") {
        this._minimumWidth = event.minimumWidth;
      }
      if (typeof event.minimumHeight === "number" || typeof event.minimumHeight === "function") {
        this._minimumHeight = event.minimumHeight;
      }
      if (typeof event.maximumWidth === "number" || typeof event.maximumWidth === "function") {
        this._maximumWidth = event.maximumWidth;
      }
      if (typeof event.maximumHeight === "number" || typeof event.maximumHeight === "function") {
        this._maximumHeight = event.maximumHeight;
      }
    }), this.api.onDidSizeChange((event) => {
      this._onDidChange.fire({
        height: event.height,
        width: event.width
      });
    }), this._onDidChange);
  }
  setVisible(isVisible) {
    this.api._onDidVisibilityChange.fire({ isVisible });
  }
  setActive(isActive) {
    this.api._onDidActiveChange.fire({ isActive });
  }
  init(parameters) {
    if (parameters.maximumHeight) {
      this._maximumHeight = parameters.maximumHeight;
    }
    if (parameters.minimumHeight) {
      this._minimumHeight = parameters.minimumHeight;
    }
    if (parameters.maximumWidth) {
      this._maximumWidth = parameters.maximumWidth;
    }
    if (parameters.minimumWidth) {
      this._minimumWidth = parameters.minimumWidth;
    }
    this._priority = parameters.priority;
    this._snap = !!parameters.snap;
    super.init(parameters);
    if (typeof parameters.isVisible === "boolean") {
      this.setVisible(parameters.isVisible);
    }
  }
  updateConstraints() {
    this.api._onDidConstraintsChange.fire({
      minimumWidth: this._evaluatedMinimumWidth,
      maximumWidth: this._evaluatedMaximumWidth,
      minimumHeight: this._evaluatedMinimumHeight,
      maximumHeight: this._evaluatedMaximumHeight
    });
  }
  toJSON() {
    const state = super.toJSON();
    const maximum = (value) => value === Number.MAX_SAFE_INTEGER ? void 0 : value;
    const minimum = (value) => value <= 0 ? void 0 : value;
    return Object.assign(Object.assign({}, state), { minimumHeight: minimum(this.minimumHeight), maximumHeight: maximum(this.maximumHeight), minimumWidth: minimum(this.minimumWidth), maximumWidth: maximum(this.maximumWidth), snap: this.snap, priority: this.priority });
  }
}
class DockviewGroupPanel extends GridviewPanel {
  get panels() {
    return this._model.panels;
  }
  get activePanel() {
    return this._model.activePanel;
  }
  get size() {
    return this._model.size;
  }
  get model() {
    return this._model;
  }
  get locked() {
    return this._model.locked;
  }
  set locked(value) {
    this._model.locked = value;
  }
  get header() {
    return this._model.header;
  }
  constructor(accessor, id2, options) {
    super(id2, "groupview_default", {
      minimumHeight: 100,
      minimumWidth: 100
    });
    this._model = new DockviewGroupPanelModel(this.element, accessor, id2, options, this);
  }
  initialize() {
    this._model.initialize();
  }
  setActive(isActive) {
    super.setActive(isActive);
    this.model.setActive(isActive);
  }
  layout(width, height) {
    super.layout(width, height);
    this.model.layout(width, height);
  }
  getComponent() {
    return this._model;
  }
  toJSON() {
    return this.model.toJSON();
  }
}
function isPanelOptionsWithPanel(data) {
  if (data.referencePanel) {
    return true;
  }
  return false;
}
function isPanelOptionsWithGroup(data) {
  if (data.referenceGroup) {
    return true;
  }
  return false;
}
function isGroupOptionsWithPanel(data) {
  if (data.referencePanel) {
    return true;
  }
  return false;
}
function isGroupOptionsWithGroup(data) {
  if (data.referenceGroup) {
    return true;
  }
  return false;
}
class DockviewPanelApiImpl extends GridviewPanelApiImpl {
  get title() {
    return this.panel.title;
  }
  get isGroupActive() {
    var _a2;
    return !!((_a2 = this.group) === null || _a2 === void 0 ? void 0 : _a2.isActive);
  }
  set group(value) {
    const isOldGroupActive = this.isGroupActive;
    this._group = value;
    this._onDidGroupChange.fire();
    if (this._group) {
      this.disposable.value = this._group.api.onDidActiveChange(() => {
        this._onDidActiveGroupChange.fire();
      });
      if (this.isGroupActive !== isOldGroupActive) {
        this._onDidActiveGroupChange.fire();
      }
    }
  }
  get group() {
    return this._group;
  }
  constructor(panel, group) {
    super(panel.id);
    this.panel = panel;
    this._onDidTitleChange = new Emitter();
    this.onDidTitleChange = this._onDidTitleChange.event;
    this._onDidActiveGroupChange = new Emitter();
    this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
    this._onDidGroupChange = new Emitter();
    this.onDidGroupChange = this._onDidGroupChange.event;
    this.disposable = new MutableDisposable();
    this.initialize(panel);
    this._group = group;
    this.addDisposables(this.disposable, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange);
  }
  setTitle(title) {
    this.panel.setTitle(title);
  }
  close() {
    this.group.model.closePanel(this.panel);
  }
}
class DockviewPanel extends CompositeDisposable {
  get params() {
    return this._params;
  }
  get title() {
    return this._title;
  }
  get group() {
    return this._group;
  }
  constructor(id2, accessor, containerApi, group, view) {
    super();
    this.id = id2;
    this.containerApi = containerApi;
    this.view = view;
    this._group = group;
    this.api = new DockviewPanelApiImpl(this, this._group);
    this.addDisposables(this.api.onActiveChange(() => {
      accessor.setActivePanel(this);
    }), this.api.onDidSizeChange((event) => {
      this.group.api.setSize(event);
    }));
  }
  init(params) {
    this._params = params.params;
    this.view.init(Object.assign(Object.assign({}, params), { api: this.api, containerApi: this.containerApi }));
    this.setTitle(params.title);
  }
  focus() {
    this.api._onFocusEvent.fire();
  }
  toJSON() {
    return {
      id: this.id,
      contentComponent: this.view.contentComponent,
      tabComponent: this.view.tabComponent,
      params: Object.keys(this._params || {}).length > 0 ? this._params : void 0,
      title: this.title
    };
  }
  setTitle(title) {
    const didTitleChange = title !== this.title;
    if (didTitleChange) {
      this._title = title;
      this.view.update({
        params: {
          params: this._params,
          title: this.title
        }
      });
      this.api._onDidTitleChange.fire({ title });
    }
  }
  update(event) {
    this._params = Object.assign(Object.assign({}, this._params || {}), event.params);
    for (const key of Object.keys(event.params)) {
      if (event.params[key] === void 0) {
        delete this._params[key];
      }
    }
    this.view.update({
      params: {
        params: this._params,
        title: this.title
      }
    });
  }
  updateParentGroup(group, isGroupActive) {
    this._group = group;
    this.api.group = group;
    const isPanelVisible = this._group.model.isPanelActive(this);
    this.api._onDidActiveChange.fire({
      isActive: isGroupActive && isPanelVisible
    });
    this.api._onDidVisibilityChange.fire({
      isVisible: isPanelVisible
    });
    this.view.updateParentGroup(this._group, this._group.model.isPanelActive(this));
  }
  layout(width, height) {
    this.api._onDidDimensionChange.fire({
      width,
      height
    });
    this.view.layout(width, height);
  }
  dispose() {
    this.api.dispose();
    this.view.dispose();
  }
}
const createSvgElementFromPath = (params) => {
  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svg.setAttributeNS(null, "height", params.height);
  svg.setAttributeNS(null, "width", params.width);
  svg.setAttributeNS(null, "viewBox", params.viewbox);
  svg.setAttributeNS(null, "aria-hidden", "false");
  svg.setAttributeNS(null, "focusable", "false");
  svg.classList.add("dockview-svg");
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttributeNS(null, "d", params.path);
  svg.appendChild(path);
  return svg;
};
const createCloseButton = () => createSvgElementFromPath({
  width: "11",
  height: "11",
  viewbox: "0 0 28 28",
  path: "M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z"
});
const createExpandMoreButton = () => createSvgElementFromPath({
  width: "11",
  height: "11",
  viewbox: "0 0 24 15",
  path: "M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z"
});
const createChevronRightButton = () => createSvgElementFromPath({
  width: "11",
  height: "11",
  viewbox: "0 0 15 25",
  path: "M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z"
});
class DefaultTab extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor() {
    super();
    this.params = {};
    this._element = document.createElement("div");
    this._element.className = "default-tab";
    this._content = document.createElement("div");
    this._content.className = "tab-content";
    this._actionContainer = document.createElement("div");
    this._actionContainer.className = "action-container";
    this._list = document.createElement("ul");
    this._list.className = "tab-list";
    this.action = document.createElement("div");
    this.action.className = "tab-action";
    this.action.appendChild(createCloseButton());
    this._element.appendChild(this._content);
    this._element.appendChild(this._actionContainer);
    this._actionContainer.appendChild(this._list);
    this._list.appendChild(this.action);
    this.addDisposables(addDisposableListener(this._actionContainer, "mousedown", (ev) => {
      ev.preventDefault();
    }));
    this.render();
  }
  update(event) {
    this.params = Object.assign(Object.assign({}, this.params), event.params);
    this.render();
  }
  focus() {
  }
  init(params) {
    this.params = params;
    this._content.textContent = params.title;
    addDisposableListener(this.action, "click", (ev) => {
      ev.preventDefault();
      this.params.api.close();
    });
  }
  onGroupChange(_group) {
    this.render();
  }
  onPanelVisibleChange(_isPanelVisible) {
    this.render();
  }
  layout(_width, _height) {
  }
  render() {
    if (this._content.textContent !== this.params.title) {
      this._content.textContent = this.params.title;
    }
  }
}
class DockviewPanelModel {
  get content() {
    return this._content;
  }
  get tab() {
    return this._tab;
  }
  constructor(accessor, id2, contentComponent, tabComponent) {
    this.accessor = accessor;
    this.id = id2;
    this.contentComponent = contentComponent;
    this.tabComponent = tabComponent;
    this._group = null;
    this._isPanelVisible = null;
    this._content = this.createContentComponent(this.id, contentComponent);
    this._tab = this.createTabComponent(this.id, tabComponent);
  }
  init(params) {
    this.content.init(Object.assign(Object.assign({}, params), { tab: this.tab }));
    this.tab.init(params);
  }
  updateParentGroup(group, isPanelVisible) {
    if (group !== this._group) {
      this._group = group;
      if (this._content.onGroupChange) {
        this._content.onGroupChange(group);
      }
      if (this._tab.onGroupChange) {
        this._tab.onGroupChange(group);
      }
    }
    if (isPanelVisible !== this._isPanelVisible) {
      this._isPanelVisible = isPanelVisible;
      if (this._content.onPanelVisibleChange) {
        this._content.onPanelVisibleChange(isPanelVisible);
      }
      if (this._tab.onPanelVisibleChange) {
        this._tab.onPanelVisibleChange(isPanelVisible);
      }
    }
  }
  layout(width, height) {
    var _a2, _b2;
    (_b2 = (_a2 = this.content).layout) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, width, height);
  }
  update(event) {
    var _a2, _b2, _c2, _d;
    (_b2 = (_a2 = this.content).update) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, event);
    (_d = (_c2 = this.tab).update) === null || _d === void 0 ? void 0 : _d.call(_c2, event);
  }
  dispose() {
    var _a2, _b2, _c2, _d;
    (_b2 = (_a2 = this.content).dispose) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
    (_d = (_c2 = this.tab).dispose) === null || _d === void 0 ? void 0 : _d.call(_c2);
  }
  createContentComponent(id2, componentName) {
    var _a2;
    return createComponent(id2, componentName, this.accessor.options.components || {}, this.accessor.options.frameworkComponents, (_a2 = this.accessor.options.frameworkComponentFactory) === null || _a2 === void 0 ? void 0 : _a2.content);
  }
  createTabComponent(id2, componentName) {
    var _a2, _b2;
    if (componentName) {
      return createComponent(id2, componentName, this.accessor.options.tabComponents, this.accessor.options.frameworkTabComponents, (_a2 = this.accessor.options.frameworkComponentFactory) === null || _a2 === void 0 ? void 0 : _a2.tab, () => new DefaultTab());
    } else if (this.accessor.options.defaultTabComponent) {
      return createComponent(id2, this.accessor.options.defaultTabComponent, this.accessor.options.tabComponents, this.accessor.options.frameworkTabComponents, (_b2 = this.accessor.options.frameworkComponentFactory) === null || _b2 === void 0 ? void 0 : _b2.tab, () => new DefaultTab());
    } else {
      return new DefaultTab();
    }
  }
}
class DefaultDockviewDeserialzier {
  constructor(layout) {
    this.layout = layout;
  }
  fromJSON(panelData, group) {
    var _a2;
    const panelId = panelData.id;
    const params = panelData.params;
    const title = panelData.title;
    const viewData = panelData.view;
    const contentComponent = viewData ? viewData.content.id : panelData.contentComponent || "unknown";
    const tabComponent = viewData ? (_a2 = viewData.tab) === null || _a2 === void 0 ? void 0 : _a2.id : panelData.tabComponent;
    const view = new DockviewPanelModel(this.layout, panelId, contentComponent, tabComponent);
    const panel = new DockviewPanel(panelId, this.layout, new DockviewApi(this.layout), group, view);
    panel.init({
      title: title || panelId,
      params: params || {}
    });
    return panel;
  }
}
class Watermark extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor() {
    super();
    this._element = document.createElement("div");
    this._element.className = "watermark";
    const title = document.createElement("div");
    title.className = "watermark-title";
    const emptySpace = document.createElement("span");
    emptySpace.style.flexGrow = "1";
    const content2 = document.createElement("div");
    content2.className = "watermark-content";
    this._element.appendChild(title);
    this._element.appendChild(content2);
    const actionsContainer = document.createElement("div");
    actionsContainer.className = "actions-container";
    const closeAnchor = document.createElement("div");
    closeAnchor.className = "close-action";
    closeAnchor.appendChild(createCloseButton());
    actionsContainer.appendChild(closeAnchor);
    title.appendChild(emptySpace);
    title.appendChild(actionsContainer);
    this.addDisposables(addDisposableListener(closeAnchor, "click", (ev) => {
      var _a2;
      ev.preventDefault();
      if (this._group) {
        (_a2 = this._api) === null || _a2 === void 0 ? void 0 : _a2.removeGroup(this._group);
      }
    }));
  }
  update(_event) {
  }
  focus() {
  }
  layout(_width, _height) {
  }
  init(_params) {
    this._api = _params.containerApi;
    this.render();
  }
  updateParentGroup(group, _visible) {
    this._group = group;
    this.render();
  }
  dispose() {
    super.dispose();
  }
  render() {
    const isOneGroup = !!(this._api && this._api.size <= 1);
    toggleClass(this.element, "has-actions", isOneGroup);
  }
}
class DockviewComponent extends BaseGrid {
  get orientation() {
    return this.gridview.orientation;
  }
  get totalPanels() {
    return this.panels.length;
  }
  get panels() {
    return this.groups.flatMap((group) => group.panels);
  }
  get options() {
    return this._options;
  }
  get activePanel() {
    const activeGroup = this.activeGroup;
    if (!activeGroup) {
      return void 0;
    }
    return activeGroup.activePanel;
  }
  constructor(options) {
    super({
      proportionalLayout: true,
      orientation: options.orientation || Orientation.HORIZONTAL,
      styles: options.styles,
      parentElement: options.parentElement
    });
    this.nextGroupId = sequentialNumberGenerator();
    this._deserializer = new DefaultDockviewDeserialzier(this);
    this.watermark = null;
    this._onDidDrop = new Emitter();
    this.onDidDrop = this._onDidDrop.event;
    this._onDidRemovePanel = new Emitter();
    this.onDidRemovePanel = this._onDidRemovePanel.event;
    this._onDidAddPanel = new Emitter();
    this.onDidAddPanel = this._onDidAddPanel.event;
    this._onDidLayoutFromJSON = new Emitter();
    this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;
    this._onDidActivePanelChange = new Emitter();
    this.onDidActivePanelChange = this._onDidActivePanelChange.event;
    this.element.classList.add("dv-dockview");
    this.addDisposables(this._onDidDrop, Event$1.any(this.onDidAddGroup, this.onDidRemoveGroup)(() => {
      this.updateWatermark();
    }), Event$1.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidActivePanelChange)(() => {
      this._bufferOnDidLayoutChange.fire();
    }));
    this._options = options;
    if (!this.options.components) {
      this.options.components = {};
    }
    if (!this.options.frameworkComponents) {
      this.options.frameworkComponents = {};
    }
    if (!this.options.frameworkTabComponents) {
      this.options.frameworkTabComponents = {};
    }
    if (!this.options.tabComponents) {
      this.options.tabComponents = {};
    }
    if (!this.options.watermarkComponent && !this.options.watermarkFrameworkComponent) {
      this.options.watermarkComponent = Watermark;
    }
    const dropTarget = new Droptarget(this.element, {
      canDisplayOverlay: (event, position) => {
        const data = getPanelData();
        if (data) {
          if (data.viewId !== this.id) {
            return false;
          }
          return true;
        }
        if (this.options.showDndOverlay) {
          return this.options.showDndOverlay({
            nativeEvent: event,
            position,
            target: DockviewDropTargets.Edge,
            getData: getPanelData
          });
        }
        return false;
      },
      acceptedTargetZones: ["top", "bottom", "left", "right"],
      overlayModel: {
        activationSize: { type: "pixels", value: 10 },
        size: { type: "pixels", value: 20 }
      }
    });
    this.addDisposables(dropTarget.onDrop((event) => {
      const data = getPanelData();
      if (data) {
        this.moveGroupOrPanel(this.orthogonalize(event.position), data.groupId, data.panelId || void 0, "center");
      } else {
        this._onDidDrop.fire(Object.assign(Object.assign({}, event), { api: this._api, group: null, getData: getPanelData }));
      }
    }), dropTarget);
    this._api = new DockviewApi(this);
    this.updateWatermark();
  }
  orthogonalize(position) {
    switch (position) {
      case "top":
      case "bottom":
        if (this.gridview.orientation === Orientation.HORIZONTAL) {
          this.gridview.insertOrthogonalSplitviewAtRoot();
        }
        break;
      case "left":
      case "right":
        if (this.gridview.orientation === Orientation.VERTICAL) {
          this.gridview.insertOrthogonalSplitviewAtRoot();
        }
        break;
    }
    switch (position) {
      case "top":
      case "left":
        return this.createGroupAtLocation([0]);
      case "bottom":
      case "right":
        return this.createGroupAtLocation([this.gridview.length]);
      default:
        throw new Error(`unsupported position ${position}`);
    }
  }
  updateOptions(options) {
    const hasOrientationChanged = typeof options.orientation === "string" && this.gridview.orientation !== options.orientation;
    this._options = Object.assign(Object.assign({}, this.options), options);
    if (hasOrientationChanged) {
      this.gridview.orientation = options.orientation;
    }
    this.layout(this.gridview.width, this.gridview.height, true);
  }
  focus() {
    var _a2;
    (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }
  getGroupPanel(id2) {
    return this.panels.find((panel) => panel.id === id2);
  }
  setActivePanel(panel) {
    this.doSetGroupActive(panel.group);
    panel.group.model.openPanel(panel);
  }
  moveToNext(options = {}) {
    var _a2;
    if (!options.group) {
      if (!this.activeGroup) {
        return;
      }
      options.group = this.activeGroup;
    }
    if (options.includePanel && options.group) {
      if (options.group.activePanel !== options.group.panels[options.group.panels.length - 1]) {
        options.group.model.moveToNext({ suppressRoll: true });
        return;
      }
    }
    const location2 = getGridLocation(options.group.element);
    const next = (_a2 = this.gridview.next(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
    this.doSetGroupActive(next);
  }
  moveToPrevious(options = {}) {
    var _a2;
    if (!options.group) {
      if (!this.activeGroup) {
        return;
      }
      options.group = this.activeGroup;
    }
    if (options.includePanel && options.group) {
      if (options.group.activePanel !== options.group.panels[0]) {
        options.group.model.moveToPrevious({ suppressRoll: true });
        return;
      }
    }
    const location2 = getGridLocation(options.group.element);
    const next = (_a2 = this.gridview.previous(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
    if (next) {
      this.doSetGroupActive(next);
    }
  }
  /**
   * Serialize the current state of the layout
   *
   * @returns A JSON respresentation of the layout
   */
  toJSON() {
    var _a2;
    const data = this.gridview.serialize();
    const panels = this.panels.reduce((collection, panel) => {
      collection[panel.id] = panel.toJSON();
      return collection;
    }, {});
    return {
      grid: data,
      panels,
      activeGroup: (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.id
    };
  }
  fromJSON(data) {
    this.clear();
    const { grid, panels, activeGroup } = data;
    if (grid.root.type !== "branch" || !Array.isArray(grid.root.data)) {
      throw new Error("root must be of type branch");
    }
    this.gridview.deserialize(grid, {
      fromJSON: (node) => {
        const { id: id2, locked, hideHeader, views, activeView } = node.data;
        const group = this.createGroup({
          id: id2,
          locked: !!locked,
          hideHeader: !!hideHeader
        });
        this._onDidAddGroup.fire(group);
        for (const child of views) {
          const panel = this._deserializer.fromJSON(panels[child], group);
          const isActive = typeof activeView === "string" && activeView === panel.id;
          group.model.openPanel(panel, {
            skipSetPanelActive: !isActive,
            skipSetGroupActive: true
          });
        }
        if (!group.activePanel && group.panels.length > 0) {
          group.model.openPanel(group.panels[group.panels.length - 1], {
            skipSetGroupActive: true
          });
        }
        return group;
      }
    });
    if (typeof activeGroup === "string") {
      const panel = this.getPanel(activeGroup);
      if (panel) {
        this.doSetGroupActive(panel);
      }
    }
    this.gridview.layout(this.width, this.height);
    this._onDidLayoutFromJSON.fire();
  }
  clear() {
    const groups = Array.from(this._groups.values()).map((_) => _.value);
    const hasActiveGroup = !!this.activeGroup;
    const hasActivePanel = !!this.activePanel;
    for (const group of groups) {
      this.removeGroup(group, true);
    }
    if (hasActiveGroup) {
      this.doSetGroupActive(void 0);
    }
    if (hasActivePanel) {
      this._onDidActivePanelChange.fire(void 0);
    }
    this.gridview.clear();
  }
  closeAllGroups() {
    for (const entry of this._groups.entries()) {
      const [_, group] = entry;
      group.value.model.closeAllPanels();
    }
  }
  addPanel(options) {
    var _a2, _b2;
    if (this.panels.find((_) => _.id === options.id)) {
      throw new Error(`panel with id ${options.id} already exists`);
    }
    let referenceGroup;
    if (options.position) {
      if (isPanelOptionsWithPanel(options.position)) {
        const referencePanel = typeof options.position.referencePanel === "string" ? this.getGroupPanel(options.position.referencePanel) : options.position.referencePanel;
        if (!referencePanel) {
          throw new Error(`referencePanel ${options.position.referencePanel} does not exist`);
        }
        referenceGroup = this.findGroup(referencePanel);
      } else if (isPanelOptionsWithGroup(options.position)) {
        referenceGroup = typeof options.position.referenceGroup === "string" ? (_a2 = this._groups.get(options.position.referenceGroup)) === null || _a2 === void 0 ? void 0 : _a2.value : options.position.referenceGroup;
        if (!referenceGroup) {
          throw new Error(`referencePanel ${options.position.referenceGroup} does not exist`);
        }
      } else {
        const group = this.orthogonalize(directionToPosition(options.position.direction));
        const panel2 = this.createPanel(options, group);
        group.model.openPanel(panel2);
        return panel2;
      }
    } else {
      referenceGroup = this.activeGroup;
    }
    let panel;
    if (referenceGroup) {
      const target = toTarget(((_b2 = options.position) === null || _b2 === void 0 ? void 0 : _b2.direction) || "within");
      if (target === "center") {
        panel = this.createPanel(options, referenceGroup);
        referenceGroup.model.openPanel(panel);
      } else {
        const location2 = getGridLocation(referenceGroup.element);
        const relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
        const group = this.createGroupAtLocation(relativeLocation);
        panel = this.createPanel(options, group);
        group.model.openPanel(panel);
      }
    } else {
      const group = this.createGroupAtLocation();
      panel = this.createPanel(options, group);
      group.model.openPanel(panel);
    }
    return panel;
  }
  removePanel(panel, options = {
    removeEmptyGroup: true,
    skipDispose: false
  }) {
    const group = panel.group;
    if (!group) {
      throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);
    }
    group.model.removePanel(panel);
    panel.dispose();
    if (group.size === 0 && options.removeEmptyGroup) {
      this.removeGroup(group);
    }
  }
  createWatermarkComponent() {
    var _a2;
    return createComponent("watermark-id", "watermark-name", this.options.watermarkComponent ? { "watermark-name": this.options.watermarkComponent } : {}, this.options.watermarkFrameworkComponent ? { "watermark-name": this.options.watermarkFrameworkComponent } : {}, (_a2 = this.options.frameworkComponentFactory) === null || _a2 === void 0 ? void 0 : _a2.watermark);
  }
  updateWatermark() {
    var _a2, _b2;
    if (this.groups.length === 0) {
      if (!this.watermark) {
        this.watermark = this.createWatermarkComponent();
        this.watermark.init({
          containerApi: new DockviewApi(this)
        });
        const watermarkContainer = document.createElement("div");
        watermarkContainer.className = "dv-watermark-container";
        watermarkContainer.appendChild(this.watermark.element);
        this.element.appendChild(watermarkContainer);
      }
    } else if (this.watermark) {
      this.watermark.element.parentElement.remove();
      (_b2 = (_a2 = this.watermark).dispose) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      this.watermark = null;
    }
  }
  addGroup(options) {
    var _a2;
    const group = this.createGroup();
    if (options) {
      let referenceGroup;
      if (isGroupOptionsWithPanel(options)) {
        const referencePanel = typeof options.referencePanel === "string" ? this.panels.find((panel) => panel.id === options.referencePanel) : options.referencePanel;
        if (!referencePanel) {
          throw new Error(`reference panel ${options.referencePanel} does not exist`);
        }
        referenceGroup = this.findGroup(referencePanel);
        if (!referenceGroup) {
          throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);
        }
      } else if (isGroupOptionsWithGroup(options)) {
        referenceGroup = typeof options.referenceGroup === "string" ? (_a2 = this._groups.get(options.referenceGroup)) === null || _a2 === void 0 ? void 0 : _a2.value : options.referenceGroup;
        if (!referenceGroup) {
          throw new Error(`reference group ${options.referenceGroup} does not exist`);
        }
      } else {
        const group2 = this.orthogonalize(directionToPosition(options.direction));
        return group2;
      }
      const target = toTarget(options.direction || "within");
      const location2 = getGridLocation(referenceGroup.element);
      const relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
      this.doAddGroup(group, relativeLocation);
      return group;
    } else {
      this.doAddGroup(group);
      return group;
    }
  }
  removeGroup(group, skipActive = false) {
    const panels = [...group.panels];
    for (const panel of panels) {
      this.removePanel(panel, {
        removeEmptyGroup: false,
        skipDispose: false
      });
    }
    super.doRemoveGroup(group, { skipActive });
  }
  moveGroupOrPanel(destinationGroup, sourceGroupId, sourceItemId, destinationTarget, destinationIndex) {
    var _a2;
    const sourceGroup = sourceGroupId ? (_a2 = this._groups.get(sourceGroupId)) === null || _a2 === void 0 ? void 0 : _a2.value : void 0;
    if (sourceItemId === void 0) {
      if (sourceGroup) {
        this.moveGroup(sourceGroup, destinationGroup, destinationTarget);
      }
      return;
    }
    if (!destinationTarget || destinationTarget === "center") {
      const groupItem = (sourceGroup === null || sourceGroup === void 0 ? void 0 : sourceGroup.model.removePanel(sourceItemId)) || this.panels.find((panel) => panel.id === sourceItemId);
      if (!groupItem) {
        throw new Error(`No panel with id ${sourceItemId}`);
      }
      if ((sourceGroup === null || sourceGroup === void 0 ? void 0 : sourceGroup.model.size) === 0) {
        this.doRemoveGroup(sourceGroup);
      }
      destinationGroup.model.openPanel(groupItem, {
        index: destinationIndex
      });
    } else {
      const referenceLocation = getGridLocation(destinationGroup.element);
      const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);
      if (sourceGroup && sourceGroup.size < 2) {
        const [targetParentLocation, to] = tail(targetLocation);
        const sourceLocation = getGridLocation(sourceGroup.element);
        const [sourceParentLocation, from] = tail(sourceLocation);
        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {
          this.gridview.moveView(sourceParentLocation, from, to);
        } else {
          const targetGroup = this.doRemoveGroup(sourceGroup, {
            skipActive: true,
            skipDispose: true
          });
          const updatedReferenceLocation = getGridLocation(destinationGroup.element);
          const location2 = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, destinationTarget);
          this.doAddGroup(targetGroup, location2);
        }
      } else {
        const groupItem = (sourceGroup === null || sourceGroup === void 0 ? void 0 : sourceGroup.model.removePanel(sourceItemId)) || this.panels.find((panel) => panel.id === sourceItemId);
        if (!groupItem) {
          throw new Error(`No panel with id ${sourceItemId}`);
        }
        const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);
        const group = this.createGroupAtLocation(dropLocation);
        group.model.openPanel(groupItem);
      }
    }
  }
  moveGroup(sourceGroup, referenceGroup, target) {
    if (sourceGroup) {
      if (!target || target === "center") {
        const activePanel = sourceGroup.activePanel;
        const panels = [...sourceGroup.panels].map((p2) => sourceGroup.model.removePanel(p2.id));
        if ((sourceGroup === null || sourceGroup === void 0 ? void 0 : sourceGroup.model.size) === 0) {
          this.doRemoveGroup(sourceGroup);
        }
        for (const panel of panels) {
          referenceGroup.model.openPanel(panel, {
            skipSetPanelActive: panel !== activePanel
          });
        }
      } else {
        this.gridview.removeView(getGridLocation(sourceGroup.element));
        const referenceLocation = getGridLocation(referenceGroup.element);
        const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);
        this.gridview.addView(sourceGroup, Sizing.Distribute, dropLocation);
      }
    }
  }
  doSetGroupActive(group, skipFocus) {
    var _a2, _b2;
    const isGroupAlreadyFocused = this._activeGroup === group;
    super.doSetGroupActive(group, skipFocus);
    if (!isGroupAlreadyFocused && ((_a2 = this._activeGroup) === null || _a2 === void 0 ? void 0 : _a2.activePanel)) {
      this._onDidActivePanelChange.fire((_b2 = this._activeGroup) === null || _b2 === void 0 ? void 0 : _b2.activePanel);
    }
  }
  createGroup(options) {
    if (!options) {
      options = {};
    }
    let id2 = options === null || options === void 0 ? void 0 : options.id;
    if (id2 && this._groups.has(options.id)) {
      console.warn(`Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);
      id2 = void 0;
    }
    if (!id2) {
      id2 = this.nextGroupId.next();
      while (this._groups.has(id2)) {
        id2 = this.nextGroupId.next();
      }
    }
    const view = new DockviewGroupPanel(this, id2, options);
    view.init({ params: {}, accessor: null });
    if (!this._groups.has(view.id)) {
      const disposable2 = new CompositeDisposable(view.model.onMove((event) => {
        const { groupId, itemId, target, index } = event;
        this.moveGroupOrPanel(view, groupId, itemId, target, index);
      }), view.model.onDidDrop((event) => {
        this._onDidDrop.fire(Object.assign(Object.assign({}, event), { api: this._api, group: view }));
      }), view.model.onDidAddPanel((event) => {
        this._onDidAddPanel.fire(event.panel);
      }), view.model.onDidRemovePanel((event) => {
        this._onDidRemovePanel.fire(event.panel);
      }), view.model.onDidActivePanelChange((event) => {
        this._onDidActivePanelChange.fire(event.panel);
      }));
      this._groups.set(view.id, { value: view, disposable: disposable2 });
    }
    view.initialize();
    return view;
  }
  createPanel(options, group) {
    const contentComponent = options.component;
    const tabComponent = options.tabComponent || this.options.defaultTabComponent;
    const view = new DockviewPanelModel(this, options.id, contentComponent, tabComponent);
    const panel = new DockviewPanel(options.id, this, this._api, group, view);
    panel.init({
      title: options.title || options.id,
      params: (options === null || options === void 0 ? void 0 : options.params) || {}
    });
    return panel;
  }
  createGroupAtLocation(location2 = [0]) {
    const group = this.createGroup();
    this.doAddGroup(group, location2);
    return group;
  }
  findGroup(panel) {
    var _a2;
    return (_a2 = Array.from(this._groups.values()).find((group) => group.value.model.containsPanel(panel))) === null || _a2 === void 0 ? void 0 : _a2.value;
  }
  dispose() {
    this._onDidActivePanelChange.dispose();
    this._onDidAddPanel.dispose();
    this._onDidRemovePanel.dispose();
    this._onDidLayoutFromJSON.dispose();
    super.dispose();
  }
}
class GridviewComponent extends BaseGrid {
  get orientation() {
    return this.gridview.orientation;
  }
  set orientation(value) {
    this.gridview.orientation = value;
  }
  get options() {
    return this._options;
  }
  get deserializer() {
    return this._deserializer;
  }
  set deserializer(value) {
    this._deserializer = value;
  }
  constructor(options) {
    super({
      parentElement: options.parentElement,
      proportionalLayout: options.proportionalLayout,
      orientation: options.orientation,
      styles: options.styles
    });
    this._onDidLayoutfromJSON = new Emitter();
    this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
    this._options = options;
    if (!this.options.components) {
      this.options.components = {};
    }
    if (!this.options.frameworkComponents) {
      this.options.frameworkComponents = {};
    }
  }
  updateOptions(options) {
    const hasOrientationChanged = typeof options.orientation === "string" && this.gridview.orientation !== options.orientation;
    this._options = Object.assign(Object.assign({}, this.options), options);
    if (hasOrientationChanged) {
      this.gridview.orientation = options.orientation;
    }
    this.layout(this.gridview.width, this.gridview.height, true);
  }
  removePanel(panel) {
    this.removeGroup(panel);
  }
  /**
   * Serialize the current state of the layout
   *
   * @returns A JSON respresentation of the layout
   */
  toJSON() {
    var _a2;
    const data = this.gridview.serialize();
    return {
      grid: data,
      activePanel: (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.id
    };
  }
  setVisible(panel, visible) {
    this.gridview.setViewVisible(getGridLocation(panel.element), visible);
  }
  setActive(panel) {
    this._groups.forEach((value, _key) => {
      value.value.setActive(panel === value.value);
    });
  }
  focus() {
    var _a2;
    (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }
  fromJSON(serializedGridview) {
    this.clear();
    const { grid, activePanel } = serializedGridview;
    const queue = [];
    this.gridview.deserialize(grid, {
      fromJSON: (node) => {
        const { data } = node;
        const view = createComponent(data.id, data.component, this.options.components || {}, this.options.frameworkComponents || {}, this.options.frameworkComponentFactory ? {
          createComponent: this.options.frameworkComponentFactory.createComponent
        } : void 0);
        queue.push(() => view.init({
          params: data.params,
          minimumWidth: data.minimumWidth,
          maximumWidth: data.maximumWidth,
          minimumHeight: data.minimumHeight,
          maximumHeight: data.maximumHeight,
          priority: data.priority,
          snap: !!data.snap,
          accessor: this,
          isVisible: node.visible
        }));
        this._onDidAddGroup.fire(view);
        this.registerPanel(view);
        return view;
      }
    });
    this.layout(this.width, this.height, true);
    queue.forEach((f2) => f2());
    if (typeof activePanel === "string") {
      const panel = this.getPanel(activePanel);
      if (panel) {
        this.doSetGroupActive(panel);
      }
    }
    this._onDidLayoutfromJSON.fire();
  }
  clear() {
    const hasActiveGroup = this.activeGroup;
    const groups = Array.from(this._groups.values());
    for (const group of groups) {
      group.disposable.dispose();
      this.doRemoveGroup(group.value, { skipActive: true });
    }
    if (hasActiveGroup) {
      this.doSetGroupActive(void 0);
    }
    this.gridview.clear();
  }
  movePanel(panel, options) {
    var _a2;
    let relativeLocation;
    const removedPanel = this.gridview.remove(panel);
    const referenceGroup = (_a2 = this._groups.get(options.reference)) === null || _a2 === void 0 ? void 0 : _a2.value;
    if (!referenceGroup) {
      throw new Error(`reference group ${options.reference} does not exist`);
    }
    const target = toTarget(options.direction);
    if (target === "center") {
      throw new Error(`${target} not supported as an option`);
    } else {
      const location2 = getGridLocation(referenceGroup.element);
      relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
    }
    this.doAddGroup(removedPanel, relativeLocation, options.size);
  }
  addPanel(options) {
    var _a2, _b2;
    let relativeLocation = options.location || [0];
    if ((_a2 = options.position) === null || _a2 === void 0 ? void 0 : _a2.referencePanel) {
      const referenceGroup = (_b2 = this._groups.get(options.position.referencePanel)) === null || _b2 === void 0 ? void 0 : _b2.value;
      if (!referenceGroup) {
        throw new Error(`reference group ${options.position.referencePanel} does not exist`);
      }
      const target = toTarget(options.position.direction);
      if (target === "center") {
        throw new Error(`${target} not supported as an option`);
      } else {
        const location2 = getGridLocation(referenceGroup.element);
        relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
      }
    }
    const view = createComponent(options.id, options.component, this.options.components || {}, this.options.frameworkComponents || {}, this.options.frameworkComponentFactory ? {
      createComponent: this.options.frameworkComponentFactory.createComponent
    } : void 0);
    view.init({
      params: options.params || {},
      minimumWidth: options.minimumWidth,
      maximumWidth: options.maximumWidth,
      minimumHeight: options.minimumHeight,
      maximumHeight: options.maximumHeight,
      priority: options.priority,
      snap: !!options.snap,
      accessor: this,
      isVisible: true
    });
    this.registerPanel(view);
    this.doAddGroup(view, relativeLocation, options.size);
    return view;
  }
  registerPanel(panel) {
    const disposable2 = new CompositeDisposable(panel.api.onDidFocusChange((event) => {
      if (!event.isFocused) {
        return;
      }
      this._groups.forEach((groupItem) => {
        const group = groupItem.value;
        if (group !== panel) {
          group.setActive(false);
        } else {
          group.setActive(true);
        }
      });
    }));
    this._groups.set(panel.id, {
      value: panel,
      disposable: disposable2
    });
  }
  moveGroup(referenceGroup, groupId, target) {
    const sourceGroup = this.getPanel(groupId);
    if (!sourceGroup) {
      throw new Error("invalid operation");
    }
    const referenceLocation = getGridLocation(referenceGroup.element);
    const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);
    const [targetParentLocation, to] = tail(targetLocation);
    const sourceLocation = getGridLocation(sourceGroup.element);
    const [sourceParentLocation, from] = tail(sourceLocation);
    if (sequenceEquals(sourceParentLocation, targetParentLocation)) {
      this.gridview.moveView(sourceParentLocation, from, to);
      return;
    }
    const targetGroup = this.doRemoveGroup(sourceGroup, {
      skipActive: true,
      skipDispose: true
    });
    const updatedReferenceLocation = getGridLocation(referenceGroup.element);
    const location2 = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, target);
    this.doAddGroup(targetGroup, location2);
  }
  removeGroup(group) {
    super.removeGroup(group);
  }
  dispose() {
    super.dispose();
    this._onDidLayoutfromJSON.dispose();
  }
}
class SplitviewComponent extends Resizable {
  get panels() {
    return this.splitview.getViews();
  }
  get options() {
    return this._options;
  }
  get length() {
    return this._panels.size;
  }
  get orientation() {
    return this.splitview.orientation;
  }
  get splitview() {
    return this._splitview;
  }
  set splitview(value) {
    this._splitview = value;
    this._splitviewChangeDisposable.value = new CompositeDisposable(this._splitview.onDidSashEnd(() => {
      this._onDidLayoutChange.fire(void 0);
    }), this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
  }
  get minimumSize() {
    return this.splitview.minimumSize;
  }
  get maximumSize() {
    return this.splitview.maximumSize;
  }
  get height() {
    return this.splitview.orientation === Orientation.HORIZONTAL ? this.splitview.orthogonalSize : this.splitview.size;
  }
  get width() {
    return this.splitview.orientation === Orientation.HORIZONTAL ? this.splitview.size : this.splitview.orthogonalSize;
  }
  constructor(options) {
    super(options.parentElement);
    this._splitviewChangeDisposable = new MutableDisposable();
    this._panels = /* @__PURE__ */ new Map();
    this._onDidLayoutfromJSON = new Emitter();
    this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
    this._onDidAddView = new Emitter();
    this.onDidAddView = this._onDidAddView.event;
    this._onDidRemoveView = new Emitter();
    this.onDidRemoveView = this._onDidRemoveView.event;
    this._onDidLayoutChange = new Emitter();
    this.onDidLayoutChange = this._onDidLayoutChange.event;
    this._options = options;
    if (!options.components) {
      options.components = {};
    }
    if (!options.frameworkComponents) {
      options.frameworkComponents = {};
    }
    this.splitview = new Splitview(this.element, options);
    this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);
  }
  updateOptions(options) {
    const hasOrientationChanged = typeof options.orientation === "string" && this.options.orientation !== options.orientation;
    this._options = Object.assign(Object.assign({}, this.options), options);
    if (hasOrientationChanged) {
      this.splitview.orientation = options.orientation;
    }
    this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);
  }
  focus() {
    var _a2;
    (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }
  movePanel(from, to) {
    this.splitview.moveView(from, to);
  }
  setVisible(panel, visible) {
    const index = this.panels.indexOf(panel);
    this.splitview.setViewVisible(index, visible);
  }
  setActive(view, skipFocus) {
    this._activePanel = view;
    this.panels.filter((v2) => v2 !== view).forEach((v2) => {
      v2.api._onDidActiveChange.fire({ isActive: false });
      if (!skipFocus) {
        v2.focus();
      }
    });
    view.api._onDidActiveChange.fire({ isActive: true });
    if (!skipFocus) {
      view.focus();
    }
  }
  removePanel(panel, sizing) {
    const item = this._panels.get(panel.id);
    if (!item) {
      throw new Error(`unknown splitview panel ${panel.id}`);
    }
    item.dispose();
    this._panels.delete(panel.id);
    const index = this.panels.findIndex((_) => _ === panel);
    const removedView = this.splitview.removeView(index, sizing);
    removedView.dispose();
    const panels = this.panels;
    if (panels.length > 0) {
      this.setActive(panels[panels.length - 1]);
    }
  }
  getPanel(id2) {
    return this.panels.find((view) => view.id === id2);
  }
  addPanel(options) {
    if (this._panels.has(options.id)) {
      throw new Error(`panel ${options.id} already exists`);
    }
    const view = createComponent(options.id, options.component, this.options.components || {}, this.options.frameworkComponents || {}, this.options.frameworkWrapper ? {
      createComponent: this.options.frameworkWrapper.createComponent
    } : void 0);
    view.orientation = this.splitview.orientation;
    view.init({
      params: options.params || {},
      minimumSize: options.minimumSize,
      maximumSize: options.maximumSize,
      snap: options.snap,
      priority: options.priority,
      accessor: this
    });
    const size = typeof options.size === "number" ? options.size : Sizing.Distribute;
    const index = typeof options.index === "number" ? options.index : void 0;
    this.splitview.addView(view, size, index);
    this.doAddView(view);
    this.setActive(view);
    return view;
  }
  layout(width, height) {
    const [size, orthogonalSize] = this.splitview.orientation === Orientation.HORIZONTAL ? [width, height] : [height, width];
    this.splitview.layout(size, orthogonalSize);
  }
  doAddView(view) {
    const disposable2 = view.api.onDidFocusChange((event) => {
      if (!event.isFocused) {
        return;
      }
      this.setActive(view, true);
    });
    this._panels.set(view.id, disposable2);
  }
  toJSON() {
    var _a2;
    const views = this.splitview.getViews().map((view, i) => {
      const size = this.splitview.getViewSize(i);
      return {
        size,
        data: view.toJSON(),
        snap: !!view.snap,
        priority: view.priority
      };
    });
    return {
      views,
      activeView: (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.id,
      size: this.splitview.size,
      orientation: this.splitview.orientation
    };
  }
  fromJSON(serializedSplitview) {
    this.clear();
    const { views, orientation, size, activeView } = serializedSplitview;
    const queue = [];
    this.splitview = new Splitview(this.element, {
      orientation,
      proportionalLayout: this.options.proportionalLayout,
      descriptor: {
        size,
        views: views.map((view) => {
          const data = view.data;
          if (this._panels.has(data.id)) {
            throw new Error(`panel ${data.id} already exists`);
          }
          const panel = createComponent(data.id, data.component, this.options.components || {}, this.options.frameworkComponents || {}, this.options.frameworkWrapper ? {
            createComponent: this.options.frameworkWrapper.createComponent
          } : void 0);
          queue.push(() => {
            panel.init({
              params: data.params || {},
              minimumSize: data.minimumSize,
              maximumSize: data.maximumSize,
              snap: view.snap,
              priority: view.priority,
              accessor: this
            });
          });
          panel.orientation = orientation;
          this.doAddView(panel);
          setTimeout(() => {
            this._onDidAddView.fire(panel);
          }, 0);
          return { size: view.size, view: panel };
        })
      }
    });
    this.layout(this.width, this.height);
    queue.forEach((f2) => f2());
    if (typeof activeView === "string") {
      const panel = this.getPanel(activeView);
      if (panel) {
        this.setActive(panel);
      }
    }
    this._onDidLayoutfromJSON.fire();
  }
  clear() {
    for (const disposable2 of this._panels.values()) {
      disposable2.dispose();
    }
    this._panels.clear();
    while (this.splitview.length > 0) {
      const view = this.splitview.removeView(0, Sizing.Distribute, true);
      view.dispose();
    }
  }
  dispose() {
    for (const disposable2 of this._panels.values()) {
      disposable2.dispose();
    }
    this._panels.clear();
    const views = this.splitview.getViews();
    this._splitviewChangeDisposable.dispose();
    this.splitview.dispose();
    for (const view of views) {
      view.dispose();
    }
    super.dispose();
  }
}
class DefaultHeader extends CompositeDisposable {
  get element() {
    return this._element;
  }
  constructor() {
    super();
    this._expandedIcon = createExpandMoreButton();
    this._collapsedIcon = createChevronRightButton();
    this.disposable = new MutableDisposable();
    this.apiRef = { api: null };
    this._element = document.createElement("div");
    this.element.className = "default-header";
    this._content = document.createElement("span");
    this._expander = document.createElement("div");
    this._expander.className = "dockview-pane-header-icon";
    this.element.appendChild(this._expander);
    this.element.appendChild(this._content);
    this.addDisposables(addDisposableListener(this._element, "click", () => {
      var _a2;
      (_a2 = this.apiRef.api) === null || _a2 === void 0 ? void 0 : _a2.setExpanded(!this.apiRef.api.isExpanded);
    }));
  }
  init(params) {
    this.apiRef.api = params.api;
    this._content.textContent = params.title;
    this.updateIcon();
    this.disposable.value = params.api.onDidExpansionChange(() => {
      this.updateIcon();
    });
  }
  updateIcon() {
    var _a2;
    const isExpanded = !!((_a2 = this.apiRef.api) === null || _a2 === void 0 ? void 0 : _a2.isExpanded);
    toggleClass(this._expander, "collapsed", !isExpanded);
    if (isExpanded) {
      if (this._expander.contains(this._collapsedIcon)) {
        this._collapsedIcon.remove();
      }
      if (!this._expander.contains(this._expandedIcon)) {
        this._expander.appendChild(this._expandedIcon);
      }
    } else {
      if (this._expander.contains(this._expandedIcon)) {
        this._expandedIcon.remove();
      }
      if (!this._expander.contains(this._collapsedIcon)) {
        this._expander.appendChild(this._collapsedIcon);
      }
    }
  }
  update(_params) {
  }
  dispose() {
    this.disposable.dispose();
    super.dispose();
  }
}
const nextLayoutId = sequentialNumberGenerator();
class PaneFramework extends DraggablePaneviewPanel {
  constructor(options) {
    super(options.accessor, options.id, options.component, options.headerComponent, options.orientation, options.isExpanded, options.disableDnd);
    this.options = options;
  }
  getBodyComponent() {
    return this.options.body;
  }
  getHeaderComponent() {
    return this.options.header;
  }
}
class PaneviewComponent extends Resizable {
  get id() {
    return this._id;
  }
  get panels() {
    return this.paneview.getPanes();
  }
  set paneview(value) {
    this._paneview = value;
    this._disposable.value = new CompositeDisposable(this._paneview.onDidChange(() => {
      this._onDidLayoutChange.fire(void 0);
    }), this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
  }
  get paneview() {
    return this._paneview;
  }
  get minimumSize() {
    return this.paneview.minimumSize;
  }
  get maximumSize() {
    return this.paneview.maximumSize;
  }
  get height() {
    return this.paneview.orientation === Orientation.HORIZONTAL ? this.paneview.orthogonalSize : this.paneview.size;
  }
  get width() {
    return this.paneview.orientation === Orientation.HORIZONTAL ? this.paneview.size : this.paneview.orthogonalSize;
  }
  get options() {
    return this._options;
  }
  constructor(options) {
    super(options.parentElement);
    this._id = nextLayoutId.next();
    this._disposable = new MutableDisposable();
    this._viewDisposables = /* @__PURE__ */ new Map();
    this._onDidLayoutfromJSON = new Emitter();
    this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
    this._onDidLayoutChange = new Emitter();
    this.onDidLayoutChange = this._onDidLayoutChange.event;
    this._onDidDrop = new Emitter();
    this.onDidDrop = this._onDidDrop.event;
    this._onDidAddView = new Emitter();
    this.onDidAddView = this._onDidAddView.event;
    this._onDidRemoveView = new Emitter();
    this.onDidRemoveView = this._onDidRemoveView.event;
    this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView);
    this._options = options;
    if (!options.components) {
      options.components = {};
    }
    if (!options.frameworkComponents) {
      options.frameworkComponents = {};
    }
    this.paneview = new Paneview(this.element, {
      // only allow paneview in the vertical orientation for now
      orientation: Orientation.VERTICAL
    });
    this.addDisposables(this._disposable);
  }
  focus() {
  }
  updateOptions(options) {
    this._options = Object.assign(Object.assign({}, this.options), options);
  }
  addPanel(options) {
    const body = createComponent(options.id, options.component, this.options.components || {}, this.options.frameworkComponents || {}, this.options.frameworkWrapper ? {
      createComponent: this.options.frameworkWrapper.body.createComponent
    } : void 0);
    let header;
    if (options.headerComponent) {
      header = createComponent(options.id, options.headerComponent, this.options.headerComponents || {}, this.options.headerframeworkComponents, this.options.frameworkWrapper ? {
        createComponent: this.options.frameworkWrapper.header.createComponent
      } : void 0);
    } else {
      header = new DefaultHeader();
    }
    const view = new PaneFramework({
      id: options.id,
      component: options.component,
      headerComponent: options.headerComponent,
      header,
      body,
      orientation: Orientation.VERTICAL,
      isExpanded: !!options.isExpanded,
      disableDnd: !!this.options.disableDnd,
      accessor: this
    });
    this.doAddPanel(view);
    const size = typeof options.size === "number" ? options.size : Sizing.Distribute;
    const index = typeof options.index === "number" ? options.index : void 0;
    view.init({
      params: options.params || {},
      minimumBodySize: options.minimumBodySize,
      maximumBodySize: options.maximumBodySize,
      isExpanded: options.isExpanded,
      title: options.title,
      containerApi: new PaneviewApi(this)
    });
    this.paneview.addPane(view, size, index);
    view.orientation = this.paneview.orientation;
    return view;
  }
  removePanel(panel) {
    const views = this.panels;
    const index = views.findIndex((_) => _ === panel);
    this.paneview.removePane(index);
    this.doRemovePanel(panel);
  }
  movePanel(from, to) {
    this.paneview.moveView(from, to);
  }
  getPanel(id2) {
    return this.panels.find((view) => view.id === id2);
  }
  layout(width, height) {
    const [size, orthogonalSize] = this.paneview.orientation === Orientation.HORIZONTAL ? [width, height] : [height, width];
    this.paneview.layout(size, orthogonalSize);
  }
  toJSON() {
    const maximum = (value) => value === Number.MAX_SAFE_INTEGER || value === Number.POSITIVE_INFINITY ? void 0 : value;
    const minimum = (value) => value <= 0 ? void 0 : value;
    const views = this.paneview.getPanes().map((view, i) => {
      const size = this.paneview.getViewSize(i);
      return {
        size,
        data: view.toJSON(),
        minimumSize: minimum(view.minimumBodySize),
        maximumSize: maximum(view.maximumBodySize),
        expanded: view.isExpanded()
      };
    });
    return {
      views,
      size: this.paneview.size
    };
  }
  fromJSON(serializedPaneview) {
    this.clear();
    const { views, size } = serializedPaneview;
    const queue = [];
    this.paneview = new Paneview(this.element, {
      orientation: Orientation.VERTICAL,
      descriptor: {
        size,
        views: views.map((view) => {
          const data = view.data;
          const body = createComponent(data.id, data.component, this.options.components || {}, this.options.frameworkComponents || {}, this.options.frameworkWrapper ? {
            createComponent: this.options.frameworkWrapper.body.createComponent
          } : void 0);
          let header;
          if (data.headerComponent) {
            header = createComponent(data.id, data.headerComponent, this.options.headerComponents || {}, this.options.headerframeworkComponents || {}, this.options.frameworkWrapper ? {
              createComponent: this.options.frameworkWrapper.header.createComponent
            } : void 0);
          } else {
            header = new DefaultHeader();
          }
          const panel = new PaneFramework({
            id: data.id,
            component: data.component,
            headerComponent: data.headerComponent,
            header,
            body,
            orientation: Orientation.VERTICAL,
            isExpanded: !!view.expanded,
            disableDnd: !!this.options.disableDnd,
            accessor: this
          });
          this.doAddPanel(panel);
          queue.push(() => {
            panel.init({
              params: data.params || {},
              minimumBodySize: view.minimumSize,
              maximumBodySize: view.maximumSize,
              title: data.title,
              isExpanded: !!view.expanded,
              containerApi: new PaneviewApi(this)
            });
            panel.orientation = this.paneview.orientation;
          });
          setTimeout(() => {
            this._onDidAddView.fire(panel);
          }, 0);
          return { size: view.size, view: panel };
        })
      }
    });
    this.layout(this.width, this.height);
    queue.forEach((f2) => f2());
    this._onDidLayoutfromJSON.fire();
  }
  clear() {
    for (const [_, value] of this._viewDisposables.entries()) {
      value.dispose();
    }
    this._viewDisposables.clear();
    this.paneview.dispose();
  }
  doAddPanel(panel) {
    const disposable2 = panel.onDidDrop((event) => {
      this._onDidDrop.fire(event);
    });
    this._viewDisposables.set(panel.id, disposable2);
  }
  doRemovePanel(panel) {
    const disposable2 = this._viewDisposables.get(panel.id);
    if (disposable2) {
      disposable2.dispose();
      this._viewDisposables.delete(panel.id);
    }
  }
  dispose() {
    super.dispose();
    for (const [_, value] of this._viewDisposables.entries()) {
      value.dispose();
    }
    this._viewDisposables.clear();
    this.paneview.dispose();
  }
}
class SplitviewPanel extends BasePanelView {
  get priority() {
    return this._priority;
  }
  set orientation(value) {
    this._orientation = value;
  }
  get orientation() {
    return this._orientation;
  }
  get minimumSize() {
    const size = typeof this._minimumSize === "function" ? this._minimumSize() : this._minimumSize;
    if (size !== this._evaluatedMinimumSize) {
      this._evaluatedMinimumSize = size;
      this.updateConstraints();
    }
    return size;
  }
  get maximumSize() {
    const size = typeof this._maximumSize === "function" ? this._maximumSize() : this._maximumSize;
    if (size !== this._evaluatedMaximumSize) {
      this._evaluatedMaximumSize = size;
      this.updateConstraints();
    }
    return size;
  }
  get snap() {
    return this._snap;
  }
  constructor(id2, componentName) {
    super(id2, componentName, new SplitviewPanelApiImpl(id2));
    this._evaluatedMinimumSize = 0;
    this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;
    this._minimumSize = 0;
    this._maximumSize = Number.POSITIVE_INFINITY;
    this._snap = false;
    this._onDidChange = new Emitter();
    this.onDidChange = this._onDidChange.event;
    this.api.initialize(this);
    this.addDisposables(this._onDidChange, this.api.onVisibilityChange((event) => {
      const { isVisible } = event;
      const { accessor } = this._params;
      accessor.setVisible(this, isVisible);
    }), this.api.onActiveChange(() => {
      const { accessor } = this._params;
      accessor.setActive(this);
    }), this.api.onDidConstraintsChangeInternal((event) => {
      if (typeof event.minimumSize === "number" || typeof event.minimumSize === "function") {
        this._minimumSize = event.minimumSize;
      }
      if (typeof event.maximumSize === "number" || typeof event.maximumSize === "function") {
        this._maximumSize = event.maximumSize;
      }
      this.updateConstraints();
    }), this.api.onDidSizeChange((event) => {
      this._onDidChange.fire({ size: event.size });
    }));
  }
  setVisible(isVisible) {
    this.api._onDidVisibilityChange.fire({ isVisible });
  }
  setActive(isActive) {
    this.api._onDidActiveChange.fire({ isActive });
  }
  layout(size, orthogonalSize) {
    const [width, height] = this.orientation === Orientation.HORIZONTAL ? [size, orthogonalSize] : [orthogonalSize, size];
    super.layout(width, height);
  }
  init(parameters) {
    super.init(parameters);
    this._priority = parameters.priority;
    if (parameters.minimumSize) {
      this._minimumSize = parameters.minimumSize;
    }
    if (parameters.maximumSize) {
      this._maximumSize = parameters.maximumSize;
    }
    if (parameters.snap) {
      this._snap = parameters.snap;
    }
  }
  toJSON() {
    const maximum = (value) => value === Number.MAX_SAFE_INTEGER || value === Number.POSITIVE_INFINITY ? void 0 : value;
    const minimum = (value) => value <= 0 ? void 0 : value;
    return Object.assign(Object.assign({}, super.toJSON()), { minimumSize: minimum(this.minimumSize), maximumSize: maximum(this.maximumSize) });
  }
  updateConstraints() {
    this.api._onDidConstraintsChange.fire({
      maximumSize: this._evaluatedMaximumSize,
      minimumSize: this._evaluatedMinimumSize
    });
  }
}
var reactDomExports = requireReactDom();
const ReactComponentBridge = (props, ref) => {
  const [_, triggerRender] = reactExports.useState();
  const _props = reactExports.useRef(props.componentProps);
  reactExports.useImperativeHandle(ref, () => ({
    update: (componentProps) => {
      _props.current = Object.assign(Object.assign({}, _props.current), componentProps);
      triggerRender(Date.now());
    }
  }), []);
  return reactExports.createElement(props.component, _props.current);
};
ReactComponentBridge.displayName = "DockviewReactJsBridge";
const uniquePortalKeyGenerator = (() => {
  let value = 1;
  return { next: () => `dockview_react_portal_key_${(value++).toString()}` };
})();
const ReactPartContext = reactExports.createContext({});
class ReactPart {
  constructor(parent, portalStore, component, parameters, context) {
    this.parent = parent;
    this.portalStore = portalStore;
    this.component = component;
    this.parameters = parameters;
    this.context = context;
    this._initialProps = {};
    this.disposed = false;
    this.createPortal();
  }
  update(props) {
    if (this.disposed) {
      throw new Error("invalid operation: resource is already disposed");
    }
    if (!this.componentInstance) {
      this._initialProps = Object.assign(Object.assign({}, this._initialProps), props);
    } else {
      this.componentInstance.update(props);
    }
  }
  createPortal() {
    if (this.disposed) {
      throw new Error("invalid operation: resource is already disposed");
    }
    if (typeof this.component !== "function") {
      throw new Error("Invalid Operation. dockview only supports React Functional Components.");
    }
    const bridgeComponent = reactExports.createElement(reactExports.forwardRef(ReactComponentBridge), {
      component: this.component,
      componentProps: this.parameters,
      ref: (element) => {
        this.componentInstance = element;
        if (Object.keys(this._initialProps).length > 0) {
          this.componentInstance.update(this._initialProps);
          this._initialProps = {};
        }
      }
    });
    const node = this.context ? reactExports.createElement(ReactPartContext.Provider, { value: this.context }, bridgeComponent) : bridgeComponent;
    const portal = reactDomExports.createPortal(node, this.parent, uniquePortalKeyGenerator.next());
    this.ref = {
      portal,
      disposable: this.portalStore.addPortal(portal)
    };
  }
  dispose() {
    var _a2;
    (_a2 = this.ref) === null || _a2 === void 0 ? void 0 : _a2.disposable.dispose();
    this.disposed = true;
  }
}
const usePortalsLifecycle = () => {
  const [portals, setPortals] = reactExports.useState([]);
  reactExports.useDebugValue(`Portal count: ${portals.length}`);
  const addPortal = reactExports.useCallback((portal) => {
    setPortals((existingPortals) => [...existingPortals, portal]);
    let disposed = false;
    return {
      dispose: () => {
        if (disposed) {
          throw new Error("invalid operation: resource already disposed");
        }
        disposed = true;
        setPortals((existingPortals) => existingPortals.filter((p2) => p2 !== portal));
      }
    };
  }, []);
  return [portals, addPortal];
};
class ReactPanelContentPart {
  get element() {
    return this._element;
  }
  constructor(id2, component, reactPortalStore) {
    this.id = id2;
    this.component = component;
    this.reactPortalStore = reactPortalStore;
    this._onDidFocus = new Emitter();
    this.onDidFocus = this._onDidFocus.event;
    this._onDidBlur = new Emitter();
    this.onDidBlur = this._onDidBlur.event;
    this._element = document.createElement("div");
    this._element.className = "dockview-react-part";
  }
  focus() {
  }
  init(parameters) {
    this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
      params: parameters.params,
      api: parameters.api,
      containerApi: parameters.containerApi
    });
  }
  update(event) {
    var _a2;
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update(event.params);
  }
  layout(_width, _height) {
  }
  dispose() {
    var _a2;
    this._onDidFocus.dispose();
    this._onDidBlur.dispose();
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
  }
}
class ReactPanelHeaderPart {
  get element() {
    return this._element;
  }
  constructor(id2, component, reactPortalStore) {
    this.id = id2;
    this.component = component;
    this.reactPortalStore = reactPortalStore;
    this._element = document.createElement("div");
    this._element.className = "dockview-react-part";
  }
  focus() {
  }
  init(parameters) {
    this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
      params: parameters.params,
      api: parameters.api,
      containerApi: parameters.containerApi
    });
  }
  update(event) {
    var _a2;
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update(event.params);
  }
  layout(_width, _height) {
  }
  dispose() {
    var _a2;
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
  }
}
class ReactWatermarkPart {
  get element() {
    return this._element;
  }
  constructor(id2, component, reactPortalStore) {
    this.id = id2;
    this.component = component;
    this.reactPortalStore = reactPortalStore;
    this._element = document.createElement("div");
    this._element.className = "dockview-react-part";
  }
  init(parameters) {
    this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
      group: parameters.group,
      containerApi: parameters.containerApi,
      close: () => {
        if (parameters.group) {
          parameters.containerApi.removeGroup(parameters.group);
        }
      }
    });
  }
  focus() {
  }
  update(params) {
    var _a2, _b2;
    if (this.parameters) {
      this.parameters.params = params.params;
    }
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update({ params: ((_b2 = this.parameters) === null || _b2 === void 0 ? void 0 : _b2.params) || {} });
  }
  layout(_width, _height) {
  }
  updateParentGroup(_group, _isPanelVisible) {
  }
  dispose() {
    var _a2;
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
  }
}
class ReactGroupControlsRendererPart {
  get element() {
    return this._element;
  }
  get part() {
    return this._part;
  }
  get group() {
    return this._group;
  }
  constructor(component, reactPortalStore, _group) {
    this.component = component;
    this.reactPortalStore = reactPortalStore;
    this._group = _group;
    this.mutableDisposable = new MutableDisposable();
    this._element = document.createElement("div");
    this._element.className = "dockview-react-part";
  }
  focus() {
  }
  init(parameters) {
    this.mutableDisposable.value = new CompositeDisposable(this._group.model.onDidAddPanel(() => {
      this.updatePanels();
    }), this._group.model.onDidRemovePanel(() => {
      this.updatePanels();
    }), this._group.model.onDidActivePanelChange(() => {
      this.updateActivePanel();
    }), parameters.api.onDidActiveChange(() => {
      this.updateGroupActive();
    }));
    this._part = new ReactPart(this.element, this.reactPortalStore, this.component, {
      api: parameters.api,
      containerApi: parameters.containerApi,
      panels: this._group.model.panels,
      activePanel: this._group.model.activePanel,
      isGroupActive: this._group.api.isActive
    });
  }
  update(event) {
    var _a2;
    (_a2 = this._part) === null || _a2 === void 0 ? void 0 : _a2.update(event.params);
  }
  dispose() {
    var _a2;
    this.mutableDisposable.dispose();
    (_a2 = this._part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
  }
  updatePanels() {
    this.update({ params: { panels: this._group.model.panels } });
  }
  updateActivePanel() {
    this.update({
      params: {
        activePanel: this._group.model.activePanel
      }
    });
  }
  updateGroupActive() {
    this.update({
      params: {
        isGroupActive: this._group.api.isActive
      }
    });
  }
}
function createGroupControlElement(component, store) {
  return component ? (groupPanel) => {
    return new ReactGroupControlsRendererPart(component, store, groupPanel);
  } : void 0;
}
const DEFAULT_REACT_TAB = "props.defaultTabComponent";
const DockviewReact = reactExports.forwardRef((props, ref) => {
  const domRef = reactExports.useRef(null);
  const dockviewRef = reactExports.useRef();
  const [portals, addPortal] = usePortalsLifecycle();
  reactExports.useImperativeHandle(ref, () => domRef.current, []);
  reactExports.useEffect(() => {
    if (!domRef.current) {
      return () => {
      };
    }
    const factory = {
      content: {
        createComponent: (_id, componentId, component) => {
          return new ReactPanelContentPart(componentId, component, {
            addPortal
          });
        }
      },
      tab: {
        createComponent: (_id, componentId, component) => {
          return new ReactPanelHeaderPart(componentId, component, {
            addPortal
          });
        }
      },
      watermark: {
        createComponent: (_id, componentId, component) => {
          return new ReactWatermarkPart(componentId, component, {
            addPortal
          });
        }
      }
    };
    const frameworkTabComponents = props.tabComponents || {};
    if (props.defaultTabComponent) {
      frameworkTabComponents[DEFAULT_REACT_TAB] = props.defaultTabComponent;
    }
    const dockview2 = new DockviewComponent({
      parentElement: domRef.current,
      frameworkComponentFactory: factory,
      frameworkComponents: props.components,
      frameworkTabComponents,
      watermarkFrameworkComponent: props.watermarkComponent,
      defaultTabComponent: props.defaultTabComponent ? DEFAULT_REACT_TAB : void 0,
      styles: props.hideBorders ? { separatorBorder: "transparent" } : void 0,
      showDndOverlay: props.showDndOverlay,
      createGroupControlElement: createGroupControlElement(props.groupControlComponent, { addPortal }),
      singleTabMode: props.singleTabMode
    });
    const { clientWidth, clientHeight } = domRef.current;
    dockview2.layout(clientWidth, clientHeight);
    if (props.onReady) {
      props.onReady({ api: new DockviewApi(dockview2) });
    }
    dockviewRef.current = dockview2;
    return () => {
      dockview2.dispose();
    };
  }, []);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return () => {
      };
    }
    const disposable2 = dockviewRef.current.onDidDrop((event) => {
      if (props.onDidDrop) {
        props.onDidDrop(event);
      }
    });
    return () => {
      disposable2.dispose();
    };
  }, [props.onDidDrop]);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return;
    }
    dockviewRef.current.updateOptions({
      frameworkComponents: props.components
    });
  }, [props.components]);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return;
    }
    dockviewRef.current.updateOptions({
      watermarkFrameworkComponent: props.watermarkComponent
    });
  }, [props.watermarkComponent]);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return;
    }
    dockviewRef.current.updateOptions({
      showDndOverlay: props.showDndOverlay
    });
  }, [props.showDndOverlay]);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return;
    }
    dockviewRef.current.updateOptions({
      frameworkTabComponents: props.tabComponents
    });
  }, [props.tabComponents]);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return;
    }
    const frameworkTabComponents = props.tabComponents || {};
    if (props.defaultTabComponent) {
      frameworkTabComponents[DEFAULT_REACT_TAB] = props.defaultTabComponent;
    }
    dockviewRef.current.updateOptions({
      defaultTabComponent: props.defaultTabComponent ? DEFAULT_REACT_TAB : void 0,
      frameworkTabComponents
    });
  }, [props.defaultTabComponent]);
  reactExports.useEffect(() => {
    if (!dockviewRef.current) {
      return;
    }
    dockviewRef.current.updateOptions({
      createGroupControlElement: createGroupControlElement(props.groupControlComponent, { addPortal })
    });
  }, [props.groupControlComponent]);
  return reactExports.createElement("div", { className: props.className, style: { height: "100%", width: "100%" }, ref: domRef }, portals);
});
DockviewReact.displayName = "DockviewComponent";
globalThis && globalThis.__rest || function(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s2); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i]))
        t2[p2[i]] = s2[p2[i]];
    }
  return t2;
};
class ReactPanelView extends SplitviewPanel {
  constructor(id2, component, reactComponent, reactPortalStore) {
    super(id2, component);
    this.reactComponent = reactComponent;
    this.reactPortalStore = reactPortalStore;
  }
  getComponent() {
    var _a2;
    return new ReactPart(this.element, this.reactPortalStore, this.reactComponent, {
      params: ((_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params) || {},
      api: this.api,
      containerApi: new SplitviewApi(this._params.accessor)
    });
  }
}
const SplitviewReact = reactExports.forwardRef((props, ref) => {
  const domRef = reactExports.useRef(null);
  const splitviewRef = reactExports.useRef();
  const [portals, addPortal] = usePortalsLifecycle();
  reactExports.useImperativeHandle(ref, () => domRef.current, []);
  reactExports.useEffect(() => {
    const splitview = new SplitviewComponent({
      parentElement: domRef.current,
      orientation: props.orientation || Orientation.HORIZONTAL,
      frameworkComponents: props.components,
      frameworkWrapper: {
        createComponent: (id2, componentId, component) => {
          return new ReactPanelView(id2, componentId, component, {
            addPortal
          });
        }
      },
      proportionalLayout: typeof props.proportionalLayout === "boolean" ? props.proportionalLayout : true,
      styles: props.hideBorders ? { separatorBorder: "transparent" } : void 0
    });
    const { clientWidth, clientHeight } = domRef.current;
    splitview.layout(clientWidth, clientHeight);
    if (props.onReady) {
      props.onReady({ api: new SplitviewApi(splitview) });
    }
    splitviewRef.current = splitview;
    return () => {
      splitview.dispose();
    };
  }, []);
  reactExports.useEffect(() => {
    if (!splitviewRef.current) {
      return;
    }
    splitviewRef.current.updateOptions({
      frameworkComponents: props.components
    });
  }, [props.components]);
  return reactExports.createElement("div", { className: props.className, style: { height: "100%", width: "100%" }, ref: domRef }, portals);
});
SplitviewReact.displayName = "SplitviewComponent";
class ReactGridPanelView extends GridviewPanel {
  constructor(id2, component, reactComponent, reactPortalStore) {
    super(id2, component);
    this.reactComponent = reactComponent;
    this.reactPortalStore = reactPortalStore;
  }
  getComponent() {
    var _a2;
    return new ReactPart(this.element, this.reactPortalStore, this.reactComponent, {
      params: ((_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params) || {},
      api: this.api,
      containerApi: new GridviewApi(this._params.accessor)
    });
  }
}
const GridviewReact = reactExports.forwardRef((props, ref) => {
  const domRef = reactExports.useRef(null);
  const gridviewRef = reactExports.useRef();
  const [portals, addPortal] = usePortalsLifecycle();
  reactExports.useImperativeHandle(ref, () => domRef.current, []);
  reactExports.useEffect(() => {
    if (!domRef.current) {
      return () => {
      };
    }
    const gridview = new GridviewComponent({
      parentElement: domRef.current,
      proportionalLayout: typeof props.proportionalLayout === "boolean" ? props.proportionalLayout : true,
      orientation: props.orientation || Orientation.HORIZONTAL,
      frameworkComponents: props.components,
      frameworkComponentFactory: {
        createComponent: (id2, componentId, component) => {
          return new ReactGridPanelView(id2, componentId, component, {
            addPortal
          });
        }
      },
      styles: props.hideBorders ? { separatorBorder: "transparent" } : void 0
    });
    const { clientWidth, clientHeight } = domRef.current;
    gridview.layout(clientWidth, clientHeight);
    if (props.onReady) {
      props.onReady({ api: new GridviewApi(gridview) });
    }
    gridviewRef.current = gridview;
    return () => {
      gridview.dispose();
    };
  }, []);
  reactExports.useEffect(() => {
    if (!gridviewRef.current) {
      return;
    }
    gridviewRef.current.updateOptions({
      frameworkComponents: props.components
    });
  }, [props.components]);
  return reactExports.createElement("div", { className: props.className, style: { height: "100%", width: "100%" }, ref: domRef }, portals);
});
GridviewReact.displayName = "GridviewComponent";
class PanePanelSection {
  get element() {
    return this._element;
  }
  constructor(id2, component, reactPortalStore) {
    this.id = id2;
    this.component = component;
    this.reactPortalStore = reactPortalStore;
    this._element = document.createElement("div");
    this._element.style.height = "100%";
    this._element.style.width = "100%";
  }
  init(parameters) {
    this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
      params: parameters.params,
      api: parameters.api,
      title: parameters.title,
      containerApi: parameters.containerApi
    });
  }
  toJSON() {
    return {
      id: this.id
    };
  }
  update(params) {
    var _a2;
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update(params.params);
  }
  dispose() {
    var _a2;
    (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
  }
}
const PaneviewReact = reactExports.forwardRef((props, ref) => {
  const domRef = reactExports.useRef(null);
  const paneviewRef = reactExports.useRef();
  const [portals, addPortal] = usePortalsLifecycle();
  reactExports.useImperativeHandle(ref, () => domRef.current, []);
  reactExports.useEffect(() => {
    const createComponent2 = (id2, _componentId, component) => new PanePanelSection(id2, component, {
      addPortal
    });
    const paneview = new PaneviewComponent({
      parentElement: domRef.current,
      frameworkComponents: props.components,
      components: {},
      headerComponents: {},
      disableDnd: props.disableDnd,
      headerframeworkComponents: props.headerComponents,
      frameworkWrapper: {
        header: {
          createComponent: createComponent2
        },
        body: {
          createComponent: createComponent2
        }
      },
      showDndOverlay: props.showDndOverlay
    });
    const api2 = new PaneviewApi(paneview);
    const { clientWidth, clientHeight } = domRef.current;
    paneview.layout(clientWidth, clientHeight);
    if (props.onReady) {
      props.onReady({ api: api2 });
    }
    paneviewRef.current = paneview;
    return () => {
      paneview.dispose();
    };
  }, []);
  reactExports.useEffect(() => {
    if (!paneviewRef.current) {
      return;
    }
    paneviewRef.current.updateOptions({
      frameworkComponents: props.components
    });
  }, [props.components]);
  reactExports.useEffect(() => {
    if (!paneviewRef.current) {
      return;
    }
    paneviewRef.current.updateOptions({
      headerframeworkComponents: props.headerComponents
    });
  }, [props.headerComponents]);
  reactExports.useEffect(() => {
    if (!paneviewRef.current) {
      return () => {
      };
    }
    const paneview = paneviewRef.current;
    const disposable2 = paneview.onDidDrop((event) => {
      if (props.onDidDrop) {
        props.onDidDrop(Object.assign(Object.assign({}, event), { api: new PaneviewApi(paneview) }));
      }
    });
    return () => {
      disposable2.dispose();
    };
  }, [props.onDidDrop]);
  reactExports.useEffect(() => {
    if (!paneviewRef.current) {
      return;
    }
    paneviewRef.current.updateOptions({
      showDndOverlay: props.showDndOverlay
    });
  }, [props.showDndOverlay]);
  return reactExports.createElement("div", { className: props.className, style: { height: "100%", width: "100%" }, ref: domRef }, portals);
});
PaneviewReact.displayName = "PaneviewComponent";
const dockview = "";
const ModelContext = reactExports.createContext({
  model: void 0,
  setModel: () => {
  }
});
function expandAst(model2) {
  var _a2, _b2;
  if (model2.sequence || model2.loop) {
    if (!model2.init) {
      const firstState = (_a2 = model2.states) == null ? void 0 : _a2[0];
      if (firstState) {
        model2.init = buildReference(firstState, { refText: firstState == null ? void 0 : firstState.name });
      }
    }
  }
  model2.states = (_b2 = model2.states) == null ? void 0 : _b2.map((state, index) => {
    if (model2.sequence || model2.loop) {
      const { event } = model2;
      const isLast = index === model2.states.length - 1;
      const nextStateIndex = !isLast ? index + 1 : isLast && model2.loop ? 0 : -1;
      if (nextStateIndex > -1) {
        const nextState = model2.states[nextStateIndex];
        state.transitions.push({
          $container: model2,
          $type: "Transition",
          event: event ?? "*",
          to: buildReference(nextState, {
            refText: nextState.name
          })
        });
      }
    }
    return expandAst(state);
  });
  return model2;
}
function buildReference(node, { refNode, refText }) {
  const reference = {
    $refNode: refNode,
    $refText: refText,
    get ref() {
      return node;
    }
    // get $nodeDescription() {
    //     return this._nodeDescription;
    // },
    // get error() {
    //     return isLinkingError(this._ref) ? this._ref : undefined;
    // }
  };
  return reference;
}
var lib$1 = {};
var defaultModule = {};
var main$4 = {};
var api$7 = {};
var semanticTokens = {};
var main$3 = {};
var main$2 = {};
var ril = {};
var ral = {};
var hasRequiredRal;
function requireRal() {
  if (hasRequiredRal)
    return ral;
  hasRequiredRal = 1;
  Object.defineProperty(ral, "__esModule", { value: true });
  let _ral;
  function RAL() {
    if (_ral === void 0) {
      throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
  }
  (function(RAL2) {
    function install(ral2) {
      if (ral2 === void 0) {
        throw new Error(`No runtime abstraction layer provided`);
      }
      _ral = ral2;
    }
    RAL2.install = install;
  })(RAL || (RAL = {}));
  ral.default = RAL;
  return ral;
}
var disposable = {};
var hasRequiredDisposable;
function requireDisposable() {
  if (hasRequiredDisposable)
    return disposable;
  hasRequiredDisposable = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Disposable = void 0;
    (function(Disposable2) {
      function create(func) {
        return {
          dispose: func
        };
      }
      Disposable2.create = create;
    })(exports.Disposable || (exports.Disposable = {}));
  })(disposable);
  return disposable;
}
var events = {};
var hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents)
    return events;
  hasRequiredEvents = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Emitter = exports.Event = void 0;
    const ral_1 = requireRal();
    (function(Event2) {
      const _disposable = { dispose() {
      } };
      Event2.None = function() {
        return _disposable;
      };
    })(exports.Event || (exports.Event = {}));
    class CallbackList {
      add(callback, context = null, bucket) {
        if (!this._callbacks) {
          this._callbacks = [];
          this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
          bucket.push({ dispose: () => this.remove(callback, context) });
        }
      }
      remove(callback, context = null) {
        if (!this._callbacks) {
          return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
          if (this._callbacks[i] === callback) {
            if (this._contexts[i] === context) {
              this._callbacks.splice(i, 1);
              this._contexts.splice(i, 1);
              return;
            } else {
              foundCallbackWithDifferentContext = true;
            }
          }
        }
        if (foundCallbackWithDifferentContext) {
          throw new Error("When adding a listener with a context, you should remove it with the same context");
        }
      }
      invoke(...args) {
        if (!this._callbacks) {
          return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
          try {
            ret.push(callbacks[i].apply(contexts[i], args));
          } catch (e) {
            (0, ral_1.default)().console.error(e);
          }
        }
        return ret;
      }
      isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
      }
      dispose() {
        this._callbacks = void 0;
        this._contexts = void 0;
      }
    }
    class Emitter2 {
      constructor(_options) {
        this._options = _options;
      }
      /**
       * For the public to allow to subscribe
       * to events from this Emitter
       */
      get event() {
        if (!this._event) {
          this._event = (listener, thisArgs, disposables) => {
            if (!this._callbacks) {
              this._callbacks = new CallbackList();
            }
            if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
              this._options.onFirstListenerAdd(this);
            }
            this._callbacks.add(listener, thisArgs);
            const result = {
              dispose: () => {
                if (!this._callbacks) {
                  return;
                }
                this._callbacks.remove(listener, thisArgs);
                result.dispose = Emitter2._noop;
                if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                  this._options.onLastListenerRemove(this);
                }
              }
            };
            if (Array.isArray(disposables)) {
              disposables.push(result);
            }
            return result;
          };
        }
        return this._event;
      }
      /**
       * To be kept private to fire an event to
       * subscribers
       */
      fire(event) {
        if (this._callbacks) {
          this._callbacks.invoke.call(this._callbacks, event);
        }
      }
      dispose() {
        if (this._callbacks) {
          this._callbacks.dispose();
          this._callbacks = void 0;
        }
      }
    }
    exports.Emitter = Emitter2;
    Emitter2._noop = function() {
    };
  })(events);
  return events;
}
var messageBuffer = {};
var hasRequiredMessageBuffer;
function requireMessageBuffer() {
  if (hasRequiredMessageBuffer)
    return messageBuffer;
  hasRequiredMessageBuffer = 1;
  Object.defineProperty(messageBuffer, "__esModule", { value: true });
  messageBuffer.AbstractMessageBuffer = void 0;
  const CR = 13;
  const LF = 10;
  const CRLF = "\r\n";
  class AbstractMessageBuffer {
    constructor(encoding = "utf-8") {
      this._encoding = encoding;
      this._chunks = [];
      this._totalLength = 0;
    }
    get encoding() {
      return this._encoding;
    }
    append(chunk) {
      const toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;
      this._chunks.push(toAppend);
      this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders() {
      if (this._chunks.length === 0) {
        return void 0;
      }
      let state = 0;
      let chunkIndex = 0;
      let offset = 0;
      let chunkBytesRead = 0;
      row:
        while (chunkIndex < this._chunks.length) {
          const chunk = this._chunks[chunkIndex];
          offset = 0;
          while (offset < chunk.length) {
            const value = chunk[offset];
            switch (value) {
              case CR:
                switch (state) {
                  case 0:
                    state = 1;
                    break;
                  case 2:
                    state = 3;
                    break;
                  default:
                    state = 0;
                }
                break;
              case LF:
                switch (state) {
                  case 1:
                    state = 2;
                    break;
                  case 3:
                    state = 4;
                    offset++;
                    break row;
                  default:
                    state = 0;
                }
                break;
              default:
                state = 0;
            }
            offset++;
          }
          chunkBytesRead += chunk.byteLength;
          chunkIndex++;
        }
      if (state !== 4) {
        return void 0;
      }
      const buffer = this._read(chunkBytesRead + offset);
      const result = /* @__PURE__ */ new Map();
      const headers2 = this.toString(buffer, "ascii").split(CRLF);
      if (headers2.length < 2) {
        return result;
      }
      for (let i = 0; i < headers2.length - 2; i++) {
        const header = headers2[i];
        const index = header.indexOf(":");
        if (index === -1) {
          throw new Error("Message header must separate key and value using :");
        }
        const key = header.substr(0, index);
        const value = header.substr(index + 1).trim();
        result.set(key, value);
      }
      return result;
    }
    tryReadBody(length) {
      if (this._totalLength < length) {
        return void 0;
      }
      return this._read(length);
    }
    get numberOfBytes() {
      return this._totalLength;
    }
    _read(byteCount) {
      if (byteCount === 0) {
        return this.emptyBuffer();
      }
      if (byteCount > this._totalLength) {
        throw new Error(`Cannot read so many bytes!`);
      }
      if (this._chunks[0].byteLength === byteCount) {
        const chunk = this._chunks[0];
        this._chunks.shift();
        this._totalLength -= byteCount;
        return this.asNative(chunk);
      }
      if (this._chunks[0].byteLength > byteCount) {
        const chunk = this._chunks[0];
        const result2 = this.asNative(chunk, byteCount);
        this._chunks[0] = chunk.slice(byteCount);
        this._totalLength -= byteCount;
        return result2;
      }
      const result = this.allocNative(byteCount);
      let resultOffset = 0;
      let chunkIndex = 0;
      while (byteCount > 0) {
        const chunk = this._chunks[chunkIndex];
        if (chunk.byteLength > byteCount) {
          const chunkPart = chunk.slice(0, byteCount);
          result.set(chunkPart, resultOffset);
          resultOffset += byteCount;
          this._chunks[chunkIndex] = chunk.slice(byteCount);
          this._totalLength -= byteCount;
          byteCount -= byteCount;
        } else {
          result.set(chunk, resultOffset);
          resultOffset += chunk.byteLength;
          this._chunks.shift();
          this._totalLength -= chunk.byteLength;
          byteCount -= chunk.byteLength;
        }
      }
      return result;
    }
  }
  messageBuffer.AbstractMessageBuffer = AbstractMessageBuffer;
  return messageBuffer;
}
var hasRequiredRil;
function requireRil() {
  if (hasRequiredRil)
    return ril;
  hasRequiredRil = 1;
  Object.defineProperty(ril, "__esModule", { value: true });
  const ral_1 = requireRal();
  const disposable_1 = requireDisposable();
  const events_1 = requireEvents();
  const messageBuffer_1 = requireMessageBuffer();
  class MessageBuffer extends messageBuffer_1.AbstractMessageBuffer {
    constructor(encoding = "utf-8") {
      super(encoding);
      this.asciiDecoder = new TextDecoder("ascii");
    }
    emptyBuffer() {
      return MessageBuffer.emptyBuffer;
    }
    fromString(value, _encoding) {
      return new TextEncoder().encode(value);
    }
    toString(value, encoding) {
      if (encoding === "ascii") {
        return this.asciiDecoder.decode(value);
      } else {
        return new TextDecoder(encoding).decode(value);
      }
    }
    asNative(buffer, length) {
      if (length === void 0) {
        return buffer;
      } else {
        return buffer.slice(0, length);
      }
    }
    allocNative(length) {
      return new Uint8Array(length);
    }
  }
  MessageBuffer.emptyBuffer = new Uint8Array(0);
  class ReadableStreamWrapper {
    constructor(socket) {
      this.socket = socket;
      this._onData = new events_1.Emitter();
      this._messageListener = (event) => {
        const blob = event.data;
        blob.arrayBuffer().then((buffer) => {
          this._onData.fire(new Uint8Array(buffer));
        }, () => {
          (0, ral_1.default)().console.error(`Converting blob to array buffer failed.`);
        });
      };
      this.socket.addEventListener("message", this._messageListener);
    }
    onClose(listener) {
      this.socket.addEventListener("close", listener);
      return disposable_1.Disposable.create(() => this.socket.removeEventListener("close", listener));
    }
    onError(listener) {
      this.socket.addEventListener("error", listener);
      return disposable_1.Disposable.create(() => this.socket.removeEventListener("error", listener));
    }
    onEnd(listener) {
      this.socket.addEventListener("end", listener);
      return disposable_1.Disposable.create(() => this.socket.removeEventListener("end", listener));
    }
    onData(listener) {
      return this._onData.event(listener);
    }
  }
  class WritableStreamWrapper {
    constructor(socket) {
      this.socket = socket;
    }
    onClose(listener) {
      this.socket.addEventListener("close", listener);
      return disposable_1.Disposable.create(() => this.socket.removeEventListener("close", listener));
    }
    onError(listener) {
      this.socket.addEventListener("error", listener);
      return disposable_1.Disposable.create(() => this.socket.removeEventListener("error", listener));
    }
    onEnd(listener) {
      this.socket.addEventListener("end", listener);
      return disposable_1.Disposable.create(() => this.socket.removeEventListener("end", listener));
    }
    write(data, encoding) {
      if (typeof data === "string") {
        if (encoding !== void 0 && encoding !== "utf-8") {
          throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
        }
        this.socket.send(data);
      } else {
        this.socket.send(data);
      }
      return Promise.resolve();
    }
    end() {
      this.socket.close();
    }
  }
  const _textEncoder = new TextEncoder();
  const _ril = Object.freeze({
    messageBuffer: Object.freeze({
      create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
      encoder: Object.freeze({
        name: "application/json",
        encode: (msg, options) => {
          if (options.charset !== "utf-8") {
            throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
          }
          return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, void 0, 0)));
        }
      }),
      decoder: Object.freeze({
        name: "application/json",
        decode: (buffer, options) => {
          if (!(buffer instanceof Uint8Array)) {
            throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
          }
          return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
        }
      })
    }),
    stream: Object.freeze({
      asReadableStream: (socket) => new ReadableStreamWrapper(socket),
      asWritableStream: (socket) => new WritableStreamWrapper(socket)
    }),
    console,
    timer: Object.freeze({
      setTimeout(callback, ms, ...args) {
        const handle = setTimeout(callback, ms, ...args);
        return { dispose: () => clearTimeout(handle) };
      },
      setImmediate(callback, ...args) {
        const handle = setTimeout(callback, 0, ...args);
        return { dispose: () => clearTimeout(handle) };
      },
      setInterval(callback, ms, ...args) {
        const handle = setInterval(callback, ms, ...args);
        return { dispose: () => clearInterval(handle) };
      }
    })
  });
  function RIL() {
    return _ril;
  }
  (function(RIL2) {
    function install() {
      ral_1.default.install(_ril);
    }
    RIL2.install = install;
  })(RIL || (RIL = {}));
  ril.default = RIL;
  return ril;
}
var api$6 = {};
var messages$1 = {};
var is$2 = {};
var hasRequiredIs$2;
function requireIs$2() {
  if (hasRequiredIs$2)
    return is$2;
  hasRequiredIs$2 = 1;
  Object.defineProperty(is$2, "__esModule", { value: true });
  is$2.stringArray = is$2.array = is$2.func = is$2.error = is$2.number = is$2.string = is$2.boolean = void 0;
  function boolean(value) {
    return value === true || value === false;
  }
  is$2.boolean = boolean;
  function string2(value) {
    return typeof value === "string" || value instanceof String;
  }
  is$2.string = string2;
  function number2(value) {
    return typeof value === "number" || value instanceof Number;
  }
  is$2.number = number2;
  function error(value) {
    return value instanceof Error;
  }
  is$2.error = error;
  function func(value) {
    return typeof value === "function";
  }
  is$2.func = func;
  function array(value) {
    return Array.isArray(value);
  }
  is$2.array = array;
  function stringArray(value) {
    return array(value) && value.every((elem) => string2(elem));
  }
  is$2.stringArray = stringArray;
  return is$2;
}
var hasRequiredMessages$1;
function requireMessages$1() {
  if (hasRequiredMessages$1)
    return messages$1;
  hasRequiredMessages$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
    const is2 = requireIs$2();
    var ErrorCodes;
    (function(ErrorCodes2) {
      ErrorCodes2.ParseError = -32700;
      ErrorCodes2.InvalidRequest = -32600;
      ErrorCodes2.MethodNotFound = -32601;
      ErrorCodes2.InvalidParams = -32602;
      ErrorCodes2.InternalError = -32603;
      ErrorCodes2.jsonrpcReservedErrorRangeStart = -32099;
      ErrorCodes2.serverErrorStart = -32099;
      ErrorCodes2.MessageWriteError = -32099;
      ErrorCodes2.MessageReadError = -32098;
      ErrorCodes2.PendingResponseRejected = -32097;
      ErrorCodes2.ConnectionInactive = -32096;
      ErrorCodes2.ServerNotInitialized = -32002;
      ErrorCodes2.UnknownErrorCode = -32001;
      ErrorCodes2.jsonrpcReservedErrorRangeEnd = -32e3;
      ErrorCodes2.serverErrorEnd = -32e3;
    })(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
    class ResponseError extends Error {
      constructor(code2, message, data) {
        super(message);
        this.code = is2.number(code2) ? code2 : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
      }
      toJson() {
        const result = {
          code: this.code,
          message: this.message
        };
        if (this.data !== void 0) {
          result.data = this.data;
        }
        return result;
      }
    }
    exports.ResponseError = ResponseError;
    class ParameterStructures {
      constructor(kind) {
        this.kind = kind;
      }
      static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
      }
      toString() {
        return this.kind;
      }
    }
    exports.ParameterStructures = ParameterStructures;
    ParameterStructures.auto = new ParameterStructures("auto");
    ParameterStructures.byPosition = new ParameterStructures("byPosition");
    ParameterStructures.byName = new ParameterStructures("byName");
    class AbstractMessageSignature {
      constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
      }
      get parameterStructures() {
        return ParameterStructures.auto;
      }
    }
    exports.AbstractMessageSignature = AbstractMessageSignature;
    class RequestType0 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 0);
      }
    }
    exports.RequestType0 = RequestType0;
    class RequestType extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    }
    exports.RequestType = RequestType;
    class RequestType1 extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    }
    exports.RequestType1 = RequestType1;
    class RequestType2 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 2);
      }
    }
    exports.RequestType2 = RequestType2;
    class RequestType3 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 3);
      }
    }
    exports.RequestType3 = RequestType3;
    class RequestType4 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 4);
      }
    }
    exports.RequestType4 = RequestType4;
    class RequestType5 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 5);
      }
    }
    exports.RequestType5 = RequestType5;
    class RequestType6 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 6);
      }
    }
    exports.RequestType6 = RequestType6;
    class RequestType7 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 7);
      }
    }
    exports.RequestType7 = RequestType7;
    class RequestType8 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 8);
      }
    }
    exports.RequestType8 = RequestType8;
    class RequestType9 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 9);
      }
    }
    exports.RequestType9 = RequestType9;
    class NotificationType extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    }
    exports.NotificationType = NotificationType;
    class NotificationType0 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 0);
      }
    }
    exports.NotificationType0 = NotificationType0;
    class NotificationType1 extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    }
    exports.NotificationType1 = NotificationType1;
    class NotificationType2 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 2);
      }
    }
    exports.NotificationType2 = NotificationType2;
    class NotificationType3 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 3);
      }
    }
    exports.NotificationType3 = NotificationType3;
    class NotificationType4 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 4);
      }
    }
    exports.NotificationType4 = NotificationType4;
    class NotificationType5 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 5);
      }
    }
    exports.NotificationType5 = NotificationType5;
    class NotificationType6 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 6);
      }
    }
    exports.NotificationType6 = NotificationType6;
    class NotificationType7 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 7);
      }
    }
    exports.NotificationType7 = NotificationType7;
    class NotificationType8 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 8);
      }
    }
    exports.NotificationType8 = NotificationType8;
    class NotificationType9 extends AbstractMessageSignature {
      constructor(method) {
        super(method, 9);
      }
    }
    exports.NotificationType9 = NotificationType9;
    (function(Message) {
      function isRequest(message) {
        const candidate = message;
        return candidate && is2.string(candidate.method) && (is2.string(candidate.id) || is2.number(candidate.id));
      }
      Message.isRequest = isRequest;
      function isNotification(message) {
        const candidate = message;
        return candidate && is2.string(candidate.method) && message.id === void 0;
      }
      Message.isNotification = isNotification;
      function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is2.string(candidate.id) || is2.number(candidate.id) || candidate.id === null);
      }
      Message.isResponse = isResponse;
    })(exports.Message || (exports.Message = {}));
  })(messages$1);
  return messages$1;
}
var linkedMap = {};
var hasRequiredLinkedMap;
function requireLinkedMap() {
  if (hasRequiredLinkedMap)
    return linkedMap;
  hasRequiredLinkedMap = 1;
  (function(exports) {
    var _a2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
    var Touch;
    (function(Touch2) {
      Touch2.None = 0;
      Touch2.First = 1;
      Touch2.AsOld = Touch2.First;
      Touch2.Last = 2;
      Touch2.AsNew = Touch2.Last;
    })(Touch = exports.Touch || (exports.Touch = {}));
    class LinkedMap {
      constructor() {
        this[_a2] = "LinkedMap";
        this._map = /* @__PURE__ */ new Map();
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
        this._state = 0;
      }
      clear() {
        this._map.clear();
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
        this._state++;
      }
      isEmpty() {
        return !this._head && !this._tail;
      }
      get size() {
        return this._size;
      }
      get first() {
        var _a3;
        return (_a3 = this._head) == null ? void 0 : _a3.value;
      }
      get last() {
        var _a3;
        return (_a3 = this._tail) == null ? void 0 : _a3.value;
      }
      has(key) {
        return this._map.has(key);
      }
      get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
          return void 0;
        }
        if (touch !== Touch.None) {
          this.touch(item, touch);
        }
        return item.value;
      }
      set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
          item.value = value;
          if (touch !== Touch.None) {
            this.touch(item, touch);
          }
        } else {
          item = { key, value, next: void 0, previous: void 0 };
          switch (touch) {
            case Touch.None:
              this.addItemLast(item);
              break;
            case Touch.First:
              this.addItemFirst(item);
              break;
            case Touch.Last:
              this.addItemLast(item);
              break;
            default:
              this.addItemLast(item);
              break;
          }
          this._map.set(key, item);
          this._size++;
        }
        return this;
      }
      delete(key) {
        return !!this.remove(key);
      }
      remove(key) {
        const item = this._map.get(key);
        if (!item) {
          return void 0;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
      }
      shift() {
        if (!this._head && !this._tail) {
          return void 0;
        }
        if (!this._head || !this._tail) {
          throw new Error("Invalid list");
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
      }
      forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
          if (thisArg) {
            callbackfn.bind(thisArg)(current.value, current.key, this);
          } else {
            callbackfn(current.value, current.key, this);
          }
          if (this._state !== state) {
            throw new Error(`LinkedMap got modified during iteration.`);
          }
          current = current.next;
        }
      }
      keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result = { value: current.key, done: false };
              current = current.next;
              return result;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result = { value: current.value, done: false };
              current = current.next;
              return result;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result = { value: [current.key, current.value], done: false };
              current = current.next;
              return result;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      [(_a2 = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
      }
      trimOld(newSize) {
        if (newSize >= this.size) {
          return;
        }
        if (newSize === 0) {
          this.clear();
          return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
          this._map.delete(current.key);
          current = current.next;
          currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
          current.previous = void 0;
        }
        this._state++;
      }
      addItemFirst(item) {
        if (!this._head && !this._tail) {
          this._tail = item;
        } else if (!this._head) {
          throw new Error("Invalid list");
        } else {
          item.next = this._head;
          this._head.previous = item;
        }
        this._head = item;
        this._state++;
      }
      addItemLast(item) {
        if (!this._head && !this._tail) {
          this._head = item;
        } else if (!this._tail) {
          throw new Error("Invalid list");
        } else {
          item.previous = this._tail;
          this._tail.next = item;
        }
        this._tail = item;
        this._state++;
      }
      removeItem(item) {
        if (item === this._head && item === this._tail) {
          this._head = void 0;
          this._tail = void 0;
        } else if (item === this._head) {
          if (!item.next) {
            throw new Error("Invalid list");
          }
          item.next.previous = void 0;
          this._head = item.next;
        } else if (item === this._tail) {
          if (!item.previous) {
            throw new Error("Invalid list");
          }
          item.previous.next = void 0;
          this._tail = item.previous;
        } else {
          const next = item.next;
          const previous = item.previous;
          if (!next || !previous) {
            throw new Error("Invalid list");
          }
          next.previous = previous;
          previous.next = next;
        }
        item.next = void 0;
        item.previous = void 0;
        this._state++;
      }
      touch(item, touch) {
        if (!this._head || !this._tail) {
          throw new Error("Invalid list");
        }
        if (touch !== Touch.First && touch !== Touch.Last) {
          return;
        }
        if (touch === Touch.First) {
          if (item === this._head) {
            return;
          }
          const next = item.next;
          const previous = item.previous;
          if (item === this._tail) {
            previous.next = void 0;
            this._tail = previous;
          } else {
            next.previous = previous;
            previous.next = next;
          }
          item.previous = void 0;
          item.next = this._head;
          this._head.previous = item;
          this._head = item;
          this._state++;
        } else if (touch === Touch.Last) {
          if (item === this._tail) {
            return;
          }
          const next = item.next;
          const previous = item.previous;
          if (item === this._head) {
            next.previous = void 0;
            this._head = next;
          } else {
            next.previous = previous;
            previous.next = next;
          }
          item.next = void 0;
          item.previous = this._tail;
          this._tail.next = item;
          this._tail = item;
          this._state++;
        }
      }
      toJSON() {
        const data = [];
        this.forEach((value, key) => {
          data.push([key, value]);
        });
        return data;
      }
      fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
          this.set(key, value);
        }
      }
    }
    exports.LinkedMap = LinkedMap;
    class LRUCache extends LinkedMap {
      constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
      }
      get limit() {
        return this._limit;
      }
      set limit(limit) {
        this._limit = limit;
        this.checkTrim();
      }
      get ratio() {
        return this._ratio;
      }
      set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
      }
      get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
      }
      peek(key) {
        return super.get(key, Touch.None);
      }
      set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
      }
      checkTrim() {
        if (this.size > this._limit) {
          this.trimOld(Math.round(this._limit * this._ratio));
        }
      }
    }
    exports.LRUCache = LRUCache;
  })(linkedMap);
  return linkedMap;
}
var cancellation = {};
var hasRequiredCancellation;
function requireCancellation() {
  if (hasRequiredCancellation)
    return cancellation;
  hasRequiredCancellation = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancellationTokenSource = exports.CancellationToken = void 0;
    const ral_1 = requireRal();
    const Is2 = requireIs$2();
    const events_1 = requireEvents();
    var CancellationToken;
    (function(CancellationToken2) {
      CancellationToken2.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
      });
      CancellationToken2.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
      });
      function is2(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is2.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
      }
      CancellationToken2.is = is2;
    })(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
    const shortcutEvent = Object.freeze(function(callback, context) {
      const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
      return { dispose() {
        handle.dispose();
      } };
    });
    class MutableToken {
      constructor() {
        this._isCancelled = false;
      }
      cancel() {
        if (!this._isCancelled) {
          this._isCancelled = true;
          if (this._emitter) {
            this._emitter.fire(void 0);
            this.dispose();
          }
        }
      }
      get isCancellationRequested() {
        return this._isCancelled;
      }
      get onCancellationRequested() {
        if (this._isCancelled) {
          return shortcutEvent;
        }
        if (!this._emitter) {
          this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
      }
      dispose() {
        if (this._emitter) {
          this._emitter.dispose();
          this._emitter = void 0;
        }
      }
    }
    class CancellationTokenSource {
      get token() {
        if (!this._token) {
          this._token = new MutableToken();
        }
        return this._token;
      }
      cancel() {
        if (!this._token) {
          this._token = CancellationToken.Cancelled;
        } else {
          this._token.cancel();
        }
      }
      dispose() {
        if (!this._token) {
          this._token = CancellationToken.None;
        } else if (this._token instanceof MutableToken) {
          this._token.dispose();
        }
      }
    }
    exports.CancellationTokenSource = CancellationTokenSource;
  })(cancellation);
  return cancellation;
}
var messageReader = {};
var hasRequiredMessageReader;
function requireMessageReader() {
  if (hasRequiredMessageReader)
    return messageReader;
  hasRequiredMessageReader = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
    const ral_1 = requireRal();
    const Is2 = requireIs$2();
    const events_1 = requireEvents();
    (function(MessageReader) {
      function is2(value) {
        let candidate = value;
        return candidate && Is2.func(candidate.listen) && Is2.func(candidate.dispose) && Is2.func(candidate.onError) && Is2.func(candidate.onClose) && Is2.func(candidate.onPartialMessage);
      }
      MessageReader.is = is2;
    })(exports.MessageReader || (exports.MessageReader = {}));
    class AbstractMessageReader {
      constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
      }
      dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
      }
      get onError() {
        return this.errorEmitter.event;
      }
      fireError(error) {
        this.errorEmitter.fire(this.asError(error));
      }
      get onClose() {
        return this.closeEmitter.event;
      }
      fireClose() {
        this.closeEmitter.fire(void 0);
      }
      get onPartialMessage() {
        return this.partialMessageEmitter.event;
      }
      firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
      }
      asError(error) {
        if (error instanceof Error) {
          return error;
        } else {
          return new Error(`Reader received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
        }
      }
    }
    exports.AbstractMessageReader = AbstractMessageReader;
    var ResolvedMessageReaderOptions;
    (function(ResolvedMessageReaderOptions2) {
      function fromOptions(options) {
        let charset;
        let contentDecoder;
        const contentDecoders = /* @__PURE__ */ new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = /* @__PURE__ */ new Map();
        if (options === void 0 || typeof options === "string") {
          charset = options ?? "utf-8";
        } else {
          charset = options.charset ?? "utf-8";
          if (options.contentDecoder !== void 0) {
            contentDecoder = options.contentDecoder;
            contentDecoders.set(contentDecoder.name, contentDecoder);
          }
          if (options.contentDecoders !== void 0) {
            for (const decoder of options.contentDecoders) {
              contentDecoders.set(decoder.name, decoder);
            }
          }
          if (options.contentTypeDecoder !== void 0) {
            contentTypeDecoder = options.contentTypeDecoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
          }
          if (options.contentTypeDecoders !== void 0) {
            for (const decoder of options.contentTypeDecoders) {
              contentTypeDecoders.set(decoder.name, decoder);
            }
          }
        }
        if (contentTypeDecoder === void 0) {
          contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
          contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
      }
      ResolvedMessageReaderOptions2.fromOptions = fromOptions;
    })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
    class ReadableStreamMessageReader extends AbstractMessageReader {
      constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 1e4;
        this.nextMessageLength = -1;
        this.messageToken = 0;
      }
      set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
      }
      get partialMessageTimeout() {
        return this._partialMessageTimeout;
      }
      listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = void 0;
        this.callback = callback;
        const result = this.readable.onData((data) => {
          this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
      }
      onData(data) {
        this.buffer.append(data);
        while (true) {
          if (this.nextMessageLength === -1) {
            const headers2 = this.buffer.tryReadHeaders();
            if (!headers2) {
              return;
            }
            const contentLength = headers2.get("Content-Length");
            if (!contentLength) {
              throw new Error("Header must provide a Content-Length property.");
            }
            const length = parseInt(contentLength);
            if (isNaN(length)) {
              throw new Error("Content-Length value must be a number.");
            }
            this.nextMessageLength = length;
          }
          const body = this.buffer.tryReadBody(this.nextMessageLength);
          if (body === void 0) {
            this.setPartialMessageTimer();
            return;
          }
          this.clearPartialMessageTimer();
          this.nextMessageLength = -1;
          let p2;
          if (this.options.contentDecoder !== void 0) {
            p2 = this.options.contentDecoder.decode(body);
          } else {
            p2 = Promise.resolve(body);
          }
          p2.then((value) => {
            this.options.contentTypeDecoder.decode(value, this.options).then((msg) => {
              this.callback(msg);
            }, (error) => {
              this.fireError(error);
            });
          }, (error) => {
            this.fireError(error);
          });
        }
      }
      clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
          this.partialMessageTimer.dispose();
          this.partialMessageTimer = void 0;
        }
      }
      setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
          return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
          this.partialMessageTimer = void 0;
          if (token === this.messageToken) {
            this.firePartialMessage({ messageToken: token, waitingTime: timeout });
            this.setPartialMessageTimer();
          }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
      }
    }
    exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
  })(messageReader);
  return messageReader;
}
var messageWriter = {};
var semaphore = {};
var hasRequiredSemaphore;
function requireSemaphore() {
  if (hasRequiredSemaphore)
    return semaphore;
  hasRequiredSemaphore = 1;
  Object.defineProperty(semaphore, "__esModule", { value: true });
  semaphore.Semaphore = void 0;
  const ral_1 = requireRal();
  class Semaphore {
    constructor(capacity = 1) {
      if (capacity <= 0) {
        throw new Error("Capacity must be greater than 0");
      }
      this._capacity = capacity;
      this._active = 0;
      this._waiting = [];
    }
    lock(thunk) {
      return new Promise((resolve, reject) => {
        this._waiting.push({ thunk, resolve, reject });
        this.runNext();
      });
    }
    get active() {
      return this._active;
    }
    runNext() {
      if (this._waiting.length === 0 || this._active === this._capacity) {
        return;
      }
      (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
      if (this._waiting.length === 0 || this._active === this._capacity) {
        return;
      }
      const next = this._waiting.shift();
      this._active++;
      if (this._active > this._capacity) {
        throw new Error(`To many thunks active`);
      }
      try {
        const result = next.thunk();
        if (result instanceof Promise) {
          result.then((value) => {
            this._active--;
            next.resolve(value);
            this.runNext();
          }, (err) => {
            this._active--;
            next.reject(err);
            this.runNext();
          });
        } else {
          this._active--;
          next.resolve(result);
          this.runNext();
        }
      } catch (err) {
        this._active--;
        next.reject(err);
        this.runNext();
      }
    }
  }
  semaphore.Semaphore = Semaphore;
  return semaphore;
}
var hasRequiredMessageWriter;
function requireMessageWriter() {
  if (hasRequiredMessageWriter)
    return messageWriter;
  hasRequiredMessageWriter = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
    const ral_1 = requireRal();
    const Is2 = requireIs$2();
    const semaphore_1 = requireSemaphore();
    const events_1 = requireEvents();
    const ContentLength = "Content-Length: ";
    const CRLF = "\r\n";
    (function(MessageWriter) {
      function is2(value) {
        let candidate = value;
        return candidate && Is2.func(candidate.dispose) && Is2.func(candidate.onClose) && Is2.func(candidate.onError) && Is2.func(candidate.write);
      }
      MessageWriter.is = is2;
    })(exports.MessageWriter || (exports.MessageWriter = {}));
    class AbstractMessageWriter {
      constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
      }
      dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
      }
      get onError() {
        return this.errorEmitter.event;
      }
      fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
      }
      get onClose() {
        return this.closeEmitter.event;
      }
      fireClose() {
        this.closeEmitter.fire(void 0);
      }
      asError(error) {
        if (error instanceof Error) {
          return error;
        } else {
          return new Error(`Writer received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
        }
      }
    }
    exports.AbstractMessageWriter = AbstractMessageWriter;
    var ResolvedMessageWriterOptions;
    (function(ResolvedMessageWriterOptions2) {
      function fromOptions(options) {
        if (options === void 0 || typeof options === "string") {
          return { charset: options ?? "utf-8", contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        } else {
          return { charset: options.charset ?? "utf-8", contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
      }
      ResolvedMessageWriterOptions2.fromOptions = fromOptions;
    })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
    class WriteableStreamMessageWriter extends AbstractMessageWriter {
      constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
      }
      async write(msg) {
        return this.writeSemaphore.lock(async () => {
          const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
            if (this.options.contentEncoder !== void 0) {
              return this.options.contentEncoder.encode(buffer);
            } else {
              return buffer;
            }
          });
          return payload.then((buffer) => {
            const headers2 = [];
            headers2.push(ContentLength, buffer.byteLength.toString(), CRLF);
            headers2.push(CRLF);
            return this.doWrite(msg, headers2, buffer);
          }, (error) => {
            this.fireError(error);
            throw error;
          });
        });
      }
      async doWrite(msg, headers2, data) {
        try {
          await this.writable.write(headers2.join(""), "ascii");
          return this.writable.write(data);
        } catch (error) {
          this.handleError(error, msg);
          return Promise.reject(error);
        }
      }
      handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
      }
      end() {
        this.writable.end();
      }
    }
    exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
  })(messageWriter);
  return messageWriter;
}
var connection$1 = {};
var hasRequiredConnection$1;
function requireConnection$1() {
  if (hasRequiredConnection$1)
    return connection$1;
  hasRequiredConnection$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
    const ral_1 = requireRal();
    const Is2 = requireIs$2();
    const messages_1 = requireMessages$1();
    const linkedMap_1 = requireLinkedMap();
    const events_1 = requireEvents();
    const cancellation_1 = requireCancellation();
    var CancelNotification;
    (function(CancelNotification2) {
      CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
    })(CancelNotification || (CancelNotification = {}));
    var ProgressToken;
    (function(ProgressToken2) {
      function is2(value) {
        return typeof value === "string" || typeof value === "number";
      }
      ProgressToken2.is = is2;
    })(ProgressToken = exports.ProgressToken || (exports.ProgressToken = {}));
    var ProgressNotification;
    (function(ProgressNotification2) {
      ProgressNotification2.type = new messages_1.NotificationType("$/progress");
    })(ProgressNotification || (ProgressNotification = {}));
    class ProgressType {
      constructor() {
      }
    }
    exports.ProgressType = ProgressType;
    var StarRequestHandler;
    (function(StarRequestHandler2) {
      function is2(value) {
        return Is2.func(value);
      }
      StarRequestHandler2.is = is2;
    })(StarRequestHandler || (StarRequestHandler = {}));
    exports.NullLogger = Object.freeze({
      error: () => {
      },
      warn: () => {
      },
      info: () => {
      },
      log: () => {
      }
    });
    var Trace;
    (function(Trace2) {
      Trace2[Trace2["Off"] = 0] = "Off";
      Trace2[Trace2["Messages"] = 1] = "Messages";
      Trace2[Trace2["Compact"] = 2] = "Compact";
      Trace2[Trace2["Verbose"] = 3] = "Verbose";
    })(Trace = exports.Trace || (exports.Trace = {}));
    (function(TraceValues) {
      TraceValues.Off = "off";
      TraceValues.Messages = "messages";
      TraceValues.Compact = "compact";
      TraceValues.Verbose = "verbose";
    })(exports.TraceValues || (exports.TraceValues = {}));
    (function(Trace2) {
      function fromString(value) {
        if (!Is2.string(value)) {
          return Trace2.Off;
        }
        value = value.toLowerCase();
        switch (value) {
          case "off":
            return Trace2.Off;
          case "messages":
            return Trace2.Messages;
          case "compact":
            return Trace2.Compact;
          case "verbose":
            return Trace2.Verbose;
          default:
            return Trace2.Off;
        }
      }
      Trace2.fromString = fromString;
      function toString(value) {
        switch (value) {
          case Trace2.Off:
            return "off";
          case Trace2.Messages:
            return "messages";
          case Trace2.Compact:
            return "compact";
          case Trace2.Verbose:
            return "verbose";
          default:
            return "off";
        }
      }
      Trace2.toString = toString;
    })(Trace = exports.Trace || (exports.Trace = {}));
    var TraceFormat;
    (function(TraceFormat2) {
      TraceFormat2["Text"] = "text";
      TraceFormat2["JSON"] = "json";
    })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
    (function(TraceFormat2) {
      function fromString(value) {
        if (!Is2.string(value)) {
          return TraceFormat2.Text;
        }
        value = value.toLowerCase();
        if (value === "json") {
          return TraceFormat2.JSON;
        } else {
          return TraceFormat2.Text;
        }
      }
      TraceFormat2.fromString = fromString;
    })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
    var SetTraceNotification;
    (function(SetTraceNotification2) {
      SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
    })(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
    var LogTraceNotification;
    (function(LogTraceNotification2) {
      LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
    })(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
    var ConnectionErrors;
    (function(ConnectionErrors2) {
      ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
      ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
      ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
    })(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
    class ConnectionError extends Error {
      constructor(code2, message) {
        super(message);
        this.code = code2;
        Object.setPrototypeOf(this, ConnectionError.prototype);
      }
    }
    exports.ConnectionError = ConnectionError;
    var ConnectionStrategy;
    (function(ConnectionStrategy2) {
      function is2(value) {
        const candidate = value;
        return candidate && Is2.func(candidate.cancelUndispatched);
      }
      ConnectionStrategy2.is = is2;
    })(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
    var CancellationReceiverStrategy;
    (function(CancellationReceiverStrategy2) {
      CancellationReceiverStrategy2.Message = Object.freeze({
        createCancellationTokenSource(_) {
          return new cancellation_1.CancellationTokenSource();
        }
      });
      function is2(value) {
        const candidate = value;
        return candidate && Is2.func(candidate.createCancellationTokenSource);
      }
      CancellationReceiverStrategy2.is = is2;
    })(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
    var CancellationSenderStrategy;
    (function(CancellationSenderStrategy2) {
      CancellationSenderStrategy2.Message = Object.freeze({
        sendCancellation(conn, id2) {
          return conn.sendNotification(CancelNotification.type, { id: id2 });
        },
        cleanup(_) {
        }
      });
      function is2(value) {
        const candidate = value;
        return candidate && Is2.func(candidate.sendCancellation) && Is2.func(candidate.cleanup);
      }
      CancellationSenderStrategy2.is = is2;
    })(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
    var CancellationStrategy;
    (function(CancellationStrategy2) {
      CancellationStrategy2.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
      });
      function is2(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
      }
      CancellationStrategy2.is = is2;
    })(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
    (function(ConnectionOptions) {
      function is2(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
      }
      ConnectionOptions.is = is2;
    })(exports.ConnectionOptions || (exports.ConnectionOptions = {}));
    var ConnectionState;
    (function(ConnectionState2) {
      ConnectionState2[ConnectionState2["New"] = 1] = "New";
      ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
      ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
      ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
    })(ConnectionState || (ConnectionState = {}));
    function createMessageConnection(messageReader2, messageWriter2, _logger, options) {
      const logger = _logger !== void 0 ? _logger : exports.NullLogger;
      let sequenceNumber = 0;
      let notificationSequenceNumber = 0;
      let unknownResponseSequenceNumber = 0;
      const version2 = "2.0";
      let starRequestHandler = void 0;
      const requestHandlers = /* @__PURE__ */ new Map();
      let starNotificationHandler = void 0;
      const notificationHandlers = /* @__PURE__ */ new Map();
      const progressHandlers = /* @__PURE__ */ new Map();
      let timer2;
      let messageQueue = new linkedMap_1.LinkedMap();
      let responsePromises = /* @__PURE__ */ new Map();
      let knownCanceledRequests = /* @__PURE__ */ new Set();
      let requestTokens = /* @__PURE__ */ new Map();
      let trace = Trace.Off;
      let traceFormat = TraceFormat.Text;
      let tracer;
      let state = ConnectionState.New;
      const errorEmitter = new events_1.Emitter();
      const closeEmitter = new events_1.Emitter();
      const unhandledNotificationEmitter = new events_1.Emitter();
      const unhandledProgressEmitter = new events_1.Emitter();
      const disposeEmitter = new events_1.Emitter();
      const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
      function createRequestQueueKey(id2) {
        if (id2 === null) {
          throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return "req-" + id2.toString();
      }
      function createResponseQueueKey(id2) {
        if (id2 === null) {
          return "res-unknown-" + (++unknownResponseSequenceNumber).toString();
        } else {
          return "res-" + id2.toString();
        }
      }
      function createNotificationQueueKey() {
        return "not-" + (++notificationSequenceNumber).toString();
      }
      function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
          queue.set(createRequestQueueKey(message.id), message);
        } else if (messages_1.Message.isResponse(message)) {
          queue.set(createResponseQueueKey(message.id), message);
        } else {
          queue.set(createNotificationQueueKey(), message);
        }
      }
      function cancelUndispatched(_message) {
        return void 0;
      }
      function isListening() {
        return state === ConnectionState.Listening;
      }
      function isClosed() {
        return state === ConnectionState.Closed;
      }
      function isDisposed() {
        return state === ConnectionState.Disposed;
      }
      function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
          state = ConnectionState.Closed;
          closeEmitter.fire(void 0);
        }
      }
      function readErrorHandler(error) {
        errorEmitter.fire([error, void 0, void 0]);
      }
      function writeErrorHandler(data) {
        errorEmitter.fire(data);
      }
      messageReader2.onClose(closeHandler);
      messageReader2.onError(readErrorHandler);
      messageWriter2.onClose(closeHandler);
      messageWriter2.onError(writeErrorHandler);
      function triggerMessageQueue() {
        if (timer2 || messageQueue.size === 0) {
          return;
        }
        timer2 = (0, ral_1.default)().timer.setImmediate(() => {
          timer2 = void 0;
          processMessageQueue();
        });
      }
      function processMessageQueue() {
        if (messageQueue.size === 0) {
          return;
        }
        const message = messageQueue.shift();
        try {
          if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
          } else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
          } else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
          } else {
            handleInvalidMessage(message);
          }
        } finally {
          triggerMessageQueue();
        }
      }
      const callback = (message) => {
        try {
          if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            const key = createRequestQueueKey(cancelId);
            const toCancel = messageQueue.get(key);
            if (messages_1.Message.isRequest(toCancel)) {
              const strategy = options == null ? void 0 : options.connectionStrategy;
              const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
              if (response && (response.error !== void 0 || response.result !== void 0)) {
                messageQueue.delete(key);
                requestTokens.delete(cancelId);
                response.id = toCancel.id;
                traceSendingResponse(response, message.method, Date.now());
                messageWriter2.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                return;
              }
            }
            const cancellationToken = requestTokens.get(cancelId);
            if (cancellationToken !== void 0) {
              cancellationToken.cancel();
              traceReceivedNotification(message);
              return;
            } else {
              knownCanceledRequests.add(cancelId);
            }
          }
          addMessageToQueue(messageQueue, message);
        } finally {
          triggerMessageQueue();
        }
      };
      function handleRequest(requestMessage) {
        if (isDisposed()) {
          return;
        }
        function reply(resultOrError, method, startTime2) {
          const message = {
            jsonrpc: version2,
            id: requestMessage.id
          };
          if (resultOrError instanceof messages_1.ResponseError) {
            message.error = resultOrError.toJson();
          } else {
            message.result = resultOrError === void 0 ? null : resultOrError;
          }
          traceSendingResponse(message, method, startTime2);
          messageWriter2.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime2) {
          const message = {
            jsonrpc: version2,
            id: requestMessage.id,
            error: error.toJson()
          };
          traceSendingResponse(message, method, startTime2);
          messageWriter2.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime2) {
          if (result === void 0) {
            result = null;
          }
          const message = {
            jsonrpc: version2,
            id: requestMessage.id,
            result
          };
          traceSendingResponse(message, method, startTime2);
          messageWriter2.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
          type = element.type;
          requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
          const tokenKey = requestMessage.id ?? String(Date.now());
          const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);
          if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
            cancellationSource.cancel();
          }
          if (requestMessage.id !== null) {
            requestTokens.set(tokenKey, cancellationSource);
          }
          try {
            let handlerResult;
            if (requestHandler) {
              if (requestMessage.params === void 0) {
                if (type !== void 0 && type.numberOfParams !== 0) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                  return;
                }
                handlerResult = requestHandler(cancellationSource.token);
              } else if (Array.isArray(requestMessage.params)) {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                  return;
                }
                handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
              } else {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                  return;
                }
                handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
              }
            } else if (starRequestHandler) {
              handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
            }
            const promise = handlerResult;
            if (!handlerResult) {
              requestTokens.delete(tokenKey);
              replySuccess(handlerResult, requestMessage.method, startTime);
            } else if (promise.then) {
              promise.then((resultOrError) => {
                requestTokens.delete(tokenKey);
                reply(resultOrError, requestMessage.method, startTime);
              }, (error) => {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                  replyError(error, requestMessage.method, startTime);
                } else if (error && Is2.string(error.message)) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                } else {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
              });
            } else {
              requestTokens.delete(tokenKey);
              reply(handlerResult, requestMessage.method, startTime);
            }
          } catch (error) {
            requestTokens.delete(tokenKey);
            if (error instanceof messages_1.ResponseError) {
              reply(error, requestMessage.method, startTime);
            } else if (error && Is2.string(error.message)) {
              replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
            } else {
              replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
            }
          }
        } else {
          replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
      }
      function handleResponse(responseMessage) {
        if (isDisposed()) {
          return;
        }
        if (responseMessage.id === null) {
          if (responseMessage.error) {
            logger.error(`Received response message without id: Error is: 
${JSON.stringify(responseMessage.error, void 0, 4)}`);
          } else {
            logger.error(`Received response message without id. No further error information provided.`);
          }
        } else {
          const key = responseMessage.id;
          const responsePromise = responsePromises.get(key);
          traceReceivedResponse(responseMessage, responsePromise);
          if (responsePromise !== void 0) {
            responsePromises.delete(key);
            try {
              if (responseMessage.error) {
                const error = responseMessage.error;
                responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
              } else if (responseMessage.result !== void 0) {
                responsePromise.resolve(responseMessage.result);
              } else {
                throw new Error("Should never happen.");
              }
            } catch (error) {
              if (error.message) {
                logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
              } else {
                logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
              }
            }
          }
        }
      }
      function handleNotification(message) {
        if (isDisposed()) {
          return;
        }
        let type = void 0;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
          const cancelId = message.params.id;
          knownCanceledRequests.delete(cancelId);
          traceReceivedNotification(message);
          return;
        } else {
          const element = notificationHandlers.get(message.method);
          if (element) {
            notificationHandler = element.handler;
            type = element.type;
          }
        }
        if (notificationHandler || starNotificationHandler) {
          try {
            traceReceivedNotification(message);
            if (notificationHandler) {
              if (message.params === void 0) {
                if (type !== void 0) {
                  if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                  }
                }
                notificationHandler();
              } else if (Array.isArray(message.params)) {
                const params = message.params;
                if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                  notificationHandler({ token: params[0], value: params[1] });
                } else {
                  if (type !== void 0) {
                    if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                      logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                    }
                    if (type.numberOfParams !== message.params.length) {
                      logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                    }
                  }
                  notificationHandler(...params);
                }
              } else {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                  logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                }
                notificationHandler(message.params);
              }
            } else if (starNotificationHandler) {
              starNotificationHandler(message.method, message.params);
            }
          } catch (error) {
            if (error.message) {
              logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
            } else {
              logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
            }
          }
        } else {
          unhandledNotificationEmitter.fire(message);
        }
      }
      function handleInvalidMessage(message) {
        if (!message) {
          logger.error("Received empty message.");
          return;
        }
        logger.error(`Received message which is neither a response nor a notification message:
${JSON.stringify(message, null, 4)}`);
        const responseMessage = message;
        if (Is2.string(responseMessage.id) || Is2.number(responseMessage.id)) {
          const key = responseMessage.id;
          const responseHandler = responsePromises.get(key);
          if (responseHandler) {
            responseHandler.reject(new Error("The received response has neither a result nor an error property."));
          }
        }
      }
      function stringifyTrace(params) {
        if (params === void 0 || params === null) {
          return void 0;
        }
        switch (trace) {
          case Trace.Verbose:
            return JSON.stringify(params, null, 4);
          case Trace.Compact:
            return JSON.stringify(params);
          default:
            return void 0;
        }
      }
      function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
            data = `Params: ${stringifyTrace(message.params)}

`;
          }
          tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        } else {
          logLSPMessage("send-request", message);
        }
      }
      function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.params) {
              data = `Params: ${stringifyTrace(message.params)}

`;
            } else {
              data = "No parameters provided.\n\n";
            }
          }
          tracer.log(`Sending notification '${message.method}'.`, data);
        } else {
          logLSPMessage("send-notification", message);
        }
      }
      function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.error && message.error.data) {
              data = `Error data: ${stringifyTrace(message.error.data)}

`;
            } else {
              if (message.result) {
                data = `Result: ${stringifyTrace(message.result)}

`;
              } else if (message.error === void 0) {
                data = "No result returned.\n\n";
              }
            }
          }
          tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        } else {
          logLSPMessage("send-response", message);
        }
      }
      function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
            data = `Params: ${stringifyTrace(message.params)}

`;
          }
          tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        } else {
          logLSPMessage("receive-request", message);
        }
      }
      function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.params) {
              data = `Params: ${stringifyTrace(message.params)}

`;
            } else {
              data = "No parameters provided.\n\n";
            }
          }
          tracer.log(`Received notification '${message.method}'.`, data);
        } else {
          logLSPMessage("receive-notification", message);
        }
      }
      function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.error && message.error.data) {
              data = `Error data: ${stringifyTrace(message.error.data)}

`;
            } else {
              if (message.result) {
                data = `Result: ${stringifyTrace(message.result)}

`;
              } else if (message.error === void 0) {
                data = "No result returned.\n\n";
              }
            }
          }
          if (responsePromise) {
            const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : "";
            tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
          } else {
            tracer.log(`Received response ${message.id} without active response promise.`, data);
          }
        } else {
          logLSPMessage("receive-response", message);
        }
      }
      function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
          return;
        }
        const lspMessage = {
          isLSPMessage: true,
          type,
          message,
          timestamp: Date.now()
        };
        tracer.log(lspMessage);
      }
      function throwIfClosedOrDisposed() {
        if (isClosed()) {
          throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
        }
        if (isDisposed()) {
          throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
        }
      }
      function throwIfListening() {
        if (isListening()) {
          throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
        }
      }
      function throwIfNotListening() {
        if (!isListening()) {
          throw new Error("Call listen() first.");
        }
      }
      function undefinedToNull(param) {
        if (param === void 0) {
          return null;
        } else {
          return param;
        }
      }
      function nullToUndefined(param) {
        if (param === null) {
          return void 0;
        } else {
          return param;
        }
      }
      function isNamedParam(param) {
        return param !== void 0 && param !== null && !Array.isArray(param) && typeof param === "object";
      }
      function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
          case messages_1.ParameterStructures.auto:
            if (isNamedParam(param)) {
              return nullToUndefined(param);
            } else {
              return [undefinedToNull(param)];
            }
          case messages_1.ParameterStructures.byName:
            if (!isNamedParam(param)) {
              throw new Error(`Received parameters by name but param is not an object literal.`);
            }
            return nullToUndefined(param);
          case messages_1.ParameterStructures.byPosition:
            return [undefinedToNull(param)];
          default:
            throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
      }
      function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
          case 0:
            result = void 0;
            break;
          case 1:
            result = computeSingleParam(type.parameterStructures, params[0]);
            break;
          default:
            result = [];
            for (let i = 0; i < params.length && i < numberOfParams; i++) {
              result.push(undefinedToNull(params[i]));
            }
            if (params.length < numberOfParams) {
              for (let i = params.length; i < numberOfParams; i++) {
                result.push(null);
              }
            }
            break;
        }
        return result;
      }
      const connection2 = {
        sendNotification: (type, ...args) => {
          throwIfClosedOrDisposed();
          let method;
          let messageParams;
          if (Is2.string(type)) {
            method = type;
            const first2 = args[0];
            let paramStart = 0;
            let parameterStructures = messages_1.ParameterStructures.auto;
            if (messages_1.ParameterStructures.is(first2)) {
              paramStart = 1;
              parameterStructures = first2;
            }
            let paramEnd = args.length;
            const numberOfParams = paramEnd - paramStart;
            switch (numberOfParams) {
              case 0:
                messageParams = void 0;
                break;
              case 1:
                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                break;
              default:
                if (parameterStructures === messages_1.ParameterStructures.byName) {
                  throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                }
                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                break;
            }
          } else {
            const params = args;
            method = type.method;
            messageParams = computeMessageParams(type, params);
          }
          const notificationMessage = {
            jsonrpc: version2,
            method,
            params: messageParams
          };
          traceSendingNotification(notificationMessage);
          return messageWriter2.write(notificationMessage).catch(() => logger.error(`Sending notification failed.`));
        },
        onNotification: (type, handler) => {
          throwIfClosedOrDisposed();
          let method;
          if (Is2.func(type)) {
            starNotificationHandler = type;
          } else if (handler) {
            if (Is2.string(type)) {
              method = type;
              notificationHandlers.set(type, { type: void 0, handler });
            } else {
              method = type.method;
              notificationHandlers.set(type.method, { type, handler });
            }
          }
          return {
            dispose: () => {
              if (method !== void 0) {
                notificationHandlers.delete(method);
              } else {
                starNotificationHandler = void 0;
              }
            }
          };
        },
        onProgress: (_type, token, handler) => {
          if (progressHandlers.has(token)) {
            throw new Error(`Progress handler for token ${token} already registered`);
          }
          progressHandlers.set(token, handler);
          return {
            dispose: () => {
              progressHandlers.delete(token);
            }
          };
        },
        sendProgress: (_type, token, value) => {
          return connection2.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
          throwIfClosedOrDisposed();
          throwIfNotListening();
          let method;
          let messageParams;
          let token = void 0;
          if (Is2.string(type)) {
            method = type;
            const first2 = args[0];
            const last2 = args[args.length - 1];
            let paramStart = 0;
            let parameterStructures = messages_1.ParameterStructures.auto;
            if (messages_1.ParameterStructures.is(first2)) {
              paramStart = 1;
              parameterStructures = first2;
            }
            let paramEnd = args.length;
            if (cancellation_1.CancellationToken.is(last2)) {
              paramEnd = paramEnd - 1;
              token = last2;
            }
            const numberOfParams = paramEnd - paramStart;
            switch (numberOfParams) {
              case 0:
                messageParams = void 0;
                break;
              case 1:
                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                break;
              default:
                if (parameterStructures === messages_1.ParameterStructures.byName) {
                  throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                }
                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                break;
            }
          } else {
            const params = args;
            method = type.method;
            messageParams = computeMessageParams(type, params);
            const numberOfParams = type.numberOfParams;
            token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : void 0;
          }
          const id2 = sequenceNumber++;
          let disposable2;
          if (token) {
            disposable2 = token.onCancellationRequested(() => {
              const p2 = cancellationStrategy.sender.sendCancellation(connection2, id2);
              if (p2 === void 0) {
                logger.log(`Received no promise from cancellation strategy when cancelling id ${id2}`);
                return Promise.resolve();
              } else {
                return p2.catch(() => {
                  logger.log(`Sending cancellation messages for id ${id2} failed`);
                });
              }
            });
          }
          const result = new Promise((resolve, reject) => {
            const requestMessage = {
              jsonrpc: version2,
              id: id2,
              method,
              params: messageParams
            };
            const resolveWithCleanup = (r2) => {
              resolve(r2);
              cancellationStrategy.sender.cleanup(id2);
              disposable2 == null ? void 0 : disposable2.dispose();
            };
            const rejectWithCleanup = (r2) => {
              reject(r2);
              cancellationStrategy.sender.cleanup(id2);
              disposable2 == null ? void 0 : disposable2.dispose();
            };
            let responsePromise = { method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
            traceSendingRequest(requestMessage);
            try {
              messageWriter2.write(requestMessage).catch(() => logger.error(`Sending request failed.`));
            } catch (e) {
              responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : "Unknown reason"));
              responsePromise = null;
            }
            if (responsePromise) {
              responsePromises.set(id2, responsePromise);
            }
          });
          return result;
        },
        onRequest: (type, handler) => {
          throwIfClosedOrDisposed();
          let method = null;
          if (StarRequestHandler.is(type)) {
            method = void 0;
            starRequestHandler = type;
          } else if (Is2.string(type)) {
            method = null;
            if (handler !== void 0) {
              method = type;
              requestHandlers.set(type, { handler, type: void 0 });
            }
          } else {
            if (handler !== void 0) {
              method = type.method;
              requestHandlers.set(type.method, { type, handler });
            }
          }
          return {
            dispose: () => {
              if (method === null) {
                return;
              }
              if (method !== void 0) {
                requestHandlers.delete(method);
              } else {
                starRequestHandler = void 0;
              }
            }
          };
        },
        hasPendingResponse: () => {
          return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
          let _sendNotification = false;
          let _traceFormat = TraceFormat.Text;
          if (sendNotificationOrTraceOptions !== void 0) {
            if (Is2.boolean(sendNotificationOrTraceOptions)) {
              _sendNotification = sendNotificationOrTraceOptions;
            } else {
              _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
              _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
            }
          }
          trace = _value;
          traceFormat = _traceFormat;
          if (trace === Trace.Off) {
            tracer = void 0;
          } else {
            tracer = _tracer;
          }
          if (_sendNotification && !isClosed() && !isDisposed()) {
            await connection2.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
          }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
          messageWriter2.end();
        },
        dispose: () => {
          if (isDisposed()) {
            return;
          }
          state = ConnectionState.Disposed;
          disposeEmitter.fire(void 0);
          const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, "Pending response rejected since connection got disposed");
          for (const promise of responsePromises.values()) {
            promise.reject(error);
          }
          responsePromises = /* @__PURE__ */ new Map();
          requestTokens = /* @__PURE__ */ new Map();
          knownCanceledRequests = /* @__PURE__ */ new Set();
          messageQueue = new linkedMap_1.LinkedMap();
          if (Is2.func(messageWriter2.dispose)) {
            messageWriter2.dispose();
          }
          if (Is2.func(messageReader2.dispose)) {
            messageReader2.dispose();
          }
        },
        listen: () => {
          throwIfClosedOrDisposed();
          throwIfListening();
          state = ConnectionState.Listening;
          messageReader2.listen(callback);
        },
        inspect: () => {
          (0, ral_1.default)().console.log("inspect");
        }
      };
      connection2.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        const verbose2 = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose2 ? params.verbose : void 0);
      });
      connection2.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
          handler(params.value);
        } else {
          unhandledProgressEmitter.fire(params);
        }
      });
      return connection2;
    }
    exports.createMessageConnection = createMessageConnection;
  })(connection$1);
  return connection$1;
}
var hasRequiredApi$6;
function requireApi$6() {
  if (hasRequiredApi$6)
    return api$6;
  hasRequiredApi$6 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TraceFormat = exports.TraceValues = exports.Trace = exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
    exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = void 0;
    const messages_1 = requireMessages$1();
    Object.defineProperty(exports, "Message", { enumerable: true, get: function() {
      return messages_1.Message;
    } });
    Object.defineProperty(exports, "RequestType", { enumerable: true, get: function() {
      return messages_1.RequestType;
    } });
    Object.defineProperty(exports, "RequestType0", { enumerable: true, get: function() {
      return messages_1.RequestType0;
    } });
    Object.defineProperty(exports, "RequestType1", { enumerable: true, get: function() {
      return messages_1.RequestType1;
    } });
    Object.defineProperty(exports, "RequestType2", { enumerable: true, get: function() {
      return messages_1.RequestType2;
    } });
    Object.defineProperty(exports, "RequestType3", { enumerable: true, get: function() {
      return messages_1.RequestType3;
    } });
    Object.defineProperty(exports, "RequestType4", { enumerable: true, get: function() {
      return messages_1.RequestType4;
    } });
    Object.defineProperty(exports, "RequestType5", { enumerable: true, get: function() {
      return messages_1.RequestType5;
    } });
    Object.defineProperty(exports, "RequestType6", { enumerable: true, get: function() {
      return messages_1.RequestType6;
    } });
    Object.defineProperty(exports, "RequestType7", { enumerable: true, get: function() {
      return messages_1.RequestType7;
    } });
    Object.defineProperty(exports, "RequestType8", { enumerable: true, get: function() {
      return messages_1.RequestType8;
    } });
    Object.defineProperty(exports, "RequestType9", { enumerable: true, get: function() {
      return messages_1.RequestType9;
    } });
    Object.defineProperty(exports, "ResponseError", { enumerable: true, get: function() {
      return messages_1.ResponseError;
    } });
    Object.defineProperty(exports, "ErrorCodes", { enumerable: true, get: function() {
      return messages_1.ErrorCodes;
    } });
    Object.defineProperty(exports, "NotificationType", { enumerable: true, get: function() {
      return messages_1.NotificationType;
    } });
    Object.defineProperty(exports, "NotificationType0", { enumerable: true, get: function() {
      return messages_1.NotificationType0;
    } });
    Object.defineProperty(exports, "NotificationType1", { enumerable: true, get: function() {
      return messages_1.NotificationType1;
    } });
    Object.defineProperty(exports, "NotificationType2", { enumerable: true, get: function() {
      return messages_1.NotificationType2;
    } });
    Object.defineProperty(exports, "NotificationType3", { enumerable: true, get: function() {
      return messages_1.NotificationType3;
    } });
    Object.defineProperty(exports, "NotificationType4", { enumerable: true, get: function() {
      return messages_1.NotificationType4;
    } });
    Object.defineProperty(exports, "NotificationType5", { enumerable: true, get: function() {
      return messages_1.NotificationType5;
    } });
    Object.defineProperty(exports, "NotificationType6", { enumerable: true, get: function() {
      return messages_1.NotificationType6;
    } });
    Object.defineProperty(exports, "NotificationType7", { enumerable: true, get: function() {
      return messages_1.NotificationType7;
    } });
    Object.defineProperty(exports, "NotificationType8", { enumerable: true, get: function() {
      return messages_1.NotificationType8;
    } });
    Object.defineProperty(exports, "NotificationType9", { enumerable: true, get: function() {
      return messages_1.NotificationType9;
    } });
    Object.defineProperty(exports, "ParameterStructures", { enumerable: true, get: function() {
      return messages_1.ParameterStructures;
    } });
    const linkedMap_1 = requireLinkedMap();
    Object.defineProperty(exports, "LinkedMap", { enumerable: true, get: function() {
      return linkedMap_1.LinkedMap;
    } });
    Object.defineProperty(exports, "LRUCache", { enumerable: true, get: function() {
      return linkedMap_1.LRUCache;
    } });
    Object.defineProperty(exports, "Touch", { enumerable: true, get: function() {
      return linkedMap_1.Touch;
    } });
    const disposable_1 = requireDisposable();
    Object.defineProperty(exports, "Disposable", { enumerable: true, get: function() {
      return disposable_1.Disposable;
    } });
    const events_1 = requireEvents();
    Object.defineProperty(exports, "Event", { enumerable: true, get: function() {
      return events_1.Event;
    } });
    Object.defineProperty(exports, "Emitter", { enumerable: true, get: function() {
      return events_1.Emitter;
    } });
    const cancellation_1 = requireCancellation();
    Object.defineProperty(exports, "CancellationTokenSource", { enumerable: true, get: function() {
      return cancellation_1.CancellationTokenSource;
    } });
    Object.defineProperty(exports, "CancellationToken", { enumerable: true, get: function() {
      return cancellation_1.CancellationToken;
    } });
    const messageReader_1 = requireMessageReader();
    Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function() {
      return messageReader_1.MessageReader;
    } });
    Object.defineProperty(exports, "AbstractMessageReader", { enumerable: true, get: function() {
      return messageReader_1.AbstractMessageReader;
    } });
    Object.defineProperty(exports, "ReadableStreamMessageReader", { enumerable: true, get: function() {
      return messageReader_1.ReadableStreamMessageReader;
    } });
    const messageWriter_1 = requireMessageWriter();
    Object.defineProperty(exports, "MessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.MessageWriter;
    } });
    Object.defineProperty(exports, "AbstractMessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.AbstractMessageWriter;
    } });
    Object.defineProperty(exports, "WriteableStreamMessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.WriteableStreamMessageWriter;
    } });
    const connection_1 = requireConnection$1();
    Object.defineProperty(exports, "ConnectionStrategy", { enumerable: true, get: function() {
      return connection_1.ConnectionStrategy;
    } });
    Object.defineProperty(exports, "ConnectionOptions", { enumerable: true, get: function() {
      return connection_1.ConnectionOptions;
    } });
    Object.defineProperty(exports, "NullLogger", { enumerable: true, get: function() {
      return connection_1.NullLogger;
    } });
    Object.defineProperty(exports, "createMessageConnection", { enumerable: true, get: function() {
      return connection_1.createMessageConnection;
    } });
    Object.defineProperty(exports, "ProgressToken", { enumerable: true, get: function() {
      return connection_1.ProgressToken;
    } });
    Object.defineProperty(exports, "ProgressType", { enumerable: true, get: function() {
      return connection_1.ProgressType;
    } });
    Object.defineProperty(exports, "Trace", { enumerable: true, get: function() {
      return connection_1.Trace;
    } });
    Object.defineProperty(exports, "TraceValues", { enumerable: true, get: function() {
      return connection_1.TraceValues;
    } });
    Object.defineProperty(exports, "TraceFormat", { enumerable: true, get: function() {
      return connection_1.TraceFormat;
    } });
    Object.defineProperty(exports, "SetTraceNotification", { enumerable: true, get: function() {
      return connection_1.SetTraceNotification;
    } });
    Object.defineProperty(exports, "LogTraceNotification", { enumerable: true, get: function() {
      return connection_1.LogTraceNotification;
    } });
    Object.defineProperty(exports, "ConnectionErrors", { enumerable: true, get: function() {
      return connection_1.ConnectionErrors;
    } });
    Object.defineProperty(exports, "ConnectionError", { enumerable: true, get: function() {
      return connection_1.ConnectionError;
    } });
    Object.defineProperty(exports, "CancellationReceiverStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationReceiverStrategy;
    } });
    Object.defineProperty(exports, "CancellationSenderStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationSenderStrategy;
    } });
    Object.defineProperty(exports, "CancellationStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationStrategy;
    } });
    const ral_1 = requireRal();
    exports.RAL = ral_1.default;
  })(api$6);
  return api$6;
}
var hasRequiredMain$2;
function requireMain$2() {
  if (hasRequiredMain$2)
    return main$2;
  hasRequiredMain$2 = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
    const ril_1 = requireRil();
    ril_1.default.install();
    const api_1 = requireApi$6();
    __exportStar(requireApi$6(), exports);
    class BrowserMessageReader extends api_1.AbstractMessageReader {
      constructor(context) {
        super();
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
          this._onData.fire(event.data);
        };
        context.addEventListener("error", (event) => this.fireError(event));
        context.onmessage = this._messageListener;
      }
      listen(callback) {
        return this._onData.event(callback);
      }
    }
    exports.BrowserMessageReader = BrowserMessageReader;
    class BrowserMessageWriter extends api_1.AbstractMessageWriter {
      constructor(context) {
        super();
        this.context = context;
        this.errorCount = 0;
        context.addEventListener("error", (event) => this.fireError(event));
      }
      write(msg) {
        try {
          this.context.postMessage(msg);
          return Promise.resolve();
        } catch (error) {
          this.handleError(error, msg);
          return Promise.reject(error);
        }
      }
      handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
      }
      end() {
      }
    }
    exports.BrowserMessageWriter = BrowserMessageWriter;
    function createMessageConnection(reader, writer, logger, options) {
      if (logger === void 0) {
        logger = api_1.NullLogger;
      }
      if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
      }
      return (0, api_1.createMessageConnection)(reader, writer, logger, options);
    }
    exports.createMessageConnection = createMessageConnection;
  })(main$2);
  return main$2;
}
var browser$1;
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1)
    return browser$1;
  hasRequiredBrowser$1 = 1;
  browser$1 = requireMain$2();
  return browser$1;
}
var api$5 = {};
var DocumentUri;
(function(DocumentUri2) {
  function is2(value) {
    return typeof value === "string";
  }
  DocumentUri2.is = is2;
})(DocumentUri || (DocumentUri = {}));
var URI$1;
(function(URI2) {
  function is2(value) {
    return typeof value === "string";
  }
  URI2.is = is2;
})(URI$1 || (URI$1 = {}));
var integer;
(function(integer2) {
  integer2.MIN_VALUE = -2147483648;
  integer2.MAX_VALUE = 2147483647;
  function is2(value) {
    return typeof value === "number" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;
  }
  integer2.is = is2;
})(integer || (integer = {}));
var uinteger;
(function(uinteger2) {
  uinteger2.MIN_VALUE = 0;
  uinteger2.MAX_VALUE = 2147483647;
  function is2(value) {
    return typeof value === "number" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;
  }
  uinteger2.is = is2;
})(uinteger || (uinteger = {}));
var Position;
(function(Position2) {
  function create(line, character) {
    if (line === Number.MAX_VALUE) {
      line = uinteger.MAX_VALUE;
    }
    if (character === Number.MAX_VALUE) {
      character = uinteger.MAX_VALUE;
    }
    return { line, character };
  }
  Position2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
  }
  Position2.is = is2;
})(Position || (Position = {}));
var Range3;
(function(Range4) {
  function create(one, two, three, four) {
    if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
      return { start: Position.create(one, two), end: Position.create(three, four) };
    } else if (Position.is(one) && Position.is(two)) {
      return { start: one, end: two };
    } else {
      throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
    }
  }
  Range4.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
  }
  Range4.is = is2;
})(Range3 || (Range3 = {}));
var Location;
(function(Location2) {
  function create(uri, range2) {
    return { uri, range: range2 };
  }
  Location2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Range3.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
  }
  Location2.is = is2;
})(Location || (Location = {}));
var LocationLink;
(function(LocationLink2) {
  function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
    return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
  }
  LocationLink2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Range3.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range3.is(candidate.targetSelectionRange) && (Range3.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
  }
  LocationLink2.is = is2;
})(LocationLink || (LocationLink = {}));
var Color;
(function(Color2) {
  function create(red, green, blue, alpha) {
    return {
      red,
      green,
      blue,
      alpha
    };
  }
  Color2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
  }
  Color2.is = is2;
})(Color || (Color = {}));
var ColorInformation;
(function(ColorInformation2) {
  function create(range2, color2) {
    return {
      range: range2,
      color: color2
    };
  }
  ColorInformation2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Range3.is(candidate.range) && Color.is(candidate.color);
  }
  ColorInformation2.is = is2;
})(ColorInformation || (ColorInformation = {}));
var ColorPresentation;
(function(ColorPresentation2) {
  function create(label, textEdit, additionalTextEdits) {
    return {
      label,
      textEdit,
      additionalTextEdits
    };
  }
  ColorPresentation2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
  }
  ColorPresentation2.is = is2;
})(ColorPresentation || (ColorPresentation = {}));
var FoldingRangeKind;
(function(FoldingRangeKind2) {
  FoldingRangeKind2.Comment = "comment";
  FoldingRangeKind2.Imports = "imports";
  FoldingRangeKind2.Region = "region";
})(FoldingRangeKind || (FoldingRangeKind = {}));
var FoldingRange;
(function(FoldingRange2) {
  function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
    var result = {
      startLine,
      endLine
    };
    if (Is.defined(startCharacter)) {
      result.startCharacter = startCharacter;
    }
    if (Is.defined(endCharacter)) {
      result.endCharacter = endCharacter;
    }
    if (Is.defined(kind)) {
      result.kind = kind;
    }
    if (Is.defined(collapsedText)) {
      result.collapsedText = collapsedText;
    }
    return result;
  }
  FoldingRange2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
  }
  FoldingRange2.is = is2;
})(FoldingRange || (FoldingRange = {}));
var DiagnosticRelatedInformation;
(function(DiagnosticRelatedInformation2) {
  function create(location2, message) {
    return {
      location: location2,
      message
    };
  }
  DiagnosticRelatedInformation2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
  }
  DiagnosticRelatedInformation2.is = is2;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
var DiagnosticSeverity;
(function(DiagnosticSeverity2) {
  DiagnosticSeverity2.Error = 1;
  DiagnosticSeverity2.Warning = 2;
  DiagnosticSeverity2.Information = 3;
  DiagnosticSeverity2.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
var DiagnosticTag;
(function(DiagnosticTag2) {
  DiagnosticTag2.Unnecessary = 1;
  DiagnosticTag2.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
var CodeDescription;
(function(CodeDescription2) {
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.string(candidate.href);
  }
  CodeDescription2.is = is2;
})(CodeDescription || (CodeDescription = {}));
var Diagnostic;
(function(Diagnostic2) {
  function create(range2, message, severity, code2, source, relatedInformation) {
    var result = { range: range2, message };
    if (Is.defined(severity)) {
      result.severity = severity;
    }
    if (Is.defined(code2)) {
      result.code = code2;
    }
    if (Is.defined(source)) {
      result.source = source;
    }
    if (Is.defined(relatedInformation)) {
      result.relatedInformation = relatedInformation;
    }
    return result;
  }
  Diagnostic2.create = create;
  function is2(value) {
    var _a2;
    var candidate = value;
    return Is.defined(candidate) && Range3.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a2 = candidate.codeDescription) === null || _a2 === void 0 ? void 0 : _a2.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
  }
  Diagnostic2.is = is2;
})(Diagnostic || (Diagnostic = {}));
var Command;
(function(Command2) {
  function create(title, command2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var result = { title, command: command2 };
    if (Is.defined(args) && args.length > 0) {
      result.arguments = args;
    }
    return result;
  }
  Command2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
  }
  Command2.is = is2;
})(Command || (Command = {}));
var TextEdit;
(function(TextEdit2) {
  function replace(range2, newText) {
    return { range: range2, newText };
  }
  TextEdit2.replace = replace;
  function insert2(position, newText) {
    return { range: { start: position, end: position }, newText };
  }
  TextEdit2.insert = insert2;
  function del(range2) {
    return { range: range2, newText: "" };
  }
  TextEdit2.del = del;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range3.is(candidate.range);
  }
  TextEdit2.is = is2;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function(ChangeAnnotation2) {
  function create(label, needsConfirmation, description) {
    var result = { label };
    if (needsConfirmation !== void 0) {
      result.needsConfirmation = needsConfirmation;
    }
    if (description !== void 0) {
      result.description = description;
    }
    return result;
  }
  ChangeAnnotation2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
  }
  ChangeAnnotation2.is = is2;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function(ChangeAnnotationIdentifier2) {
  function is2(value) {
    var candidate = value;
    return Is.string(candidate);
  }
  ChangeAnnotationIdentifier2.is = is2;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function(AnnotatedTextEdit2) {
  function replace(range2, newText, annotation) {
    return { range: range2, newText, annotationId: annotation };
  }
  AnnotatedTextEdit2.replace = replace;
  function insert2(position, newText, annotation) {
    return { range: { start: position, end: position }, newText, annotationId: annotation };
  }
  AnnotatedTextEdit2.insert = insert2;
  function del(range2, annotation) {
    return { range: range2, newText: "", annotationId: annotation };
  }
  AnnotatedTextEdit2.del = del;
  function is2(value) {
    var candidate = value;
    return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
  }
  AnnotatedTextEdit2.is = is2;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
var TextDocumentEdit;
(function(TextDocumentEdit2) {
  function create(textDocument, edits) {
    return { textDocument, edits };
  }
  TextDocumentEdit2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
  }
  TextDocumentEdit2.is = is2;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function(CreateFile2) {
  function create(uri, options, annotation) {
    var result = {
      kind: "create",
      uri
    };
    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
      result.options = options;
    }
    if (annotation !== void 0) {
      result.annotationId = annotation;
    }
    return result;
  }
  CreateFile2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
  }
  CreateFile2.is = is2;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function(RenameFile2) {
  function create(oldUri, newUri, options, annotation) {
    var result = {
      kind: "rename",
      oldUri,
      newUri
    };
    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
      result.options = options;
    }
    if (annotation !== void 0) {
      result.annotationId = annotation;
    }
    return result;
  }
  RenameFile2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
  }
  RenameFile2.is = is2;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function(DeleteFile2) {
  function create(uri, options, annotation) {
    var result = {
      kind: "delete",
      uri
    };
    if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
      result.options = options;
    }
    if (annotation !== void 0) {
      result.annotationId = annotation;
    }
    return result;
  }
  DeleteFile2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
  }
  DeleteFile2.is = is2;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function(WorkspaceEdit2) {
  function is2(value) {
    var candidate = value;
    return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function(change) {
      if (Is.string(change.kind)) {
        return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
      } else {
        return TextDocumentEdit.is(change);
      }
    }));
  }
  WorkspaceEdit2.is = is2;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = (
  /** @class */
  function() {
    function TextEditChangeImpl2(edits, changeAnnotations) {
      this.edits = edits;
      this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl2.prototype.insert = function(position, newText, annotation) {
      var edit;
      var id2;
      if (annotation === void 0) {
        edit = TextEdit.insert(position, newText);
      } else if (ChangeAnnotationIdentifier.is(annotation)) {
        id2 = annotation;
        edit = AnnotatedTextEdit.insert(position, newText, annotation);
      } else {
        this.assertChangeAnnotations(this.changeAnnotations);
        id2 = this.changeAnnotations.manage(annotation);
        edit = AnnotatedTextEdit.insert(position, newText, id2);
      }
      this.edits.push(edit);
      if (id2 !== void 0) {
        return id2;
      }
    };
    TextEditChangeImpl2.prototype.replace = function(range2, newText, annotation) {
      var edit;
      var id2;
      if (annotation === void 0) {
        edit = TextEdit.replace(range2, newText);
      } else if (ChangeAnnotationIdentifier.is(annotation)) {
        id2 = annotation;
        edit = AnnotatedTextEdit.replace(range2, newText, annotation);
      } else {
        this.assertChangeAnnotations(this.changeAnnotations);
        id2 = this.changeAnnotations.manage(annotation);
        edit = AnnotatedTextEdit.replace(range2, newText, id2);
      }
      this.edits.push(edit);
      if (id2 !== void 0) {
        return id2;
      }
    };
    TextEditChangeImpl2.prototype.delete = function(range2, annotation) {
      var edit;
      var id2;
      if (annotation === void 0) {
        edit = TextEdit.del(range2);
      } else if (ChangeAnnotationIdentifier.is(annotation)) {
        id2 = annotation;
        edit = AnnotatedTextEdit.del(range2, annotation);
      } else {
        this.assertChangeAnnotations(this.changeAnnotations);
        id2 = this.changeAnnotations.manage(annotation);
        edit = AnnotatedTextEdit.del(range2, id2);
      }
      this.edits.push(edit);
      if (id2 !== void 0) {
        return id2;
      }
    };
    TextEditChangeImpl2.prototype.add = function(edit) {
      this.edits.push(edit);
    };
    TextEditChangeImpl2.prototype.all = function() {
      return this.edits;
    };
    TextEditChangeImpl2.prototype.clear = function() {
      this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl2.prototype.assertChangeAnnotations = function(value) {
      if (value === void 0) {
        throw new Error("Text edit change is not configured to manage change annotations.");
      }
    };
    return TextEditChangeImpl2;
  }()
);
var ChangeAnnotations = (
  /** @class */
  function() {
    function ChangeAnnotations2(annotations) {
      this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
      this._counter = 0;
      this._size = 0;
    }
    ChangeAnnotations2.prototype.all = function() {
      return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations2.prototype, "size", {
      get: function() {
        return this._size;
      },
      enumerable: false,
      configurable: true
    });
    ChangeAnnotations2.prototype.manage = function(idOrAnnotation, annotation) {
      var id2;
      if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
        id2 = idOrAnnotation;
      } else {
        id2 = this.nextId();
        annotation = idOrAnnotation;
      }
      if (this._annotations[id2] !== void 0) {
        throw new Error("Id ".concat(id2, " is already in use."));
      }
      if (annotation === void 0) {
        throw new Error("No annotation provided for id ".concat(id2));
      }
      this._annotations[id2] = annotation;
      this._size++;
      return id2;
    };
    ChangeAnnotations2.prototype.nextId = function() {
      this._counter++;
      return this._counter.toString();
    };
    return ChangeAnnotations2;
  }()
);
var WorkspaceChange = (
  /** @class */
  function() {
    function WorkspaceChange2(workspaceEdit) {
      var _this = this;
      this._textEditChanges = /* @__PURE__ */ Object.create(null);
      if (workspaceEdit !== void 0) {
        this._workspaceEdit = workspaceEdit;
        if (workspaceEdit.documentChanges) {
          this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
          workspaceEdit.changeAnnotations = this._changeAnnotations.all();
          workspaceEdit.documentChanges.forEach(function(change) {
            if (TextDocumentEdit.is(change)) {
              var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
              _this._textEditChanges[change.textDocument.uri] = textEditChange;
            }
          });
        } else if (workspaceEdit.changes) {
          Object.keys(workspaceEdit.changes).forEach(function(key) {
            var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
            _this._textEditChanges[key] = textEditChange;
          });
        }
      } else {
        this._workspaceEdit = {};
      }
    }
    Object.defineProperty(WorkspaceChange2.prototype, "edit", {
      /**
       * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
       * use to be returned from a workspace edit operation like rename.
       */
      get: function() {
        this.initDocumentChanges();
        if (this._changeAnnotations !== void 0) {
          if (this._changeAnnotations.size === 0) {
            this._workspaceEdit.changeAnnotations = void 0;
          } else {
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
          }
        }
        return this._workspaceEdit;
      },
      enumerable: false,
      configurable: true
    });
    WorkspaceChange2.prototype.getTextEditChange = function(key) {
      if (OptionalVersionedTextDocumentIdentifier.is(key)) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
          throw new Error("Workspace edit is not configured for document changes.");
        }
        var textDocument = { uri: key.uri, version: key.version };
        var result = this._textEditChanges[textDocument.uri];
        if (!result) {
          var edits = [];
          var textDocumentEdit = {
            textDocument,
            edits
          };
          this._workspaceEdit.documentChanges.push(textDocumentEdit);
          result = new TextEditChangeImpl(edits, this._changeAnnotations);
          this._textEditChanges[textDocument.uri] = result;
        }
        return result;
      } else {
        this.initChanges();
        if (this._workspaceEdit.changes === void 0) {
          throw new Error("Workspace edit is not configured for normal text edit changes.");
        }
        var result = this._textEditChanges[key];
        if (!result) {
          var edits = [];
          this._workspaceEdit.changes[key] = edits;
          result = new TextEditChangeImpl(edits);
          this._textEditChanges[key] = result;
        }
        return result;
      }
    };
    WorkspaceChange2.prototype.initDocumentChanges = function() {
      if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
        this._changeAnnotations = new ChangeAnnotations();
        this._workspaceEdit.documentChanges = [];
        this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
      }
    };
    WorkspaceChange2.prototype.initChanges = function() {
      if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
        this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
      }
    };
    WorkspaceChange2.prototype.createFile = function(uri, optionsOrAnnotation, options) {
      this.initDocumentChanges();
      if (this._workspaceEdit.documentChanges === void 0) {
        throw new Error("Workspace edit is not configured for document changes.");
      }
      var annotation;
      if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
        annotation = optionsOrAnnotation;
      } else {
        options = optionsOrAnnotation;
      }
      var operation;
      var id2;
      if (annotation === void 0) {
        operation = CreateFile.create(uri, options);
      } else {
        id2 = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
        operation = CreateFile.create(uri, options, id2);
      }
      this._workspaceEdit.documentChanges.push(operation);
      if (id2 !== void 0) {
        return id2;
      }
    };
    WorkspaceChange2.prototype.renameFile = function(oldUri, newUri, optionsOrAnnotation, options) {
      this.initDocumentChanges();
      if (this._workspaceEdit.documentChanges === void 0) {
        throw new Error("Workspace edit is not configured for document changes.");
      }
      var annotation;
      if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
        annotation = optionsOrAnnotation;
      } else {
        options = optionsOrAnnotation;
      }
      var operation;
      var id2;
      if (annotation === void 0) {
        operation = RenameFile.create(oldUri, newUri, options);
      } else {
        id2 = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
        operation = RenameFile.create(oldUri, newUri, options, id2);
      }
      this._workspaceEdit.documentChanges.push(operation);
      if (id2 !== void 0) {
        return id2;
      }
    };
    WorkspaceChange2.prototype.deleteFile = function(uri, optionsOrAnnotation, options) {
      this.initDocumentChanges();
      if (this._workspaceEdit.documentChanges === void 0) {
        throw new Error("Workspace edit is not configured for document changes.");
      }
      var annotation;
      if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
        annotation = optionsOrAnnotation;
      } else {
        options = optionsOrAnnotation;
      }
      var operation;
      var id2;
      if (annotation === void 0) {
        operation = DeleteFile.create(uri, options);
      } else {
        id2 = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
        operation = DeleteFile.create(uri, options, id2);
      }
      this._workspaceEdit.documentChanges.push(operation);
      if (id2 !== void 0) {
        return id2;
      }
    };
    return WorkspaceChange2;
  }()
);
var TextDocumentIdentifier;
(function(TextDocumentIdentifier2) {
  function create(uri) {
    return { uri };
  }
  TextDocumentIdentifier2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.string(candidate.uri);
  }
  TextDocumentIdentifier2.is = is2;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
var VersionedTextDocumentIdentifier;
(function(VersionedTextDocumentIdentifier2) {
  function create(uri, version2) {
    return { uri, version: version2 };
  }
  VersionedTextDocumentIdentifier2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
  }
  VersionedTextDocumentIdentifier2.is = is2;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
var OptionalVersionedTextDocumentIdentifier;
(function(OptionalVersionedTextDocumentIdentifier2) {
  function create(uri, version2) {
    return { uri, version: version2 };
  }
  OptionalVersionedTextDocumentIdentifier2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
  }
  OptionalVersionedTextDocumentIdentifier2.is = is2;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
var TextDocumentItem;
(function(TextDocumentItem2) {
  function create(uri, languageId, version2, text) {
    return { uri, languageId, version: version2, text };
  }
  TextDocumentItem2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
  }
  TextDocumentItem2.is = is2;
})(TextDocumentItem || (TextDocumentItem = {}));
var MarkupKind;
(function(MarkupKind2) {
  MarkupKind2.PlainText = "plaintext";
  MarkupKind2.Markdown = "markdown";
  function is2(value) {
    var candidate = value;
    return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
  }
  MarkupKind2.is = is2;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function(MarkupContent2) {
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
  }
  MarkupContent2.is = is2;
})(MarkupContent || (MarkupContent = {}));
var CompletionItemKind;
(function(CompletionItemKind2) {
  CompletionItemKind2.Text = 1;
  CompletionItemKind2.Method = 2;
  CompletionItemKind2.Function = 3;
  CompletionItemKind2.Constructor = 4;
  CompletionItemKind2.Field = 5;
  CompletionItemKind2.Variable = 6;
  CompletionItemKind2.Class = 7;
  CompletionItemKind2.Interface = 8;
  CompletionItemKind2.Module = 9;
  CompletionItemKind2.Property = 10;
  CompletionItemKind2.Unit = 11;
  CompletionItemKind2.Value = 12;
  CompletionItemKind2.Enum = 13;
  CompletionItemKind2.Keyword = 14;
  CompletionItemKind2.Snippet = 15;
  CompletionItemKind2.Color = 16;
  CompletionItemKind2.File = 17;
  CompletionItemKind2.Reference = 18;
  CompletionItemKind2.Folder = 19;
  CompletionItemKind2.EnumMember = 20;
  CompletionItemKind2.Constant = 21;
  CompletionItemKind2.Struct = 22;
  CompletionItemKind2.Event = 23;
  CompletionItemKind2.Operator = 24;
  CompletionItemKind2.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
var InsertTextFormat;
(function(InsertTextFormat2) {
  InsertTextFormat2.PlainText = 1;
  InsertTextFormat2.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
var CompletionItemTag;
(function(CompletionItemTag2) {
  CompletionItemTag2.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
var InsertReplaceEdit;
(function(InsertReplaceEdit2) {
  function create(newText, insert2, replace) {
    return { newText, insert: insert2, replace };
  }
  InsertReplaceEdit2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate && Is.string(candidate.newText) && Range3.is(candidate.insert) && Range3.is(candidate.replace);
  }
  InsertReplaceEdit2.is = is2;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
var InsertTextMode;
(function(InsertTextMode2) {
  InsertTextMode2.asIs = 1;
  InsertTextMode2.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function(CompletionItemLabelDetails2) {
  function is2(value) {
    var candidate = value;
    return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
  }
  CompletionItemLabelDetails2.is = is2;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
var CompletionItem;
(function(CompletionItem2) {
  function create(label) {
    return { label };
  }
  CompletionItem2.create = create;
})(CompletionItem || (CompletionItem = {}));
var CompletionList;
(function(CompletionList2) {
  function create(items, isIncomplete) {
    return { items: items ? items : [], isIncomplete: !!isIncomplete };
  }
  CompletionList2.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function(MarkedString2) {
  function fromPlainText(plainText) {
    return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
  }
  MarkedString2.fromPlainText = fromPlainText;
  function is2(value) {
    var candidate = value;
    return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
  }
  MarkedString2.is = is2;
})(MarkedString || (MarkedString = {}));
var Hover;
(function(Hover2) {
  function is2(value) {
    var candidate = value;
    return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range3.is(value.range));
  }
  Hover2.is = is2;
})(Hover || (Hover = {}));
var ParameterInformation;
(function(ParameterInformation2) {
  function create(label, documentation2) {
    return documentation2 ? { label, documentation: documentation2 } : { label };
  }
  ParameterInformation2.create = create;
})(ParameterInformation || (ParameterInformation = {}));
var SignatureInformation;
(function(SignatureInformation2) {
  function create(label, documentation2) {
    var parameters = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      parameters[_i - 2] = arguments[_i];
    }
    var result = { label };
    if (Is.defined(documentation2)) {
      result.documentation = documentation2;
    }
    if (Is.defined(parameters)) {
      result.parameters = parameters;
    } else {
      result.parameters = [];
    }
    return result;
  }
  SignatureInformation2.create = create;
})(SignatureInformation || (SignatureInformation = {}));
var DocumentHighlightKind;
(function(DocumentHighlightKind2) {
  DocumentHighlightKind2.Text = 1;
  DocumentHighlightKind2.Read = 2;
  DocumentHighlightKind2.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
var DocumentHighlight;
(function(DocumentHighlight2) {
  function create(range2, kind) {
    var result = { range: range2 };
    if (Is.number(kind)) {
      result.kind = kind;
    }
    return result;
  }
  DocumentHighlight2.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
var SymbolKind;
(function(SymbolKind2) {
  SymbolKind2.File = 1;
  SymbolKind2.Module = 2;
  SymbolKind2.Namespace = 3;
  SymbolKind2.Package = 4;
  SymbolKind2.Class = 5;
  SymbolKind2.Method = 6;
  SymbolKind2.Property = 7;
  SymbolKind2.Field = 8;
  SymbolKind2.Constructor = 9;
  SymbolKind2.Enum = 10;
  SymbolKind2.Interface = 11;
  SymbolKind2.Function = 12;
  SymbolKind2.Variable = 13;
  SymbolKind2.Constant = 14;
  SymbolKind2.String = 15;
  SymbolKind2.Number = 16;
  SymbolKind2.Boolean = 17;
  SymbolKind2.Array = 18;
  SymbolKind2.Object = 19;
  SymbolKind2.Key = 20;
  SymbolKind2.Null = 21;
  SymbolKind2.EnumMember = 22;
  SymbolKind2.Struct = 23;
  SymbolKind2.Event = 24;
  SymbolKind2.Operator = 25;
  SymbolKind2.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
var SymbolTag;
(function(SymbolTag2) {
  SymbolTag2.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function(SymbolInformation2) {
  function create(name2, kind, range2, uri, containerName) {
    var result = {
      name: name2,
      kind,
      location: { uri, range: range2 }
    };
    if (containerName) {
      result.containerName = containerName;
    }
    return result;
  }
  SymbolInformation2.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function(WorkspaceSymbol2) {
  function create(name2, kind, uri, range2) {
    return range2 !== void 0 ? { name: name2, kind, location: { uri, range: range2 } } : { name: name2, kind, location: { uri } };
  }
  WorkspaceSymbol2.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function(DocumentSymbol2) {
  function create(name2, detail, kind, range2, selectionRange, children) {
    var result = {
      name: name2,
      detail,
      kind,
      range: range2,
      selectionRange
    };
    if (children !== void 0) {
      result.children = children;
    }
    return result;
  }
  DocumentSymbol2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range3.is(candidate.range) && Range3.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
  }
  DocumentSymbol2.is = is2;
})(DocumentSymbol || (DocumentSymbol = {}));
var CodeActionKind;
(function(CodeActionKind2) {
  CodeActionKind2.Empty = "";
  CodeActionKind2.QuickFix = "quickfix";
  CodeActionKind2.Refactor = "refactor";
  CodeActionKind2.RefactorExtract = "refactor.extract";
  CodeActionKind2.RefactorInline = "refactor.inline";
  CodeActionKind2.RefactorRewrite = "refactor.rewrite";
  CodeActionKind2.Source = "source";
  CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
  CodeActionKind2.SourceFixAll = "source.fixAll";
})(CodeActionKind || (CodeActionKind = {}));
var CodeActionTriggerKind;
(function(CodeActionTriggerKind2) {
  CodeActionTriggerKind2.Invoked = 1;
  CodeActionTriggerKind2.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
var CodeActionContext;
(function(CodeActionContext2) {
  function create(diagnostics, only, triggerKind) {
    var result = { diagnostics };
    if (only !== void 0 && only !== null) {
      result.only = only;
    }
    if (triggerKind !== void 0 && triggerKind !== null) {
      result.triggerKind = triggerKind;
    }
    return result;
  }
  CodeActionContext2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
  }
  CodeActionContext2.is = is2;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function(CodeAction2) {
  function create(title, kindOrCommandOrEdit, kind) {
    var result = { title };
    var checkKind = true;
    if (typeof kindOrCommandOrEdit === "string") {
      checkKind = false;
      result.kind = kindOrCommandOrEdit;
    } else if (Command.is(kindOrCommandOrEdit)) {
      result.command = kindOrCommandOrEdit;
    } else {
      result.edit = kindOrCommandOrEdit;
    }
    if (checkKind && kind !== void 0) {
      result.kind = kind;
    }
    return result;
  }
  CodeAction2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
  }
  CodeAction2.is = is2;
})(CodeAction || (CodeAction = {}));
var CodeLens;
(function(CodeLens2) {
  function create(range2, data) {
    var result = { range: range2 };
    if (Is.defined(data)) {
      result.data = data;
    }
    return result;
  }
  CodeLens2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Range3.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
  }
  CodeLens2.is = is2;
})(CodeLens || (CodeLens = {}));
var FormattingOptions;
(function(FormattingOptions2) {
  function create(tabSize, insertSpaces) {
    return { tabSize, insertSpaces };
  }
  FormattingOptions2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
  }
  FormattingOptions2.is = is2;
})(FormattingOptions || (FormattingOptions = {}));
var DocumentLink;
(function(DocumentLink2) {
  function create(range2, target, data) {
    return { range: range2, target, data };
  }
  DocumentLink2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Range3.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
  }
  DocumentLink2.is = is2;
})(DocumentLink || (DocumentLink = {}));
var SelectionRange2;
(function(SelectionRange3) {
  function create(range2, parent) {
    return { range: range2, parent };
  }
  SelectionRange3.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Range3.is(candidate.range) && (candidate.parent === void 0 || SelectionRange3.is(candidate.parent));
  }
  SelectionRange3.is = is2;
})(SelectionRange2 || (SelectionRange2 = {}));
var SemanticTokenTypes;
(function(SemanticTokenTypes2) {
  SemanticTokenTypes2["namespace"] = "namespace";
  SemanticTokenTypes2["type"] = "type";
  SemanticTokenTypes2["class"] = "class";
  SemanticTokenTypes2["enum"] = "enum";
  SemanticTokenTypes2["interface"] = "interface";
  SemanticTokenTypes2["struct"] = "struct";
  SemanticTokenTypes2["typeParameter"] = "typeParameter";
  SemanticTokenTypes2["parameter"] = "parameter";
  SemanticTokenTypes2["variable"] = "variable";
  SemanticTokenTypes2["property"] = "property";
  SemanticTokenTypes2["enumMember"] = "enumMember";
  SemanticTokenTypes2["event"] = "event";
  SemanticTokenTypes2["function"] = "function";
  SemanticTokenTypes2["method"] = "method";
  SemanticTokenTypes2["macro"] = "macro";
  SemanticTokenTypes2["keyword"] = "keyword";
  SemanticTokenTypes2["modifier"] = "modifier";
  SemanticTokenTypes2["comment"] = "comment";
  SemanticTokenTypes2["string"] = "string";
  SemanticTokenTypes2["number"] = "number";
  SemanticTokenTypes2["regexp"] = "regexp";
  SemanticTokenTypes2["operator"] = "operator";
  SemanticTokenTypes2["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
var SemanticTokenModifiers;
(function(SemanticTokenModifiers2) {
  SemanticTokenModifiers2["declaration"] = "declaration";
  SemanticTokenModifiers2["definition"] = "definition";
  SemanticTokenModifiers2["readonly"] = "readonly";
  SemanticTokenModifiers2["static"] = "static";
  SemanticTokenModifiers2["deprecated"] = "deprecated";
  SemanticTokenModifiers2["abstract"] = "abstract";
  SemanticTokenModifiers2["async"] = "async";
  SemanticTokenModifiers2["modification"] = "modification";
  SemanticTokenModifiers2["documentation"] = "documentation";
  SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
var SemanticTokens;
(function(SemanticTokens2) {
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
  }
  SemanticTokens2.is = is2;
})(SemanticTokens || (SemanticTokens = {}));
var InlineValueText;
(function(InlineValueText2) {
  function create(range2, text) {
    return { range: range2, text };
  }
  InlineValueText2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate !== void 0 && candidate !== null && Range3.is(candidate.range) && Is.string(candidate.text);
  }
  InlineValueText2.is = is2;
})(InlineValueText || (InlineValueText = {}));
var InlineValueVariableLookup;
(function(InlineValueVariableLookup2) {
  function create(range2, variableName, caseSensitiveLookup) {
    return { range: range2, variableName, caseSensitiveLookup };
  }
  InlineValueVariableLookup2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate !== void 0 && candidate !== null && Range3.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
  }
  InlineValueVariableLookup2.is = is2;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
var InlineValueEvaluatableExpression;
(function(InlineValueEvaluatableExpression2) {
  function create(range2, expression) {
    return { range: range2, expression };
  }
  InlineValueEvaluatableExpression2.create = create;
  function is2(value) {
    var candidate = value;
    return candidate !== void 0 && candidate !== null && Range3.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
  }
  InlineValueEvaluatableExpression2.is = is2;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
var InlineValueContext;
(function(InlineValueContext2) {
  function create(frameId, stoppedLocation) {
    return { frameId, stoppedLocation };
  }
  InlineValueContext2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Range3.is(value.stoppedLocation);
  }
  InlineValueContext2.is = is2;
})(InlineValueContext || (InlineValueContext = {}));
var InlayHintKind;
(function(InlayHintKind2) {
  InlayHintKind2.Type = 1;
  InlayHintKind2.Parameter = 2;
  function is2(value) {
    return value === 1 || value === 2;
  }
  InlayHintKind2.is = is2;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function(InlayHintLabelPart2) {
  function create(value) {
    return { value };
  }
  InlayHintLabelPart2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
  }
  InlayHintLabelPart2.is = is2;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function(InlayHint2) {
  function create(position, label, kind) {
    var result = { position, label };
    if (kind !== void 0) {
      result.kind = kind;
    }
    return result;
  }
  InlayHint2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
  }
  InlayHint2.is = is2;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function(WorkspaceFolder2) {
  function is2(value) {
    var candidate = value;
    return Is.objectLiteral(candidate) && URI$1.is(candidate.uri) && Is.string(candidate.name);
  }
  WorkspaceFolder2.is = is2;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var EOL = ["\n", "\r\n", "\r"];
var TextDocument$1;
(function(TextDocument2) {
  function create(uri, languageId, version2, content2) {
    return new FullTextDocument$1(uri, languageId, version2, content2);
  }
  TextDocument2.create = create;
  function is2(value) {
    var candidate = value;
    return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
  }
  TextDocument2.is = is2;
  function applyEdits(document2, edits) {
    var text = document2.getText();
    var sortedEdits = mergeSort2(edits, function(a2, b2) {
      var diff = a2.range.start.line - b2.range.start.line;
      if (diff === 0) {
        return a2.range.start.character - b2.range.start.character;
      }
      return diff;
    });
    var lastModifiedOffset = text.length;
    for (var i = sortedEdits.length - 1; i >= 0; i--) {
      var e = sortedEdits[i];
      var startOffset = document2.offsetAt(e.range.start);
      var endOffset = document2.offsetAt(e.range.end);
      if (endOffset <= lastModifiedOffset) {
        text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
      } else {
        throw new Error("Overlapping edit");
      }
      lastModifiedOffset = startOffset;
    }
    return text;
  }
  TextDocument2.applyEdits = applyEdits;
  function mergeSort2(data, compare2) {
    if (data.length <= 1) {
      return data;
    }
    var p2 = data.length / 2 | 0;
    var left = data.slice(0, p2);
    var right = data.slice(p2);
    mergeSort2(left, compare2);
    mergeSort2(right, compare2);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
      var ret = compare2(left[leftIdx], right[rightIdx]);
      if (ret <= 0) {
        data[i++] = left[leftIdx++];
      } else {
        data[i++] = right[rightIdx++];
      }
    }
    while (leftIdx < left.length) {
      data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
      data[i++] = right[rightIdx++];
    }
    return data;
  }
})(TextDocument$1 || (TextDocument$1 = {}));
var FullTextDocument$1 = (
  /** @class */
  function() {
    function FullTextDocument2(uri, languageId, version2, content2) {
      this._uri = uri;
      this._languageId = languageId;
      this._version = version2;
      this._content = content2;
      this._lineOffsets = void 0;
    }
    Object.defineProperty(FullTextDocument2.prototype, "uri", {
      get: function() {
        return this._uri;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FullTextDocument2.prototype, "languageId", {
      get: function() {
        return this._languageId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FullTextDocument2.prototype, "version", {
      get: function() {
        return this._version;
      },
      enumerable: false,
      configurable: true
    });
    FullTextDocument2.prototype.getText = function(range2) {
      if (range2) {
        var start = this.offsetAt(range2.start);
        var end = this.offsetAt(range2.end);
        return this._content.substring(start, end);
      }
      return this._content;
    };
    FullTextDocument2.prototype.update = function(event, version2) {
      this._content = event.text;
      this._version = version2;
      this._lineOffsets = void 0;
    };
    FullTextDocument2.prototype.getLineOffsets = function() {
      if (this._lineOffsets === void 0) {
        var lineOffsets = [];
        var text = this._content;
        var isLineStart = true;
        for (var i = 0; i < text.length; i++) {
          if (isLineStart) {
            lineOffsets.push(i);
            isLineStart = false;
          }
          var ch = text.charAt(i);
          isLineStart = ch === "\r" || ch === "\n";
          if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
            i++;
          }
        }
        if (isLineStart && text.length > 0) {
          lineOffsets.push(text.length);
        }
        this._lineOffsets = lineOffsets;
      }
      return this._lineOffsets;
    };
    FullTextDocument2.prototype.positionAt = function(offset) {
      offset = Math.max(Math.min(offset, this._content.length), 0);
      var lineOffsets = this.getLineOffsets();
      var low = 0, high = lineOffsets.length;
      if (high === 0) {
        return Position.create(0, offset);
      }
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (lineOffsets[mid] > offset) {
          high = mid;
        } else {
          low = mid + 1;
        }
      }
      var line = low - 1;
      return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument2.prototype.offsetAt = function(position) {
      var lineOffsets = this.getLineOffsets();
      if (position.line >= lineOffsets.length) {
        return this._content.length;
      } else if (position.line < 0) {
        return 0;
      }
      var lineOffset = lineOffsets[position.line];
      var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
      return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument2.prototype, "lineCount", {
      get: function() {
        return this.getLineOffsets().length;
      },
      enumerable: false,
      configurable: true
    });
    return FullTextDocument2;
  }()
);
var Is;
(function(Is2) {
  var toString = Object.prototype.toString;
  function defined(value) {
    return typeof value !== "undefined";
  }
  Is2.defined = defined;
  function undefined$1(value) {
    return typeof value === "undefined";
  }
  Is2.undefined = undefined$1;
  function boolean(value) {
    return value === true || value === false;
  }
  Is2.boolean = boolean;
  function string2(value) {
    return toString.call(value) === "[object String]";
  }
  Is2.string = string2;
  function number2(value) {
    return toString.call(value) === "[object Number]";
  }
  Is2.number = number2;
  function numberRange(value, min, max) {
    return toString.call(value) === "[object Number]" && min <= value && value <= max;
  }
  Is2.numberRange = numberRange;
  function integer2(value) {
    return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
  }
  Is2.integer = integer2;
  function uinteger2(value) {
    return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
  }
  Is2.uinteger = uinteger2;
  function func(value) {
    return toString.call(value) === "[object Function]";
  }
  Is2.func = func;
  function objectLiteral(value) {
    return value !== null && typeof value === "object";
  }
  Is2.objectLiteral = objectLiteral;
  function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
  }
  Is2.typedArray = typedArray;
})(Is || (Is = {}));
const main$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get AnnotatedTextEdit() {
    return AnnotatedTextEdit;
  },
  get ChangeAnnotation() {
    return ChangeAnnotation;
  },
  get ChangeAnnotationIdentifier() {
    return ChangeAnnotationIdentifier;
  },
  get CodeAction() {
    return CodeAction;
  },
  get CodeActionContext() {
    return CodeActionContext;
  },
  get CodeActionKind() {
    return CodeActionKind;
  },
  get CodeActionTriggerKind() {
    return CodeActionTriggerKind;
  },
  get CodeDescription() {
    return CodeDescription;
  },
  get CodeLens() {
    return CodeLens;
  },
  get Color() {
    return Color;
  },
  get ColorInformation() {
    return ColorInformation;
  },
  get ColorPresentation() {
    return ColorPresentation;
  },
  get Command() {
    return Command;
  },
  get CompletionItem() {
    return CompletionItem;
  },
  get CompletionItemKind() {
    return CompletionItemKind;
  },
  get CompletionItemLabelDetails() {
    return CompletionItemLabelDetails;
  },
  get CompletionItemTag() {
    return CompletionItemTag;
  },
  get CompletionList() {
    return CompletionList;
  },
  get CreateFile() {
    return CreateFile;
  },
  get DeleteFile() {
    return DeleteFile;
  },
  get Diagnostic() {
    return Diagnostic;
  },
  get DiagnosticRelatedInformation() {
    return DiagnosticRelatedInformation;
  },
  get DiagnosticSeverity() {
    return DiagnosticSeverity;
  },
  get DiagnosticTag() {
    return DiagnosticTag;
  },
  get DocumentHighlight() {
    return DocumentHighlight;
  },
  get DocumentHighlightKind() {
    return DocumentHighlightKind;
  },
  get DocumentLink() {
    return DocumentLink;
  },
  get DocumentSymbol() {
    return DocumentSymbol;
  },
  get DocumentUri() {
    return DocumentUri;
  },
  EOL,
  get FoldingRange() {
    return FoldingRange;
  },
  get FoldingRangeKind() {
    return FoldingRangeKind;
  },
  get FormattingOptions() {
    return FormattingOptions;
  },
  get Hover() {
    return Hover;
  },
  get InlayHint() {
    return InlayHint;
  },
  get InlayHintKind() {
    return InlayHintKind;
  },
  get InlayHintLabelPart() {
    return InlayHintLabelPart;
  },
  get InlineValueContext() {
    return InlineValueContext;
  },
  get InlineValueEvaluatableExpression() {
    return InlineValueEvaluatableExpression;
  },
  get InlineValueText() {
    return InlineValueText;
  },
  get InlineValueVariableLookup() {
    return InlineValueVariableLookup;
  },
  get InsertReplaceEdit() {
    return InsertReplaceEdit;
  },
  get InsertTextFormat() {
    return InsertTextFormat;
  },
  get InsertTextMode() {
    return InsertTextMode;
  },
  get Location() {
    return Location;
  },
  get LocationLink() {
    return LocationLink;
  },
  get MarkedString() {
    return MarkedString;
  },
  get MarkupContent() {
    return MarkupContent;
  },
  get MarkupKind() {
    return MarkupKind;
  },
  get OptionalVersionedTextDocumentIdentifier() {
    return OptionalVersionedTextDocumentIdentifier;
  },
  get ParameterInformation() {
    return ParameterInformation;
  },
  get Position() {
    return Position;
  },
  get Range() {
    return Range3;
  },
  get RenameFile() {
    return RenameFile;
  },
  get SelectionRange() {
    return SelectionRange2;
  },
  get SemanticTokenModifiers() {
    return SemanticTokenModifiers;
  },
  get SemanticTokenTypes() {
    return SemanticTokenTypes;
  },
  get SemanticTokens() {
    return SemanticTokens;
  },
  get SignatureInformation() {
    return SignatureInformation;
  },
  get SymbolInformation() {
    return SymbolInformation;
  },
  get SymbolKind() {
    return SymbolKind;
  },
  get SymbolTag() {
    return SymbolTag;
  },
  get TextDocument() {
    return TextDocument$1;
  },
  get TextDocumentEdit() {
    return TextDocumentEdit;
  },
  get TextDocumentIdentifier() {
    return TextDocumentIdentifier;
  },
  get TextDocumentItem() {
    return TextDocumentItem;
  },
  get TextEdit() {
    return TextEdit;
  },
  get URI() {
    return URI$1;
  },
  get VersionedTextDocumentIdentifier() {
    return VersionedTextDocumentIdentifier;
  },
  WorkspaceChange,
  get WorkspaceEdit() {
    return WorkspaceEdit;
  },
  get WorkspaceFolder() {
    return WorkspaceFolder;
  },
  get WorkspaceSymbol() {
    return WorkspaceSymbol;
  },
  get integer() {
    return integer;
  },
  get uinteger() {
    return uinteger;
  }
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(main$1);
var messages = {};
var hasRequiredMessages;
function requireMessages() {
  if (hasRequiredMessages)
    return messages;
  hasRequiredMessages = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
    const vscode_jsonrpc_1 = requireMain$2();
    (function(MessageDirection) {
      MessageDirection["clientToServer"] = "clientToServer";
      MessageDirection["serverToClient"] = "serverToClient";
      MessageDirection["both"] = "both";
    })(exports.MessageDirection || (exports.MessageDirection = {}));
    class RegistrationType {
      constructor(method) {
        this.method = method;
      }
    }
    exports.RegistrationType = RegistrationType;
    class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
      constructor(method) {
        super(method);
      }
    }
    exports.ProtocolRequestType0 = ProtocolRequestType0;
    class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
      constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
      }
    }
    exports.ProtocolRequestType = ProtocolRequestType;
    class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
      constructor(method) {
        super(method);
      }
    }
    exports.ProtocolNotificationType0 = ProtocolNotificationType0;
    class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
      constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
      }
    }
    exports.ProtocolNotificationType = ProtocolNotificationType;
  })(messages);
  return messages;
}
var protocol = {};
var is$1 = {};
var hasRequiredIs$1;
function requireIs$1() {
  if (hasRequiredIs$1)
    return is$1;
  hasRequiredIs$1 = 1;
  Object.defineProperty(is$1, "__esModule", { value: true });
  is$1.objectLiteral = is$1.typedArray = is$1.stringArray = is$1.array = is$1.func = is$1.error = is$1.number = is$1.string = is$1.boolean = void 0;
  function boolean(value) {
    return value === true || value === false;
  }
  is$1.boolean = boolean;
  function string2(value) {
    return typeof value === "string" || value instanceof String;
  }
  is$1.string = string2;
  function number2(value) {
    return typeof value === "number" || value instanceof Number;
  }
  is$1.number = number2;
  function error(value) {
    return value instanceof Error;
  }
  is$1.error = error;
  function func(value) {
    return typeof value === "function";
  }
  is$1.func = func;
  function array(value) {
    return Array.isArray(value);
  }
  is$1.array = array;
  function stringArray(value) {
    return array(value) && value.every((elem) => string2(elem));
  }
  is$1.stringArray = stringArray;
  function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
  }
  is$1.typedArray = typedArray;
  function objectLiteral(value) {
    return value !== null && typeof value === "object";
  }
  is$1.objectLiteral = objectLiteral;
  return is$1;
}
var protocol_implementation = {};
var hasRequiredProtocol_implementation;
function requireProtocol_implementation() {
  if (hasRequiredProtocol_implementation)
    return protocol_implementation;
  hasRequiredProtocol_implementation = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImplementationRequest = void 0;
    const messages_1 = requireMessages();
    (function(ImplementationRequest) {
      ImplementationRequest.method = "textDocument/implementation";
      ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
    })(exports.ImplementationRequest || (exports.ImplementationRequest = {}));
  })(protocol_implementation);
  return protocol_implementation;
}
var protocol_typeDefinition = {};
var hasRequiredProtocol_typeDefinition;
function requireProtocol_typeDefinition() {
  if (hasRequiredProtocol_typeDefinition)
    return protocol_typeDefinition;
  hasRequiredProtocol_typeDefinition = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeDefinitionRequest = void 0;
    const messages_1 = requireMessages();
    (function(TypeDefinitionRequest) {
      TypeDefinitionRequest.method = "textDocument/typeDefinition";
      TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
    })(exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));
  })(protocol_typeDefinition);
  return protocol_typeDefinition;
}
var protocol_workspaceFolder = {};
var hasRequiredProtocol_workspaceFolder;
function requireProtocol_workspaceFolder() {
  if (hasRequiredProtocol_workspaceFolder)
    return protocol_workspaceFolder;
  hasRequiredProtocol_workspaceFolder = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
    const messages_1 = requireMessages();
    (function(WorkspaceFoldersRequest) {
      WorkspaceFoldersRequest.method = "workspace/workspaceFolders";
      WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
    })(exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
    (function(DidChangeWorkspaceFoldersNotification) {
      DidChangeWorkspaceFoldersNotification.method = "workspace/didChangeWorkspaceFolders";
      DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
    })(exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));
  })(protocol_workspaceFolder);
  return protocol_workspaceFolder;
}
var protocol_configuration = {};
var hasRequiredProtocol_configuration;
function requireProtocol_configuration() {
  if (hasRequiredProtocol_configuration)
    return protocol_configuration;
  hasRequiredProtocol_configuration = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfigurationRequest = void 0;
    const messages_1 = requireMessages();
    (function(ConfigurationRequest) {
      ConfigurationRequest.method = "workspace/configuration";
      ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
    })(exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));
  })(protocol_configuration);
  return protocol_configuration;
}
var protocol_colorProvider = {};
var hasRequiredProtocol_colorProvider;
function requireProtocol_colorProvider() {
  if (hasRequiredProtocol_colorProvider)
    return protocol_colorProvider;
  hasRequiredProtocol_colorProvider = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
    const messages_1 = requireMessages();
    (function(DocumentColorRequest) {
      DocumentColorRequest.method = "textDocument/documentColor";
      DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
    })(exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
    (function(ColorPresentationRequest) {
      ColorPresentationRequest.method = "textDocument/colorPresentation";
      ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
    })(exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));
  })(protocol_colorProvider);
  return protocol_colorProvider;
}
var protocol_foldingRange = {};
var hasRequiredProtocol_foldingRange;
function requireProtocol_foldingRange() {
  if (hasRequiredProtocol_foldingRange)
    return protocol_foldingRange;
  hasRequiredProtocol_foldingRange = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FoldingRangeRequest = void 0;
    const messages_1 = requireMessages();
    (function(FoldingRangeRequest) {
      FoldingRangeRequest.method = "textDocument/foldingRange";
      FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
    })(exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));
  })(protocol_foldingRange);
  return protocol_foldingRange;
}
var protocol_declaration = {};
var hasRequiredProtocol_declaration;
function requireProtocol_declaration() {
  if (hasRequiredProtocol_declaration)
    return protocol_declaration;
  hasRequiredProtocol_declaration = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeclarationRequest = void 0;
    const messages_1 = requireMessages();
    (function(DeclarationRequest) {
      DeclarationRequest.method = "textDocument/declaration";
      DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
    })(exports.DeclarationRequest || (exports.DeclarationRequest = {}));
  })(protocol_declaration);
  return protocol_declaration;
}
var protocol_selectionRange = {};
var hasRequiredProtocol_selectionRange;
function requireProtocol_selectionRange() {
  if (hasRequiredProtocol_selectionRange)
    return protocol_selectionRange;
  hasRequiredProtocol_selectionRange = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SelectionRangeRequest = void 0;
    const messages_1 = requireMessages();
    (function(SelectionRangeRequest) {
      SelectionRangeRequest.method = "textDocument/selectionRange";
      SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
    })(exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));
  })(protocol_selectionRange);
  return protocol_selectionRange;
}
var protocol_progress = {};
var hasRequiredProtocol_progress;
function requireProtocol_progress() {
  if (hasRequiredProtocol_progress)
    return protocol_progress;
  hasRequiredProtocol_progress = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
    const vscode_jsonrpc_1 = requireMain$2();
    const messages_1 = requireMessages();
    (function(WorkDoneProgress) {
      WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
      function is2(value) {
        return value === WorkDoneProgress.type;
      }
      WorkDoneProgress.is = is2;
    })(exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
    (function(WorkDoneProgressCreateRequest) {
      WorkDoneProgressCreateRequest.method = "window/workDoneProgress/create";
      WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
    })(exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
    (function(WorkDoneProgressCancelNotification) {
      WorkDoneProgressCancelNotification.method = "window/workDoneProgress/cancel";
      WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
    })(exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));
  })(protocol_progress);
  return protocol_progress;
}
var protocol_callHierarchy = {};
var hasRequiredProtocol_callHierarchy;
function requireProtocol_callHierarchy() {
  if (hasRequiredProtocol_callHierarchy)
    return protocol_callHierarchy;
  hasRequiredProtocol_callHierarchy = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
    const messages_1 = requireMessages();
    (function(CallHierarchyPrepareRequest) {
      CallHierarchyPrepareRequest.method = "textDocument/prepareCallHierarchy";
      CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
    })(exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
    (function(CallHierarchyIncomingCallsRequest) {
      CallHierarchyIncomingCallsRequest.method = "callHierarchy/incomingCalls";
      CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
    })(exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
    (function(CallHierarchyOutgoingCallsRequest) {
      CallHierarchyOutgoingCallsRequest.method = "callHierarchy/outgoingCalls";
      CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
    })(exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));
  })(protocol_callHierarchy);
  return protocol_callHierarchy;
}
var protocol_semanticTokens = {};
var hasRequiredProtocol_semanticTokens;
function requireProtocol_semanticTokens() {
  if (hasRequiredProtocol_semanticTokens)
    return protocol_semanticTokens;
  hasRequiredProtocol_semanticTokens = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
    const messages_1 = requireMessages();
    (function(TokenFormat) {
      TokenFormat.Relative = "relative";
    })(exports.TokenFormat || (exports.TokenFormat = {}));
    var SemanticTokensRegistrationType;
    (function(SemanticTokensRegistrationType2) {
      SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
      SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
    })(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
    (function(SemanticTokensRequest) {
      SemanticTokensRequest.method = "textDocument/semanticTokens/full";
      SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
      SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
    })(exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
    (function(SemanticTokensDeltaRequest) {
      SemanticTokensDeltaRequest.method = "textDocument/semanticTokens/full/delta";
      SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
      SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
    })(exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
    (function(SemanticTokensRangeRequest) {
      SemanticTokensRangeRequest.method = "textDocument/semanticTokens/range";
      SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
      SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
    })(exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
    (function(SemanticTokensRefreshRequest) {
      SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
      SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
    })(exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));
  })(protocol_semanticTokens);
  return protocol_semanticTokens;
}
var protocol_showDocument = {};
var hasRequiredProtocol_showDocument;
function requireProtocol_showDocument() {
  if (hasRequiredProtocol_showDocument)
    return protocol_showDocument;
  hasRequiredProtocol_showDocument = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ShowDocumentRequest = void 0;
    const messages_1 = requireMessages();
    (function(ShowDocumentRequest) {
      ShowDocumentRequest.method = "window/showDocument";
      ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
    })(exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));
  })(protocol_showDocument);
  return protocol_showDocument;
}
var protocol_linkedEditingRange = {};
var hasRequiredProtocol_linkedEditingRange;
function requireProtocol_linkedEditingRange() {
  if (hasRequiredProtocol_linkedEditingRange)
    return protocol_linkedEditingRange;
  hasRequiredProtocol_linkedEditingRange = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkedEditingRangeRequest = void 0;
    const messages_1 = requireMessages();
    (function(LinkedEditingRangeRequest) {
      LinkedEditingRangeRequest.method = "textDocument/linkedEditingRange";
      LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
    })(exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));
  })(protocol_linkedEditingRange);
  return protocol_linkedEditingRange;
}
var protocol_fileOperations = {};
var hasRequiredProtocol_fileOperations;
function requireProtocol_fileOperations() {
  if (hasRequiredProtocol_fileOperations)
    return protocol_fileOperations;
  hasRequiredProtocol_fileOperations = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
    const messages_1 = requireMessages();
    (function(FileOperationPatternKind) {
      FileOperationPatternKind.file = "file";
      FileOperationPatternKind.folder = "folder";
    })(exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
    (function(WillCreateFilesRequest) {
      WillCreateFilesRequest.method = "workspace/willCreateFiles";
      WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
    })(exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
    (function(DidCreateFilesNotification) {
      DidCreateFilesNotification.method = "workspace/didCreateFiles";
      DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
    })(exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
    (function(WillRenameFilesRequest) {
      WillRenameFilesRequest.method = "workspace/willRenameFiles";
      WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
    })(exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
    (function(DidRenameFilesNotification) {
      DidRenameFilesNotification.method = "workspace/didRenameFiles";
      DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
    })(exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
    (function(DidDeleteFilesNotification) {
      DidDeleteFilesNotification.method = "workspace/didDeleteFiles";
      DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
    })(exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
    (function(WillDeleteFilesRequest) {
      WillDeleteFilesRequest.method = "workspace/willDeleteFiles";
      WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
    })(exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));
  })(protocol_fileOperations);
  return protocol_fileOperations;
}
var protocol_moniker = {};
var hasRequiredProtocol_moniker;
function requireProtocol_moniker() {
  if (hasRequiredProtocol_moniker)
    return protocol_moniker;
  hasRequiredProtocol_moniker = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
    const messages_1 = requireMessages();
    (function(UniquenessLevel) {
      UniquenessLevel.document = "document";
      UniquenessLevel.project = "project";
      UniquenessLevel.group = "group";
      UniquenessLevel.scheme = "scheme";
      UniquenessLevel.global = "global";
    })(exports.UniquenessLevel || (exports.UniquenessLevel = {}));
    (function(MonikerKind) {
      MonikerKind.$import = "import";
      MonikerKind.$export = "export";
      MonikerKind.local = "local";
    })(exports.MonikerKind || (exports.MonikerKind = {}));
    (function(MonikerRequest) {
      MonikerRequest.method = "textDocument/moniker";
      MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
    })(exports.MonikerRequest || (exports.MonikerRequest = {}));
  })(protocol_moniker);
  return protocol_moniker;
}
var protocol_typeHierarchy = {};
var hasRequiredProtocol_typeHierarchy;
function requireProtocol_typeHierarchy() {
  if (hasRequiredProtocol_typeHierarchy)
    return protocol_typeHierarchy;
  hasRequiredProtocol_typeHierarchy = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
    const messages_1 = requireMessages();
    (function(TypeHierarchyPrepareRequest) {
      TypeHierarchyPrepareRequest.method = "textDocument/prepareTypeHierarchy";
      TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
    })(exports.TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = {}));
    (function(TypeHierarchySupertypesRequest) {
      TypeHierarchySupertypesRequest.method = "typeHierarchy/supertypes";
      TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
    })(exports.TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = {}));
    (function(TypeHierarchySubtypesRequest) {
      TypeHierarchySubtypesRequest.method = "typeHierarchy/subtypes";
      TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
    })(exports.TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = {}));
  })(protocol_typeHierarchy);
  return protocol_typeHierarchy;
}
var protocol_inlineValue = {};
var hasRequiredProtocol_inlineValue;
function requireProtocol_inlineValue() {
  if (hasRequiredProtocol_inlineValue)
    return protocol_inlineValue;
  hasRequiredProtocol_inlineValue = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
    const messages_1 = requireMessages();
    (function(InlineValueRequest) {
      InlineValueRequest.method = "textDocument/inlineValue";
      InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
    })(exports.InlineValueRequest || (exports.InlineValueRequest = {}));
    (function(InlineValueRefreshRequest) {
      InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
      InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
    })(exports.InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = {}));
  })(protocol_inlineValue);
  return protocol_inlineValue;
}
var protocol_inlayHint = {};
var hasRequiredProtocol_inlayHint;
function requireProtocol_inlayHint() {
  if (hasRequiredProtocol_inlayHint)
    return protocol_inlayHint;
  hasRequiredProtocol_inlayHint = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
    const messages_1 = requireMessages();
    (function(InlayHintRequest) {
      InlayHintRequest.method = "textDocument/inlayHint";
      InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
    })(exports.InlayHintRequest || (exports.InlayHintRequest = {}));
    (function(InlayHintResolveRequest) {
      InlayHintResolveRequest.method = "inlayHint/resolve";
      InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
    })(exports.InlayHintResolveRequest || (exports.InlayHintResolveRequest = {}));
    (function(InlayHintRefreshRequest) {
      InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
      InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
    })(exports.InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = {}));
  })(protocol_inlayHint);
  return protocol_inlayHint;
}
var protocol_diagnostic = {};
var hasRequiredProtocol_diagnostic;
function requireProtocol_diagnostic() {
  if (hasRequiredProtocol_diagnostic)
    return protocol_diagnostic;
  hasRequiredProtocol_diagnostic = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
    const vscode_jsonrpc_1 = requireMain$2();
    const Is2 = requireIs$1();
    const messages_1 = requireMessages();
    (function(DiagnosticServerCancellationData) {
      function is2(value) {
        const candidate = value;
        return candidate && Is2.boolean(candidate.retriggerRequest);
      }
      DiagnosticServerCancellationData.is = is2;
    })(exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));
    (function(DocumentDiagnosticReportKind) {
      DocumentDiagnosticReportKind.Full = "full";
      DocumentDiagnosticReportKind.Unchanged = "unchanged";
    })(exports.DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = {}));
    (function(DocumentDiagnosticRequest) {
      DocumentDiagnosticRequest.method = "textDocument/diagnostic";
      DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
      DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
    })(exports.DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = {}));
    (function(WorkspaceDiagnosticRequest) {
      WorkspaceDiagnosticRequest.method = "workspace/diagnostic";
      WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
      WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
    })(exports.WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = {}));
    (function(DiagnosticRefreshRequest) {
      DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
      DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
    })(exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));
  })(protocol_diagnostic);
  return protocol_diagnostic;
}
var protocol_notebook = {};
var hasRequiredProtocol_notebook;
function requireProtocol_notebook() {
  if (hasRequiredProtocol_notebook)
    return protocol_notebook;
  hasRequiredProtocol_notebook = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
    const vscode_languageserver_types_1 = require$$0;
    const Is2 = requireIs$1();
    const messages_1 = requireMessages();
    var NotebookCellKind;
    (function(NotebookCellKind2) {
      NotebookCellKind2.Markup = 1;
      NotebookCellKind2.Code = 2;
      function is2(value) {
        return value === 1 || value === 2;
      }
      NotebookCellKind2.is = is2;
    })(NotebookCellKind = exports.NotebookCellKind || (exports.NotebookCellKind = {}));
    var ExecutionSummary;
    (function(ExecutionSummary2) {
      function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
          result.success = success;
        }
        return result;
      }
      ExecutionSummary2.create = create;
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === void 0 || Is2.boolean(candidate.success));
      }
      ExecutionSummary2.is = is2;
      function equals(one, other) {
        if (one === other) {
          return true;
        }
        if (one === null || one === void 0 || other === null || other === void 0) {
          return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
      }
      ExecutionSummary2.equals = equals;
    })(ExecutionSummary = exports.ExecutionSummary || (exports.ExecutionSummary = {}));
    var NotebookCell;
    (function(NotebookCell2) {
      function create(kind, document2) {
        return { kind, document: document2 };
      }
      NotebookCell2.create = create;
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === void 0 || Is2.objectLiteral(candidate.metadata));
      }
      NotebookCell2.is = is2;
      function diff(one, two) {
        const result = /* @__PURE__ */ new Set();
        if (one.document !== two.document) {
          result.add("document");
        }
        if (one.kind !== two.kind) {
          result.add("kind");
        }
        if (one.executionSummary !== two.executionSummary) {
          result.add("executionSummary");
        }
        if ((one.metadata !== void 0 || two.metadata !== void 0) && !equalsMetadata(one.metadata, two.metadata)) {
          result.add("metadata");
        }
        if ((one.executionSummary !== void 0 || two.executionSummary !== void 0) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
          result.add("executionSummary");
        }
        return result;
      }
      NotebookCell2.diff = diff;
      function equalsMetadata(one, other) {
        if (one === other) {
          return true;
        }
        if (one === null || one === void 0 || other === null || other === void 0) {
          return false;
        }
        if (typeof one !== typeof other) {
          return false;
        }
        if (typeof one !== "object") {
          return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
          return false;
        }
        if (oneArray && otherArray) {
          if (one.length !== other.length) {
            return false;
          }
          for (let i = 0; i < one.length; i++) {
            if (!equalsMetadata(one[i], other[i])) {
              return false;
            }
          }
        }
        if (Is2.objectLiteral(one) && Is2.objectLiteral(other)) {
          const oneKeys = Object.keys(one);
          const otherKeys = Object.keys(other);
          if (oneKeys.length !== otherKeys.length) {
            return false;
          }
          oneKeys.sort();
          otherKeys.sort();
          if (!equalsMetadata(oneKeys, otherKeys)) {
            return false;
          }
          for (let i = 0; i < oneKeys.length; i++) {
            const prop = oneKeys[i];
            if (!equalsMetadata(one[prop], other[prop])) {
              return false;
            }
          }
        }
        return true;
      }
    })(NotebookCell = exports.NotebookCell || (exports.NotebookCell = {}));
    (function(NotebookDocument) {
      function create(uri, notebookType, version2, cells) {
        return { uri, notebookType, version: version2, cells };
      }
      NotebookDocument.create = create;
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && Is2.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is2.typedArray(candidate.cells, NotebookCell.is);
      }
      NotebookDocument.is = is2;
    })(exports.NotebookDocument || (exports.NotebookDocument = {}));
    var NotebookDocumentSyncRegistrationType;
    (function(NotebookDocumentSyncRegistrationType2) {
      NotebookDocumentSyncRegistrationType2.method = "notebookDocument/sync";
      NotebookDocumentSyncRegistrationType2.messageDirection = messages_1.MessageDirection.clientToServer;
      NotebookDocumentSyncRegistrationType2.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType2.method);
    })(NotebookDocumentSyncRegistrationType = exports.NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = {}));
    (function(DidOpenNotebookDocumentNotification) {
      DidOpenNotebookDocumentNotification.method = "notebookDocument/didOpen";
      DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
      DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(exports.DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = {}));
    (function(NotebookCellArrayChange) {
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === void 0 || Is2.typedArray(candidate.cells, NotebookCell.is));
      }
      NotebookCellArrayChange.is = is2;
      function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== void 0) {
          result.cells = cells;
        }
        return result;
      }
      NotebookCellArrayChange.create = create;
    })(exports.NotebookCellArrayChange || (exports.NotebookCellArrayChange = {}));
    (function(DidChangeNotebookDocumentNotification) {
      DidChangeNotebookDocumentNotification.method = "notebookDocument/didChange";
      DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
      DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(exports.DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = {}));
    (function(DidSaveNotebookDocumentNotification) {
      DidSaveNotebookDocumentNotification.method = "notebookDocument/didSave";
      DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
      DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(exports.DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = {}));
    (function(DidCloseNotebookDocumentNotification) {
      DidCloseNotebookDocumentNotification.method = "notebookDocument/didClose";
      DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
      DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(exports.DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = {}));
  })(protocol_notebook);
  return protocol_notebook;
}
var hasRequiredProtocol;
function requireProtocol() {
  if (hasRequiredProtocol)
    return protocol;
  hasRequiredProtocol = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
    exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
    exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = void 0;
    const messages_1 = requireMessages();
    const vscode_languageserver_types_1 = require$$0;
    const Is2 = requireIs$1();
    const protocol_implementation_1 = requireProtocol_implementation();
    Object.defineProperty(exports, "ImplementationRequest", { enumerable: true, get: function() {
      return protocol_implementation_1.ImplementationRequest;
    } });
    const protocol_typeDefinition_1 = requireProtocol_typeDefinition();
    Object.defineProperty(exports, "TypeDefinitionRequest", { enumerable: true, get: function() {
      return protocol_typeDefinition_1.TypeDefinitionRequest;
    } });
    const protocol_workspaceFolder_1 = requireProtocol_workspaceFolder();
    Object.defineProperty(exports, "WorkspaceFoldersRequest", { enumerable: true, get: function() {
      return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
    } });
    Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", { enumerable: true, get: function() {
      return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
    } });
    const protocol_configuration_1 = requireProtocol_configuration();
    Object.defineProperty(exports, "ConfigurationRequest", { enumerable: true, get: function() {
      return protocol_configuration_1.ConfigurationRequest;
    } });
    const protocol_colorProvider_1 = requireProtocol_colorProvider();
    Object.defineProperty(exports, "DocumentColorRequest", { enumerable: true, get: function() {
      return protocol_colorProvider_1.DocumentColorRequest;
    } });
    Object.defineProperty(exports, "ColorPresentationRequest", { enumerable: true, get: function() {
      return protocol_colorProvider_1.ColorPresentationRequest;
    } });
    const protocol_foldingRange_1 = requireProtocol_foldingRange();
    Object.defineProperty(exports, "FoldingRangeRequest", { enumerable: true, get: function() {
      return protocol_foldingRange_1.FoldingRangeRequest;
    } });
    const protocol_declaration_1 = requireProtocol_declaration();
    Object.defineProperty(exports, "DeclarationRequest", { enumerable: true, get: function() {
      return protocol_declaration_1.DeclarationRequest;
    } });
    const protocol_selectionRange_1 = requireProtocol_selectionRange();
    Object.defineProperty(exports, "SelectionRangeRequest", { enumerable: true, get: function() {
      return protocol_selectionRange_1.SelectionRangeRequest;
    } });
    const protocol_progress_1 = requireProtocol_progress();
    Object.defineProperty(exports, "WorkDoneProgress", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgress;
    } });
    Object.defineProperty(exports, "WorkDoneProgressCreateRequest", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgressCreateRequest;
    } });
    Object.defineProperty(exports, "WorkDoneProgressCancelNotification", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgressCancelNotification;
    } });
    const protocol_callHierarchy_1 = requireProtocol_callHierarchy();
    Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
    } });
    Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
    } });
    Object.defineProperty(exports, "CallHierarchyPrepareRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
    } });
    const protocol_semanticTokens_1 = requireProtocol_semanticTokens();
    Object.defineProperty(exports, "TokenFormat", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.TokenFormat;
    } });
    Object.defineProperty(exports, "SemanticTokensRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRequest;
    } });
    Object.defineProperty(exports, "SemanticTokensDeltaRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
    } });
    Object.defineProperty(exports, "SemanticTokensRangeRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRangeRequest;
    } });
    Object.defineProperty(exports, "SemanticTokensRefreshRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
    } });
    Object.defineProperty(exports, "SemanticTokensRegistrationType", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRegistrationType;
    } });
    const protocol_showDocument_1 = requireProtocol_showDocument();
    Object.defineProperty(exports, "ShowDocumentRequest", { enumerable: true, get: function() {
      return protocol_showDocument_1.ShowDocumentRequest;
    } });
    const protocol_linkedEditingRange_1 = requireProtocol_linkedEditingRange();
    Object.defineProperty(exports, "LinkedEditingRangeRequest", { enumerable: true, get: function() {
      return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
    } });
    const protocol_fileOperations_1 = requireProtocol_fileOperations();
    Object.defineProperty(exports, "FileOperationPatternKind", { enumerable: true, get: function() {
      return protocol_fileOperations_1.FileOperationPatternKind;
    } });
    Object.defineProperty(exports, "DidCreateFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidCreateFilesNotification;
    } });
    Object.defineProperty(exports, "WillCreateFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillCreateFilesRequest;
    } });
    Object.defineProperty(exports, "DidRenameFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidRenameFilesNotification;
    } });
    Object.defineProperty(exports, "WillRenameFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillRenameFilesRequest;
    } });
    Object.defineProperty(exports, "DidDeleteFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidDeleteFilesNotification;
    } });
    Object.defineProperty(exports, "WillDeleteFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillDeleteFilesRequest;
    } });
    const protocol_moniker_1 = requireProtocol_moniker();
    Object.defineProperty(exports, "UniquenessLevel", { enumerable: true, get: function() {
      return protocol_moniker_1.UniquenessLevel;
    } });
    Object.defineProperty(exports, "MonikerKind", { enumerable: true, get: function() {
      return protocol_moniker_1.MonikerKind;
    } });
    Object.defineProperty(exports, "MonikerRequest", { enumerable: true, get: function() {
      return protocol_moniker_1.MonikerRequest;
    } });
    const protocol_typeHierarchy_1 = requireProtocol_typeHierarchy();
    Object.defineProperty(exports, "TypeHierarchyPrepareRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
    } });
    Object.defineProperty(exports, "TypeHierarchySubtypesRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
    } });
    Object.defineProperty(exports, "TypeHierarchySupertypesRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
    } });
    const protocol_inlineValue_1 = requireProtocol_inlineValue();
    Object.defineProperty(exports, "InlineValueRequest", { enumerable: true, get: function() {
      return protocol_inlineValue_1.InlineValueRequest;
    } });
    Object.defineProperty(exports, "InlineValueRefreshRequest", { enumerable: true, get: function() {
      return protocol_inlineValue_1.InlineValueRefreshRequest;
    } });
    const protocol_inlayHint_1 = requireProtocol_inlayHint();
    Object.defineProperty(exports, "InlayHintRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintRequest;
    } });
    Object.defineProperty(exports, "InlayHintResolveRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintResolveRequest;
    } });
    Object.defineProperty(exports, "InlayHintRefreshRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintRefreshRequest;
    } });
    const protocol_diagnostic_1 = requireProtocol_diagnostic();
    Object.defineProperty(exports, "DiagnosticServerCancellationData", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DiagnosticServerCancellationData;
    } });
    Object.defineProperty(exports, "DocumentDiagnosticReportKind", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DocumentDiagnosticReportKind;
    } });
    Object.defineProperty(exports, "DocumentDiagnosticRequest", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DocumentDiagnosticRequest;
    } });
    Object.defineProperty(exports, "WorkspaceDiagnosticRequest", { enumerable: true, get: function() {
      return protocol_diagnostic_1.WorkspaceDiagnosticRequest;
    } });
    Object.defineProperty(exports, "DiagnosticRefreshRequest", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DiagnosticRefreshRequest;
    } });
    const protocol_notebook_1 = requireProtocol_notebook();
    Object.defineProperty(exports, "NotebookCellKind", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookCellKind;
    } });
    Object.defineProperty(exports, "ExecutionSummary", { enumerable: true, get: function() {
      return protocol_notebook_1.ExecutionSummary;
    } });
    Object.defineProperty(exports, "NotebookCell", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookCell;
    } });
    Object.defineProperty(exports, "NotebookDocument", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookDocument;
    } });
    Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookDocumentSyncRegistrationType;
    } });
    Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidOpenNotebookDocumentNotification;
    } });
    Object.defineProperty(exports, "NotebookCellArrayChange", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookCellArrayChange;
    } });
    Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidChangeNotebookDocumentNotification;
    } });
    Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidSaveNotebookDocumentNotification;
    } });
    Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidCloseNotebookDocumentNotification;
    } });
    var TextDocumentFilter;
    (function(TextDocumentFilter2) {
      function is2(value) {
        const candidate = value;
        return Is2.string(candidate.language) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern);
      }
      TextDocumentFilter2.is = is2;
    })(TextDocumentFilter = exports.TextDocumentFilter || (exports.TextDocumentFilter = {}));
    var NotebookDocumentFilter;
    (function(NotebookDocumentFilter2) {
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (Is2.string(candidate.notebookType) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern));
      }
      NotebookDocumentFilter2.is = is2;
    })(NotebookDocumentFilter = exports.NotebookDocumentFilter || (exports.NotebookDocumentFilter = {}));
    var NotebookCellTextDocumentFilter;
    (function(NotebookCellTextDocumentFilter2) {
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (Is2.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === void 0 || Is2.string(candidate.language));
      }
      NotebookCellTextDocumentFilter2.is = is2;
    })(NotebookCellTextDocumentFilter = exports.NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = {}));
    var DocumentSelector;
    (function(DocumentSelector2) {
      function is2(value) {
        if (!Array.isArray(value)) {
          return false;
        }
        for (let elem of value) {
          if (!Is2.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
            return false;
          }
        }
        return true;
      }
      DocumentSelector2.is = is2;
    })(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
    (function(RegistrationRequest) {
      RegistrationRequest.method = "client/registerCapability";
      RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
    })(exports.RegistrationRequest || (exports.RegistrationRequest = {}));
    (function(UnregistrationRequest) {
      UnregistrationRequest.method = "client/unregisterCapability";
      UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
    })(exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
    (function(ResourceOperationKind) {
      ResourceOperationKind.Create = "create";
      ResourceOperationKind.Rename = "rename";
      ResourceOperationKind.Delete = "delete";
    })(exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
    (function(FailureHandlingKind) {
      FailureHandlingKind.Abort = "abort";
      FailureHandlingKind.Transactional = "transactional";
      FailureHandlingKind.TextOnlyTransactional = "textOnlyTransactional";
      FailureHandlingKind.Undo = "undo";
    })(exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
    (function(PositionEncodingKind) {
      PositionEncodingKind.UTF8 = "utf-8";
      PositionEncodingKind.UTF16 = "utf-16";
      PositionEncodingKind.UTF32 = "utf-32";
    })(exports.PositionEncodingKind || (exports.PositionEncodingKind = {}));
    (function(StaticRegistrationOptions) {
      function hasId(value) {
        const candidate = value;
        return candidate && Is2.string(candidate.id) && candidate.id.length > 0;
      }
      StaticRegistrationOptions.hasId = hasId;
    })(exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
    (function(TextDocumentRegistrationOptions) {
      function is2(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
      }
      TextDocumentRegistrationOptions.is = is2;
    })(exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
    (function(WorkDoneProgressOptions) {
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is2.boolean(candidate.workDoneProgress));
      }
      WorkDoneProgressOptions.is = is2;
      function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is2.boolean(candidate.workDoneProgress);
      }
      WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
    })(exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
    (function(InitializeRequest) {
      InitializeRequest.method = "initialize";
      InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
    })(exports.InitializeRequest || (exports.InitializeRequest = {}));
    (function(InitializeErrorCodes) {
      InitializeErrorCodes.unknownProtocolVersion = 1;
    })(exports.InitializeErrorCodes || (exports.InitializeErrorCodes = {}));
    (function(InitializedNotification) {
      InitializedNotification.method = "initialized";
      InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
    })(exports.InitializedNotification || (exports.InitializedNotification = {}));
    (function(ShutdownRequest) {
      ShutdownRequest.method = "shutdown";
      ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
    })(exports.ShutdownRequest || (exports.ShutdownRequest = {}));
    (function(ExitNotification) {
      ExitNotification.method = "exit";
      ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
    })(exports.ExitNotification || (exports.ExitNotification = {}));
    (function(DidChangeConfigurationNotification) {
      DidChangeConfigurationNotification.method = "workspace/didChangeConfiguration";
      DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
    })(exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
    (function(MessageType) {
      MessageType.Error = 1;
      MessageType.Warning = 2;
      MessageType.Info = 3;
      MessageType.Log = 4;
    })(exports.MessageType || (exports.MessageType = {}));
    (function(ShowMessageNotification) {
      ShowMessageNotification.method = "window/showMessage";
      ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
      ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
    })(exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
    (function(ShowMessageRequest) {
      ShowMessageRequest.method = "window/showMessageRequest";
      ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
    })(exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
    (function(LogMessageNotification) {
      LogMessageNotification.method = "window/logMessage";
      LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
      LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
    })(exports.LogMessageNotification || (exports.LogMessageNotification = {}));
    (function(TelemetryEventNotification) {
      TelemetryEventNotification.method = "telemetry/event";
      TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
      TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
    })(exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
    (function(TextDocumentSyncKind) {
      TextDocumentSyncKind.None = 0;
      TextDocumentSyncKind.Full = 1;
      TextDocumentSyncKind.Incremental = 2;
    })(exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
    (function(DidOpenTextDocumentNotification) {
      DidOpenTextDocumentNotification.method = "textDocument/didOpen";
      DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
    })(exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
    (function(TextDocumentContentChangeEvent) {
      function isIncremental(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
      }
      TextDocumentContentChangeEvent.isIncremental = isIncremental;
      function isFull(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
      }
      TextDocumentContentChangeEvent.isFull = isFull;
    })(exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
    (function(DidChangeTextDocumentNotification) {
      DidChangeTextDocumentNotification.method = "textDocument/didChange";
      DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
    })(exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
    (function(DidCloseTextDocumentNotification) {
      DidCloseTextDocumentNotification.method = "textDocument/didClose";
      DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
    })(exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
    (function(DidSaveTextDocumentNotification) {
      DidSaveTextDocumentNotification.method = "textDocument/didSave";
      DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
    })(exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
    (function(TextDocumentSaveReason) {
      TextDocumentSaveReason.Manual = 1;
      TextDocumentSaveReason.AfterDelay = 2;
      TextDocumentSaveReason.FocusOut = 3;
    })(exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
    (function(WillSaveTextDocumentNotification) {
      WillSaveTextDocumentNotification.method = "textDocument/willSave";
      WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
    })(exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
    (function(WillSaveTextDocumentWaitUntilRequest) {
      WillSaveTextDocumentWaitUntilRequest.method = "textDocument/willSaveWaitUntil";
      WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
    })(exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
    (function(DidChangeWatchedFilesNotification) {
      DidChangeWatchedFilesNotification.method = "workspace/didChangeWatchedFiles";
      DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
    })(exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
    (function(FileChangeType) {
      FileChangeType.Created = 1;
      FileChangeType.Changed = 2;
      FileChangeType.Deleted = 3;
    })(exports.FileChangeType || (exports.FileChangeType = {}));
    (function(RelativePattern) {
      function is2(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is2.string(candidate.pattern);
      }
      RelativePattern.is = is2;
    })(exports.RelativePattern || (exports.RelativePattern = {}));
    (function(WatchKind) {
      WatchKind.Create = 1;
      WatchKind.Change = 2;
      WatchKind.Delete = 4;
    })(exports.WatchKind || (exports.WatchKind = {}));
    (function(PublishDiagnosticsNotification) {
      PublishDiagnosticsNotification.method = "textDocument/publishDiagnostics";
      PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
      PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
    })(exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
    (function(CompletionTriggerKind) {
      CompletionTriggerKind.Invoked = 1;
      CompletionTriggerKind.TriggerCharacter = 2;
      CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
    })(exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
    (function(CompletionRequest) {
      CompletionRequest.method = "textDocument/completion";
      CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
    })(exports.CompletionRequest || (exports.CompletionRequest = {}));
    (function(CompletionResolveRequest) {
      CompletionResolveRequest.method = "completionItem/resolve";
      CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
    })(exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
    (function(HoverRequest) {
      HoverRequest.method = "textDocument/hover";
      HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
    })(exports.HoverRequest || (exports.HoverRequest = {}));
    (function(SignatureHelpTriggerKind) {
      SignatureHelpTriggerKind.Invoked = 1;
      SignatureHelpTriggerKind.TriggerCharacter = 2;
      SignatureHelpTriggerKind.ContentChange = 3;
    })(exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
    (function(SignatureHelpRequest) {
      SignatureHelpRequest.method = "textDocument/signatureHelp";
      SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
    })(exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
    (function(DefinitionRequest) {
      DefinitionRequest.method = "textDocument/definition";
      DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
    })(exports.DefinitionRequest || (exports.DefinitionRequest = {}));
    (function(ReferencesRequest) {
      ReferencesRequest.method = "textDocument/references";
      ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
    })(exports.ReferencesRequest || (exports.ReferencesRequest = {}));
    (function(DocumentHighlightRequest) {
      DocumentHighlightRequest.method = "textDocument/documentHighlight";
      DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
    })(exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
    (function(DocumentSymbolRequest) {
      DocumentSymbolRequest.method = "textDocument/documentSymbol";
      DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
    })(exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
    (function(CodeActionRequest) {
      CodeActionRequest.method = "textDocument/codeAction";
      CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
    })(exports.CodeActionRequest || (exports.CodeActionRequest = {}));
    (function(CodeActionResolveRequest) {
      CodeActionResolveRequest.method = "codeAction/resolve";
      CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
    })(exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
    (function(WorkspaceSymbolRequest) {
      WorkspaceSymbolRequest.method = "workspace/symbol";
      WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
    })(exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
    (function(WorkspaceSymbolResolveRequest) {
      WorkspaceSymbolResolveRequest.method = "workspaceSymbol/resolve";
      WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
    })(exports.WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = {}));
    (function(CodeLensRequest) {
      CodeLensRequest.method = "textDocument/codeLens";
      CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
    })(exports.CodeLensRequest || (exports.CodeLensRequest = {}));
    (function(CodeLensResolveRequest) {
      CodeLensResolveRequest.method = "codeLens/resolve";
      CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
    })(exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
    (function(CodeLensRefreshRequest) {
      CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
      CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
    })(exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
    (function(DocumentLinkRequest) {
      DocumentLinkRequest.method = "textDocument/documentLink";
      DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
    })(exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
    (function(DocumentLinkResolveRequest) {
      DocumentLinkResolveRequest.method = "documentLink/resolve";
      DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
    })(exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
    (function(DocumentFormattingRequest) {
      DocumentFormattingRequest.method = "textDocument/formatting";
      DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
    })(exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
    (function(DocumentRangeFormattingRequest) {
      DocumentRangeFormattingRequest.method = "textDocument/rangeFormatting";
      DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
    })(exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
    (function(DocumentOnTypeFormattingRequest) {
      DocumentOnTypeFormattingRequest.method = "textDocument/onTypeFormatting";
      DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
    })(exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
    (function(PrepareSupportDefaultBehavior) {
      PrepareSupportDefaultBehavior.Identifier = 1;
    })(exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
    (function(RenameRequest) {
      RenameRequest.method = "textDocument/rename";
      RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
    })(exports.RenameRequest || (exports.RenameRequest = {}));
    (function(PrepareRenameRequest) {
      PrepareRenameRequest.method = "textDocument/prepareRename";
      PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
    })(exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
    (function(ExecuteCommandRequest) {
      ExecuteCommandRequest.method = "workspace/executeCommand";
      ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
      ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
    })(exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
    (function(ApplyWorkspaceEditRequest) {
      ApplyWorkspaceEditRequest.method = "workspace/applyEdit";
      ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
      ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
    })(exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));
  })(protocol);
  return protocol;
}
var connection = {};
var hasRequiredConnection;
function requireConnection() {
  if (hasRequiredConnection)
    return connection;
  hasRequiredConnection = 1;
  Object.defineProperty(connection, "__esModule", { value: true });
  connection.createProtocolConnection = void 0;
  const vscode_jsonrpc_1 = requireMain$2();
  function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
      options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
  }
  connection.createProtocolConnection = createProtocolConnection;
  return connection;
}
var hasRequiredApi$5;
function requireApi$5() {
  if (hasRequiredApi$5)
    return api$5;
  hasRequiredApi$5 = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
    __exportStar(requireMain$2(), exports);
    __exportStar(require$$0, exports);
    __exportStar(requireMessages(), exports);
    __exportStar(requireProtocol(), exports);
    var connection_1 = requireConnection();
    Object.defineProperty(exports, "createProtocolConnection", { enumerable: true, get: function() {
      return connection_1.createProtocolConnection;
    } });
    (function(LSPErrorCodes) {
      LSPErrorCodes.lspReservedErrorRangeStart = -32899;
      LSPErrorCodes.RequestFailed = -32803;
      LSPErrorCodes.ServerCancelled = -32802;
      LSPErrorCodes.ContentModified = -32801;
      LSPErrorCodes.RequestCancelled = -32800;
      LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
    })(exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));
  })(api$5);
  return api$5;
}
var hasRequiredMain$1;
function requireMain$1() {
  if (hasRequiredMain$1)
    return main$3;
  hasRequiredMain$1 = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createProtocolConnection = void 0;
    const browser_1 = requireBrowser$1();
    __exportStar(requireBrowser$1(), exports);
    __exportStar(requireApi$5(), exports);
    function createProtocolConnection(reader, writer, logger, options) {
      return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
    }
    exports.createProtocolConnection = createProtocolConnection;
  })(main$3);
  return main$3;
}
var hasRequiredSemanticTokens;
function requireSemanticTokens() {
  if (hasRequiredSemanticTokens)
    return semanticTokens;
  hasRequiredSemanticTokens = 1;
  Object.defineProperty(semanticTokens, "__esModule", { value: true });
  semanticTokens.SemanticTokensBuilder = semanticTokens.SemanticTokensDiff = semanticTokens.SemanticTokensFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const SemanticTokensFeature = (Base) => {
    return class extends Base {
      get semanticTokens() {
        return {
          refresh: () => {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);
          },
          on: (handler) => {
            const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          },
          onDelta: (handler) => {
            const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          },
          onRange: (handler) => {
            const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          }
        };
      }
    };
  };
  semanticTokens.SemanticTokensFeature = SemanticTokensFeature;
  class SemanticTokensDiff {
    constructor(originalSequence, modifiedSequence) {
      this.originalSequence = originalSequence;
      this.modifiedSequence = modifiedSequence;
    }
    computeDiff() {
      const originalLength = this.originalSequence.length;
      const modifiedLength = this.modifiedSequence.length;
      let startIndex = 0;
      while (startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]) {
        startIndex++;
      }
      if (startIndex < modifiedLength && startIndex < originalLength) {
        let originalEndIndex = originalLength - 1;
        let modifiedEndIndex = modifiedLength - 1;
        while (originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]) {
          originalEndIndex--;
          modifiedEndIndex--;
        }
        if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {
          originalEndIndex++;
          modifiedEndIndex++;
        }
        const deleteCount = originalEndIndex - startIndex + 1;
        const newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);
        if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {
          return [
            { start: startIndex, deleteCount: deleteCount - 1 }
          ];
        } else {
          return [
            { start: startIndex, deleteCount, data: newData }
          ];
        }
      } else if (startIndex < modifiedLength) {
        return [
          { start: startIndex, deleteCount: 0, data: this.modifiedSequence.slice(startIndex) }
        ];
      } else if (startIndex < originalLength) {
        return [
          { start: startIndex, deleteCount: originalLength - startIndex }
        ];
      } else {
        return [];
      }
    }
  }
  semanticTokens.SemanticTokensDiff = SemanticTokensDiff;
  class SemanticTokensBuilder {
    constructor() {
      this._prevData = void 0;
      this.initialize();
    }
    initialize() {
      this._id = Date.now();
      this._prevLine = 0;
      this._prevChar = 0;
      this._data = [];
      this._dataLen = 0;
    }
    push(line, char, length, tokenType, tokenModifiers) {
      let pushLine = line;
      let pushChar = char;
      if (this._dataLen > 0) {
        pushLine -= this._prevLine;
        if (pushLine === 0) {
          pushChar -= this._prevChar;
        }
      }
      this._data[this._dataLen++] = pushLine;
      this._data[this._dataLen++] = pushChar;
      this._data[this._dataLen++] = length;
      this._data[this._dataLen++] = tokenType;
      this._data[this._dataLen++] = tokenModifiers;
      this._prevLine = line;
      this._prevChar = char;
    }
    get id() {
      return this._id.toString();
    }
    previousResult(id2) {
      if (this.id === id2) {
        this._prevData = this._data;
      }
      this.initialize();
    }
    build() {
      this._prevData = void 0;
      return {
        resultId: this.id,
        data: this._data
      };
    }
    canBuildEdits() {
      return this._prevData !== void 0;
    }
    buildEdits() {
      if (this._prevData !== void 0) {
        return {
          resultId: this.id,
          edits: new SemanticTokensDiff(this._prevData, this._data).computeDiff()
        };
      } else {
        return this.build();
      }
    }
  }
  semanticTokens.SemanticTokensBuilder = SemanticTokensBuilder;
  return semanticTokens;
}
var textDocuments = {};
var hasRequiredTextDocuments;
function requireTextDocuments() {
  if (hasRequiredTextDocuments)
    return textDocuments;
  hasRequiredTextDocuments = 1;
  Object.defineProperty(textDocuments, "__esModule", { value: true });
  textDocuments.TextDocuments = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  class TextDocuments {
    /**
     * Create a new text document manager.
     */
    constructor(configuration2) {
      this._configuration = configuration2;
      this._syncedDocuments = /* @__PURE__ */ new Map();
      this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
      this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
      this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
      this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
      this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened.
     */
    get onDidOpen() {
      return this._onDidOpen.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened or the content changes.
     */
    get onDidChangeContent() {
      return this._onDidChangeContent.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * will be saved.
     */
    get onWillSave() {
      return this._onWillSave.event;
    }
    /**
     * Sets a handler that will be called if a participant wants to provide
     * edits during a text document save.
     */
    onWillSaveWaitUntil(handler) {
      this._willSaveWaitUntil = handler;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been saved.
     */
    get onDidSave() {
      return this._onDidSave.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been closed.
     */
    get onDidClose() {
      return this._onDidClose.event;
    }
    /**
     * Returns the document for the given URI. Returns undefined if
     * the document is not managed by this instance.
     *
     * @param uri The text document's URI to retrieve.
     * @return the text document or `undefined`.
     */
    get(uri) {
      return this._syncedDocuments.get(uri);
    }
    /**
     * Returns all text documents managed by this instance.
     *
     * @return all text documents.
     */
    all() {
      return Array.from(this._syncedDocuments.values());
    }
    /**
     * Returns the URIs of all text documents managed by this instance.
     *
     * @return the URI's of all text documents.
     */
    keys() {
      return Array.from(this._syncedDocuments.keys());
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the text documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
     * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
     *
     * Use the corresponding events on the TextDocuments instance instead.
     *
     * @param connection The connection to listen on.
     */
    listen(connection2) {
      connection2.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;
      const disposables = [];
      disposables.push(connection2.onDidOpenTextDocument((event) => {
        const td = event.textDocument;
        const document2 = this._configuration.create(td.uri, td.languageId, td.version, td.text);
        this._syncedDocuments.set(td.uri, document2);
        const toFire = Object.freeze({ document: document2 });
        this._onDidOpen.fire(toFire);
        this._onDidChangeContent.fire(toFire);
      }));
      disposables.push(connection2.onDidChangeTextDocument((event) => {
        const td = event.textDocument;
        const changes = event.contentChanges;
        if (changes.length === 0) {
          return;
        }
        const { version: version2 } = td;
        if (version2 === null || version2 === void 0) {
          throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
        }
        let syncedDocument = this._syncedDocuments.get(td.uri);
        if (syncedDocument !== void 0) {
          syncedDocument = this._configuration.update(syncedDocument, changes, version2);
          this._syncedDocuments.set(td.uri, syncedDocument);
          this._onDidChangeContent.fire(Object.freeze({ document: syncedDocument }));
        }
      }));
      disposables.push(connection2.onDidCloseTextDocument((event) => {
        let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
        if (syncedDocument !== void 0) {
          this._syncedDocuments.delete(event.textDocument.uri);
          this._onDidClose.fire(Object.freeze({ document: syncedDocument }));
        }
      }));
      disposables.push(connection2.onWillSaveTextDocument((event) => {
        let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
        if (syncedDocument !== void 0) {
          this._onWillSave.fire(Object.freeze({ document: syncedDocument, reason: event.reason }));
        }
      }));
      disposables.push(connection2.onWillSaveTextDocumentWaitUntil((event, token) => {
        let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
        if (syncedDocument !== void 0 && this._willSaveWaitUntil) {
          return this._willSaveWaitUntil(Object.freeze({ document: syncedDocument, reason: event.reason }), token);
        } else {
          return [];
        }
      }));
      disposables.push(connection2.onDidSaveTextDocument((event) => {
        let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
        if (syncedDocument !== void 0) {
          this._onDidSave.fire(Object.freeze({ document: syncedDocument }));
        }
      }));
      return vscode_languageserver_protocol_1.Disposable.create(() => {
        disposables.forEach((disposable2) => disposable2.dispose());
      });
    }
  }
  textDocuments.TextDocuments = TextDocuments;
  return textDocuments;
}
var notebook = {};
var hasRequiredNotebook;
function requireNotebook() {
  if (hasRequiredNotebook)
    return notebook;
  hasRequiredNotebook = 1;
  Object.defineProperty(notebook, "__esModule", { value: true });
  notebook.NotebookDocuments = notebook.NotebookSyncFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const textDocuments_1 = requireTextDocuments();
  const NotebookSyncFeature = (Base) => {
    return class extends Base {
      get synchronization() {
        return {
          onDidOpenNotebookDocument: (handler) => {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidOpenNotebookDocumentNotification.type, (params) => {
              handler(params);
            });
          },
          onDidChangeNotebookDocument: (handler) => {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeNotebookDocumentNotification.type, (params) => {
              handler(params);
            });
          },
          onDidSaveNotebookDocument: (handler) => {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidSaveNotebookDocumentNotification.type, (params) => {
              handler(params);
            });
          },
          onDidCloseNotebookDocument: (handler) => {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidCloseNotebookDocumentNotification.type, (params) => {
              handler(params);
            });
          }
        };
      }
    };
  };
  notebook.NotebookSyncFeature = NotebookSyncFeature;
  class CellTextDocumentConnection {
    onDidOpenTextDocument(handler) {
      this.openHandler = handler;
      return vscode_languageserver_protocol_1.Disposable.create(() => {
        this.openHandler = void 0;
      });
    }
    openTextDocument(params) {
      this.openHandler && this.openHandler(params);
    }
    onDidChangeTextDocument(handler) {
      this.changeHandler = handler;
      return vscode_languageserver_protocol_1.Disposable.create(() => {
        this.changeHandler = handler;
      });
    }
    changeTextDocument(params) {
      this.changeHandler && this.changeHandler(params);
    }
    onDidCloseTextDocument(handler) {
      this.closeHandler = handler;
      return vscode_languageserver_protocol_1.Disposable.create(() => {
        this.closeHandler = void 0;
      });
    }
    closeTextDocument(params) {
      this.closeHandler && this.closeHandler(params);
    }
    onWillSaveTextDocument() {
      return CellTextDocumentConnection.NULL_DISPOSE;
    }
    onWillSaveTextDocumentWaitUntil() {
      return CellTextDocumentConnection.NULL_DISPOSE;
    }
    onDidSaveTextDocument() {
      return CellTextDocumentConnection.NULL_DISPOSE;
    }
  }
  CellTextDocumentConnection.NULL_DISPOSE = Object.freeze({ dispose: () => {
  } });
  class NotebookDocuments {
    constructor(configurationOrTextDocuments) {
      if (configurationOrTextDocuments instanceof textDocuments_1.TextDocuments) {
        this._cellTextDocuments = configurationOrTextDocuments;
      } else {
        this._cellTextDocuments = new textDocuments_1.TextDocuments(configurationOrTextDocuments);
      }
      this.notebookDocuments = /* @__PURE__ */ new Map();
      this.notebookCellMap = /* @__PURE__ */ new Map();
      this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
      this._onDidChange = new vscode_languageserver_protocol_1.Emitter();
      this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
      this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
    }
    get cellTextDocuments() {
      return this._cellTextDocuments;
    }
    getCellTextDocument(cell) {
      return this._cellTextDocuments.get(cell.document);
    }
    getNotebookDocument(uri) {
      return this.notebookDocuments.get(uri);
    }
    getNotebookCell(uri) {
      const value = this.notebookCellMap.get(uri);
      return value && value[0];
    }
    findNotebookDocumentForCell(cell) {
      const key = typeof cell === "string" ? cell : cell.document;
      const value = this.notebookCellMap.get(key);
      return value && value[1];
    }
    get onDidOpen() {
      return this._onDidOpen.event;
    }
    get onDidSave() {
      return this._onDidSave.event;
    }
    get onDidChange() {
      return this._onDidChange.event;
    }
    get onDidClose() {
      return this._onDidClose.event;
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the notebook documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenNotebookDocument`, `onDidChangeNotebookDocument`, `onDidSaveNotebookDocument`,
     *  and `onDidCloseNotebookDocument`.
     *
     * @param connection The connection to listen on.
     */
    listen(connection2) {
      const cellTextDocumentConnection = new CellTextDocumentConnection();
      const disposables = [];
      disposables.push(this.cellTextDocuments.listen(cellTextDocumentConnection));
      disposables.push(connection2.notebooks.synchronization.onDidOpenNotebookDocument((params) => {
        this.notebookDocuments.set(params.notebookDocument.uri, params.notebookDocument);
        for (const cellTextDocument of params.cellTextDocuments) {
          cellTextDocumentConnection.openTextDocument({ textDocument: cellTextDocument });
        }
        this.updateCellMap(params.notebookDocument);
        this._onDidOpen.fire(params.notebookDocument);
      }));
      disposables.push(connection2.notebooks.synchronization.onDidChangeNotebookDocument((params) => {
        const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
        if (notebookDocument === void 0) {
          return;
        }
        notebookDocument.version = params.notebookDocument.version;
        const oldMetadata = notebookDocument.metadata;
        let metadataChanged = false;
        const change = params.change;
        if (change.metadata !== void 0) {
          metadataChanged = true;
          notebookDocument.metadata = change.metadata;
        }
        const opened = [];
        const closed = [];
        const data = [];
        const text = [];
        if (change.cells !== void 0) {
          const changedCells = change.cells;
          if (changedCells.structure !== void 0) {
            const array = changedCells.structure.array;
            notebookDocument.cells.splice(array.start, array.deleteCount, ...array.cells !== void 0 ? array.cells : []);
            if (changedCells.structure.didOpen !== void 0) {
              for (const open of changedCells.structure.didOpen) {
                cellTextDocumentConnection.openTextDocument({ textDocument: open });
                opened.push(open.uri);
              }
            }
            if (changedCells.structure.didClose) {
              for (const close of changedCells.structure.didClose) {
                cellTextDocumentConnection.closeTextDocument({ textDocument: close });
                closed.push(close.uri);
              }
            }
          }
          if (changedCells.data !== void 0) {
            const cellUpdates = new Map(changedCells.data.map((cell) => [cell.document, cell]));
            for (let i = 0; i <= notebookDocument.cells.length; i++) {
              const change2 = cellUpdates.get(notebookDocument.cells[i].document);
              if (change2 !== void 0) {
                const old = notebookDocument.cells.splice(i, 1, change2);
                data.push({ old: old[0], new: change2 });
                cellUpdates.delete(change2.document);
                if (cellUpdates.size === 0) {
                  break;
                }
              }
            }
          }
          if (changedCells.textContent !== void 0) {
            for (const cellTextDocument of changedCells.textContent) {
              cellTextDocumentConnection.changeTextDocument({ textDocument: cellTextDocument.document, contentChanges: cellTextDocument.changes });
              text.push(cellTextDocument.document.uri);
            }
          }
        }
        this.updateCellMap(notebookDocument);
        const changeEvent = { notebookDocument };
        if (metadataChanged) {
          changeEvent.metadata = { old: oldMetadata, new: notebookDocument.metadata };
        }
        const added = [];
        for (const open of opened) {
          added.push(this.getNotebookCell(open));
        }
        const removed = [];
        for (const close of closed) {
          removed.push(this.getNotebookCell(close));
        }
        const textContent = [];
        for (const change2 of text) {
          textContent.push(this.getNotebookCell(change2));
        }
        if (added.length > 0 || removed.length > 0 || data.length > 0 || textContent.length > 0) {
          changeEvent.cells = { added, removed, changed: { data, textContent } };
        }
        if (changeEvent.metadata !== void 0 || changeEvent.cells !== void 0) {
          this._onDidChange.fire(changeEvent);
        }
      }));
      disposables.push(connection2.notebooks.synchronization.onDidSaveNotebookDocument((params) => {
        const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
        if (notebookDocument === void 0) {
          return;
        }
        this._onDidSave.fire(notebookDocument);
      }));
      disposables.push(connection2.notebooks.synchronization.onDidCloseNotebookDocument((params) => {
        const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
        if (notebookDocument === void 0) {
          return;
        }
        this._onDidClose.fire(notebookDocument);
        for (const cellTextDocument of params.cellTextDocuments) {
          cellTextDocumentConnection.closeTextDocument({ textDocument: cellTextDocument });
        }
        this.notebookDocuments.delete(params.notebookDocument.uri);
        for (const cell of notebookDocument.cells) {
          this.notebookCellMap.delete(cell.document);
        }
      }));
      return vscode_languageserver_protocol_1.Disposable.create(() => {
        disposables.forEach((disposable2) => disposable2.dispose());
      });
    }
    updateCellMap(notebookDocument) {
      for (const cell of notebookDocument.cells) {
        this.notebookCellMap.set(cell.document, [cell, notebookDocument]);
      }
    }
  }
  notebook.NotebookDocuments = NotebookDocuments;
  return notebook;
}
var server = {};
var is = {};
var hasRequiredIs;
function requireIs() {
  if (hasRequiredIs)
    return is;
  hasRequiredIs = 1;
  Object.defineProperty(is, "__esModule", { value: true });
  is.thenable = is.typedArray = is.stringArray = is.array = is.func = is.error = is.number = is.string = is.boolean = void 0;
  function boolean(value) {
    return value === true || value === false;
  }
  is.boolean = boolean;
  function string2(value) {
    return typeof value === "string" || value instanceof String;
  }
  is.string = string2;
  function number2(value) {
    return typeof value === "number" || value instanceof Number;
  }
  is.number = number2;
  function error(value) {
    return value instanceof Error;
  }
  is.error = error;
  function func(value) {
    return typeof value === "function";
  }
  is.func = func;
  function array(value) {
    return Array.isArray(value);
  }
  is.array = array;
  function stringArray(value) {
    return array(value) && value.every((elem) => string2(elem));
  }
  is.stringArray = stringArray;
  function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
  }
  is.typedArray = typedArray;
  function thenable(value) {
    return value && func(value.then);
  }
  is.thenable = thenable;
  return is;
}
var uuid = {};
var hasRequiredUuid;
function requireUuid() {
  if (hasRequiredUuid)
    return uuid;
  hasRequiredUuid = 1;
  Object.defineProperty(uuid, "__esModule", { value: true });
  uuid.generateUuid = uuid.parse = uuid.isUUID = uuid.v4 = uuid.empty = void 0;
  class ValueUUID {
    constructor(_value) {
      this._value = _value;
    }
    asHex() {
      return this._value;
    }
    equals(other) {
      return this.asHex() === other.asHex();
    }
  }
  class V4UUID extends ValueUUID {
    constructor() {
      super([
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        "-",
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        "-",
        "4",
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        "-",
        V4UUID._oneOf(V4UUID._timeHighBits),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        "-",
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex(),
        V4UUID._randomHex()
      ].join(""));
    }
    static _oneOf(array) {
      return array[Math.floor(array.length * Math.random())];
    }
    static _randomHex() {
      return V4UUID._oneOf(V4UUID._chars);
    }
  }
  V4UUID._chars = ["0", "1", "2", "3", "4", "5", "6", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
  V4UUID._timeHighBits = ["8", "9", "a", "b"];
  uuid.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");
  function v4() {
    return new V4UUID();
  }
  uuid.v4 = v4;
  const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  function isUUID(value) {
    return _UUIDPattern.test(value);
  }
  uuid.isUUID = isUUID;
  function parse(value) {
    if (!isUUID(value)) {
      throw new Error("invalid uuid");
    }
    return new ValueUUID(value);
  }
  uuid.parse = parse;
  function generateUuid() {
    return v4().asHex();
  }
  uuid.generateUuid = generateUuid;
  return uuid;
}
var progress = {};
var hasRequiredProgress;
function requireProgress() {
  if (hasRequiredProgress)
    return progress;
  hasRequiredProgress = 1;
  Object.defineProperty(progress, "__esModule", { value: true });
  progress.attachPartialResult = progress.ProgressFeature = progress.attachWorkDone = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const uuid_1 = requireUuid();
  class WorkDoneProgressReporterImpl {
    constructor(_connection, _token) {
      this._connection = _connection;
      this._token = _token;
      WorkDoneProgressReporterImpl.Instances.set(this._token, this);
    }
    begin(title, percentage, message, cancellable) {
      let param = {
        kind: "begin",
        title,
        percentage,
        message,
        cancellable
      };
      this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    report(arg0, arg1) {
      let param = {
        kind: "report"
      };
      if (typeof arg0 === "number") {
        param.percentage = arg0;
        if (arg1 !== void 0) {
          param.message = arg1;
        }
      } else {
        param.message = arg0;
      }
      this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    done() {
      WorkDoneProgressReporterImpl.Instances.delete(this._token);
      this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: "end" });
    }
  }
  WorkDoneProgressReporterImpl.Instances = /* @__PURE__ */ new Map();
  class WorkDoneProgressServerReporterImpl extends WorkDoneProgressReporterImpl {
    constructor(connection2, token) {
      super(connection2, token);
      this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
      return this._source.token;
    }
    done() {
      this._source.dispose();
      super.done();
    }
    cancel() {
      this._source.cancel();
    }
  }
  class NullProgressReporter {
    constructor() {
    }
    begin() {
    }
    report() {
    }
    done() {
    }
  }
  class NullProgressServerReporter extends NullProgressReporter {
    constructor() {
      super();
      this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
      return this._source.token;
    }
    done() {
      this._source.dispose();
    }
    cancel() {
      this._source.cancel();
    }
  }
  function attachWorkDone(connection2, params) {
    if (params === void 0 || params.workDoneToken === void 0) {
      return new NullProgressReporter();
    }
    const token = params.workDoneToken;
    delete params.workDoneToken;
    return new WorkDoneProgressReporterImpl(connection2, token);
  }
  progress.attachWorkDone = attachWorkDone;
  const ProgressFeature = (Base) => {
    return class extends Base {
      constructor() {
        super();
        this._progressSupported = false;
      }
      initialize(capabilities) {
        var _a2;
        super.initialize(capabilities);
        if (((_a2 = capabilities == null ? void 0 : capabilities.window) == null ? void 0 : _a2.workDoneProgress) === true) {
          this._progressSupported = true;
          this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {
            let progress2 = WorkDoneProgressReporterImpl.Instances.get(params.token);
            if (progress2 instanceof WorkDoneProgressServerReporterImpl || progress2 instanceof NullProgressServerReporter) {
              progress2.cancel();
            }
          });
        }
      }
      attachWorkDoneProgress(token) {
        if (token === void 0) {
          return new NullProgressReporter();
        } else {
          return new WorkDoneProgressReporterImpl(this.connection, token);
        }
      }
      createWorkDoneProgress() {
        if (this._progressSupported) {
          const token = (0, uuid_1.generateUuid)();
          return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {
            const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
            return result;
          });
        } else {
          return Promise.resolve(new NullProgressServerReporter());
        }
      }
    };
  };
  progress.ProgressFeature = ProgressFeature;
  var ResultProgress;
  (function(ResultProgress2) {
    ResultProgress2.type = new vscode_languageserver_protocol_1.ProgressType();
  })(ResultProgress || (ResultProgress = {}));
  class ResultProgressReporterImpl {
    constructor(_connection, _token) {
      this._connection = _connection;
      this._token = _token;
    }
    report(data) {
      this._connection.sendProgress(ResultProgress.type, this._token, data);
    }
  }
  function attachPartialResult(connection2, params) {
    if (params === void 0 || params.partialResultToken === void 0) {
      return void 0;
    }
    const token = params.partialResultToken;
    delete params.partialResultToken;
    return new ResultProgressReporterImpl(connection2, token);
  }
  progress.attachPartialResult = attachPartialResult;
  return progress;
}
var configuration$1 = {};
var hasRequiredConfiguration$1;
function requireConfiguration$1() {
  if (hasRequiredConfiguration$1)
    return configuration$1;
  hasRequiredConfiguration$1 = 1;
  Object.defineProperty(configuration$1, "__esModule", { value: true });
  configuration$1.ConfigurationFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const Is2 = requireIs();
  const ConfigurationFeature = (Base) => {
    return class extends Base {
      getConfiguration(arg) {
        if (!arg) {
          return this._getConfiguration({});
        } else if (Is2.string(arg)) {
          return this._getConfiguration({ section: arg });
        } else {
          return this._getConfiguration(arg);
        }
      }
      _getConfiguration(arg) {
        let params = {
          items: Array.isArray(arg) ? arg : [arg]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {
          if (Array.isArray(result)) {
            return Array.isArray(arg) ? result : result[0];
          } else {
            return Array.isArray(arg) ? [] : null;
          }
        });
      }
    };
  };
  configuration$1.ConfigurationFeature = ConfigurationFeature;
  return configuration$1;
}
var workspaceFolder = {};
var hasRequiredWorkspaceFolder;
function requireWorkspaceFolder() {
  if (hasRequiredWorkspaceFolder)
    return workspaceFolder;
  hasRequiredWorkspaceFolder = 1;
  Object.defineProperty(workspaceFolder, "__esModule", { value: true });
  workspaceFolder.WorkspaceFoldersFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const WorkspaceFoldersFeature = (Base) => {
    return class extends Base {
      constructor() {
        super();
        this._notificationIsAutoRegistered = false;
      }
      initialize(capabilities) {
        super.initialize(capabilities);
        let workspaceCapabilities = capabilities.workspace;
        if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
          this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
          this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {
            this._onDidChangeWorkspaceFolders.fire(params.event);
          });
        }
      }
      fillServerCapabilities(capabilities) {
        var _a2, _b2;
        super.fillServerCapabilities(capabilities);
        const changeNotifications = (_b2 = (_a2 = capabilities.workspace) == null ? void 0 : _a2.workspaceFolders) == null ? void 0 : _b2.changeNotifications;
        this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === "string";
      }
      getWorkspaceFolders() {
        return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
      }
      get onDidChangeWorkspaceFolders() {
        if (!this._onDidChangeWorkspaceFolders) {
          throw new Error("Client doesn't support sending workspace folder change events.");
        }
        if (!this._notificationIsAutoRegistered && !this._unregistration) {
          this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
        }
        return this._onDidChangeWorkspaceFolders.event;
      }
    };
  };
  workspaceFolder.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
  return workspaceFolder;
}
var callHierarchy = {};
var hasRequiredCallHierarchy;
function requireCallHierarchy() {
  if (hasRequiredCallHierarchy)
    return callHierarchy;
  hasRequiredCallHierarchy = 1;
  Object.defineProperty(callHierarchy, "__esModule", { value: true });
  callHierarchy.CallHierarchyFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const CallHierarchyFeature = (Base) => {
    return class extends Base {
      get callHierarchy() {
        return {
          onPrepare: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
            });
          },
          onIncomingCalls: (handler) => {
            const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          },
          onOutgoingCalls: (handler) => {
            const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          }
        };
      }
    };
  };
  callHierarchy.CallHierarchyFeature = CallHierarchyFeature;
  return callHierarchy;
}
var showDocument = {};
var hasRequiredShowDocument;
function requireShowDocument() {
  if (hasRequiredShowDocument)
    return showDocument;
  hasRequiredShowDocument = 1;
  Object.defineProperty(showDocument, "__esModule", { value: true });
  showDocument.ShowDocumentFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const ShowDocumentFeature = (Base) => {
    return class extends Base {
      showDocument(params) {
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
      }
    };
  };
  showDocument.ShowDocumentFeature = ShowDocumentFeature;
  return showDocument;
}
var fileOperations = {};
var hasRequiredFileOperations;
function requireFileOperations() {
  if (hasRequiredFileOperations)
    return fileOperations;
  hasRequiredFileOperations = 1;
  Object.defineProperty(fileOperations, "__esModule", { value: true });
  fileOperations.FileOperationsFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const FileOperationsFeature = (Base) => {
    return class extends Base {
      onDidCreateFiles(handler) {
        return this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {
          handler(params);
        });
      }
      onDidRenameFiles(handler) {
        return this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {
          handler(params);
        });
      }
      onDidDeleteFiles(handler) {
        return this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {
          handler(params);
        });
      }
      onWillCreateFiles(handler) {
        return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {
          return handler(params, cancel);
        });
      }
      onWillRenameFiles(handler) {
        return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {
          return handler(params, cancel);
        });
      }
      onWillDeleteFiles(handler) {
        return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {
          return handler(params, cancel);
        });
      }
    };
  };
  fileOperations.FileOperationsFeature = FileOperationsFeature;
  return fileOperations;
}
var linkedEditingRange = {};
var hasRequiredLinkedEditingRange;
function requireLinkedEditingRange() {
  if (hasRequiredLinkedEditingRange)
    return linkedEditingRange;
  hasRequiredLinkedEditingRange = 1;
  Object.defineProperty(linkedEditingRange, "__esModule", { value: true });
  linkedEditingRange.LinkedEditingRangeFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const LinkedEditingRangeFeature = (Base) => {
    return class extends Base {
      onLinkedEditingRange(handler) {
        return this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {
          return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
        });
      }
    };
  };
  linkedEditingRange.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
  return linkedEditingRange;
}
var typeHierarchy = {};
var hasRequiredTypeHierarchy;
function requireTypeHierarchy() {
  if (hasRequiredTypeHierarchy)
    return typeHierarchy;
  hasRequiredTypeHierarchy = 1;
  Object.defineProperty(typeHierarchy, "__esModule", { value: true });
  typeHierarchy.TypeHierarchyFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const TypeHierarchyFeature = (Base) => {
    return class extends Base {
      get typeHierarchy() {
        return {
          onPrepare: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
            });
          },
          onSupertypes: (handler) => {
            const type = vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          },
          onSubtypes: (handler) => {
            const type = vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          }
        };
      }
    };
  };
  typeHierarchy.TypeHierarchyFeature = TypeHierarchyFeature;
  return typeHierarchy;
}
var inlineValue = {};
var hasRequiredInlineValue;
function requireInlineValue() {
  if (hasRequiredInlineValue)
    return inlineValue;
  hasRequiredInlineValue = 1;
  Object.defineProperty(inlineValue, "__esModule", { value: true });
  inlineValue.InlineValueFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const InlineValueFeature = (Base) => {
    return class extends Base {
      get inlineValue() {
        return {
          refresh: () => {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type);
          },
          on: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params));
            });
          }
        };
      }
    };
  };
  inlineValue.InlineValueFeature = InlineValueFeature;
  return inlineValue;
}
var inlayHint = {};
var hasRequiredInlayHint;
function requireInlayHint() {
  if (hasRequiredInlayHint)
    return inlayHint;
  hasRequiredInlayHint = 1;
  Object.defineProperty(inlayHint, "__esModule", { value: true });
  inlayHint.InlayHintFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const InlayHintFeature = (Base) => {
    return class extends Base {
      get inlayHint() {
        return {
          refresh: () => {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type);
          },
          on: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params));
            });
          },
          resolve: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, (params, cancel) => {
              return handler(params, cancel);
            });
          }
        };
      }
    };
  };
  inlayHint.InlayHintFeature = InlayHintFeature;
  return inlayHint;
}
var diagnostic = {};
var hasRequiredDiagnostic;
function requireDiagnostic() {
  if (hasRequiredDiagnostic)
    return diagnostic;
  hasRequiredDiagnostic = 1;
  Object.defineProperty(diagnostic, "__esModule", { value: true });
  diagnostic.DiagnosticFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const DiagnosticFeature = (Base) => {
    return class extends Base {
      get diagnostics() {
        return {
          refresh: () => {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type);
          },
          on: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.partialResult, params));
            });
          },
          onWorkspace: (handler) => {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, params));
            });
          }
        };
      }
    };
  };
  diagnostic.DiagnosticFeature = DiagnosticFeature;
  return diagnostic;
}
var moniker = {};
var hasRequiredMoniker;
function requireMoniker() {
  if (hasRequiredMoniker)
    return moniker;
  hasRequiredMoniker = 1;
  Object.defineProperty(moniker, "__esModule", { value: true });
  moniker.MonikerFeature = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  const MonikerFeature = (Base) => {
    return class extends Base {
      get moniker() {
        return {
          on: (handler) => {
            const type = vscode_languageserver_protocol_1.MonikerRequest.type;
            return this.connection.onRequest(type, (params, cancel) => {
              return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
            });
          }
        };
      }
    };
  };
  moniker.MonikerFeature = MonikerFeature;
  return moniker;
}
var hasRequiredServer;
function requireServer() {
  if (hasRequiredServer)
    return server;
  hasRequiredServer = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConnection = exports.combineFeatures = exports.combineNotebooksFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._NotebooksImpl = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = void 0;
    const vscode_languageserver_protocol_1 = requireMain$1();
    const Is2 = requireIs();
    const UUID = requireUuid();
    const progress_1 = requireProgress();
    const configuration_1 = requireConfiguration$1();
    const workspaceFolder_1 = requireWorkspaceFolder();
    const callHierarchy_1 = requireCallHierarchy();
    const semanticTokens_1 = requireSemanticTokens();
    const showDocument_1 = requireShowDocument();
    const fileOperations_1 = requireFileOperations();
    const linkedEditingRange_1 = requireLinkedEditingRange();
    const typeHierarchy_1 = requireTypeHierarchy();
    const inlineValue_1 = requireInlineValue();
    const inlayHint_1 = requireInlayHint();
    const diagnostic_1 = requireDiagnostic();
    const notebook_1 = requireNotebook();
    const moniker_1 = requireMoniker();
    function null2Undefined(value) {
      if (value === null) {
        return void 0;
      }
      return value;
    }
    class ErrorMessageTracker {
      constructor() {
        this._messages = /* @__PURE__ */ Object.create(null);
      }
      /**
       * Add a message to the tracker.
       *
       * @param message The message to add.
       */
      add(message) {
        let count = this._messages[message];
        if (!count) {
          count = 0;
        }
        count++;
        this._messages[message] = count;
      }
      /**
       * Send all tracked messages to the connection's window.
       *
       * @param connection The connection established between client and server.
       */
      sendErrors(connection2) {
        Object.keys(this._messages).forEach((message) => {
          connection2.window.showErrorMessage(message);
        });
      }
    }
    exports.ErrorMessageTracker = ErrorMessageTracker;
    class RemoteConsoleImpl {
      constructor() {
      }
      rawAttach(connection2) {
        this._rawConnection = connection2;
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      fillServerCapabilities(_capabilities) {
      }
      initialize(_capabilities) {
      }
      error(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
      }
      warn(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
      }
      info(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
      }
      log(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
      }
      send(type, message) {
        if (this._rawConnection) {
          this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message }).catch(() => {
            (0, vscode_languageserver_protocol_1.RAL)().console.error(`Sending log message failed`);
          });
        }
      }
    }
    class _RemoteWindowImpl {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      showErrorMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
      }
      showWarningMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
      }
      showInformationMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
      }
    }
    const RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));
    (function(BulkRegistration) {
      function create() {
        return new BulkRegistrationImpl();
      }
      BulkRegistration.create = create;
    })(exports.BulkRegistration || (exports.BulkRegistration = {}));
    class BulkRegistrationImpl {
      constructor() {
        this._registrations = [];
        this._registered = /* @__PURE__ */ new Set();
      }
      add(type, registerOptions) {
        const method = Is2.string(type) ? type : type.method;
        if (this._registered.has(method)) {
          throw new Error(`${method} is already added to this registration`);
        }
        const id2 = UUID.generateUuid();
        this._registrations.push({
          id: id2,
          method,
          registerOptions: registerOptions || {}
        });
        this._registered.add(method);
      }
      asRegistrationParams() {
        return {
          registrations: this._registrations
        };
      }
    }
    (function(BulkUnregistration) {
      function create() {
        return new BulkUnregistrationImpl(void 0, []);
      }
      BulkUnregistration.create = create;
    })(exports.BulkUnregistration || (exports.BulkUnregistration = {}));
    class BulkUnregistrationImpl {
      constructor(_connection, unregistrations) {
        this._connection = _connection;
        this._unregistrations = /* @__PURE__ */ new Map();
        unregistrations.forEach((unregistration) => {
          this._unregistrations.set(unregistration.method, unregistration);
        });
      }
      get isAttached() {
        return !!this._connection;
      }
      attach(connection2) {
        this._connection = connection2;
      }
      add(unregistration) {
        this._unregistrations.set(unregistration.method, unregistration);
      }
      dispose() {
        let unregistrations = [];
        for (let unregistration of this._unregistrations.values()) {
          unregistrations.push(unregistration);
        }
        let params = {
          unregisterations: unregistrations
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
          this._connection.console.info(`Bulk unregistration failed.`);
        });
      }
      disposeSingle(arg) {
        const method = Is2.string(arg) ? arg : arg.method;
        const unregistration = this._unregistrations.get(method);
        if (!unregistration) {
          return false;
        }
        let params = {
          unregisterations: [unregistration]
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
          this._unregistrations.delete(method);
        }, (_error) => {
          this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
        });
        return true;
      }
    }
    class RemoteClientImpl {
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
        if (typeOrRegistrations instanceof BulkRegistrationImpl) {
          return this.registerMany(typeOrRegistrations);
        } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
          return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
        } else {
          return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
        }
      }
      registerSingle1(unregistration, type, registerOptions) {
        const method = Is2.string(type) ? type : type.method;
        const id2 = UUID.generateUuid();
        let params = {
          registrations: [{ id: id2, method, registerOptions: registerOptions || {} }]
        };
        if (!unregistration.isAttached) {
          unregistration.attach(this.connection);
        }
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
          unregistration.add({ id: id2, method });
          return unregistration;
        }, (_error) => {
          this.connection.console.info(`Registering request handler for ${method} failed.`);
          return Promise.reject(_error);
        });
      }
      registerSingle2(type, registerOptions) {
        const method = Is2.string(type) ? type : type.method;
        const id2 = UUID.generateUuid();
        let params = {
          registrations: [{ id: id2, method, registerOptions: registerOptions || {} }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
          return vscode_languageserver_protocol_1.Disposable.create(() => {
            this.unregisterSingle(id2, method).catch(() => {
              this.connection.console.info(`Un-registering capability with id ${id2} failed.`);
            });
          });
        }, (_error) => {
          this.connection.console.info(`Registering request handler for ${method} failed.`);
          return Promise.reject(_error);
        });
      }
      unregisterSingle(id2, method) {
        let params = {
          unregisterations: [{ id: id2, method }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
          this.connection.console.info(`Un-registering request handler for ${id2} failed.`);
        });
      }
      registerMany(registrations) {
        let params = registrations.asRegistrationParams();
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
          return new BulkUnregistrationImpl(this._connection, params.registrations.map((registration) => {
            return { id: registration.id, method: registration.method };
          }));
        }, (_error) => {
          this.connection.console.info(`Bulk registration failed.`);
          return Promise.reject(_error);
        });
      }
    }
    class _RemoteWorkspaceImpl {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      applyEdit(paramOrEdit) {
        function isApplyWorkspaceEditParams(value) {
          return value && !!value.edit;
        }
        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
      }
    }
    const RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolder_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));
    class TracerImpl {
      constructor() {
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      set trace(value) {
        this._trace = value;
      }
      log(message, verbose2) {
        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
          return;
        }
        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
          message,
          verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose2 : void 0
        }).catch(() => {
        });
      }
    }
    class TelemetryImpl {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      logEvent(data) {
        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data).catch(() => {
          this.connection.console.log(`Sending TelemetryEventNotification failed`);
        });
      }
    }
    class _LanguagesImpl {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
      }
      attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
      }
    }
    exports._LanguagesImpl = _LanguagesImpl;
    const LanguagesImpl = (0, moniker_1.MonikerFeature)((0, diagnostic_1.DiagnosticFeature)((0, inlayHint_1.InlayHintFeature)((0, inlineValue_1.InlineValueFeature)((0, typeHierarchy_1.TypeHierarchyFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl))))))));
    class _NotebooksImpl {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
      }
      attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
      }
    }
    exports._NotebooksImpl = _NotebooksImpl;
    const NotebooksImpl = (0, notebook_1.NotebookSyncFeature)(_NotebooksImpl);
    function combineConsoleFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineConsoleFeatures = combineConsoleFeatures;
    function combineTelemetryFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineTelemetryFeatures = combineTelemetryFeatures;
    function combineTracerFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineTracerFeatures = combineTracerFeatures;
    function combineClientFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineClientFeatures = combineClientFeatures;
    function combineWindowFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineWindowFeatures = combineWindowFeatures;
    function combineWorkspaceFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
    function combineLanguagesFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineLanguagesFeatures = combineLanguagesFeatures;
    function combineNotebooksFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports.combineNotebooksFeatures = combineNotebooksFeatures;
    function combineFeatures(one, two) {
      function combine(one2, two2, func) {
        if (one2 && two2) {
          return func(one2, two2);
        } else if (one2) {
          return one2;
        } else {
          return two2;
        }
      }
      let result = {
        __brand: "features",
        console: combine(one.console, two.console, combineConsoleFeatures),
        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
        client: combine(one.client, two.client, combineClientFeatures),
        window: combine(one.window, two.window, combineWindowFeatures),
        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures),
        languages: combine(one.languages, two.languages, combineLanguagesFeatures),
        notebooks: combine(one.notebooks, two.notebooks, combineNotebooksFeatures)
      };
      return result;
    }
    exports.combineFeatures = combineFeatures;
    function createConnection(connectionFactory, watchDog, factories) {
      const logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();
      const connection2 = connectionFactory(logger);
      logger.rawAttach(connection2);
      const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
      const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
      const client2 = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
      const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
      const workspace2 = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
      const languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();
      const notebooks = factories && factories.notebooks ? new (factories.notebooks(NotebooksImpl))() : new NotebooksImpl();
      const allRemotes = [logger, tracer, telemetry, client2, remoteWindow, workspace2, languages, notebooks];
      function asPromise(value) {
        if (value instanceof Promise) {
          return value;
        } else if (Is2.thenable(value)) {
          return new Promise((resolve, reject) => {
            value.then((resolved) => resolve(resolved), (error) => reject(error));
          });
        } else {
          return Promise.resolve(value);
        }
      }
      let shutdownHandler = void 0;
      let initializeHandler = void 0;
      let exitHandler = void 0;
      let protocolConnection = {
        listen: () => connection2.listen(),
        sendRequest: (type, ...params) => connection2.sendRequest(Is2.string(type) ? type : type.method, ...params),
        onRequest: (type, handler) => connection2.onRequest(type, handler),
        sendNotification: (type, param) => {
          const method = Is2.string(type) ? type : type.method;
          if (arguments.length === 1) {
            return connection2.sendNotification(method);
          } else {
            return connection2.sendNotification(method, param);
          }
        },
        onNotification: (type, handler) => connection2.onNotification(type, handler),
        onProgress: connection2.onProgress,
        sendProgress: connection2.sendProgress,
        onInitialize: (handler) => {
          initializeHandler = handler;
          return {
            dispose: () => {
              initializeHandler = void 0;
            }
          };
        },
        onInitialized: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
        onShutdown: (handler) => {
          shutdownHandler = handler;
          return {
            dispose: () => {
              shutdownHandler = void 0;
            }
          };
        },
        onExit: (handler) => {
          exitHandler = handler;
          return {
            dispose: () => {
              exitHandler = void 0;
            }
          };
        },
        get console() {
          return logger;
        },
        get telemetry() {
          return telemetry;
        },
        get tracer() {
          return tracer;
        },
        get client() {
          return client2;
        },
        get window() {
          return remoteWindow;
        },
        get workspace() {
          return workspace2;
        },
        get languages() {
          return languages;
        },
        get notebooks() {
          return notebooks;
        },
        onDidChangeConfiguration: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
        onDidChangeWatchedFiles: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
        __textDocumentSync: void 0,
        onDidOpenTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
        onDidChangeTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
        onDidCloseTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
        onWillSaveTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
        onWillSaveTextDocumentWaitUntil: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
        onDidSaveTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
        sendDiagnostics: (params) => connection2.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
        onHover: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onCompletion: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onCompletionResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
        onSignatureHelp: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onDeclaration: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDefinition: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onTypeDefinition: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onImplementation: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onReferences: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDocumentHighlight: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDocumentSymbol: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onWorkspaceSymbol: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onWorkspaceSymbolResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler),
        onCodeAction: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onCodeActionResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onCodeLens: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onCodeLensResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onDocumentFormatting: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onDocumentRangeFormatting: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onDocumentOnTypeFormatting: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onRenameRequest: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onPrepareRename: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onDocumentLinks: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDocumentLinkResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onDocumentColor: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onColorPresentation: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onFoldingRanges: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onSelectionRanges: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onExecuteCommand: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        dispose: () => connection2.dispose()
      };
      for (let remote of allRemotes) {
        remote.attach(protocolConnection);
      }
      connection2.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {
        watchDog.initialize(params);
        if (Is2.string(params.trace)) {
          tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
        }
        for (let remote of allRemotes) {
          remote.initialize(params.capabilities);
        }
        if (initializeHandler) {
          let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection2, params), void 0);
          return asPromise(result).then((value) => {
            if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
              return value;
            }
            let result2 = value;
            if (!result2) {
              result2 = { capabilities: {} };
            }
            let capabilities = result2.capabilities;
            if (!capabilities) {
              capabilities = {};
              result2.capabilities = capabilities;
            }
            if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {
              capabilities.textDocumentSync = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
            } else if (!Is2.number(capabilities.textDocumentSync) && !Is2.number(capabilities.textDocumentSync.change)) {
              capabilities.textDocumentSync.change = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
            }
            for (let remote of allRemotes) {
              remote.fillServerCapabilities(capabilities);
            }
            return result2;
          });
        } else {
          let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
          for (let remote of allRemotes) {
            remote.fillServerCapabilities(result.capabilities);
          }
          return result;
        }
      });
      connection2.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
        watchDog.shutdownReceived = true;
        if (shutdownHandler) {
          return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
        } else {
          return void 0;
        }
      });
      connection2.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
        try {
          if (exitHandler) {
            exitHandler();
          }
        } finally {
          if (watchDog.shutdownReceived) {
            watchDog.exit(0);
          } else {
            watchDog.exit(1);
          }
        }
      });
      connection2.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {
        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
      });
      return protocolConnection;
    }
    exports.createConnection = createConnection;
  })(server);
  return server;
}
var hasRequiredApi$4;
function requireApi$4() {
  if (hasRequiredApi$4)
    return api$7;
  hasRequiredApi$4 = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProposedFeatures = exports.NotebookDocuments = exports.TextDocuments = exports.SemanticTokensBuilder = void 0;
    const semanticTokens_1 = requireSemanticTokens();
    Object.defineProperty(exports, "SemanticTokensBuilder", { enumerable: true, get: function() {
      return semanticTokens_1.SemanticTokensBuilder;
    } });
    __exportStar(requireMain$1(), exports);
    const textDocuments_1 = requireTextDocuments();
    Object.defineProperty(exports, "TextDocuments", { enumerable: true, get: function() {
      return textDocuments_1.TextDocuments;
    } });
    const notebook_1 = requireNotebook();
    Object.defineProperty(exports, "NotebookDocuments", { enumerable: true, get: function() {
      return notebook_1.NotebookDocuments;
    } });
    __exportStar(requireServer(), exports);
    (function(ProposedFeatures) {
      ProposedFeatures.all = {
        __brand: "features"
      };
    })(exports.ProposedFeatures || (exports.ProposedFeatures = {}));
  })(api$7);
  return api$7;
}
var browser;
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser)
    return browser;
  hasRequiredBrowser = 1;
  browser = requireMain$1();
  return browser;
}
var hasRequiredMain;
function requireMain() {
  if (hasRequiredMain)
    return main$4;
  hasRequiredMain = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConnection = void 0;
    const api_1 = requireApi$4();
    __exportStar(requireBrowser(), exports);
    __exportStar(requireApi$4(), exports);
    let _shutdownReceived = false;
    const watchDog = {
      initialize: (_params) => {
      },
      get shutdownReceived() {
        return _shutdownReceived;
      },
      set shutdownReceived(value) {
        _shutdownReceived = value;
      },
      exit: (_code) => {
      }
    };
    function createConnection(arg1, arg2, arg3, arg4) {
      let factories;
      let reader;
      let writer;
      let options;
      if (arg1 !== void 0 && arg1.__brand === "features") {
        factories = arg1;
        arg1 = arg2;
        arg2 = arg3;
        arg3 = arg4;
      }
      if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {
        options = arg1;
      } else {
        reader = arg1;
        writer = arg2;
        options = arg3;
      }
      const connectionFactory = (logger) => {
        return (0, api_1.createProtocolConnection)(reader, writer, logger, options);
      };
      return (0, api_1.createConnection)(connectionFactory, watchDog, factories);
    }
    exports.createConnection = createConnection;
  })(main$4);
  return main$4;
}
var __spreadArray = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var FullTextDocument = (
  /** @class */
  function() {
    function FullTextDocument2(uri, languageId, version2, content2) {
      this._uri = uri;
      this._languageId = languageId;
      this._version = version2;
      this._content = content2;
      this._lineOffsets = void 0;
    }
    Object.defineProperty(FullTextDocument2.prototype, "uri", {
      get: function() {
        return this._uri;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FullTextDocument2.prototype, "languageId", {
      get: function() {
        return this._languageId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(FullTextDocument2.prototype, "version", {
      get: function() {
        return this._version;
      },
      enumerable: false,
      configurable: true
    });
    FullTextDocument2.prototype.getText = function(range2) {
      if (range2) {
        var start = this.offsetAt(range2.start);
        var end = this.offsetAt(range2.end);
        return this._content.substring(start, end);
      }
      return this._content;
    };
    FullTextDocument2.prototype.update = function(changes, version2) {
      for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
        var change = changes_1[_i];
        if (FullTextDocument2.isIncremental(change)) {
          var range2 = getWellformedRange(change.range);
          var startOffset = this.offsetAt(range2.start);
          var endOffset = this.offsetAt(range2.end);
          this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
          var startLine = Math.max(range2.start.line, 0);
          var endLine = Math.max(range2.end.line, 0);
          var lineOffsets = this._lineOffsets;
          var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
          if (endLine - startLine === addedLineOffsets.length) {
            for (var i = 0, len = addedLineOffsets.length; i < len; i++) {
              lineOffsets[i + startLine + 1] = addedLineOffsets[i];
            }
          } else {
            if (addedLineOffsets.length < 1e4) {
              lineOffsets.splice.apply(lineOffsets, __spreadArray([startLine + 1, endLine - startLine], addedLineOffsets, false));
            } else {
              this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
            }
          }
          var diff = change.text.length - (endOffset - startOffset);
          if (diff !== 0) {
            for (var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
              lineOffsets[i] = lineOffsets[i] + diff;
            }
          }
        } else if (FullTextDocument2.isFull(change)) {
          this._content = change.text;
          this._lineOffsets = void 0;
        } else {
          throw new Error("Unknown change event received");
        }
      }
      this._version = version2;
    };
    FullTextDocument2.prototype.getLineOffsets = function() {
      if (this._lineOffsets === void 0) {
        this._lineOffsets = computeLineOffsets(this._content, true);
      }
      return this._lineOffsets;
    };
    FullTextDocument2.prototype.positionAt = function(offset) {
      offset = Math.max(Math.min(offset, this._content.length), 0);
      var lineOffsets = this.getLineOffsets();
      var low = 0, high = lineOffsets.length;
      if (high === 0) {
        return { line: 0, character: offset };
      }
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (lineOffsets[mid] > offset) {
          high = mid;
        } else {
          low = mid + 1;
        }
      }
      var line = low - 1;
      return { line, character: offset - lineOffsets[line] };
    };
    FullTextDocument2.prototype.offsetAt = function(position) {
      var lineOffsets = this.getLineOffsets();
      if (position.line >= lineOffsets.length) {
        return this._content.length;
      } else if (position.line < 0) {
        return 0;
      }
      var lineOffset = lineOffsets[position.line];
      var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
      return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument2.prototype, "lineCount", {
      get: function() {
        return this.getLineOffsets().length;
      },
      enumerable: false,
      configurable: true
    });
    FullTextDocument2.isIncremental = function(event) {
      var candidate = event;
      return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
    };
    FullTextDocument2.isFull = function(event) {
      var candidate = event;
      return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
    };
    return FullTextDocument2;
  }()
);
var TextDocument;
(function(TextDocument2) {
  function create(uri, languageId, version2, content2) {
    return new FullTextDocument(uri, languageId, version2, content2);
  }
  TextDocument2.create = create;
  function update(document2, changes, version2) {
    if (document2 instanceof FullTextDocument) {
      document2.update(changes, version2);
      return document2;
    } else {
      throw new Error("TextDocument.update: document must be created by TextDocument.create");
    }
  }
  TextDocument2.update = update;
  function applyEdits(document2, edits) {
    var text = document2.getText();
    var sortedEdits = mergeSort(edits.map(getWellformedEdit), function(a2, b2) {
      var diff = a2.range.start.line - b2.range.start.line;
      if (diff === 0) {
        return a2.range.start.character - b2.range.start.character;
      }
      return diff;
    });
    var lastModifiedOffset = 0;
    var spans = [];
    for (var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++) {
      var e = sortedEdits_1[_i];
      var startOffset = document2.offsetAt(e.range.start);
      if (startOffset < lastModifiedOffset) {
        throw new Error("Overlapping edit");
      } else if (startOffset > lastModifiedOffset) {
        spans.push(text.substring(lastModifiedOffset, startOffset));
      }
      if (e.newText.length) {
        spans.push(e.newText);
      }
      lastModifiedOffset = document2.offsetAt(e.range.end);
    }
    spans.push(text.substr(lastModifiedOffset));
    return spans.join("");
  }
  TextDocument2.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare2) {
  if (data.length <= 1) {
    return data;
  }
  var p2 = data.length / 2 | 0;
  var left = data.slice(0, p2);
  var right = data.slice(p2);
  mergeSort(left, compare2);
  mergeSort(right, compare2);
  var leftIdx = 0;
  var rightIdx = 0;
  var i = 0;
  while (leftIdx < left.length && rightIdx < right.length) {
    var ret = compare2(left[leftIdx], right[rightIdx]);
    if (ret <= 0) {
      data[i++] = left[leftIdx++];
    } else {
      data[i++] = right[rightIdx++];
    }
  }
  while (leftIdx < left.length) {
    data[i++] = left[leftIdx++];
  }
  while (rightIdx < right.length) {
    data[i++] = right[rightIdx++];
  }
  return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset) {
  if (textOffset === void 0) {
    textOffset = 0;
  }
  var result = isAtLineStart ? [textOffset] : [];
  for (var i = 0; i < text.length; i++) {
    var ch = text.charCodeAt(i);
    if (ch === 13 || ch === 10) {
      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
        i++;
      }
      result.push(textOffset + i + 1);
    }
  }
  return result;
}
function getWellformedRange(range2) {
  var start = range2.start;
  var end = range2.end;
  if (start.line > end.line || start.line === end.line && start.character > end.character) {
    return { start: end, end: start };
  }
  return range2;
}
function getWellformedEdit(textEdit) {
  var range2 = getWellformedRange(textEdit.range);
  if (range2 !== textEdit.range) {
    return { newText: textEdit.newText, range: range2 };
  }
  return textEdit;
}
const main = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get TextDocument() {
    return TextDocument;
  }
}, Symbol.toStringTag, { value: "Module" }));
const require$$1$1 = /* @__PURE__ */ getAugmentedNamespace(main);
var grammarConfig = {};
var cstUtil = {};
var syntaxTree = {};
var hasRequiredSyntaxTree;
function requireSyntaxTree() {
  if (hasRequiredSyntaxTree)
    return syntaxTree;
  hasRequiredSyntaxTree = 1;
  Object.defineProperty(syntaxTree, "__esModule", { value: true });
  syntaxTree.isRootCstNode = syntaxTree.isLeafCstNode = syntaxTree.isCompositeCstNode = syntaxTree.AbstractAstReflection = syntaxTree.isLinkingError = syntaxTree.isAstNodeDescription = syntaxTree.isReference = syntaxTree.isAstNode = void 0;
  function isAstNode(obj) {
    return typeof obj === "object" && obj !== null && typeof obj.$type === "string";
  }
  syntaxTree.isAstNode = isAstNode;
  function isReference(obj) {
    return typeof obj === "object" && obj !== null && typeof obj.$refText === "string";
  }
  syntaxTree.isReference = isReference;
  function isAstNodeDescription(obj) {
    return typeof obj === "object" && obj !== null && typeof obj.name === "string" && typeof obj.type === "string" && typeof obj.path === "string";
  }
  syntaxTree.isAstNodeDescription = isAstNodeDescription;
  function isLinkingError(obj) {
    return typeof obj === "object" && obj !== null && isAstNode(obj.container) && isReference(obj.reference) && typeof obj.message === "string";
  }
  syntaxTree.isLinkingError = isLinkingError;
  class AbstractAstReflection {
    constructor() {
      this.subtypes = {};
      this.allSubtypes = {};
    }
    isInstance(node, type) {
      return isAstNode(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
      if (subtype === supertype) {
        return true;
      }
      let nested = this.subtypes[subtype];
      if (!nested) {
        nested = this.subtypes[subtype] = {};
      }
      const existing = nested[supertype];
      if (existing !== void 0) {
        return existing;
      } else {
        const result = this.computeIsSubtype(subtype, supertype);
        nested[supertype] = result;
        return result;
      }
    }
    getAllSubTypes(type) {
      const existing = this.allSubtypes[type];
      if (existing) {
        return existing;
      } else {
        const allTypes2 = this.getAllTypes();
        const types2 = [];
        for (const possibleSubType of allTypes2) {
          if (this.isSubtype(possibleSubType, type)) {
            types2.push(possibleSubType);
          }
        }
        this.allSubtypes[type] = types2;
        return types2;
      }
    }
  }
  syntaxTree.AbstractAstReflection = AbstractAstReflection;
  function isCompositeCstNode(node) {
    return typeof node === "object" && node !== null && "children" in node;
  }
  syntaxTree.isCompositeCstNode = isCompositeCstNode;
  function isLeafCstNode(node) {
    return typeof node === "object" && node !== null && "tokenType" in node;
  }
  syntaxTree.isLeafCstNode = isLeafCstNode;
  function isRootCstNode(node) {
    return isCompositeCstNode(node) && "fullText" in node;
  }
  syntaxTree.isRootCstNode = isRootCstNode;
  return syntaxTree;
}
var stream = {};
var hasRequiredStream;
function requireStream() {
  if (hasRequiredStream)
    return stream;
  hasRequiredStream = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reduction = exports.TreeStreamImpl = exports.stream = exports.DONE_RESULT = exports.EMPTY_STREAM = exports.StreamImpl = void 0;
    class StreamImpl {
      constructor(startFn, nextFn) {
        this.startFn = startFn;
        this.nextFn = nextFn;
      }
      iterator() {
        const iterator = {
          state: this.startFn(),
          next: () => this.nextFn(iterator.state),
          [Symbol.iterator]: () => iterator
        };
        return iterator;
      }
      [Symbol.iterator]() {
        return this.iterator();
      }
      isEmpty() {
        const iterator = this.iterator();
        return Boolean(iterator.next().done);
      }
      count() {
        const iterator = this.iterator();
        let count = 0;
        let next = iterator.next();
        while (!next.done) {
          count++;
          next = iterator.next();
        }
        return count;
      }
      toArray() {
        const result = [];
        const iterator = this.iterator();
        let next;
        do {
          next = iterator.next();
          if (next.value !== void 0) {
            result.push(next.value);
          }
        } while (!next.done);
        return result;
      }
      toSet() {
        return new Set(this);
      }
      toMap(keyFn, valueFn) {
        const entryStream = this.map((element) => [
          keyFn ? keyFn(element) : element,
          valueFn ? valueFn(element) : element
        ]);
        return new Map(entryStream);
      }
      toString() {
        return this.join();
      }
      concat(other) {
        const iterator = other[Symbol.iterator]();
        return new StreamImpl(() => ({ first: this.startFn(), firstDone: false }), (state) => {
          let result;
          if (!state.firstDone) {
            do {
              result = this.nextFn(state.first);
              if (!result.done) {
                return result;
              }
            } while (!result.done);
            state.firstDone = true;
          }
          do {
            result = iterator.next();
            if (!result.done) {
              return result;
            }
          } while (!result.done);
          return exports.DONE_RESULT;
        });
      }
      join(separator = ",") {
        const iterator = this.iterator();
        let value = "";
        let result;
        let addSeparator = false;
        do {
          result = iterator.next();
          if (!result.done) {
            if (addSeparator) {
              value += separator;
            }
            value += toString(result.value);
          }
          addSeparator = true;
        } while (!result.done);
        return value;
      }
      indexOf(searchElement, fromIndex = 0) {
        const iterator = this.iterator();
        let index = 0;
        let next = iterator.next();
        while (!next.done) {
          if (index >= fromIndex && next.value === searchElement) {
            return index;
          }
          next = iterator.next();
          index++;
        }
        return -1;
      }
      every(predicate) {
        const iterator = this.iterator();
        let next = iterator.next();
        while (!next.done) {
          if (!predicate(next.value)) {
            return false;
          }
          next = iterator.next();
        }
        return true;
      }
      some(predicate) {
        const iterator = this.iterator();
        let next = iterator.next();
        while (!next.done) {
          if (predicate(next.value)) {
            return true;
          }
          next = iterator.next();
        }
        return false;
      }
      forEach(callbackfn) {
        const iterator = this.iterator();
        let index = 0;
        let next = iterator.next();
        while (!next.done) {
          callbackfn(next.value, index);
          next = iterator.next();
          index++;
        }
      }
      map(callbackfn) {
        return new StreamImpl(this.startFn, (state) => {
          const { done, value } = this.nextFn(state);
          if (done) {
            return exports.DONE_RESULT;
          } else {
            return { done: false, value: callbackfn(value) };
          }
        });
      }
      filter(predicate) {
        return new StreamImpl(this.startFn, (state) => {
          let result;
          do {
            result = this.nextFn(state);
            if (!result.done && predicate(result.value)) {
              return result;
            }
          } while (!result.done);
          return exports.DONE_RESULT;
        });
      }
      nonNullable() {
        return this.filter((e) => e !== void 0 && e !== null);
      }
      reduce(callbackfn, initialValue) {
        const iterator = this.iterator();
        let previousValue = initialValue;
        let next = iterator.next();
        while (!next.done) {
          if (previousValue === void 0) {
            previousValue = next.value;
          } else {
            previousValue = callbackfn(previousValue, next.value);
          }
          next = iterator.next();
        }
        return previousValue;
      }
      reduceRight(callbackfn, initialValue) {
        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);
      }
      recursiveReduce(iterator, callbackfn, initialValue) {
        const next = iterator.next();
        if (next.done) {
          return initialValue;
        }
        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);
        if (previousValue === void 0) {
          return next.value;
        }
        return callbackfn(previousValue, next.value);
      }
      find(predicate) {
        const iterator = this.iterator();
        let next = iterator.next();
        while (!next.done) {
          if (predicate(next.value)) {
            return next.value;
          }
          next = iterator.next();
        }
        return void 0;
      }
      findIndex(predicate) {
        const iterator = this.iterator();
        let index = 0;
        let next = iterator.next();
        while (!next.done) {
          if (predicate(next.value)) {
            return index;
          }
          next = iterator.next();
          index++;
        }
        return -1;
      }
      includes(searchElement) {
        const iterator = this.iterator();
        let next = iterator.next();
        while (!next.done) {
          if (next.value === searchElement) {
            return true;
          }
          next = iterator.next();
        }
        return false;
      }
      flatMap(callbackfn) {
        return new StreamImpl(() => ({ this: this.startFn() }), (state) => {
          do {
            if (state.iterator) {
              const next = state.iterator.next();
              if (next.done) {
                state.iterator = void 0;
              } else {
                return next;
              }
            }
            const { done, value } = this.nextFn(state.this);
            if (!done) {
              const mapped = callbackfn(value);
              if (isIterable(mapped)) {
                state.iterator = mapped[Symbol.iterator]();
              } else {
                return { done: false, value: mapped };
              }
            }
          } while (state.iterator);
          return exports.DONE_RESULT;
        });
      }
      flat(depth) {
        if (depth === void 0) {
          depth = 1;
        }
        if (depth <= 0) {
          return this;
        }
        const stream3 = depth > 1 ? this.flat(depth - 1) : this;
        return new StreamImpl(() => ({ this: stream3.startFn() }), (state) => {
          do {
            if (state.iterator) {
              const next = state.iterator.next();
              if (next.done) {
                state.iterator = void 0;
              } else {
                return next;
              }
            }
            const { done, value } = stream3.nextFn(state.this);
            if (!done) {
              if (isIterable(value)) {
                state.iterator = value[Symbol.iterator]();
              } else {
                return { done: false, value };
              }
            }
          } while (state.iterator);
          return exports.DONE_RESULT;
        });
      }
      head() {
        const iterator = this.iterator();
        const result = iterator.next();
        if (result.done) {
          return void 0;
        }
        return result.value;
      }
      tail(skipCount = 1) {
        return new StreamImpl(() => {
          const state = this.startFn();
          for (let i = 0; i < skipCount; i++) {
            const next = this.nextFn(state);
            if (next.done) {
              return state;
            }
          }
          return state;
        }, this.nextFn);
      }
      limit(maxSize) {
        return new StreamImpl(() => ({ size: 0, state: this.startFn() }), (state) => {
          state.size++;
          if (state.size > maxSize) {
            return exports.DONE_RESULT;
          }
          return this.nextFn(state.state);
        });
      }
      distinct(by) {
        const set = /* @__PURE__ */ new Set();
        return this.filter((e) => {
          const value = by ? by(e) : e;
          if (set.has(value)) {
            return false;
          } else {
            set.add(value);
            return true;
          }
        });
      }
      exclude(other, key) {
        const otherKeySet = /* @__PURE__ */ new Set();
        for (const item of other) {
          const value = key ? key(item) : item;
          otherKeySet.add(value);
        }
        return this.filter((e) => {
          const ownKey = key ? key(e) : e;
          return !otherKeySet.has(ownKey);
        });
      }
    }
    exports.StreamImpl = StreamImpl;
    function toString(item) {
      if (typeof item === "string") {
        return item;
      }
      if (typeof item === "undefined") {
        return "undefined";
      }
      if (typeof item.toString === "function") {
        return item.toString();
      }
      return Object.prototype.toString.call(item);
    }
    function isIterable(obj) {
      return !!obj && typeof obj[Symbol.iterator] === "function";
    }
    exports.EMPTY_STREAM = new StreamImpl(() => void 0, () => exports.DONE_RESULT);
    exports.DONE_RESULT = Object.freeze({ done: true, value: void 0 });
    function stream2(...collections2) {
      if (collections2.length === 1) {
        const collection = collections2[0];
        if (collection instanceof StreamImpl) {
          return collection;
        }
        if (isIterable(collection)) {
          return new StreamImpl(() => collection[Symbol.iterator](), (iterator) => iterator.next());
        }
        if (typeof collection.length === "number") {
          return new StreamImpl(() => ({ index: 0 }), (state) => {
            if (state.index < collection.length) {
              return { done: false, value: collection[state.index++] };
            } else {
              return exports.DONE_RESULT;
            }
          });
        }
      }
      if (collections2.length > 1) {
        return new StreamImpl(() => ({ collIndex: 0, arrIndex: 0 }), (state) => {
          do {
            if (state.iterator) {
              const next = state.iterator.next();
              if (!next.done) {
                return next;
              }
              state.iterator = void 0;
            }
            if (state.array) {
              if (state.arrIndex < state.array.length) {
                return { done: false, value: state.array[state.arrIndex++] };
              }
              state.array = void 0;
              state.arrIndex = 0;
            }
            if (state.collIndex < collections2.length) {
              const collection = collections2[state.collIndex++];
              if (isIterable(collection)) {
                state.iterator = collection[Symbol.iterator]();
              } else if (collection && typeof collection.length === "number") {
                state.array = collection;
              }
            }
          } while (state.iterator || state.array || state.collIndex < collections2.length);
          return exports.DONE_RESULT;
        });
      }
      return exports.EMPTY_STREAM;
    }
    exports.stream = stream2;
    class TreeStreamImpl extends StreamImpl {
      constructor(root, children, options) {
        super(() => ({
          iterators: (options === null || options === void 0 ? void 0 : options.includeRoot) ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],
          pruned: false
        }), (state) => {
          if (state.pruned) {
            state.iterators.pop();
            state.pruned = false;
          }
          while (state.iterators.length > 0) {
            const iterator = state.iterators[state.iterators.length - 1];
            const next = iterator.next();
            if (next.done) {
              state.iterators.pop();
            } else {
              state.iterators.push(children(next.value)[Symbol.iterator]());
              return next;
            }
          }
          return exports.DONE_RESULT;
        });
      }
      iterator() {
        const iterator = {
          state: this.startFn(),
          next: () => this.nextFn(iterator.state),
          prune: () => {
            iterator.state.pruned = true;
          },
          [Symbol.iterator]: () => iterator
        };
        return iterator;
      }
    }
    exports.TreeStreamImpl = TreeStreamImpl;
    (function(Reduction) {
      function sum(stream3) {
        return stream3.reduce((a2, b2) => a2 + b2, 0);
      }
      Reduction.sum = sum;
      function product(stream3) {
        return stream3.reduce((a2, b2) => a2 * b2, 0);
      }
      Reduction.product = product;
      function min(stream3) {
        return stream3.reduce((a2, b2) => Math.min(a2, b2));
      }
      Reduction.min = min;
      function max(stream3) {
        return stream3.reduce((a2, b2) => Math.max(a2, b2));
      }
      Reduction.max = max;
    })(exports.Reduction || (exports.Reduction = {}));
  })(stream);
  return stream;
}
var hasRequiredCstUtil;
function requireCstUtil() {
  if (hasRequiredCstUtil)
    return cstUtil;
  hasRequiredCstUtil = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInteriorNodes = exports.getStartlineNode = exports.getNextNode = exports.getPreviousNode = exports.findLeafNodeAtOffset = exports.isCommentNode = exports.findCommentNode = exports.findDeclarationNodeAtOffset = exports.DefaultNameRegexp = exports.inRange = exports.compareRange = exports.RangeComparison = exports.toDocumentSegment = exports.tokenToRange = exports.isCstChildNode = exports.flattenCst = exports.streamCst = void 0;
    const syntax_tree_1 = requireSyntaxTree();
    const stream_1 = requireStream();
    function streamCst(node) {
      return new stream_1.TreeStreamImpl(node, (element) => {
        if ((0, syntax_tree_1.isCompositeCstNode)(element)) {
          return element.children;
        } else {
          return [];
        }
      }, { includeRoot: true });
    }
    exports.streamCst = streamCst;
    function flattenCst(node) {
      return streamCst(node).filter(syntax_tree_1.isLeafCstNode);
    }
    exports.flattenCst = flattenCst;
    function isCstChildNode(child, parent) {
      while (child.parent) {
        child = child.parent;
        if (child === parent) {
          return true;
        }
      }
      return false;
    }
    exports.isCstChildNode = isCstChildNode;
    function tokenToRange(token) {
      return {
        start: {
          character: token.startColumn - 1,
          line: token.startLine - 1
        },
        end: {
          character: token.endColumn,
          line: token.endLine - 1
        }
      };
    }
    exports.tokenToRange = tokenToRange;
    function toDocumentSegment(node) {
      if (!node) {
        return void 0;
      }
      const { offset, end, range: range2 } = node;
      return {
        range: range2,
        offset,
        end,
        length: end - offset
      };
    }
    exports.toDocumentSegment = toDocumentSegment;
    var RangeComparison;
    (function(RangeComparison2) {
      RangeComparison2[RangeComparison2["Before"] = 0] = "Before";
      RangeComparison2[RangeComparison2["After"] = 1] = "After";
      RangeComparison2[RangeComparison2["OverlapFront"] = 2] = "OverlapFront";
      RangeComparison2[RangeComparison2["OverlapBack"] = 3] = "OverlapBack";
      RangeComparison2[RangeComparison2["Inside"] = 4] = "Inside";
    })(RangeComparison = exports.RangeComparison || (exports.RangeComparison = {}));
    function compareRange(range2, to) {
      if (range2.end.line < to.start.line || range2.end.line === to.start.line && range2.end.character < range2.start.character) {
        return RangeComparison.Before;
      } else if (range2.start.line > to.end.line || range2.start.line === to.end.line && range2.start.character > to.end.character) {
        return RangeComparison.After;
      }
      const startInside = range2.start.line > to.start.line || range2.start.line === to.start.line && range2.start.character >= to.start.character;
      const endInside = range2.end.line < to.end.line || range2.end.line === to.end.line && range2.end.character <= to.end.character;
      if (startInside && endInside) {
        return RangeComparison.Inside;
      } else if (startInside) {
        return RangeComparison.OverlapBack;
      } else {
        return RangeComparison.OverlapFront;
      }
    }
    exports.compareRange = compareRange;
    function inRange(range2, to) {
      const comparison = compareRange(range2, to);
      return comparison > RangeComparison.After;
    }
    exports.inRange = inRange;
    exports.DefaultNameRegexp = /^[\w\p{L}]$/u;
    function findDeclarationNodeAtOffset(cstNode, offset, nameRegexp = exports.DefaultNameRegexp) {
      if (cstNode) {
        if (offset > 0) {
          const localOffset = offset - cstNode.offset;
          const textAtOffset = cstNode.text.charAt(localOffset);
          if (!nameRegexp.test(textAtOffset)) {
            offset--;
          }
        }
        return findLeafNodeAtOffset(cstNode, offset);
      }
      return void 0;
    }
    exports.findDeclarationNodeAtOffset = findDeclarationNodeAtOffset;
    function findCommentNode(cstNode, commentNames) {
      if (cstNode) {
        const previous = getPreviousNode(cstNode, true);
        if (previous && isCommentNode(previous, commentNames)) {
          return previous;
        }
        if ((0, syntax_tree_1.isRootCstNode)(cstNode)) {
          const endIndex = cstNode.children.findIndex((e) => !e.hidden);
          for (let i = endIndex - 1; i >= 0; i--) {
            const child = cstNode.children[i];
            if (isCommentNode(child, commentNames)) {
              return child;
            }
          }
        }
      }
      return void 0;
    }
    exports.findCommentNode = findCommentNode;
    function isCommentNode(cstNode, commentNames) {
      return (0, syntax_tree_1.isLeafCstNode)(cstNode) && commentNames.includes(cstNode.tokenType.name);
    }
    exports.isCommentNode = isCommentNode;
    function findLeafNodeAtOffset(node, offset) {
      if ((0, syntax_tree_1.isLeafCstNode)(node)) {
        return node;
      } else if ((0, syntax_tree_1.isCompositeCstNode)(node)) {
        let firstChild = 0;
        let lastChild = node.children.length - 1;
        while (firstChild < lastChild) {
          const middleChild = Math.floor((firstChild + lastChild) / 2);
          const n2 = node.children[middleChild];
          if (n2.offset > offset) {
            lastChild = middleChild - 1;
          } else if (n2.end <= offset) {
            firstChild = middleChild + 1;
          } else {
            return findLeafNodeAtOffset(n2, offset);
          }
        }
        if (firstChild === lastChild) {
          return findLeafNodeAtOffset(node.children[firstChild], offset);
        }
      }
      return void 0;
    }
    exports.findLeafNodeAtOffset = findLeafNodeAtOffset;
    function getPreviousNode(node, hidden = true) {
      while (node.parent) {
        const parent = node.parent;
        let index = parent.children.indexOf(node);
        while (index > 0) {
          index--;
          const previous = parent.children[index];
          if (hidden || !previous.hidden) {
            return previous;
          }
        }
        node = parent;
      }
      return void 0;
    }
    exports.getPreviousNode = getPreviousNode;
    function getNextNode(node, hidden = true) {
      while (node.parent) {
        const parent = node.parent;
        let index = parent.children.indexOf(node);
        const last2 = parent.children.length - 1;
        while (index < last2) {
          index++;
          const next = parent.children[index];
          if (hidden || !next.hidden) {
            return next;
          }
        }
        node = parent;
      }
      return void 0;
    }
    exports.getNextNode = getNextNode;
    function getStartlineNode(node) {
      if (node.range.start.character === 0) {
        return node;
      }
      const line = node.range.start.line;
      let last2 = node;
      let index;
      while (node.parent) {
        const parent = node.parent;
        const selfIndex = index !== null && index !== void 0 ? index : parent.children.indexOf(node);
        if (selfIndex === 0) {
          node = parent;
          index = void 0;
        } else {
          index = selfIndex - 1;
          node = parent.children[index];
        }
        if (node.range.start.line !== line) {
          break;
        }
        last2 = node;
      }
      return last2;
    }
    exports.getStartlineNode = getStartlineNode;
    function getInteriorNodes(start, end) {
      const commonParent = getCommonParent(start, end);
      if (!commonParent) {
        return [];
      }
      return commonParent.parent.children.slice(commonParent.a + 1, commonParent.b);
    }
    exports.getInteriorNodes = getInteriorNodes;
    function getCommonParent(a2, b2) {
      const aParents = getParentChain(a2);
      const bParents = getParentChain(b2);
      let current;
      for (let i = 0; i < aParents.length && i < bParents.length; i++) {
        const aParent = aParents[i];
        const bParent = bParents[i];
        if (aParent.parent === bParent.parent) {
          current = {
            parent: aParent.parent,
            a: aParent.index,
            b: bParent.index
          };
        } else {
          break;
        }
      }
      return current;
    }
    function getParentChain(node) {
      const chain = [];
      while (node.parent) {
        const parent = node.parent;
        const index = parent.children.indexOf(node);
        chain.push({
          parent,
          index
        });
        node = parent;
      }
      return chain.reverse();
    }
  })(cstUtil);
  return cstUtil;
}
var grammarUtil = {};
var LIB;
(() => {
  var t2 = { 470: (t3) => {
    function e2(t4) {
      if ("string" != typeof t4)
        throw new TypeError("Path must be a string. Received " + JSON.stringify(t4));
    }
    function r3(t4, e3) {
      for (var r4, n4 = "", o2 = 0, i = -1, a2 = 0, h2 = 0; h2 <= t4.length; ++h2) {
        if (h2 < t4.length)
          r4 = t4.charCodeAt(h2);
        else {
          if (47 === r4)
            break;
          r4 = 47;
        }
        if (47 === r4) {
          if (i === h2 - 1 || 1 === a2)
            ;
          else if (i !== h2 - 1 && 2 === a2) {
            if (n4.length < 2 || 2 !== o2 || 46 !== n4.charCodeAt(n4.length - 1) || 46 !== n4.charCodeAt(n4.length - 2)) {
              if (n4.length > 2) {
                var s2 = n4.lastIndexOf("/");
                if (s2 !== n4.length - 1) {
                  -1 === s2 ? (n4 = "", o2 = 0) : o2 = (n4 = n4.slice(0, s2)).length - 1 - n4.lastIndexOf("/"), i = h2, a2 = 0;
                  continue;
                }
              } else if (2 === n4.length || 1 === n4.length) {
                n4 = "", o2 = 0, i = h2, a2 = 0;
                continue;
              }
            }
            e3 && (n4.length > 0 ? n4 += "/.." : n4 = "..", o2 = 2);
          } else
            n4.length > 0 ? n4 += "/" + t4.slice(i + 1, h2) : n4 = t4.slice(i + 1, h2), o2 = h2 - i - 1;
          i = h2, a2 = 0;
        } else
          46 === r4 && -1 !== a2 ? ++a2 : a2 = -1;
      }
      return n4;
    }
    var n3 = { resolve: function() {
      for (var t4, n4 = "", o2 = false, i = arguments.length - 1; i >= -1 && !o2; i--) {
        var a2;
        i >= 0 ? a2 = arguments[i] : (void 0 === t4 && (t4 = process.cwd()), a2 = t4), e2(a2), 0 !== a2.length && (n4 = a2 + "/" + n4, o2 = 47 === a2.charCodeAt(0));
      }
      return n4 = r3(n4, !o2), o2 ? n4.length > 0 ? "/" + n4 : "/" : n4.length > 0 ? n4 : ".";
    }, normalize: function(t4) {
      if (e2(t4), 0 === t4.length)
        return ".";
      var n4 = 47 === t4.charCodeAt(0), o2 = 47 === t4.charCodeAt(t4.length - 1);
      return 0 !== (t4 = r3(t4, !n4)).length || n4 || (t4 = "."), t4.length > 0 && o2 && (t4 += "/"), n4 ? "/" + t4 : t4;
    }, isAbsolute: function(t4) {
      return e2(t4), t4.length > 0 && 47 === t4.charCodeAt(0);
    }, join: function() {
      if (0 === arguments.length)
        return ".";
      for (var t4, r4 = 0; r4 < arguments.length; ++r4) {
        var o2 = arguments[r4];
        e2(o2), o2.length > 0 && (void 0 === t4 ? t4 = o2 : t4 += "/" + o2);
      }
      return void 0 === t4 ? "." : n3.normalize(t4);
    }, relative: function(t4, r4) {
      if (e2(t4), e2(r4), t4 === r4)
        return "";
      if ((t4 = n3.resolve(t4)) === (r4 = n3.resolve(r4)))
        return "";
      for (var o2 = 1; o2 < t4.length && 47 === t4.charCodeAt(o2); ++o2)
        ;
      for (var i = t4.length, a2 = i - o2, h2 = 1; h2 < r4.length && 47 === r4.charCodeAt(h2); ++h2)
        ;
      for (var s2 = r4.length - h2, c2 = a2 < s2 ? a2 : s2, f2 = -1, u2 = 0; u2 <= c2; ++u2) {
        if (u2 === c2) {
          if (s2 > c2) {
            if (47 === r4.charCodeAt(h2 + u2))
              return r4.slice(h2 + u2 + 1);
            if (0 === u2)
              return r4.slice(h2 + u2);
          } else
            a2 > c2 && (47 === t4.charCodeAt(o2 + u2) ? f2 = u2 : 0 === u2 && (f2 = 0));
          break;
        }
        var l2 = t4.charCodeAt(o2 + u2);
        if (l2 !== r4.charCodeAt(h2 + u2))
          break;
        47 === l2 && (f2 = u2);
      }
      var p2 = "";
      for (u2 = o2 + f2 + 1; u2 <= i; ++u2)
        u2 !== i && 47 !== t4.charCodeAt(u2) || (0 === p2.length ? p2 += ".." : p2 += "/..");
      return p2.length > 0 ? p2 + r4.slice(h2 + f2) : (h2 += f2, 47 === r4.charCodeAt(h2) && ++h2, r4.slice(h2));
    }, _makeLong: function(t4) {
      return t4;
    }, dirname: function(t4) {
      if (e2(t4), 0 === t4.length)
        return ".";
      for (var r4 = t4.charCodeAt(0), n4 = 47 === r4, o2 = -1, i = true, a2 = t4.length - 1; a2 >= 1; --a2)
        if (47 === (r4 = t4.charCodeAt(a2))) {
          if (!i) {
            o2 = a2;
            break;
          }
        } else
          i = false;
      return -1 === o2 ? n4 ? "/" : "." : n4 && 1 === o2 ? "//" : t4.slice(0, o2);
    }, basename: function(t4, r4) {
      if (void 0 !== r4 && "string" != typeof r4)
        throw new TypeError('"ext" argument must be a string');
      e2(t4);
      var n4, o2 = 0, i = -1, a2 = true;
      if (void 0 !== r4 && r4.length > 0 && r4.length <= t4.length) {
        if (r4.length === t4.length && r4 === t4)
          return "";
        var h2 = r4.length - 1, s2 = -1;
        for (n4 = t4.length - 1; n4 >= 0; --n4) {
          var c2 = t4.charCodeAt(n4);
          if (47 === c2) {
            if (!a2) {
              o2 = n4 + 1;
              break;
            }
          } else
            -1 === s2 && (a2 = false, s2 = n4 + 1), h2 >= 0 && (c2 === r4.charCodeAt(h2) ? -1 == --h2 && (i = n4) : (h2 = -1, i = s2));
        }
        return o2 === i ? i = s2 : -1 === i && (i = t4.length), t4.slice(o2, i);
      }
      for (n4 = t4.length - 1; n4 >= 0; --n4)
        if (47 === t4.charCodeAt(n4)) {
          if (!a2) {
            o2 = n4 + 1;
            break;
          }
        } else
          -1 === i && (a2 = false, i = n4 + 1);
      return -1 === i ? "" : t4.slice(o2, i);
    }, extname: function(t4) {
      e2(t4);
      for (var r4 = -1, n4 = 0, o2 = -1, i = true, a2 = 0, h2 = t4.length - 1; h2 >= 0; --h2) {
        var s2 = t4.charCodeAt(h2);
        if (47 !== s2)
          -1 === o2 && (i = false, o2 = h2 + 1), 46 === s2 ? -1 === r4 ? r4 = h2 : 1 !== a2 && (a2 = 1) : -1 !== r4 && (a2 = -1);
        else if (!i) {
          n4 = h2 + 1;
          break;
        }
      }
      return -1 === r4 || -1 === o2 || 0 === a2 || 1 === a2 && r4 === o2 - 1 && r4 === n4 + 1 ? "" : t4.slice(r4, o2);
    }, format: function(t4) {
      if (null === t4 || "object" != typeof t4)
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t4);
      return function(t5, e3) {
        var r4 = e3.dir || e3.root, n4 = e3.base || (e3.name || "") + (e3.ext || "");
        return r4 ? r4 === e3.root ? r4 + n4 : r4 + "/" + n4 : n4;
      }(0, t4);
    }, parse: function(t4) {
      e2(t4);
      var r4 = { root: "", dir: "", base: "", ext: "", name: "" };
      if (0 === t4.length)
        return r4;
      var n4, o2 = t4.charCodeAt(0), i = 47 === o2;
      i ? (r4.root = "/", n4 = 1) : n4 = 0;
      for (var a2 = -1, h2 = 0, s2 = -1, c2 = true, f2 = t4.length - 1, u2 = 0; f2 >= n4; --f2)
        if (47 !== (o2 = t4.charCodeAt(f2)))
          -1 === s2 && (c2 = false, s2 = f2 + 1), 46 === o2 ? -1 === a2 ? a2 = f2 : 1 !== u2 && (u2 = 1) : -1 !== a2 && (u2 = -1);
        else if (!c2) {
          h2 = f2 + 1;
          break;
        }
      return -1 === a2 || -1 === s2 || 0 === u2 || 1 === u2 && a2 === s2 - 1 && a2 === h2 + 1 ? -1 !== s2 && (r4.base = r4.name = 0 === h2 && i ? t4.slice(1, s2) : t4.slice(h2, s2)) : (0 === h2 && i ? (r4.name = t4.slice(1, a2), r4.base = t4.slice(1, s2)) : (r4.name = t4.slice(h2, a2), r4.base = t4.slice(h2, s2)), r4.ext = t4.slice(a2, s2)), h2 > 0 ? r4.dir = t4.slice(0, h2 - 1) : i && (r4.dir = "/"), r4;
    }, sep: "/", delimiter: ":", win32: null, posix: null };
    n3.posix = n3, t3.exports = n3;
  } }, e = {};
  function r2(n3) {
    var o2 = e[n3];
    if (void 0 !== o2)
      return o2.exports;
    var i = e[n3] = { exports: {} };
    return t2[n3](i, i.exports, r2), i.exports;
  }
  r2.d = (t3, e2) => {
    for (var n3 in e2)
      r2.o(e2, n3) && !r2.o(t3, n3) && Object.defineProperty(t3, n3, { enumerable: true, get: e2[n3] });
  }, r2.o = (t3, e2) => Object.prototype.hasOwnProperty.call(t3, e2), r2.r = (t3) => {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t3, "__esModule", { value: true });
  };
  var n2 = {};
  (() => {
    var t3;
    if (r2.r(n2), r2.d(n2, { URI: () => g2, Utils: () => O2 }), "object" == typeof process)
      t3 = "win32" === process.platform;
    else if ("object" == typeof navigator) {
      var e2 = navigator.userAgent;
      t3 = e2.indexOf("Windows") >= 0;
    }
    var o2, i, a2 = (o2 = function(t4, e3) {
      return o2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t5, e4) {
        t5.__proto__ = e4;
      } || function(t5, e4) {
        for (var r3 in e4)
          Object.prototype.hasOwnProperty.call(e4, r3) && (t5[r3] = e4[r3]);
      }, o2(t4, e3);
    }, function(t4, e3) {
      if ("function" != typeof e3 && null !== e3)
        throw new TypeError("Class extends value " + String(e3) + " is not a constructor or null");
      function r3() {
        this.constructor = t4;
      }
      o2(t4, e3), t4.prototype = null === e3 ? Object.create(e3) : (r3.prototype = e3.prototype, new r3());
    }), h2 = /^\w[\w\d+.-]*$/, s2 = /^\//, c2 = /^\/\//;
    function f2(t4, e3) {
      if (!t4.scheme && e3)
        throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'.concat(t4.authority, '", path: "').concat(t4.path, '", query: "').concat(t4.query, '", fragment: "').concat(t4.fragment, '"}'));
      if (t4.scheme && !h2.test(t4.scheme))
        throw new Error("[UriError]: Scheme contains illegal characters.");
      if (t4.path) {
        if (t4.authority) {
          if (!s2.test(t4.path))
            throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
        } else if (c2.test(t4.path))
          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
      }
    }
    var u2 = "", l2 = "/", p2 = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, g2 = function() {
      function e3(t4, e4, r3, n3, o3, i2) {
        void 0 === i2 && (i2 = false), "object" == typeof t4 ? (this.scheme = t4.scheme || u2, this.authority = t4.authority || u2, this.path = t4.path || u2, this.query = t4.query || u2, this.fragment = t4.fragment || u2) : (this.scheme = function(t5, e5) {
          return t5 || e5 ? t5 : "file";
        }(t4, i2), this.authority = e4 || u2, this.path = function(t5, e5) {
          switch (t5) {
            case "https":
            case "http":
            case "file":
              e5 ? e5[0] !== l2 && (e5 = l2 + e5) : e5 = l2;
          }
          return e5;
        }(this.scheme, r3 || u2), this.query = n3 || u2, this.fragment = o3 || u2, f2(this, i2));
      }
      return e3.isUri = function(t4) {
        return t4 instanceof e3 || !!t4 && "string" == typeof t4.authority && "string" == typeof t4.fragment && "string" == typeof t4.path && "string" == typeof t4.query && "string" == typeof t4.scheme && "string" == typeof t4.fsPath && "function" == typeof t4.with && "function" == typeof t4.toString;
      }, Object.defineProperty(e3.prototype, "fsPath", { get: function() {
        return C2(this, false);
      }, enumerable: false, configurable: true }), e3.prototype.with = function(t4) {
        if (!t4)
          return this;
        var e4 = t4.scheme, r3 = t4.authority, n3 = t4.path, o3 = t4.query, i2 = t4.fragment;
        return void 0 === e4 ? e4 = this.scheme : null === e4 && (e4 = u2), void 0 === r3 ? r3 = this.authority : null === r3 && (r3 = u2), void 0 === n3 ? n3 = this.path : null === n3 && (n3 = u2), void 0 === o3 ? o3 = this.query : null === o3 && (o3 = u2), void 0 === i2 ? i2 = this.fragment : null === i2 && (i2 = u2), e4 === this.scheme && r3 === this.authority && n3 === this.path && o3 === this.query && i2 === this.fragment ? this : new v2(e4, r3, n3, o3, i2);
      }, e3.parse = function(t4, e4) {
        void 0 === e4 && (e4 = false);
        var r3 = p2.exec(t4);
        return r3 ? new v2(r3[2] || u2, _(r3[4] || u2), _(r3[5] || u2), _(r3[7] || u2), _(r3[9] || u2), e4) : new v2(u2, u2, u2, u2, u2);
      }, e3.file = function(e4) {
        var r3 = u2;
        if (t3 && (e4 = e4.replace(/\\/g, l2)), e4[0] === l2 && e4[1] === l2) {
          var n3 = e4.indexOf(l2, 2);
          -1 === n3 ? (r3 = e4.substring(2), e4 = l2) : (r3 = e4.substring(2, n3), e4 = e4.substring(n3) || l2);
        }
        return new v2("file", r3, e4, u2, u2);
      }, e3.from = function(t4) {
        var e4 = new v2(t4.scheme, t4.authority, t4.path, t4.query, t4.fragment);
        return f2(e4, true), e4;
      }, e3.prototype.toString = function(t4) {
        return void 0 === t4 && (t4 = false), A2(this, t4);
      }, e3.prototype.toJSON = function() {
        return this;
      }, e3.revive = function(t4) {
        if (t4) {
          if (t4 instanceof e3)
            return t4;
          var r3 = new v2(t4);
          return r3._formatted = t4.external, r3._fsPath = t4._sep === d2 ? t4.fsPath : null, r3;
        }
        return t4;
      }, e3;
    }(), d2 = t3 ? 1 : void 0, v2 = function(t4) {
      function e3() {
        var e4 = null !== t4 && t4.apply(this, arguments) || this;
        return e4._formatted = null, e4._fsPath = null, e4;
      }
      return a2(e3, t4), Object.defineProperty(e3.prototype, "fsPath", { get: function() {
        return this._fsPath || (this._fsPath = C2(this, false)), this._fsPath;
      }, enumerable: false, configurable: true }), e3.prototype.toString = function(t5) {
        return void 0 === t5 && (t5 = false), t5 ? A2(this, true) : (this._formatted || (this._formatted = A2(this, false)), this._formatted);
      }, e3.prototype.toJSON = function() {
        var t5 = { $mid: 1 };
        return this._fsPath && (t5.fsPath = this._fsPath, t5._sep = d2), this._formatted && (t5.external = this._formatted), this.path && (t5.path = this.path), this.scheme && (t5.scheme = this.scheme), this.authority && (t5.authority = this.authority), this.query && (t5.query = this.query), this.fragment && (t5.fragment = this.fragment), t5;
      }, e3;
    }(g2), y2 = ((i = {})[58] = "%3A", i[47] = "%2F", i[63] = "%3F", i[35] = "%23", i[91] = "%5B", i[93] = "%5D", i[64] = "%40", i[33] = "%21", i[36] = "%24", i[38] = "%26", i[39] = "%27", i[40] = "%28", i[41] = "%29", i[42] = "%2A", i[43] = "%2B", i[44] = "%2C", i[59] = "%3B", i[61] = "%3D", i[32] = "%20", i);
    function m2(t4, e3, r3) {
      for (var n3 = void 0, o3 = -1, i2 = 0; i2 < t4.length; i2++) {
        var a3 = t4.charCodeAt(i2);
        if (a3 >= 97 && a3 <= 122 || a3 >= 65 && a3 <= 90 || a3 >= 48 && a3 <= 57 || 45 === a3 || 46 === a3 || 95 === a3 || 126 === a3 || e3 && 47 === a3 || r3 && 91 === a3 || r3 && 93 === a3 || r3 && 58 === a3)
          -1 !== o3 && (n3 += encodeURIComponent(t4.substring(o3, i2)), o3 = -1), void 0 !== n3 && (n3 += t4.charAt(i2));
        else {
          void 0 === n3 && (n3 = t4.substr(0, i2));
          var h3 = y2[a3];
          void 0 !== h3 ? (-1 !== o3 && (n3 += encodeURIComponent(t4.substring(o3, i2)), o3 = -1), n3 += h3) : -1 === o3 && (o3 = i2);
        }
      }
      return -1 !== o3 && (n3 += encodeURIComponent(t4.substring(o3))), void 0 !== n3 ? n3 : t4;
    }
    function b2(t4) {
      for (var e3 = void 0, r3 = 0; r3 < t4.length; r3++) {
        var n3 = t4.charCodeAt(r3);
        35 === n3 || 63 === n3 ? (void 0 === e3 && (e3 = t4.substr(0, r3)), e3 += y2[n3]) : void 0 !== e3 && (e3 += t4[r3]);
      }
      return void 0 !== e3 ? e3 : t4;
    }
    function C2(e3, r3) {
      var n3;
      return n3 = e3.authority && e3.path.length > 1 && "file" === e3.scheme ? "//".concat(e3.authority).concat(e3.path) : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r3 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t3 && (n3 = n3.replace(/\//g, "\\")), n3;
    }
    function A2(t4, e3) {
      var r3 = e3 ? b2 : m2, n3 = "", o3 = t4.scheme, i2 = t4.authority, a3 = t4.path, h3 = t4.query, s3 = t4.fragment;
      if (o3 && (n3 += o3, n3 += ":"), (i2 || "file" === o3) && (n3 += l2, n3 += l2), i2) {
        var c3 = i2.indexOf("@");
        if (-1 !== c3) {
          var f3 = i2.substr(0, c3);
          i2 = i2.substr(c3 + 1), -1 === (c3 = f3.lastIndexOf(":")) ? n3 += r3(f3, false, false) : (n3 += r3(f3.substr(0, c3), false, false), n3 += ":", n3 += r3(f3.substr(c3 + 1), false, true)), n3 += "@";
        }
        -1 === (c3 = (i2 = i2.toLowerCase()).lastIndexOf(":")) ? n3 += r3(i2, false, true) : (n3 += r3(i2.substr(0, c3), false, true), n3 += i2.substr(c3));
      }
      if (a3) {
        if (a3.length >= 3 && 47 === a3.charCodeAt(0) && 58 === a3.charCodeAt(2))
          (u3 = a3.charCodeAt(1)) >= 65 && u3 <= 90 && (a3 = "/".concat(String.fromCharCode(u3 + 32), ":").concat(a3.substr(3)));
        else if (a3.length >= 2 && 58 === a3.charCodeAt(1)) {
          var u3;
          (u3 = a3.charCodeAt(0)) >= 65 && u3 <= 90 && (a3 = "".concat(String.fromCharCode(u3 + 32), ":").concat(a3.substr(2)));
        }
        n3 += r3(a3, true, false);
      }
      return h3 && (n3 += "?", n3 += r3(h3, false, false)), s3 && (n3 += "#", n3 += e3 ? s3 : m2(s3, false, false)), n3;
    }
    function w2(t4) {
      try {
        return decodeURIComponent(t4);
      } catch (e3) {
        return t4.length > 3 ? t4.substr(0, 3) + w2(t4.substr(3)) : t4;
      }
    }
    var x2 = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
    function _(t4) {
      return t4.match(x2) ? t4.replace(x2, function(t5) {
        return w2(t5);
      }) : t4;
    }
    var O2, P2 = r2(470), j2 = function(t4, e3, r3) {
      if (r3 || 2 === arguments.length)
        for (var n3, o3 = 0, i2 = e3.length; o3 < i2; o3++)
          !n3 && o3 in e3 || (n3 || (n3 = Array.prototype.slice.call(e3, 0, o3)), n3[o3] = e3[o3]);
      return t4.concat(n3 || Array.prototype.slice.call(e3));
    }, I2 = P2.posix || P2, U2 = "/";
    !function(t4) {
      t4.joinPath = function(t5) {
        for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
          e3[r3 - 1] = arguments[r3];
        return t5.with({ path: I2.join.apply(I2, j2([t5.path], e3, false)) });
      }, t4.resolvePath = function(t5) {
        for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
          e3[r3 - 1] = arguments[r3];
        var n3 = t5.path, o3 = false;
        n3[0] !== U2 && (n3 = U2 + n3, o3 = true);
        var i2 = I2.resolve.apply(I2, j2([n3], e3, false));
        return o3 && i2[0] === U2 && !t5.authority && (i2 = i2.substring(1)), t5.with({ path: i2 });
      }, t4.dirname = function(t5) {
        if (0 === t5.path.length || t5.path === U2)
          return t5;
        var e3 = I2.dirname(t5.path);
        return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = ""), t5.with({ path: e3 });
      }, t4.basename = function(t5) {
        return I2.basename(t5.path);
      }, t4.extname = function(t5) {
        return I2.extname(t5.path);
      };
    }(O2 || (O2 = {}));
  })(), LIB = n2;
})();
const { URI, Utils } = LIB;
const esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  URI,
  Utils
}, Symbol.toStringTag, { value: "Module" }));
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(esm);
var dependencyInjection = {};
var hasRequiredDependencyInjection;
function requireDependencyInjection() {
  if (hasRequiredDependencyInjection)
    return dependencyInjection;
  hasRequiredDependencyInjection = 1;
  Object.defineProperty(dependencyInjection, "__esModule", { value: true });
  dependencyInjection.eagerLoad = dependencyInjection.inject = void 0;
  function inject(module1, module2, module3, module4) {
    const module = [module1, module2, module3, module4].reduce(_merge, {});
    return _inject(module);
  }
  dependencyInjection.inject = inject;
  const isProxy = Symbol("isProxy");
  function eagerLoad(item) {
    if (item && item[isProxy]) {
      for (const value of Object.values(item)) {
        eagerLoad(value);
      }
    }
    return item;
  }
  dependencyInjection.eagerLoad = eagerLoad;
  function _inject(module, injector) {
    const proxy = new Proxy({}, {
      deleteProperty: () => false,
      get: (obj, prop) => _resolve(obj, prop, module, injector || proxy),
      getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)),
      has: (_, prop) => prop in module,
      ownKeys: () => [...Reflect.ownKeys(module), isProxy]
      // used by for..in
    });
    proxy[isProxy] = true;
    return proxy;
  }
  const __requested__ = Symbol();
  function _resolve(obj, prop, module, injector) {
    if (prop in obj) {
      if (obj[prop] instanceof Error) {
        throw new Error("Construction failure. Please make sure that your dependencies are constructable.", { cause: obj[prop] });
      }
      if (obj[prop] === __requested__) {
        throw new Error('Cycle detected. Please make "' + String(prop) + '" lazy. See https://langium.org/docs/di/cyclic-dependencies');
      }
      return obj[prop];
    } else if (prop in module) {
      const value = module[prop];
      obj[prop] = __requested__;
      try {
        obj[prop] = typeof value === "function" ? value(injector) : _inject(value, injector);
      } catch (error) {
        obj[prop] = error instanceof Error ? error : void 0;
        throw error;
      }
      return obj[prop];
    } else {
      return void 0;
    }
  }
  function _merge(target, source) {
    if (source) {
      for (const [key, value2] of Object.entries(source)) {
        if (value2 !== void 0) {
          const value1 = target[key];
          if (value1 !== null && value2 !== null && typeof value1 === "object" && typeof value2 === "object") {
            target[key] = _merge(value1, value2);
          } else {
            target[key] = value2;
          }
        }
      }
    }
    return target;
  }
  return dependencyInjection;
}
var astReflectionInterpreter = {};
var collections = {};
var hasRequiredCollections;
function requireCollections() {
  if (hasRequiredCollections)
    return collections;
  hasRequiredCollections = 1;
  Object.defineProperty(collections, "__esModule", { value: true });
  collections.MultiMap = void 0;
  const stream_1 = requireStream();
  class MultiMap {
    constructor(elements) {
      this.map = /* @__PURE__ */ new Map();
      if (elements) {
        for (const [key, value] of elements) {
          this.add(key, value);
        }
      }
    }
    /**
     * The total number of values in the multimap.
     */
    get size() {
      return stream_1.Reduction.sum((0, stream_1.stream)(this.map.values()).map((a2) => a2.length));
    }
    /**
     * Clear all entries in the multimap.
     */
    clear() {
      this.map.clear();
    }
    /**
     * Operates differently depending on whether a `value` is given:
     *  * With a value, this method deletes the specific key / value pair from the multimap.
     *  * Without a value, all values associated with the given key are deleted.
     *
     * @returns `true` if a value existed and has been removed, or `false` if the specified
     *     key / value does not exist.
     */
    delete(key, value) {
      if (value === void 0) {
        return this.map.delete(key);
      } else {
        const values2 = this.map.get(key);
        if (values2) {
          const index = values2.indexOf(value);
          if (index >= 0) {
            if (values2.length === 1) {
              this.map.delete(key);
            } else {
              values2.splice(index, 1);
            }
            return true;
          }
        }
        return false;
      }
    }
    /**
     * Returns an array of all values associated with the given key. If no value exists,
     * an empty array is returned.
     *
     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a
     * value and `delete` to remove a value from the multimap.
     */
    get(key) {
      var _a2;
      return (_a2 = this.map.get(key)) !== null && _a2 !== void 0 ? _a2 : [];
    }
    /**
     * Operates differently depending on whether a `value` is given:
     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.
     *  * Without a value, this method returns `true` if the given key is present in the multimap.
     */
    has(key, value) {
      if (value === void 0) {
        return this.map.has(key);
      } else {
        const values2 = this.map.get(key);
        if (values2) {
          return values2.indexOf(value) >= 0;
        }
        return false;
      }
    }
    /**
     * Add the given key / value pair to the multimap.
     */
    add(key, value) {
      if (this.map.has(key)) {
        this.map.get(key).push(value);
      } else {
        this.map.set(key, [value]);
      }
      return this;
    }
    /**
     * Add the given set of key / value pairs to the multimap.
     */
    addAll(key, values2) {
      if (this.map.has(key)) {
        this.map.get(key).push(...values2);
      } else {
        this.map.set(key, Array.from(values2));
      }
      return this;
    }
    /**
     * Invokes the given callback function for every key / value pair in the multimap.
     */
    forEach(callbackfn) {
      this.map.forEach((array, key) => array.forEach((value) => callbackfn(value, key, this)));
    }
    /**
     * Returns an iterator of key, value pairs for every entry in the map.
     */
    [Symbol.iterator]() {
      return this.entries().iterator();
    }
    /**
     * Returns a stream of key, value pairs for every entry in the map.
     */
    entries() {
      return (0, stream_1.stream)(this.map.entries()).flatMap(([key, array]) => array.map((value) => [key, value]));
    }
    /**
     * Returns a stream of keys in the map.
     */
    keys() {
      return (0, stream_1.stream)(this.map.keys());
    }
    /**
     * Returns a stream of values in the map.
     */
    values() {
      return (0, stream_1.stream)(this.map.values()).flat();
    }
    /**
     * Returns a stream of key, value set pairs for every key in the map.
     */
    entriesGroupedByKey() {
      return (0, stream_1.stream)(this.map.entries());
    }
  }
  collections.MultiMap = MultiMap;
  return collections;
}
var ast = {};
var hasRequiredAst;
function requireAst() {
  if (hasRequiredAst)
    return ast;
  hasRequiredAst = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTypeAttribute = exports.TypeAttribute = exports.isType = exports.Type = exports.isTerminalRule = exports.TerminalRule = exports.isSimpleType = exports.SimpleType = exports.isReturnType = exports.ReturnType = exports.isReferenceType = exports.ReferenceType = exports.isParserRule = exports.ParserRule = exports.isParameterReference = exports.ParameterReference = exports.isParameter = exports.Parameter = exports.isNegation = exports.Negation = exports.isNamedArgument = exports.NamedArgument = exports.isLiteralCondition = exports.LiteralCondition = exports.isInterface = exports.Interface = exports.isInferredType = exports.InferredType = exports.isGrammarImport = exports.GrammarImport = exports.isGrammar = exports.Grammar = exports.isDisjunction = exports.Disjunction = exports.isConjunction = exports.Conjunction = exports.isArrayType = exports.ArrayType = exports.isAbstractElement = exports.AbstractElement = exports.isTypeDefinition = exports.TypeDefinition = exports.isPrimitiveType = exports.isFeatureName = exports.isCondition = exports.Condition = exports.isAbstractType = exports.AbstractType = exports.isAbstractRule = exports.AbstractRule = void 0;
    exports.reflection = exports.LangiumGrammarAstReflection = exports.isWildcard = exports.Wildcard = exports.isUntilToken = exports.UntilToken = exports.isUnorderedGroup = exports.UnorderedGroup = exports.isTerminalRuleCall = exports.TerminalRuleCall = exports.isTerminalGroup = exports.TerminalGroup = exports.isTerminalAlternatives = exports.TerminalAlternatives = exports.isRuleCall = exports.RuleCall = exports.isRegexToken = exports.RegexToken = exports.isNegatedToken = exports.NegatedToken = exports.isKeyword = exports.Keyword = exports.isGroup = exports.Group = exports.isCrossReference = exports.CrossReference = exports.isCharacterRange = exports.CharacterRange = exports.isAssignment = exports.Assignment = exports.isAlternatives = exports.Alternatives = exports.isAction = exports.Action = exports.isUnionType = exports.UnionType = void 0;
    const syntax_tree_1 = requireSyntaxTree();
    exports.AbstractRule = "AbstractRule";
    function isAbstractRule(item) {
      return exports.reflection.isInstance(item, exports.AbstractRule);
    }
    exports.isAbstractRule = isAbstractRule;
    exports.AbstractType = "AbstractType";
    function isAbstractType(item) {
      return exports.reflection.isInstance(item, exports.AbstractType);
    }
    exports.isAbstractType = isAbstractType;
    exports.Condition = "Condition";
    function isCondition(item) {
      return exports.reflection.isInstance(item, exports.Condition);
    }
    exports.isCondition = isCondition;
    function isFeatureName(item) {
      return isPrimitiveType(item) || item === "current" || item === "entry" || item === "extends" || item === "false" || item === "fragment" || item === "grammar" || item === "hidden" || item === "import" || item === "interface" || item === "returns" || item === "terminal" || item === "true" || item === "type" || item === "infer" || item === "infers" || item === "with" || typeof item === "string" && /\^?[_a-zA-Z][\w_]*/.test(item);
    }
    exports.isFeatureName = isFeatureName;
    function isPrimitiveType(item) {
      return item === "string" || item === "number" || item === "boolean" || item === "Date" || item === "bigint";
    }
    exports.isPrimitiveType = isPrimitiveType;
    exports.TypeDefinition = "TypeDefinition";
    function isTypeDefinition(item) {
      return exports.reflection.isInstance(item, exports.TypeDefinition);
    }
    exports.isTypeDefinition = isTypeDefinition;
    exports.AbstractElement = "AbstractElement";
    function isAbstractElement(item) {
      return exports.reflection.isInstance(item, exports.AbstractElement);
    }
    exports.isAbstractElement = isAbstractElement;
    exports.ArrayType = "ArrayType";
    function isArrayType(item) {
      return exports.reflection.isInstance(item, exports.ArrayType);
    }
    exports.isArrayType = isArrayType;
    exports.Conjunction = "Conjunction";
    function isConjunction(item) {
      return exports.reflection.isInstance(item, exports.Conjunction);
    }
    exports.isConjunction = isConjunction;
    exports.Disjunction = "Disjunction";
    function isDisjunction(item) {
      return exports.reflection.isInstance(item, exports.Disjunction);
    }
    exports.isDisjunction = isDisjunction;
    exports.Grammar = "Grammar";
    function isGrammar(item) {
      return exports.reflection.isInstance(item, exports.Grammar);
    }
    exports.isGrammar = isGrammar;
    exports.GrammarImport = "GrammarImport";
    function isGrammarImport(item) {
      return exports.reflection.isInstance(item, exports.GrammarImport);
    }
    exports.isGrammarImport = isGrammarImport;
    exports.InferredType = "InferredType";
    function isInferredType(item) {
      return exports.reflection.isInstance(item, exports.InferredType);
    }
    exports.isInferredType = isInferredType;
    exports.Interface = "Interface";
    function isInterface(item) {
      return exports.reflection.isInstance(item, exports.Interface);
    }
    exports.isInterface = isInterface;
    exports.LiteralCondition = "LiteralCondition";
    function isLiteralCondition(item) {
      return exports.reflection.isInstance(item, exports.LiteralCondition);
    }
    exports.isLiteralCondition = isLiteralCondition;
    exports.NamedArgument = "NamedArgument";
    function isNamedArgument(item) {
      return exports.reflection.isInstance(item, exports.NamedArgument);
    }
    exports.isNamedArgument = isNamedArgument;
    exports.Negation = "Negation";
    function isNegation(item) {
      return exports.reflection.isInstance(item, exports.Negation);
    }
    exports.isNegation = isNegation;
    exports.Parameter = "Parameter";
    function isParameter(item) {
      return exports.reflection.isInstance(item, exports.Parameter);
    }
    exports.isParameter = isParameter;
    exports.ParameterReference = "ParameterReference";
    function isParameterReference(item) {
      return exports.reflection.isInstance(item, exports.ParameterReference);
    }
    exports.isParameterReference = isParameterReference;
    exports.ParserRule = "ParserRule";
    function isParserRule(item) {
      return exports.reflection.isInstance(item, exports.ParserRule);
    }
    exports.isParserRule = isParserRule;
    exports.ReferenceType = "ReferenceType";
    function isReferenceType(item) {
      return exports.reflection.isInstance(item, exports.ReferenceType);
    }
    exports.isReferenceType = isReferenceType;
    exports.ReturnType = "ReturnType";
    function isReturnType(item) {
      return exports.reflection.isInstance(item, exports.ReturnType);
    }
    exports.isReturnType = isReturnType;
    exports.SimpleType = "SimpleType";
    function isSimpleType(item) {
      return exports.reflection.isInstance(item, exports.SimpleType);
    }
    exports.isSimpleType = isSimpleType;
    exports.TerminalRule = "TerminalRule";
    function isTerminalRule(item) {
      return exports.reflection.isInstance(item, exports.TerminalRule);
    }
    exports.isTerminalRule = isTerminalRule;
    exports.Type = "Type";
    function isType(item) {
      return exports.reflection.isInstance(item, exports.Type);
    }
    exports.isType = isType;
    exports.TypeAttribute = "TypeAttribute";
    function isTypeAttribute(item) {
      return exports.reflection.isInstance(item, exports.TypeAttribute);
    }
    exports.isTypeAttribute = isTypeAttribute;
    exports.UnionType = "UnionType";
    function isUnionType(item) {
      return exports.reflection.isInstance(item, exports.UnionType);
    }
    exports.isUnionType = isUnionType;
    exports.Action = "Action";
    function isAction(item) {
      return exports.reflection.isInstance(item, exports.Action);
    }
    exports.isAction = isAction;
    exports.Alternatives = "Alternatives";
    function isAlternatives(item) {
      return exports.reflection.isInstance(item, exports.Alternatives);
    }
    exports.isAlternatives = isAlternatives;
    exports.Assignment = "Assignment";
    function isAssignment(item) {
      return exports.reflection.isInstance(item, exports.Assignment);
    }
    exports.isAssignment = isAssignment;
    exports.CharacterRange = "CharacterRange";
    function isCharacterRange(item) {
      return exports.reflection.isInstance(item, exports.CharacterRange);
    }
    exports.isCharacterRange = isCharacterRange;
    exports.CrossReference = "CrossReference";
    function isCrossReference(item) {
      return exports.reflection.isInstance(item, exports.CrossReference);
    }
    exports.isCrossReference = isCrossReference;
    exports.Group = "Group";
    function isGroup(item) {
      return exports.reflection.isInstance(item, exports.Group);
    }
    exports.isGroup = isGroup;
    exports.Keyword = "Keyword";
    function isKeyword(item) {
      return exports.reflection.isInstance(item, exports.Keyword);
    }
    exports.isKeyword = isKeyword;
    exports.NegatedToken = "NegatedToken";
    function isNegatedToken(item) {
      return exports.reflection.isInstance(item, exports.NegatedToken);
    }
    exports.isNegatedToken = isNegatedToken;
    exports.RegexToken = "RegexToken";
    function isRegexToken(item) {
      return exports.reflection.isInstance(item, exports.RegexToken);
    }
    exports.isRegexToken = isRegexToken;
    exports.RuleCall = "RuleCall";
    function isRuleCall(item) {
      return exports.reflection.isInstance(item, exports.RuleCall);
    }
    exports.isRuleCall = isRuleCall;
    exports.TerminalAlternatives = "TerminalAlternatives";
    function isTerminalAlternatives(item) {
      return exports.reflection.isInstance(item, exports.TerminalAlternatives);
    }
    exports.isTerminalAlternatives = isTerminalAlternatives;
    exports.TerminalGroup = "TerminalGroup";
    function isTerminalGroup(item) {
      return exports.reflection.isInstance(item, exports.TerminalGroup);
    }
    exports.isTerminalGroup = isTerminalGroup;
    exports.TerminalRuleCall = "TerminalRuleCall";
    function isTerminalRuleCall(item) {
      return exports.reflection.isInstance(item, exports.TerminalRuleCall);
    }
    exports.isTerminalRuleCall = isTerminalRuleCall;
    exports.UnorderedGroup = "UnorderedGroup";
    function isUnorderedGroup(item) {
      return exports.reflection.isInstance(item, exports.UnorderedGroup);
    }
    exports.isUnorderedGroup = isUnorderedGroup;
    exports.UntilToken = "UntilToken";
    function isUntilToken(item) {
      return exports.reflection.isInstance(item, exports.UntilToken);
    }
    exports.isUntilToken = isUntilToken;
    exports.Wildcard = "Wildcard";
    function isWildcard(item) {
      return exports.reflection.isInstance(item, exports.Wildcard);
    }
    exports.isWildcard = isWildcard;
    class LangiumGrammarAstReflection extends syntax_tree_1.AbstractAstReflection {
      getAllTypes() {
        return ["AbstractElement", "AbstractRule", "AbstractType", "Action", "Alternatives", "ArrayType", "Assignment", "CharacterRange", "Condition", "Conjunction", "CrossReference", "Disjunction", "Grammar", "GrammarImport", "Group", "InferredType", "Interface", "Keyword", "LiteralCondition", "NamedArgument", "NegatedToken", "Negation", "Parameter", "ParameterReference", "ParserRule", "ReferenceType", "RegexToken", "ReturnType", "RuleCall", "SimpleType", "TerminalAlternatives", "TerminalGroup", "TerminalRule", "TerminalRuleCall", "Type", "TypeAttribute", "TypeDefinition", "UnionType", "UnorderedGroup", "UntilToken", "Wildcard"];
      }
      computeIsSubtype(subtype, supertype) {
        switch (subtype) {
          case exports.Action: {
            return this.isSubtype(exports.AbstractElement, supertype) || this.isSubtype(exports.AbstractType, supertype);
          }
          case exports.Alternatives:
          case exports.Assignment:
          case exports.CharacterRange:
          case exports.CrossReference:
          case exports.Group:
          case exports.Keyword:
          case exports.NegatedToken:
          case exports.RegexToken:
          case exports.RuleCall:
          case exports.TerminalAlternatives:
          case exports.TerminalGroup:
          case exports.TerminalRuleCall:
          case exports.UnorderedGroup:
          case exports.UntilToken:
          case exports.Wildcard: {
            return this.isSubtype(exports.AbstractElement, supertype);
          }
          case exports.ArrayType:
          case exports.ReferenceType:
          case exports.SimpleType:
          case exports.UnionType: {
            return this.isSubtype(exports.TypeDefinition, supertype);
          }
          case exports.Conjunction:
          case exports.Disjunction:
          case exports.LiteralCondition:
          case exports.Negation:
          case exports.ParameterReference: {
            return this.isSubtype(exports.Condition, supertype);
          }
          case exports.Interface:
          case exports.Type: {
            return this.isSubtype(exports.AbstractType, supertype);
          }
          case exports.ParserRule: {
            return this.isSubtype(exports.AbstractRule, supertype) || this.isSubtype(exports.AbstractType, supertype);
          }
          case exports.TerminalRule: {
            return this.isSubtype(exports.AbstractRule, supertype);
          }
          default: {
            return false;
          }
        }
      }
      getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
          case "Action:type":
          case "CrossReference:type":
          case "Interface:superTypes":
          case "ParserRule:returnType":
          case "SimpleType:typeRef": {
            return exports.AbstractType;
          }
          case "Grammar:hiddenTokens":
          case "ParserRule:hiddenTokens":
          case "RuleCall:rule": {
            return exports.AbstractRule;
          }
          case "Grammar:usedGrammars": {
            return exports.Grammar;
          }
          case "NamedArgument:parameter":
          case "ParameterReference:parameter": {
            return exports.Parameter;
          }
          case "TerminalRuleCall:rule": {
            return exports.TerminalRule;
          }
          default: {
            throw new Error(`${referenceId} is not a valid reference id.`);
          }
        }
      }
      getTypeMetaData(type) {
        switch (type) {
          case "Grammar": {
            return {
              name: "Grammar",
              mandatory: [
                { name: "definesHiddenTokens", type: "boolean" },
                { name: "hiddenTokens", type: "array" },
                { name: "imports", type: "array" },
                { name: "interfaces", type: "array" },
                { name: "isDeclared", type: "boolean" },
                { name: "rules", type: "array" },
                { name: "types", type: "array" },
                { name: "usedGrammars", type: "array" }
              ]
            };
          }
          case "Interface": {
            return {
              name: "Interface",
              mandatory: [
                { name: "attributes", type: "array" },
                { name: "superTypes", type: "array" }
              ]
            };
          }
          case "LiteralCondition": {
            return {
              name: "LiteralCondition",
              mandatory: [
                { name: "true", type: "boolean" }
              ]
            };
          }
          case "NamedArgument": {
            return {
              name: "NamedArgument",
              mandatory: [
                { name: "calledByName", type: "boolean" }
              ]
            };
          }
          case "ParserRule": {
            return {
              name: "ParserRule",
              mandatory: [
                { name: "definesHiddenTokens", type: "boolean" },
                { name: "entry", type: "boolean" },
                { name: "fragment", type: "boolean" },
                { name: "hiddenTokens", type: "array" },
                { name: "parameters", type: "array" },
                { name: "wildcard", type: "boolean" }
              ]
            };
          }
          case "TerminalRule": {
            return {
              name: "TerminalRule",
              mandatory: [
                { name: "fragment", type: "boolean" },
                { name: "hidden", type: "boolean" }
              ]
            };
          }
          case "TypeAttribute": {
            return {
              name: "TypeAttribute",
              mandatory: [
                { name: "isOptional", type: "boolean" }
              ]
            };
          }
          case "UnionType": {
            return {
              name: "UnionType",
              mandatory: [
                { name: "types", type: "array" }
              ]
            };
          }
          case "Alternatives": {
            return {
              name: "Alternatives",
              mandatory: [
                { name: "elements", type: "array" }
              ]
            };
          }
          case "CrossReference": {
            return {
              name: "CrossReference",
              mandatory: [
                { name: "deprecatedSyntax", type: "boolean" }
              ]
            };
          }
          case "Group": {
            return {
              name: "Group",
              mandatory: [
                { name: "elements", type: "array" }
              ]
            };
          }
          case "RuleCall": {
            return {
              name: "RuleCall",
              mandatory: [
                { name: "arguments", type: "array" }
              ]
            };
          }
          case "TerminalAlternatives": {
            return {
              name: "TerminalAlternatives",
              mandatory: [
                { name: "elements", type: "array" }
              ]
            };
          }
          case "TerminalGroup": {
            return {
              name: "TerminalGroup",
              mandatory: [
                { name: "elements", type: "array" }
              ]
            };
          }
          case "UnorderedGroup": {
            return {
              name: "UnorderedGroup",
              mandatory: [
                { name: "elements", type: "array" }
              ]
            };
          }
          default: {
            return {
              name: type,
              mandatory: []
            };
          }
        }
      }
    }
    exports.LangiumGrammarAstReflection = LangiumGrammarAstReflection;
    exports.reflection = new LangiumGrammarAstReflection();
  })(ast);
  return ast;
}
var astCollector = {};
var typesUtil = {};
var types = {};
var generatorNode = {};
var nodeProcessor = {};
var generatorTracing = {};
var astUtil = {};
var hasRequiredAstUtil;
function requireAstUtil() {
  if (hasRequiredAstUtil)
    return astUtil;
  hasRequiredAstUtil = 1;
  Object.defineProperty(astUtil, "__esModule", { value: true });
  astUtil.copyAstNode = astUtil.findLocalReferences = astUtil.streamReferences = astUtil.streamAst = astUtil.streamAllContents = astUtil.streamContents = astUtil.findRootNode = astUtil.getDocument = astUtil.hasContainerOfType = astUtil.getContainerOfType = astUtil.linkContentToContainer = void 0;
  const syntax_tree_1 = requireSyntaxTree();
  const stream_1 = requireStream();
  const cst_util_1 = requireCstUtil();
  function linkContentToContainer(node) {
    for (const [name2, value] of Object.entries(node)) {
      if (!name2.startsWith("$")) {
        if (Array.isArray(value)) {
          value.forEach((item, index) => {
            if ((0, syntax_tree_1.isAstNode)(item)) {
              item.$container = node;
              item.$containerProperty = name2;
              item.$containerIndex = index;
            }
          });
        } else if ((0, syntax_tree_1.isAstNode)(value)) {
          value.$container = node;
          value.$containerProperty = name2;
        }
      }
    }
  }
  astUtil.linkContentToContainer = linkContentToContainer;
  function getContainerOfType(node, typePredicate) {
    let item = node;
    while (item) {
      if (typePredicate(item)) {
        return item;
      }
      item = item.$container;
    }
    return void 0;
  }
  astUtil.getContainerOfType = getContainerOfType;
  function hasContainerOfType(node, predicate) {
    let item = node;
    while (item) {
      if (predicate(item)) {
        return true;
      }
      item = item.$container;
    }
    return false;
  }
  astUtil.hasContainerOfType = hasContainerOfType;
  function getDocument(node) {
    const rootNode = findRootNode(node);
    const result = rootNode.$document;
    if (!result) {
      throw new Error("AST node has no document.");
    }
    return result;
  }
  astUtil.getDocument = getDocument;
  function findRootNode(node) {
    while (node.$container) {
      node = node.$container;
    }
    return node;
  }
  astUtil.findRootNode = findRootNode;
  function streamContents(node, options) {
    if (!node) {
      throw new Error("Node must be an AstNode.");
    }
    const range2 = options === null || options === void 0 ? void 0 : options.range;
    return new stream_1.StreamImpl(() => ({
      keys: Object.keys(node),
      keyIndex: 0,
      arrayIndex: 0
    }), (state) => {
      while (state.keyIndex < state.keys.length) {
        const property = state.keys[state.keyIndex];
        if (!property.startsWith("$")) {
          const value = node[property];
          if ((0, syntax_tree_1.isAstNode)(value)) {
            state.keyIndex++;
            if (isAstNodeInRange(value, range2)) {
              return { done: false, value };
            }
          } else if (Array.isArray(value)) {
            while (state.arrayIndex < value.length) {
              const index = state.arrayIndex++;
              const element = value[index];
              if ((0, syntax_tree_1.isAstNode)(element) && isAstNodeInRange(element, range2)) {
                return { done: false, value: element };
              }
            }
            state.arrayIndex = 0;
          }
        }
        state.keyIndex++;
      }
      return stream_1.DONE_RESULT;
    });
  }
  astUtil.streamContents = streamContents;
  function streamAllContents(root, options) {
    if (!root) {
      throw new Error("Root node must be an AstNode.");
    }
    return new stream_1.TreeStreamImpl(root, (node) => streamContents(node, options));
  }
  astUtil.streamAllContents = streamAllContents;
  function streamAst(root, options) {
    if (!root) {
      throw new Error("Root node must be an AstNode.");
    } else if ((options === null || options === void 0 ? void 0 : options.range) && !isAstNodeInRange(root, options.range)) {
      return new stream_1.TreeStreamImpl(root, () => []);
    }
    return new stream_1.TreeStreamImpl(root, (node) => streamContents(node, options), { includeRoot: true });
  }
  astUtil.streamAst = streamAst;
  function isAstNodeInRange(astNode, range2) {
    var _a2;
    if (!range2) {
      return true;
    }
    const nodeRange = (_a2 = astNode.$cstNode) === null || _a2 === void 0 ? void 0 : _a2.range;
    if (!nodeRange) {
      return false;
    }
    return (0, cst_util_1.inRange)(nodeRange, range2);
  }
  function streamReferences(node) {
    return new stream_1.StreamImpl(() => ({
      keys: Object.keys(node),
      keyIndex: 0,
      arrayIndex: 0
    }), (state) => {
      while (state.keyIndex < state.keys.length) {
        const property = state.keys[state.keyIndex];
        if (!property.startsWith("$")) {
          const value = node[property];
          if ((0, syntax_tree_1.isReference)(value)) {
            state.keyIndex++;
            return { done: false, value: { reference: value, container: node, property } };
          } else if (Array.isArray(value)) {
            while (state.arrayIndex < value.length) {
              const index = state.arrayIndex++;
              const element = value[index];
              if ((0, syntax_tree_1.isReference)(element)) {
                return { done: false, value: { reference: element, container: node, property, index } };
              }
            }
            state.arrayIndex = 0;
          }
        }
        state.keyIndex++;
      }
      return stream_1.DONE_RESULT;
    });
  }
  astUtil.streamReferences = streamReferences;
  function findLocalReferences(targetNode, lookup = getDocument(targetNode).parseResult.value) {
    const refs = [];
    streamAst(lookup).forEach((node) => {
      streamReferences(node).forEach((refInfo) => {
        if (refInfo.reference.ref === targetNode) {
          refs.push(refInfo.reference);
        }
      });
    });
    return (0, stream_1.stream)(refs);
  }
  astUtil.findLocalReferences = findLocalReferences;
  function copyAstNode(node, buildReference2) {
    const copy = { $type: node.$type };
    for (const [name2, value] of Object.entries(node)) {
      if (!name2.startsWith("$")) {
        if ((0, syntax_tree_1.isAstNode)(value)) {
          copy[name2] = copyAstNode(value, buildReference2);
        } else if ((0, syntax_tree_1.isReference)(value)) {
          copy[name2] = buildReference2(copy, name2, value.$refNode, value.$refText);
        } else if (Array.isArray(value)) {
          const copiedArray = [];
          for (const element of value) {
            if ((0, syntax_tree_1.isAstNode)(element)) {
              copiedArray.push(copyAstNode(element, buildReference2));
            } else if ((0, syntax_tree_1.isReference)(element)) {
              copiedArray.push(buildReference2(copy, name2, element.$refNode, element.$refText));
            } else {
              copiedArray.push(element);
            }
          }
          copy[name2] = copiedArray;
        } else {
          copy[name2] = value;
        }
      }
    }
    linkContentToContainer(copy);
    return copy;
  }
  astUtil.copyAstNode = copyAstNode;
  return astUtil;
}
var hasRequiredGeneratorTracing;
function requireGeneratorTracing() {
  if (hasRequiredGeneratorTracing)
    return generatorTracing;
  hasRequiredGeneratorTracing = 1;
  Object.defineProperty(generatorTracing, "__esModule", { value: true });
  generatorTracing.getSourceRegion = void 0;
  const ast_util_1 = requireAstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const stream_1 = requireStream();
  function getSourceRegion(sourceSpec) {
    var _a2, _b2;
    if (!sourceSpec) {
      return void 0;
    } else if ("astNode" in sourceSpec) {
      return getSourceRegionOfAstNode(sourceSpec);
    } else if (Array.isArray(sourceSpec)) {
      return sourceSpec.reduce(mergeDocumentSegment, void 0);
    } else {
      const sourceRegion = sourceSpec;
      const sourceFileURIviaCstNode = isCstNode(sourceRegion) ? getDocumentURIOrUndefined((_b2 = (_a2 = sourceRegion === null || sourceRegion === void 0 ? void 0 : sourceRegion.root) === null || _a2 === void 0 ? void 0 : _a2.element) !== null && _b2 !== void 0 ? _b2 : sourceRegion === null || sourceRegion === void 0 ? void 0 : sourceRegion.element) : void 0;
      return copyDocumentSegment(sourceRegion, sourceFileURIviaCstNode);
    }
  }
  generatorTracing.getSourceRegion = getSourceRegion;
  function isCstNode(segment) {
    return typeof segment !== "undefined" && "element" in segment && "text" in segment;
  }
  function getDocumentURIOrUndefined(astNode) {
    try {
      return (0, ast_util_1.getDocument)(astNode).uri.toString();
    } catch (e) {
      return void 0;
    }
  }
  function getSourceRegionOfAstNode(sourceSpec) {
    var _a2, _b2;
    const { astNode, property, index } = sourceSpec !== null && sourceSpec !== void 0 ? sourceSpec : {};
    const textRegion = (_a2 = astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) !== null && _a2 !== void 0 ? _a2 : astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion;
    if (astNode === void 0 || textRegion === void 0) {
      return void 0;
    } else if (property === void 0) {
      return copyDocumentSegment(textRegion, getDocumentURI(astNode));
    } else {
      const getSingleOrCompoundRegion = (regions) => {
        if (index !== void 0 && index > -1 && Array.isArray(astNode[property])) {
          return index < regions.length ? regions[index] : void 0;
        } else {
          return regions.reduce(mergeDocumentSegment, void 0);
        }
      };
      if ((_b2 = textRegion.assignments) === null || _b2 === void 0 ? void 0 : _b2[property]) {
        const region = getSingleOrCompoundRegion(textRegion.assignments[property]);
        return region && copyDocumentSegment(region, getDocumentURI(astNode));
      } else if (astNode.$cstNode) {
        const region = getSingleOrCompoundRegion((0, grammar_util_1.findNodesForProperty)(astNode.$cstNode, property));
        return region && copyDocumentSegment(region, getDocumentURI(astNode));
      } else {
        return void 0;
      }
    }
  }
  function getDocumentURI(astNode) {
    var _a2, _b2, _c2, _d;
    if (astNode.$cstNode) {
      return (_b2 = (_a2 = (0, ast_util_1.getDocument)(astNode)) === null || _a2 === void 0 ? void 0 : _a2.uri) === null || _b2 === void 0 ? void 0 : _b2.toString();
    } else if (astNode.$textRegion) {
      return astNode.$textRegion.documentURI || ((_d = (_c2 = new stream_1.TreeStreamImpl(astNode, (n2) => n2.$container ? [n2.$container] : []).find((n2) => {
        var _a3;
        return (_a3 = n2.$textRegion) === null || _a3 === void 0 ? void 0 : _a3.documentURI;
      })) === null || _c2 === void 0 ? void 0 : _c2.$textRegion) === null || _d === void 0 ? void 0 : _d.documentURI);
    } else {
      return void 0;
    }
  }
  function copyDocumentSegment(region, fileURI) {
    var _a2, _b2;
    const result = {
      offset: region.offset,
      end: (_a2 = region.end) !== null && _a2 !== void 0 ? _a2 : region.offset + region.length,
      length: (_b2 = region.length) !== null && _b2 !== void 0 ? _b2 : region.end - region.offset
    };
    if (region.range) {
      result.range = region.range;
    }
    fileURI !== null && fileURI !== void 0 ? fileURI : fileURI = region.fileURI;
    if (fileURI) {
      result.fileURI = fileURI;
    }
    return result;
  }
  function mergeDocumentSegment(prev, curr) {
    var _a2, _b2;
    if (!prev) {
      return curr && copyDocumentSegment(curr);
    } else if (!curr) {
      return prev && copyDocumentSegment(prev);
    }
    const prevEnd = (_a2 = prev.end) !== null && _a2 !== void 0 ? _a2 : prev.offset + prev.length;
    const currEnd = (_b2 = curr.end) !== null && _b2 !== void 0 ? _b2 : curr.offset + curr.length;
    const offset = Math.min(prev.offset, curr.offset);
    const end = Math.max(prevEnd, currEnd);
    const length = end - offset;
    const result = {
      offset,
      end,
      length
    };
    if (prev.range && curr.range) {
      result.range = {
        start: curr.range.start.line < prev.range.start.line || curr.range.start.line === prev.range.start.line && curr.range.start.character < prev.range.start.character ? curr.range.start : prev.range.start,
        end: curr.range.end.line > prev.range.end.line || curr.range.end.line === prev.range.end.line && curr.range.end.character > prev.range.end.character ? curr.range.end : prev.range.end
      };
    }
    if (prev.fileURI || curr.fileURI) {
      const prevURI = prev.fileURI;
      const currURI = curr.fileURI;
      const fileURI = prevURI && currURI && prevURI !== currURI ? `<unmergable text regions of ${prevURI}, ${currURI}>` : prevURI !== null && prevURI !== void 0 ? prevURI : currURI;
      result.fileURI = fileURI;
    }
    return result;
  }
  return generatorTracing;
}
var hasRequiredNodeProcessor;
function requireNodeProcessor() {
  if (hasRequiredNodeProcessor)
    return nodeProcessor;
  hasRequiredNodeProcessor = 1;
  Object.defineProperty(nodeProcessor, "__esModule", { value: true });
  nodeProcessor.processGeneratorNode = void 0;
  const generator_node_1 = requireGeneratorNode();
  const generator_tracing_1 = requireGeneratorTracing();
  class Context {
    constructor(defaultIndent) {
      this.defaultIndentation = "    ";
      this.pendingIndent = true;
      this.currentIndents = [];
      this.recentNonImmediateIndents = [];
      this.traceData = [];
      this.lines = [[]];
      if (typeof defaultIndent === "string") {
        this.defaultIndentation = defaultIndent;
      } else if (typeof defaultIndent === "number") {
        this.defaultIndentation = "".padStart(defaultIndent);
      }
    }
    get content() {
      return this.lines.map((e) => e.join("")).join("");
    }
    get currentLineNumber() {
      return this.lines.length - 1;
    }
    get currentLineContent() {
      return this.lines[this.currentLineNumber].join("");
    }
    get currentPosition() {
      return {
        offset: this.content.length,
        line: this.currentLineNumber,
        character: this.currentLineContent.length
      };
    }
    append(value, isIndent) {
      if (value.length > 0) {
        const beforePos = isIndent && this.currentPosition;
        this.lines[this.currentLineNumber].push(value);
        if (beforePos) {
          this.indentPendingTraceRegions(beforePos);
        }
      }
    }
    indentPendingTraceRegions(before) {
      for (let i = this.traceData.length - 1; i >= 0; i--) {
        const tr = this.traceData[i];
        if (tr.targetStart && tr.targetStart.offset === before.offset)
          tr.targetStart = this.currentPosition;
      }
    }
    increaseIndent(node) {
      this.currentIndents.push(node);
      if (!node.indentImmediately) {
        this.recentNonImmediateIndents.push(node);
      }
    }
    decreaseIndent() {
      this.currentIndents.pop();
    }
    get relevantIndents() {
      return this.currentIndents.filter((i) => !this.recentNonImmediateIndents.includes(i));
    }
    resetCurrentLine() {
      this.lines[this.currentLineNumber] = [];
    }
    addNewLine() {
      this.pendingIndent = true;
      this.lines.push([]);
      this.recentNonImmediateIndents.length = 0;
    }
    pushTraceRegion(sourceRegion) {
      const region = createTraceRegion(sourceRegion, this.currentPosition, (it) => {
        var _a2, _b2;
        return (_b2 = (_a2 = this.traceData[this.traceData.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.children) === null || _b2 === void 0 ? void 0 : _b2.push(it);
      });
      this.traceData.push(region);
      return region;
    }
    popTraceRegion(expected) {
      const traceRegion = this.traceData.pop();
      this.assertTrue(traceRegion === expected, "Trace region mismatch!");
      return traceRegion;
    }
    getParentTraceSourceFileURI() {
      var _a2;
      for (let i = this.traceData.length - 1; i > -1; i--) {
        const fileUri = (_a2 = this.traceData[i].sourceRegion) === null || _a2 === void 0 ? void 0 : _a2.fileURI;
        if (fileUri)
          return fileUri;
      }
      return void 0;
    }
    assertTrue(condition, msg) {
      if (!condition) {
        throw new Error(msg);
      }
    }
  }
  function createTraceRegion(sourceRegion, targetStart, accept) {
    const result = {
      sourceRegion,
      targetRegion: void 0,
      children: [],
      targetStart,
      complete: (targetEnd) => {
        var _a2, _b2;
        result.targetRegion = {
          offset: result.targetStart.offset,
          end: targetEnd.offset,
          length: targetEnd.offset - result.targetStart.offset,
          range: {
            start: {
              line: result.targetStart.line,
              character: result.targetStart.character
            },
            end: {
              line: targetEnd.line,
              character: targetEnd.character
            }
          }
        };
        delete result.targetStart;
        if (((_a2 = result.children) === null || _a2 === void 0 ? void 0 : _a2.length) === 0) {
          delete result.children;
        }
        if ((_b2 = result.targetRegion) === null || _b2 === void 0 ? void 0 : _b2.length) {
          accept(result);
        }
        delete result.complete;
        return result;
      }
    };
    return result;
  }
  function processGeneratorNode(node, defaultIndentation) {
    const context = new Context(defaultIndentation);
    const trace = context.pushTraceRegion(void 0);
    processNodeInternal(node, context);
    context.popTraceRegion(trace);
    trace.complete && trace.complete(context.currentPosition);
    const singleChild = trace.children && trace.children.length === 1 ? trace.children[0] : void 0;
    const singleChildTargetRegion = singleChild === null || singleChild === void 0 ? void 0 : singleChild.targetRegion;
    const rootTargetRegion = trace.targetRegion;
    if (singleChildTargetRegion && singleChild.sourceRegion && singleChildTargetRegion.offset === rootTargetRegion.offset && singleChildTargetRegion.length === rootTargetRegion.length) {
      return { text: context.content, trace: singleChild };
    } else {
      return { text: context.content, trace };
    }
  }
  nodeProcessor.processGeneratorNode = processGeneratorNode;
  function processNodeInternal(node, context) {
    if (typeof node === "string") {
      processStringNode(node, context);
    } else if (node instanceof generator_node_1.IndentNode) {
      processIndentNode(node, context);
    } else if (node instanceof generator_node_1.CompositeGeneratorNode) {
      processCompositeNode(node, context);
    } else if (node instanceof generator_node_1.NewLineNode) {
      processNewLineNode(node, context);
    }
  }
  function hasContent(node, ctx) {
    if (typeof node === "string") {
      return node.length !== 0;
    } else if (node instanceof generator_node_1.CompositeGeneratorNode) {
      return node.contents.some((e) => hasContent(e, ctx));
    } else if (node instanceof generator_node_1.NewLineNode) {
      return !(node.ifNotEmpty && ctx.currentLineContent.length === 0);
    } else {
      return false;
    }
  }
  function processStringNode(node, context) {
    if (node) {
      if (context.pendingIndent) {
        handlePendingIndent(context, false);
      }
      context.append(node);
    }
  }
  function handlePendingIndent(ctx, endOfLine) {
    var _a2;
    let indent = "";
    for (const indentNode of ctx.relevantIndents.filter((e) => e.indentEmptyLines || !endOfLine)) {
      indent += (_a2 = indentNode.indentation) !== null && _a2 !== void 0 ? _a2 : ctx.defaultIndentation;
    }
    ctx.append(indent, true);
    ctx.pendingIndent = false;
  }
  function processCompositeNode(node, context) {
    let traceRegion = void 0;
    const sourceRegion = (0, generator_tracing_1.getSourceRegion)(node.tracedSource);
    if (sourceRegion) {
      traceRegion = context.pushTraceRegion(sourceRegion);
    }
    for (const child of node.contents) {
      processNodeInternal(child, context);
    }
    if (traceRegion) {
      context.popTraceRegion(traceRegion);
      const parentsFileURI = context.getParentTraceSourceFileURI();
      if (parentsFileURI && (sourceRegion === null || sourceRegion === void 0 ? void 0 : sourceRegion.fileURI) === parentsFileURI) {
        delete sourceRegion.fileURI;
      }
      traceRegion.complete && traceRegion.complete(context.currentPosition);
    }
  }
  function processIndentNode(node, context) {
    var _a2;
    if (hasContent(node, context)) {
      if (node.indentImmediately && !context.pendingIndent) {
        context.append((_a2 = node.indentation) !== null && _a2 !== void 0 ? _a2 : context.defaultIndentation, true);
      }
      try {
        context.increaseIndent(node);
        processCompositeNode(node, context);
      } finally {
        context.decreaseIndent();
      }
    }
  }
  function processNewLineNode(node, context) {
    if (node.ifNotEmpty && !hasNonWhitespace(context.currentLineContent)) {
      context.resetCurrentLine();
    } else {
      if (context.pendingIndent) {
        handlePendingIndent(context, true);
      }
      context.append(node.lineDelimiter);
      context.addNewLine();
    }
  }
  function hasNonWhitespace(text) {
    return text.trimStart() !== "";
  }
  return nodeProcessor;
}
var templateNode = {};
var templateString = {};
var hasRequiredTemplateString;
function requireTemplateString() {
  if (hasRequiredTemplateString)
    return templateString;
  hasRequiredTemplateString = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeEOL = exports.findIndentation = exports.NEWLINE_REGEXP = exports.SNLE = exports.expandToString = exports.expandToStringWithNL = void 0;
    const generator_node_1 = requireGeneratorNode();
    function expandToStringWithNL(staticParts, ...substitutions) {
      return expandToString(staticParts, ...substitutions) + generator_node_1.EOL;
    }
    exports.expandToStringWithNL = expandToStringWithNL;
    function expandToString(staticParts, ...substitutions) {
      let lines = substitutions.reduce((acc, subst, i) => {
        var _a2;
        return acc + (subst === void 0 ? exports.SNLE : align((0, generator_node_1.toString)(subst), acc)) + ((_a2 = staticParts[i + 1]) !== null && _a2 !== void 0 ? _a2 : "");
      }, staticParts[0]).split(exports.NEWLINE_REGEXP).filter((l2) => l2.trim() !== exports.SNLE).map((l2) => l2.replace(exports.SNLE, "").trimRight());
      const containsLeadingLinebreak = lines.length > 1 && lines[0].trim().length === 0;
      lines = containsLeadingLinebreak ? lines.slice(1) : lines;
      const containsTrailingLinebreak = lines.length !== 0 && lines[lines.length - 1].trimRight().length === 0;
      lines = containsTrailingLinebreak ? lines.slice(0, lines.length - 1) : lines;
      const indent = findIndentation(lines);
      return lines.map((line) => line.slice(indent).trimRight()).join(generator_node_1.EOL);
    }
    exports.expandToString = expandToString;
    exports.SNLE = Object.freeze("__«SKIP^NEW^LINE^IF^EMPTY»__");
    exports.NEWLINE_REGEXP = /\r?\n/g;
    const nonWhitespace = /\S|$/;
    function align(subst, acc) {
      const length = Math.max(0, acc.length - acc.lastIndexOf("\n") - 1);
      const indent = " ".repeat(length);
      return subst.replace(exports.NEWLINE_REGEXP, generator_node_1.EOL + indent);
    }
    function findIndentation(lines) {
      const indents = lines.filter((line) => line.length > 0).map((line) => line.search(nonWhitespace));
      const min = indents.length === 0 ? 0 : Math.min(...indents);
      return Math.max(0, min);
    }
    exports.findIndentation = findIndentation;
    function normalizeEOL(input) {
      return input.replace(exports.NEWLINE_REGEXP, generator_node_1.EOL);
    }
    exports.normalizeEOL = normalizeEOL;
  })(templateString);
  return templateString;
}
var hasRequiredTemplateNode;
function requireTemplateNode() {
  if (hasRequiredTemplateNode)
    return templateNode;
  hasRequiredTemplateNode = 1;
  Object.defineProperty(templateNode, "__esModule", { value: true });
  templateNode.expandTracedToNodeIf = templateNode.expandTracedToNode = templateNode.expandToNode = void 0;
  const generator_node_1 = requireGeneratorNode();
  const template_string_1 = requireTemplateString();
  function expandToNode(staticParts, ...substitutions) {
    const templateProps = findIndentationAndTemplateStructure(staticParts);
    const splitAndMerged = splitTemplateLinesAndMergeWithSubstitions(staticParts, substitutions, templateProps);
    return composeFinalGeneratorNode(splitAndMerged);
  }
  templateNode.expandToNode = expandToNode;
  function expandTracedToNode(source, property, index) {
    return (staticParts, ...substitutions) => {
      return (0, generator_node_1.traceToNode)(source, property, index)(expandToNode(staticParts, ...substitutions));
    };
  }
  templateNode.expandTracedToNode = expandTracedToNode;
  function expandTracedToNodeIf(condition, source, property, index) {
    return condition ? expandTracedToNode(typeof source === "function" ? source() : source, property, index) : () => void 0;
  }
  templateNode.expandTracedToNodeIf = expandTracedToNodeIf;
  function findIndentationAndTemplateStructure(staticParts) {
    const lines = staticParts.join("_").split(template_string_1.NEWLINE_REGEXP);
    const omitFirstLine = lines.length > 1 && lines[0].trim().length === 0;
    const omitLastLine = omitFirstLine && lines.length > 1 && lines[lines.length - 1].trim().length === 0;
    if (lines.length === 1 || lines.length !== 0 && lines[0].trim().length !== 0 || lines.length === 2 && lines[1].trim().length === 0) {
      return {
        indentation: 0,
        omitFirstLine,
        omitLastLine,
        trimLastLine: lines.length !== 1 && lines[lines.length - 1].trim().length === 0
      };
    } else {
      let sliced = omitFirstLine ? lines.slice(1) : lines;
      sliced = omitLastLine ? sliced.slice(0, sliced.length - 1) : sliced;
      sliced = sliced.filter((e) => e.length !== 0);
      const indentation = (0, template_string_1.findIndentation)(sliced);
      return {
        indentation,
        omitFirstLine,
        // in the subsequent steps omit the last line only if it is empty or if it only contains white space of which the common indentation is not a valid prefix;
        //  in other words: keep the last line if it matches the common indentation (and maybe contains non-whitespace), a non-match may be due to mistaken usage of tabs and spaces
        omitLastLine: omitLastLine && (lines[lines.length - 1].length < indentation || !lines[lines.length - 1].startsWith(sliced[0].substring(0, indentation)))
      };
    }
  }
  function splitTemplateLinesAndMergeWithSubstitions(staticParts, substitutions, { indentation, omitFirstLine, omitLastLine, trimLastLine }) {
    const splitAndMerged = [];
    staticParts.forEach((part, i) => {
      splitAndMerged.push(...part.split(template_string_1.NEWLINE_REGEXP).map((e, j2) => j2 === 0 || e.length < indentation ? e : e.substring(indentation)).reduce(
        // treat the particular (potentially multiple) lines of the <i>th template segment (part),
        //  s.t. all the effective lines are collected and separated by the NEWLINE node
        // note: different reduce functions are provided for the initial template segment vs. the remaining segments
        i === 0 ? (result, line, j2) => (
          // special handling of the initial template segment, which may contain line-breaks;
          //  suppresses the injection of unintended NEWLINE indicators for templates like
          //   expandToNode`
          //    someText
          //    ${something}
          //   `
          j2 === 0 ? omitFirstLine ? [] : [line] : j2 === 1 && result.length === 0 ? [line] : result.concat(NEWLINE, line)
        ) : (result, line, j2) => (
          // handling of the remaining template segments
          j2 === 0 ? [line] : result.concat(NEWLINE, line)
        ),
        []
        // start with an empty array
      ).filter(
        (e) => !(typeof e === "string" && e.length === 0)
        // drop empty strings, they don't contribute anything but might confuse subsequent processing
      ).concat(
        // append the corresponding substitution after each segment (part),
        //  note that 'substitutions[i]' will be undefined for the last segment
        (0, generator_node_1.isGeneratorNode)(substitutions[i]) ? substitutions[i] : substitutions[i] !== void 0 ? new generator_node_1.CompositeGeneratorNode(String(substitutions[i])) : i < substitutions.length ? UNDEFINED_SEGMENT : []
        /* don't concat anything as we passed behind the last substitution, since 'i' enumerates the indices of 'staticParts',
                but 'substitutions' has one entry less and 'substitutions[staticParts.length -1 ]' will always be undefined */
      ));
    });
    const splitAndMergedLength = splitAndMerged.length;
    const lastItem = splitAndMergedLength !== 0 ? splitAndMerged[splitAndMergedLength - 1] : void 0;
    if ((omitLastLine || trimLastLine) && typeof lastItem === "string" && lastItem.trim().length === 0) {
      if (omitFirstLine && splitAndMergedLength !== 1 && splitAndMerged[splitAndMergedLength - 2] === NEWLINE) {
        return splitAndMerged.slice(0, splitAndMergedLength - 2);
      } else {
        return splitAndMerged.slice(0, splitAndMergedLength - 1);
      }
    } else {
      return splitAndMerged;
    }
  }
  const NEWLINE = { isNewLine: true };
  const UNDEFINED_SEGMENT = { isUndefinedSegment: true };
  const isNewLineMarker = (nl) => nl === NEWLINE;
  const isUndefinedSegmentMarker = (us) => us === UNDEFINED_SEGMENT;
  function composeFinalGeneratorNode(splitAndMerged) {
    const result = splitAndMerged.reduce((res, segment, i) => isUndefinedSegmentMarker(segment) ? res : isNewLineMarker(segment) ? {
      node: i === 0 || isNewLineMarker(splitAndMerged[i - 1]) || typeof splitAndMerged[i - 1] === "string" ? res.node.appendNewLine() : res.node.appendNewLineIfNotEmpty()
    } : (() => {
      var _a2;
      const indent = (i === 0 || isNewLineMarker(splitAndMerged[i - 1])) && typeof segment === "string" && segment.length !== 0 ? "".padStart(segment.length - segment.trimLeft().length) : "";
      let indented;
      return {
        node: res.indented ? res.node : indent.length !== 0 ? res.node.indent({ indentation: indent, indentImmediately: false, indentedChildren: (ind) => indented = ind.append(segment) }) : res.node.append(segment),
        indented: (
          // if an indentNode has been created in this cycle, just register it,
          //  otherwise check for a earlier registered indentNode and add the current segment to that one
          indented !== null && indented !== void 0 ? indented : (_a2 = res.indented) === null || _a2 === void 0 ? void 0 : _a2.append(segment)
        )
      };
    })(), { node: new generator_node_1.CompositeGeneratorNode() });
    return result.node;
  }
  return templateNode;
}
var hasRequiredGeneratorNode;
function requireGeneratorNode() {
  if (hasRequiredGeneratorNode)
    return generatorNode;
  hasRequiredGeneratorNode = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NLEmpty = exports.NL = exports.NewLineNode = exports.IndentNode = exports.traceToNodeIf = exports.traceToNode = exports.CompositeGeneratorNode = exports.toStringAndTrace = exports.toString = exports.isNewLineNode = exports.isGeneratorNode = exports.EOL = void 0;
    const syntax_tree_1 = requireSyntaxTree();
    const node_processor_1 = requireNodeProcessor();
    const template_node_1 = requireTemplateNode();
    exports.EOL = typeof process === "undefined" ? "\n" : process.platform === "win32" ? "\r\n" : "\n";
    function isGeneratorNode(node) {
      return node instanceof CompositeGeneratorNode || node instanceof IndentNode || node instanceof NewLineNode;
    }
    exports.isGeneratorNode = isGeneratorNode;
    function isNewLineNode(node) {
      return node instanceof NewLineNode;
    }
    exports.isNewLineNode = isNewLineNode;
    function toString(input, defaultIndentation) {
      if (isGeneratorNode(input))
        return (0, node_processor_1.processGeneratorNode)(input, defaultIndentation).text;
      else
        return String(input);
    }
    exports.toString = toString;
    function toStringAndTrace(input, defaultIndentation) {
      return (0, node_processor_1.processGeneratorNode)(input, defaultIndentation);
    }
    exports.toStringAndTrace = toStringAndTrace;
    class CompositeGeneratorNode {
      /**
       * Constructor.
       *
       * @param content a var arg mixture of `strings` and {@link GeneratorNode GeneratorNodes}
       *   describing the initial content of this {@link CompositeGeneratorNode}
       *
       * @example
       *   new CompositeGeneratorNode(
       *      'Hello World!', NL
       *   );
       */
      constructor(...content2) {
        this.contents = [];
        this.append(...content2);
      }
      isEmpty() {
        return this.contents.length === 0;
      }
      trace(source, property, index) {
        if ((0, syntax_tree_1.isAstNode)(source)) {
          this.tracedSource = { astNode: source, property, index };
          if (this.tracedSource.property === void 0 && this.tracedSource.index !== void 0 && this.tracedSource.index > -1) {
            throw new Error("Generation support: 'property' argument must not be 'undefined' if a non-negative value is assigned to 'index' in 'CompositeGeneratorNode.trace(...)'.");
          }
        } else {
          this.tracedSource = source;
        }
        return this;
      }
      /**
       * Appends `strings` and instances of {@link GeneratorNode} to `this` generator node.
       *
       * @param content a var arg mixture of `strings`, {@link GeneratorNode GeneratorNodes}, or single param
       *  functions that are immediately called with `this` node as argument, and which may append elements themselves.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().append(
       *      'Hello', ' ', `${name}!`, NL, someOtherNode, 'NL', node => generateContent(node)
       *   ).append(
       *      'The end!'
       *   );
       */
      append(...content2) {
        for (const arg of content2) {
          if (typeof arg === "function") {
            arg(this);
          } else if (arg) {
            this.contents.push(arg);
          }
        }
        return this;
      }
      /**
       * Appends `strings` and instances of {@link GeneratorNode} to `this` generator node, if `condition` is equal to `true`.
       *
       * If `condition` is satisfied this method delegates to {@link append}, otherwise it returns just `this`.
       *
       * @param condition a boolean value indicating whether to append the elements of `args` to `this`.
       *
       * @param content a var arg mixture of `strings`, {@link GeneratorNode GeneratorNodes}, or single param
       *  functions that are immediately called with `this` node as argument, and which may append elements themselves.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().append(
       *      'Hello World!'
       *   ).appendNewLine().appendIf(
       *      entity !== undefined, `Hello ${entity?.name}!`
       *   ).appendNewLineIfNotEmpty();
       */
      appendIf(condition, ...content2) {
        return condition ? this.append(...content2) : this;
      }
      /**
       * Appends a strict {@link NewLineNode} to `this` node.
       * Strict {@link NewLineNode}s yield mandatory linebreaks in the derived generated text.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().append(
       *      'Hello World!'
       *   ).appendNewLine();
       */
      appendNewLine() {
        return this.append(exports.NL);
      }
      /**
       * Appends a strict {@link NewLineNode} to `this` node, if `condition` is equal to `true`.
       * Strict {@link NewLineNode}s yield mandatory linebreaks in the derived generated text.
       *
       * @param condition a boolean value indicating whether to append a {@link NewLineNode} to `this`.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().append(
       *      'Hello World!'
       *   ).appendNewLineIf(entity !== undefined).appendIf(
       *      entity !== undefined, `Hello ${entity?.name}!`
       *   )
       */
      appendNewLineIf(condition) {
        return condition ? this.append(exports.NL) : this;
      }
      /**
       * Appends a soft {@link NewLineNode} to `this` node.
       * Soft {@link NewLineNode}s yield linebreaks in the derived generated text only if the preceding line is non-empty,
       * i.e. there are non-whitespace characters added to the generated text since the last linebreak.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().appendIf(
       *      entity !== undefined, `Hello ${entity?.name}!`
       *   ).appendNewLineIfNotEmpty();
       */
      appendNewLineIfNotEmpty() {
        return this.append(exports.NLEmpty);
      }
      /**
       * Appends a soft {@link NewLineNode} to `this` node, if `condition` is equal to `true`.
       * Soft {@link NewLineNode}s yield linebreaks in the derived generated text only if the preceding line is non-empty,
       * i.e. there are non-whitespace characters added to the generated text since the last linebreak.
       *
       * @param condition a boolean value indicating whether to append a {@link NewLineNode} to `this`.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().append(
       *      entity.label ?? ''
       *   ).appendNewLineIfNotEmptyIf(entity.description !== undefined).append(
       *      entity.description
       *   )
       */
      appendNewLineIfNotEmptyIf(condition) {
        return condition ? this.appendNewLineIfNotEmpty() : this;
      }
      /**
       * Convenience method for appending content in form of a template to `this` generation node.
       *
       * See {@link expandToNode} for details.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().appendTemplate
       *       `Hello World!`
       *   .appendNewLine()
       */
      appendTemplate(staticParts, ...substitutions) {
        return this.append((0, template_node_1.expandToNode)(staticParts, ...substitutions));
      }
      /**
       * Convenience method for appending content in form of a template to `this` generator node, if `condition` is equal to `true`.
       *
       * This method returns a tag function that takes the desired template and does the processing.
       *
       * If `condition` is satisfied the tagged template delegates to {@link appendTemplate}, otherwise it returns just `this`.
       *
       * See {@link expandToNode} for details.
       *
       * @param condition a boolean value indicating whether to append the template content to `this`.
       *
       * @returns a tag function behaving as described above, which in turn returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().appendTemplate
       *       `Hello World!`
       *   .appendNewLine().appendTemplateIf(entity !== undefined)
       *       `Hello ${entity?.name}!`
       *   .appendNewLineIfNotEmpty()
       */
      appendTemplateIf(condition) {
        return condition ? (staticParts, ...substitutions) => this.appendTemplate(staticParts, ...substitutions) : () => this;
      }
      /**
       * Adds an area of indented text output.
       * The content to be indented can be provided as an array consisting of strings and/or generation nodes
       * (undefined is permitted), or via a callback offering the `indentingNode` to which the content shall be appended.
       * Alternatively, an object satisfying {@link IndentConfig} can be provided taking the children as Array or via
       * a callback as described previously via the `indentedChildren` property.
       *
       * The remaining properties of {@link IndentConfig} have the following effects:
       *  - `indentation`: a specific indentation length or string, defaults to the global indentation setting if omitted, see {@link toString},
       *  - `indentEmptyLines`: apply indentation to empty lines, defaults to `false`
       *  - `indentImmediately`: apply the indentation immediately starting at the first line, defaults to `true`, might be set to `false`
       *    if preceding content is not terminated by any `newline`. If `false` the indentation is inserted only after child `newline` nodes
       *    followed by further content.
       *
       * @param childrenOrConfig an {@link Array} or callback contributing the children, or a config object satisfying {@link IndentConfig} alternatively.
       *
       * @returns `this` {@link CompositeGeneratorNode} for convenience.
       *
       * @example
       *   new CompositeGeneratorNode().append(
       *       '{'
       *   ).indent(indentingNode =>
       *       indentingNode.append(
       *           'name:', name, ','
       *       ).appendNewLine().appendIf(description !== undefined,
       *           'description:', description
       *       ).appendNewLineIfNotEmpty()
       *   ).append(
       *       '}'
       *   );
       */
      indent(childrenOrConfig) {
        const { indentedChildren, indentation, indentEmptyLines, indentImmediately } = Array.isArray(childrenOrConfig) || typeof childrenOrConfig === "function" ? { indentedChildren: childrenOrConfig } : typeof childrenOrConfig === "object" ? childrenOrConfig : {};
        const node = new IndentNode(indentation, indentImmediately, indentEmptyLines);
        this.contents.push(node);
        if (Array.isArray(indentedChildren)) {
          node.append(...indentedChildren);
        } else if (indentedChildren) {
          node.append(indentedChildren);
        }
        return this;
      }
      // implementation:
      appendTraced(source, property, index) {
        return (content2) => {
          return this.append(new CompositeGeneratorNode().trace(source, property, index).append(content2));
        };
      }
      // implementation:
      appendTracedIf(condition, source, property, index) {
        return condition ? this.appendTraced(typeof source === "function" ? source() : source, property, index) : () => this;
      }
      // implementation:
      appendTracedTemplate(source, property, index) {
        return (staticParts, ...substitutions) => {
          return this.append((0, template_node_1.expandTracedToNode)(source, property, index)(staticParts, ...substitutions));
        };
      }
      // implementation:
      appendTracedTemplateIf(condition, source, property, index) {
        return condition ? this.appendTracedTemplate(typeof source === "function" ? source() : source, property, index) : () => this;
      }
    }
    exports.CompositeGeneratorNode = CompositeGeneratorNode;
    function traceToNode(astNode, property, index) {
      return (content2) => {
        if (content2 instanceof CompositeGeneratorNode && content2.tracedSource === void 0) {
          return content2.trace(astNode, property, index);
        } else {
          return new CompositeGeneratorNode().trace(astNode, property, index).append(content2);
        }
      };
    }
    exports.traceToNode = traceToNode;
    function traceToNodeIf(condition, source, property, index) {
      return condition ? traceToNode(typeof source === "function" ? source() : source, property, index) : () => void 0;
    }
    exports.traceToNodeIf = traceToNodeIf;
    class IndentNode extends CompositeGeneratorNode {
      constructor(indentation, indentImmediately = true, indentEmptyLines = false) {
        super();
        this.indentImmediately = true;
        this.indentEmptyLines = false;
        if (typeof indentation === "string") {
          this.indentation = indentation;
        } else if (typeof indentation === "number") {
          this.indentation = "".padStart(indentation);
        }
        this.indentImmediately = indentImmediately;
        this.indentEmptyLines = indentEmptyLines;
      }
    }
    exports.IndentNode = IndentNode;
    class NewLineNode {
      constructor(lineDelimiter, ifNotEmpty = false) {
        this.ifNotEmpty = false;
        this.lineDelimiter = lineDelimiter !== null && lineDelimiter !== void 0 ? lineDelimiter : exports.EOL;
        this.ifNotEmpty = ifNotEmpty;
      }
    }
    exports.NewLineNode = NewLineNode;
    exports.NL = new NewLineNode();
    exports.NLEmpty = new NewLineNode(void 0, true);
  })(generatorNode);
  return generatorNode;
}
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes)
    return types;
  hasRequiredTypes = 1;
  Object.defineProperty(types, "__esModule", { value: true });
  types.isMandatoryPropertyType = types.propertyTypeToString = types.isTypeAssignable = types.TypeResolutionError = types.InterfaceType = types.UnionType = types.isInterfaceType = types.isUnionType = types.isStringType = types.isPrimitiveType = types.isValueType = types.flattenPropertyUnion = types.isPropertyUnion = types.isArrayType = types.isReferenceType = void 0;
  const generator_node_1 = requireGeneratorNode();
  const types_util_1 = requireTypesUtil();
  function isReferenceType(propertyType) {
    return "referenceType" in propertyType;
  }
  types.isReferenceType = isReferenceType;
  function isArrayType(propertyType) {
    return "elementType" in propertyType;
  }
  types.isArrayType = isArrayType;
  function isPropertyUnion(propertyType) {
    return "types" in propertyType;
  }
  types.isPropertyUnion = isPropertyUnion;
  function flattenPropertyUnion(propertyType) {
    if (isPropertyUnion(propertyType)) {
      const items = [];
      for (const type of propertyType.types) {
        items.push(...flattenPropertyUnion(type));
      }
      return items;
    } else {
      return [propertyType];
    }
  }
  types.flattenPropertyUnion = flattenPropertyUnion;
  function isValueType(propertyType) {
    return "value" in propertyType;
  }
  types.isValueType = isValueType;
  function isPrimitiveType(propertyType) {
    return "primitive" in propertyType;
  }
  types.isPrimitiveType = isPrimitiveType;
  function isStringType(propertyType) {
    return "string" in propertyType;
  }
  types.isStringType = isStringType;
  function isUnionType(type) {
    return type && "type" in type;
  }
  types.isUnionType = isUnionType;
  function isInterfaceType(type) {
    return type && "properties" in type;
  }
  types.isInterfaceType = isInterfaceType;
  class UnionType {
    constructor(name2, options) {
      var _a2;
      this.superTypes = /* @__PURE__ */ new Set();
      this.subTypes = /* @__PURE__ */ new Set();
      this.containerTypes = /* @__PURE__ */ new Set();
      this.typeNames = /* @__PURE__ */ new Set();
      this.name = name2;
      this.declared = (_a2 = options === null || options === void 0 ? void 0 : options.declared) !== null && _a2 !== void 0 ? _a2 : false;
      this.dataType = options === null || options === void 0 ? void 0 : options.dataType;
    }
    toAstTypesString(reflectionInfo) {
      const unionNode = new generator_node_1.CompositeGeneratorNode();
      unionNode.append(`export type ${this.name} = ${propertyTypeToString(this.type, "AstType")};`, generator_node_1.NL);
      if (reflectionInfo) {
        unionNode.append(generator_node_1.NL);
        pushReflectionInfo(unionNode, this.name);
      }
      if (this.dataType) {
        pushDataTypeReflectionInfo(unionNode, this);
      }
      return (0, generator_node_1.toString)(unionNode);
    }
    toDeclaredTypesString(reservedWords) {
      const unionNode = new generator_node_1.CompositeGeneratorNode();
      unionNode.append(`type ${escapeReservedWords(this.name, reservedWords)} = ${propertyTypeToString(this.type, "DeclaredType")};`, generator_node_1.NL);
      return (0, generator_node_1.toString)(unionNode);
    }
  }
  types.UnionType = UnionType;
  class InterfaceType {
    get superProperties() {
      return this.getSuperProperties(/* @__PURE__ */ new Set());
    }
    getSuperProperties(visited) {
      if (visited.has(this.name)) {
        return [];
      } else {
        visited.add(this.name);
      }
      const map2 = /* @__PURE__ */ new Map();
      for (const property of this.properties) {
        map2.set(property.name, property);
      }
      for (const superType of this.interfaceSuperTypes) {
        const allSuperProperties = superType.getSuperProperties(visited);
        for (const superProp of allSuperProperties) {
          if (!map2.has(superProp.name)) {
            map2.set(superProp.name, superProp);
          }
        }
      }
      return Array.from(map2.values());
    }
    get allProperties() {
      const map2 = new Map(this.superProperties.map((e) => [e.name, e]));
      for (const subType of this.subTypes) {
        this.getSubTypeProperties(subType, map2, /* @__PURE__ */ new Set());
      }
      const superProps = Array.from(map2.values());
      return superProps;
    }
    getSubTypeProperties(type, map2, visited) {
      if (visited.has(this.name)) {
        return;
      } else {
        visited.add(this.name);
      }
      const props = isInterfaceType(type) ? type.properties : [];
      for (const prop of props) {
        if (!map2.has(prop.name)) {
          map2.set(prop.name, prop);
        }
      }
      for (const subType of type.subTypes) {
        this.getSubTypeProperties(subType, map2, visited);
      }
    }
    get interfaceSuperTypes() {
      return Array.from(this.superTypes).filter((e) => e instanceof InterfaceType);
    }
    constructor(name2, declared, abstract) {
      this.superTypes = /* @__PURE__ */ new Set();
      this.subTypes = /* @__PURE__ */ new Set();
      this.containerTypes = /* @__PURE__ */ new Set();
      this.typeNames = /* @__PURE__ */ new Set();
      this.declared = false;
      this.abstract = false;
      this.properties = [];
      this.name = name2;
      this.declared = declared;
      this.abstract = abstract;
    }
    toAstTypesString(reflectionInfo) {
      const interfaceNode = new generator_node_1.CompositeGeneratorNode();
      const interfaceSuperTypes = this.interfaceSuperTypes.map((e) => e.name);
      const superTypes = interfaceSuperTypes.length > 0 ? (0, types_util_1.distinctAndSorted)([...interfaceSuperTypes]) : ["AstNode"];
      interfaceNode.append(`export interface ${this.name} extends ${superTypes.join(", ")} {`, generator_node_1.NL);
      interfaceNode.indent((body) => {
        if (this.containerTypes.size > 0) {
          body.append(`readonly $container: ${(0, types_util_1.distinctAndSorted)([...this.containerTypes].map((e) => e.name)).join(" | ")};`, generator_node_1.NL);
        }
        if (this.typeNames.size > 0) {
          body.append(`readonly $type: ${(0, types_util_1.distinctAndSorted)([...this.typeNames]).map((e) => `'${e}'`).join(" | ")};`, generator_node_1.NL);
        }
        pushProperties(body, this.properties, "AstType");
      });
      interfaceNode.append("}", generator_node_1.NL);
      if (reflectionInfo) {
        interfaceNode.append(generator_node_1.NL);
        pushReflectionInfo(interfaceNode, this.name);
      }
      return (0, generator_node_1.toString)(interfaceNode);
    }
    toDeclaredTypesString(reservedWords) {
      const interfaceNode = new generator_node_1.CompositeGeneratorNode();
      const name2 = escapeReservedWords(this.name, reservedWords);
      const superTypes = (0, types_util_1.distinctAndSorted)(this.interfaceSuperTypes.map((e) => e.name)).join(", ");
      interfaceNode.append(`interface ${name2}${superTypes.length > 0 ? ` extends ${superTypes}` : ""} {`, generator_node_1.NL);
      interfaceNode.indent((body) => pushProperties(body, this.properties, "DeclaredType", reservedWords));
      interfaceNode.append("}", generator_node_1.NL);
      return (0, generator_node_1.toString)(interfaceNode);
    }
  }
  types.InterfaceType = InterfaceType;
  class TypeResolutionError extends Error {
    constructor(message, target) {
      super(message);
      this.name = "TypeResolutionError";
      this.target = target;
    }
  }
  types.TypeResolutionError = TypeResolutionError;
  function isTypeAssignable(from, to) {
    if (isPropertyUnion(from)) {
      return from.types.every((fromType) => isTypeAssignable(fromType, to));
    } else if (isPropertyUnion(to)) {
      return to.types.some((toType) => isTypeAssignable(from, toType));
    } else if (isValueType(to) && isUnionType(to.value)) {
      if (isValueType(from) && isUnionType(from.value) && to.value.name === from.value.name) {
        return true;
      }
      return isTypeAssignable(from, to.value.type);
    } else if (isReferenceType(from)) {
      return isReferenceType(to) && isTypeAssignable(from.referenceType, to.referenceType);
    } else if (isArrayType(from)) {
      return isArrayType(to) && isTypeAssignable(from.elementType, to.elementType);
    } else if (isValueType(from)) {
      if (isUnionType(from.value)) {
        return isTypeAssignable(from.value.type, to);
      }
      if (!isValueType(to)) {
        return false;
      }
      if (isUnionType(to.value)) {
        return isTypeAssignable(from, to.value.type);
      } else {
        return isInterfaceAssignable(from.value, to.value, /* @__PURE__ */ new Set());
      }
    } else if (isPrimitiveType(from)) {
      return isPrimitiveType(to) && from.primitive === to.primitive;
    } else if (isStringType(from)) {
      return isPrimitiveType(to) && to.primitive === "string" || isStringType(to) && to.string === from.string;
    }
    return false;
  }
  types.isTypeAssignable = isTypeAssignable;
  function isInterfaceAssignable(from, to, visited) {
    if (visited.has(from.name)) {
      return true;
    } else {
      visited.add(from.name);
    }
    if (from.name === to.name) {
      return true;
    }
    for (const superType of from.superTypes) {
      if (isInterfaceType(superType) && isInterfaceAssignable(superType, to, visited)) {
        return true;
      }
    }
    return false;
  }
  function propertyTypeToString(type, mode = "AstType") {
    if (isReferenceType(type)) {
      const refType = propertyTypeToString(type.referenceType, mode);
      return mode === "AstType" ? `Reference<${refType}>` : `@${typeParenthesis(type.referenceType, refType)}`;
    } else if (isArrayType(type)) {
      const arrayType = propertyTypeToString(type.elementType, mode);
      return mode === "AstType" ? `Array<${arrayType}>` : `${typeParenthesis(type.elementType, arrayType)}[]`;
    } else if (isPropertyUnion(type)) {
      const types2 = type.types.map((e) => typeParenthesis(e, propertyTypeToString(e, mode)));
      return (0, types_util_1.distinctAndSorted)(types2).join(" | ");
    } else if (isValueType(type)) {
      return type.value.name;
    } else if (isPrimitiveType(type)) {
      return type.primitive;
    } else if (isStringType(type)) {
      const delimiter = mode === "AstType" ? "'" : '"';
      return `${delimiter}${type.string}${delimiter}`;
    }
    throw new Error("Invalid type");
  }
  types.propertyTypeToString = propertyTypeToString;
  function typeParenthesis(type, name2) {
    const needsParenthesis = isPropertyUnion(type);
    if (needsParenthesis) {
      name2 = `(${name2})`;
    }
    return name2;
  }
  function pushProperties(node, properties2, mode, reserved = /* @__PURE__ */ new Set()) {
    function propertyToString(property) {
      const name2 = mode === "AstType" ? property.name : escapeReservedWords(property.name, reserved);
      const optional = property.optional && !isMandatoryPropertyType(property.type);
      const propType = propertyTypeToString(property.type, mode);
      return `${name2}${optional ? "?" : ""}: ${propType}`;
    }
    (0, types_util_1.distinctAndSorted)(properties2, (a2, b2) => a2.name.localeCompare(b2.name)).forEach((property) => node.append(propertyToString(property), generator_node_1.NL));
  }
  function isMandatoryPropertyType(propertyType) {
    if (isArrayType(propertyType)) {
      return true;
    } else if (isReferenceType(propertyType)) {
      return false;
    } else if (isPropertyUnion(propertyType)) {
      return propertyType.types.every((e) => isMandatoryPropertyType(e));
    } else if (isPrimitiveType(propertyType)) {
      const value = propertyType.primitive;
      return value === "boolean";
    } else {
      return false;
    }
  }
  types.isMandatoryPropertyType = isMandatoryPropertyType;
  function pushReflectionInfo(node, name2) {
    node.append(`export const ${name2} = '${name2}';`, generator_node_1.NL);
    node.append(generator_node_1.NL);
    node.append(`export function is${name2}(item: unknown): item is ${name2} {`, generator_node_1.NL);
    node.indent((body) => body.append(`return reflection.isInstance(item, ${name2});`, generator_node_1.NL));
    node.append("}", generator_node_1.NL);
  }
  function pushDataTypeReflectionInfo(node, union) {
    switch (union.dataType) {
      case "string":
        if (containsOnlyStringTypes(union.type)) {
          const subTypes = Array.from(union.subTypes).map((e) => e.name);
          const strings = collectStringValuesFromDataType(union.type);
          const regexes = collectRegexesFromDataType(union.type);
          if (subTypes.length === 0 && strings.length === 0 && regexes.length === 0) {
            generateIsDataTypeFunction(node, union.name, `typeof item === '${union.dataType}'`);
          } else {
            const returnString = createDataTypeCheckerFunctionReturnString(subTypes, strings, regexes);
            generateIsDataTypeFunction(node, union.name, returnString);
          }
        }
        break;
      case "number":
      case "boolean":
      case "bigint":
        generateIsDataTypeFunction(node, union.name, `typeof item === '${union.dataType}'`);
        break;
      case "Date":
        generateIsDataTypeFunction(node, union.name, "item instanceof Date");
        break;
      default:
        return;
    }
  }
  function containsOnlyStringTypes(propertyType) {
    let result = true;
    if (isPrimitiveType(propertyType)) {
      if (propertyType.primitive === "string") {
        return true;
      } else {
        return false;
      }
    } else if (isStringType(propertyType)) {
      return true;
    } else if (!isPropertyUnion(propertyType)) {
      return false;
    } else {
      for (const type of propertyType.types) {
        if (isValueType(type)) {
          if (isUnionType(type.value)) {
            if (!containsOnlyStringTypes(type.value.type)) {
              return false;
            }
          } else {
            return false;
          }
        } else if (isPrimitiveType(type)) {
          if (type.primitive !== "string" || !type.regex) {
            return false;
          }
        } else if (isPropertyUnion(type)) {
          result = containsOnlyStringTypes(type);
        } else if (!isStringType(type)) {
          return false;
        }
      }
    }
    return result;
  }
  function createDataTypeCheckerFunctionReturnString(subTypes, strings, regexes) {
    const allArray = [
      ...subTypes.map((e) => `is${e}(item)`),
      ...strings.map((e) => `item === '${e}'`)
    ];
    if (regexes.length > 0) {
      const joinedRegexes = regexes.map((e) => `/${e}/.test(item)`).join(" || ");
      allArray.push(`(typeof item === 'string' && (${joinedRegexes}))`);
    }
    return allArray.join(" || ");
  }
  function escapeReservedWords(name2, reserved) {
    return reserved.has(name2) ? `^${name2}` : name2;
  }
  function collectStringValuesFromDataType(propertyType) {
    const values2 = [];
    if (isStringType(propertyType)) {
      return [propertyType.string];
    }
    if (isPropertyUnion(propertyType)) {
      for (const type of propertyType.types) {
        if (isStringType(type)) {
          values2.push(type.string);
        } else if (isPropertyUnion(type)) {
          values2.push(...collectStringValuesFromDataType(type));
        }
      }
    }
    return values2;
  }
  function collectRegexesFromDataType(propertyType) {
    const regexes = [];
    if (isPrimitiveType(propertyType) && propertyType.primitive === "string" && propertyType.regex) {
      regexes.push(propertyType.regex);
    }
    if (isPropertyUnion(propertyType)) {
      for (const type of propertyType.types) {
        if (isPrimitiveType(type) && type.primitive === "string" && type.regex) {
          regexes.push(type.regex);
        } else if (isPropertyUnion(type)) {
          regexes.push(...collectRegexesFromDataType(type));
        }
      }
    }
    return regexes;
  }
  function generateIsDataTypeFunction(node, unionName, returnString) {
    node.append(generator_node_1.NL, `export function is${unionName}(item: unknown): item is ${unionName} {`, generator_node_1.NL);
    node.indent((body) => body.append(`return ${returnString};`, generator_node_1.NL));
    node.append("}", generator_node_1.NL);
  }
  return types;
}
var hasRequiredTypesUtil;
function requireTypesUtil() {
  if (hasRequiredTypesUtil)
    return typesUtil;
  hasRequiredTypesUtil = 1;
  Object.defineProperty(typesUtil, "__esModule", { value: true });
  typesUtil.isAstType = typesUtil.findReferenceTypes = typesUtil.hasBooleanType = typesUtil.hasArrayType = typesUtil.sortInterfacesTopologically = typesUtil.mergeTypesAndInterfaces = typesUtil.mergeInterfaces = typesUtil.collectSuperTypes = typesUtil.collectTypeHierarchy = typesUtil.collectChildrenTypes = typesUtil.distinctAndSorted = typesUtil.collectAllPlainProperties = void 0;
  const collections_1 = requireCollections();
  const ast_1 = requireAst();
  const types_1 = requireTypes();
  function collectAllPlainProperties(interfaces) {
    const map2 = new collections_1.MultiMap();
    for (const interfaceType of interfaces) {
      map2.addAll(interfaceType.name, interfaceType.properties);
    }
    for (const interfaceType of interfaces) {
      for (const superType of interfaceType.superTypes) {
        const superTypeProperties = map2.get(superType);
        if (superTypeProperties) {
          map2.addAll(interfaceType.name, superTypeProperties);
        }
      }
    }
    return map2;
  }
  typesUtil.collectAllPlainProperties = collectAllPlainProperties;
  function distinctAndSorted(list, compareFn) {
    return Array.from(new Set(list)).sort(compareFn);
  }
  typesUtil.distinctAndSorted = distinctAndSorted;
  function collectChildrenTypes(interfaceNode, references2, langiumDocuments, nodeLocator) {
    const childrenTypes = /* @__PURE__ */ new Set();
    childrenTypes.add(interfaceNode);
    const refs = references2.findReferences(interfaceNode, {});
    refs.forEach((ref) => {
      const doc2 = langiumDocuments.getOrCreateDocument(ref.sourceUri);
      const astNode = nodeLocator.getAstNode(doc2.parseResult.value, ref.sourcePath);
      if ((0, ast_1.isInterface)(astNode)) {
        childrenTypes.add(astNode);
        const childrenOfInterface = collectChildrenTypes(astNode, references2, langiumDocuments, nodeLocator);
        childrenOfInterface.forEach((child) => childrenTypes.add(child));
      } else if (astNode && (0, ast_1.isType)(astNode.$container)) {
        childrenTypes.add(astNode.$container);
      }
    });
    return childrenTypes;
  }
  typesUtil.collectChildrenTypes = collectChildrenTypes;
  function collectTypeHierarchy(types2) {
    const allTypes2 = new Set(types2);
    const duplicateSuperTypes = new collections_1.MultiMap();
    const duplicateSubTypes = new collections_1.MultiMap();
    for (const type of allTypes2) {
      for (const superType of type.superTypes) {
        if (allTypes2.has(superType)) {
          duplicateSuperTypes.add(type.name, superType.name);
          duplicateSubTypes.add(superType.name, type.name);
        }
      }
      for (const subType of type.subTypes) {
        if (allTypes2.has(subType)) {
          duplicateSuperTypes.add(subType.name, type.name);
          duplicateSubTypes.add(type.name, subType.name);
        }
      }
    }
    const superTypes = new collections_1.MultiMap();
    const subTypes = new collections_1.MultiMap();
    for (const [name2, superTypeList] of Array.from(duplicateSuperTypes.entriesGroupedByKey()).sort(([aName], [bName]) => aName.localeCompare(bName))) {
      superTypes.addAll(name2, Array.from(new Set(superTypeList)));
    }
    for (const [name2, subTypeList] of Array.from(duplicateSubTypes.entriesGroupedByKey()).sort(([aName], [bName]) => aName.localeCompare(bName))) {
      subTypes.addAll(name2, Array.from(new Set(subTypeList)));
    }
    return {
      superTypes,
      subTypes
    };
  }
  typesUtil.collectTypeHierarchy = collectTypeHierarchy;
  function collectSuperTypes(ruleNode) {
    const superTypes = /* @__PURE__ */ new Set();
    if ((0, ast_1.isInterface)(ruleNode)) {
      superTypes.add(ruleNode);
      ruleNode.superTypes.forEach((superType) => {
        if ((0, ast_1.isInterface)(superType.ref)) {
          superTypes.add(superType.ref);
          const collectedSuperTypes = collectSuperTypes(superType.ref);
          for (const superType2 of collectedSuperTypes) {
            superTypes.add(superType2);
          }
        }
      });
    } else if ((0, ast_1.isType)(ruleNode)) {
      const usedTypes = collectUsedTypes(ruleNode.type);
      for (const usedType of usedTypes) {
        const collectedSuperTypes = collectSuperTypes(usedType);
        for (const superType of collectedSuperTypes) {
          superTypes.add(superType);
        }
      }
    }
    return superTypes;
  }
  typesUtil.collectSuperTypes = collectSuperTypes;
  function collectUsedTypes(typeDefinition) {
    var _a2;
    if ((0, ast_1.isUnionType)(typeDefinition)) {
      return typeDefinition.types.flatMap((e) => collectUsedTypes(e));
    } else if ((0, ast_1.isSimpleType)(typeDefinition)) {
      const value = (_a2 = typeDefinition.typeRef) === null || _a2 === void 0 ? void 0 : _a2.ref;
      if ((0, ast_1.isType)(value) || (0, ast_1.isInterface)(value)) {
        return [value];
      }
    }
    return [];
  }
  function mergeInterfaces(inferred, declared) {
    return inferred.interfaces.concat(declared.interfaces);
  }
  typesUtil.mergeInterfaces = mergeInterfaces;
  function mergeTypesAndInterfaces(astTypes) {
    return astTypes.interfaces.concat(astTypes.unions);
  }
  typesUtil.mergeTypesAndInterfaces = mergeTypesAndInterfaces;
  function sortInterfacesTopologically(interfaces) {
    const nodes = interfaces.sort((a2, b2) => a2.name.localeCompare(b2.name)).map((e) => ({ value: e, nodes: [] }));
    for (const node of nodes) {
      node.nodes = nodes.filter((e) => node.value.superTypes.has(e.value.name));
    }
    const l2 = [];
    const s2 = nodes.filter((e) => e.nodes.length === 0);
    while (s2.length > 0) {
      const n2 = s2.shift();
      if (!l2.includes(n2)) {
        l2.push(n2);
        nodes.filter((e) => e.nodes.includes(n2)).forEach((m2) => s2.push(m2));
      }
    }
    return l2.map((e) => e.value);
  }
  typesUtil.sortInterfacesTopologically = sortInterfacesTopologically;
  function hasArrayType(type) {
    if ((0, types_1.isPropertyUnion)(type)) {
      return type.types.some((e) => hasArrayType(e));
    } else if ((0, types_1.isArrayType)(type)) {
      return true;
    } else {
      return false;
    }
  }
  typesUtil.hasArrayType = hasArrayType;
  function hasBooleanType(type) {
    if ((0, types_1.isPropertyUnion)(type)) {
      return type.types.some((e) => hasBooleanType(e));
    } else if ((0, types_1.isPrimitiveType)(type)) {
      return type.primitive === "boolean";
    } else {
      return false;
    }
  }
  typesUtil.hasBooleanType = hasBooleanType;
  function findReferenceTypes(type) {
    if ((0, types_1.isPropertyUnion)(type)) {
      return type.types.flatMap((e) => findReferenceTypes(e));
    } else if ((0, types_1.isReferenceType)(type)) {
      const refType = type.referenceType;
      if ((0, types_1.isValueType)(refType)) {
        return [refType.value.name];
      }
    } else if ((0, types_1.isArrayType)(type)) {
      return findReferenceTypes(type.elementType);
    }
    return [];
  }
  typesUtil.findReferenceTypes = findReferenceTypes;
  function isAstType(type) {
    if ((0, types_1.isPropertyUnion)(type)) {
      return type.types.every(isAstType);
    } else if ((0, types_1.isValueType)(type)) {
      const value = type.value;
      if ("type" in value) {
        return isAstType(value.type);
      } else {
        return true;
      }
    }
    return false;
  }
  typesUtil.isAstType = isAstType;
  return typesUtil;
}
var allTypes = {};
var inferredTypes = {};
var nameProvider = {};
var hasRequiredNameProvider;
function requireNameProvider() {
  if (hasRequiredNameProvider)
    return nameProvider;
  hasRequiredNameProvider = 1;
  Object.defineProperty(nameProvider, "__esModule", { value: true });
  nameProvider.DefaultNameProvider = nameProvider.isNamed = void 0;
  const grammar_util_1 = requireGrammarUtil();
  function isNamed(node) {
    return typeof node.name === "string";
  }
  nameProvider.isNamed = isNamed;
  class DefaultNameProvider {
    getName(node) {
      if (isNamed(node)) {
        return node.name;
      }
      return void 0;
    }
    getNameNode(node) {
      return (0, grammar_util_1.findNodeForProperty)(node.$cstNode, "name");
    }
  }
  nameProvider.DefaultNameProvider = DefaultNameProvider;
  return nameProvider;
}
var internalGrammarUtil = {};
var regexUtil = {};
var regexpToAst = { exports: {} };
var hasRequiredRegexpToAst;
function requireRegexpToAst() {
  if (hasRequiredRegexpToAst)
    return regexpToAst.exports;
  hasRequiredRegexpToAst = 1;
  (function(module) {
    (function(root, factory) {
      if (module.exports) {
        module.exports = factory();
      } else {
        root.regexpToAst = factory();
      }
    })(
      typeof self !== "undefined" ? (
        // istanbul ignore next
        self
      ) : commonjsGlobal,
      function() {
        function RegExpParser() {
        }
        RegExpParser.prototype.saveState = function() {
          return {
            idx: this.idx,
            input: this.input,
            groupIdx: this.groupIdx
          };
        };
        RegExpParser.prototype.restoreState = function(newState) {
          this.idx = newState.idx;
          this.input = newState.input;
          this.groupIdx = newState.groupIdx;
        };
        RegExpParser.prototype.pattern = function(input) {
          this.idx = 0;
          this.input = input;
          this.groupIdx = 0;
          this.consumeChar("/");
          var value = this.disjunction();
          this.consumeChar("/");
          var flags = {
            type: "Flags",
            loc: { begin: this.idx, end: input.length },
            global: false,
            ignoreCase: false,
            multiLine: false,
            unicode: false,
            sticky: false
          };
          while (this.isRegExpFlag()) {
            switch (this.popChar()) {
              case "g":
                addFlag(flags, "global");
                break;
              case "i":
                addFlag(flags, "ignoreCase");
                break;
              case "m":
                addFlag(flags, "multiLine");
                break;
              case "u":
                addFlag(flags, "unicode");
                break;
              case "y":
                addFlag(flags, "sticky");
                break;
            }
          }
          if (this.idx !== this.input.length) {
            throw Error(
              "Redundant input: " + this.input.substring(this.idx)
            );
          }
          return {
            type: "Pattern",
            flags,
            value,
            loc: this.loc(0)
          };
        };
        RegExpParser.prototype.disjunction = function() {
          var alts = [];
          var begin = this.idx;
          alts.push(this.alternative());
          while (this.peekChar() === "|") {
            this.consumeChar("|");
            alts.push(this.alternative());
          }
          return { type: "Disjunction", value: alts, loc: this.loc(begin) };
        };
        RegExpParser.prototype.alternative = function() {
          var terms = [];
          var begin = this.idx;
          while (this.isTerm()) {
            terms.push(this.term());
          }
          return { type: "Alternative", value: terms, loc: this.loc(begin) };
        };
        RegExpParser.prototype.term = function() {
          if (this.isAssertion()) {
            return this.assertion();
          } else {
            return this.atom();
          }
        };
        RegExpParser.prototype.assertion = function() {
          var begin = this.idx;
          switch (this.popChar()) {
            case "^":
              return {
                type: "StartAnchor",
                loc: this.loc(begin)
              };
            case "$":
              return { type: "EndAnchor", loc: this.loc(begin) };
            case "\\":
              switch (this.popChar()) {
                case "b":
                  return {
                    type: "WordBoundary",
                    loc: this.loc(begin)
                  };
                case "B":
                  return {
                    type: "NonWordBoundary",
                    loc: this.loc(begin)
                  };
              }
              throw Error("Invalid Assertion Escape");
            case "(":
              this.consumeChar("?");
              var type;
              switch (this.popChar()) {
                case "=":
                  type = "Lookahead";
                  break;
                case "!":
                  type = "NegativeLookahead";
                  break;
              }
              ASSERT_EXISTS(type);
              var disjunction = this.disjunction();
              this.consumeChar(")");
              return {
                type,
                value: disjunction,
                loc: this.loc(begin)
              };
          }
          ASSERT_NEVER_REACH_HERE();
        };
        RegExpParser.prototype.quantifier = function(isBacktracking) {
          var range2;
          var begin = this.idx;
          switch (this.popChar()) {
            case "*":
              range2 = {
                atLeast: 0,
                atMost: Infinity
              };
              break;
            case "+":
              range2 = {
                atLeast: 1,
                atMost: Infinity
              };
              break;
            case "?":
              range2 = {
                atLeast: 0,
                atMost: 1
              };
              break;
            case "{":
              var atLeast = this.integerIncludingZero();
              switch (this.popChar()) {
                case "}":
                  range2 = {
                    atLeast,
                    atMost: atLeast
                  };
                  break;
                case ",":
                  var atMost;
                  if (this.isDigit()) {
                    atMost = this.integerIncludingZero();
                    range2 = {
                      atLeast,
                      atMost
                    };
                  } else {
                    range2 = {
                      atLeast,
                      atMost: Infinity
                    };
                  }
                  this.consumeChar("}");
                  break;
              }
              if (isBacktracking === true && range2 === void 0) {
                return void 0;
              }
              ASSERT_EXISTS(range2);
              break;
          }
          if (isBacktracking === true && range2 === void 0) {
            return void 0;
          }
          ASSERT_EXISTS(range2);
          if (this.peekChar(0) === "?") {
            this.consumeChar("?");
            range2.greedy = false;
          } else {
            range2.greedy = true;
          }
          range2.type = "Quantifier";
          range2.loc = this.loc(begin);
          return range2;
        };
        RegExpParser.prototype.atom = function() {
          var atom2;
          var begin = this.idx;
          switch (this.peekChar()) {
            case ".":
              atom2 = this.dotAll();
              break;
            case "\\":
              atom2 = this.atomEscape();
              break;
            case "[":
              atom2 = this.characterClass();
              break;
            case "(":
              atom2 = this.group();
              break;
          }
          if (atom2 === void 0 && this.isPatternCharacter()) {
            atom2 = this.patternCharacter();
          }
          ASSERT_EXISTS(atom2);
          atom2.loc = this.loc(begin);
          if (this.isQuantifier()) {
            atom2.quantifier = this.quantifier();
          }
          return atom2;
        };
        RegExpParser.prototype.dotAll = function() {
          this.consumeChar(".");
          return {
            type: "Set",
            complement: true,
            value: [cc("\n"), cc("\r"), cc("\u2028"), cc("\u2029")]
          };
        };
        RegExpParser.prototype.atomEscape = function() {
          this.consumeChar("\\");
          switch (this.peekChar()) {
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return this.decimalEscapeAtom();
            case "d":
            case "D":
            case "s":
            case "S":
            case "w":
            case "W":
              return this.characterClassEscape();
            case "f":
            case "n":
            case "r":
            case "t":
            case "v":
              return this.controlEscapeAtom();
            case "c":
              return this.controlLetterEscapeAtom();
            case "0":
              return this.nulCharacterAtom();
            case "x":
              return this.hexEscapeSequenceAtom();
            case "u":
              return this.regExpUnicodeEscapeSequenceAtom();
            default:
              return this.identityEscapeAtom();
          }
        };
        RegExpParser.prototype.decimalEscapeAtom = function() {
          var value = this.positiveInteger();
          return { type: "GroupBackReference", value };
        };
        RegExpParser.prototype.characterClassEscape = function() {
          var set;
          var complement = false;
          switch (this.popChar()) {
            case "d":
              set = digitsCharCodes;
              break;
            case "D":
              set = digitsCharCodes;
              complement = true;
              break;
            case "s":
              set = whitespaceCodes;
              break;
            case "S":
              set = whitespaceCodes;
              complement = true;
              break;
            case "w":
              set = wordCharCodes;
              break;
            case "W":
              set = wordCharCodes;
              complement = true;
              break;
          }
          ASSERT_EXISTS(set);
          return { type: "Set", value: set, complement };
        };
        RegExpParser.prototype.controlEscapeAtom = function() {
          var escapeCode;
          switch (this.popChar()) {
            case "f":
              escapeCode = cc("\f");
              break;
            case "n":
              escapeCode = cc("\n");
              break;
            case "r":
              escapeCode = cc("\r");
              break;
            case "t":
              escapeCode = cc("	");
              break;
            case "v":
              escapeCode = cc("\v");
              break;
          }
          ASSERT_EXISTS(escapeCode);
          return { type: "Character", value: escapeCode };
        };
        RegExpParser.prototype.controlLetterEscapeAtom = function() {
          this.consumeChar("c");
          var letter = this.popChar();
          if (/[a-zA-Z]/.test(letter) === false) {
            throw Error("Invalid ");
          }
          var letterCode = letter.toUpperCase().charCodeAt(0) - 64;
          return { type: "Character", value: letterCode };
        };
        RegExpParser.prototype.nulCharacterAtom = function() {
          this.consumeChar("0");
          return { type: "Character", value: cc("\0") };
        };
        RegExpParser.prototype.hexEscapeSequenceAtom = function() {
          this.consumeChar("x");
          return this.parseHexDigits(2);
        };
        RegExpParser.prototype.regExpUnicodeEscapeSequenceAtom = function() {
          this.consumeChar("u");
          return this.parseHexDigits(4);
        };
        RegExpParser.prototype.identityEscapeAtom = function() {
          var escapedChar = this.popChar();
          return { type: "Character", value: cc(escapedChar) };
        };
        RegExpParser.prototype.classPatternCharacterAtom = function() {
          switch (this.peekChar()) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
            case "\\":
            case "]":
              throw Error("TBD");
            default:
              var nextChar2 = this.popChar();
              return { type: "Character", value: cc(nextChar2) };
          }
        };
        RegExpParser.prototype.characterClass = function() {
          var set = [];
          var complement = false;
          this.consumeChar("[");
          if (this.peekChar(0) === "^") {
            this.consumeChar("^");
            complement = true;
          }
          while (this.isClassAtom()) {
            var from = this.classAtom();
            var isFromSingleChar = from.type === "Character";
            if (isFromSingleChar && this.isRangeDash()) {
              this.consumeChar("-");
              var to = this.classAtom();
              var isToSingleChar = to.type === "Character";
              if (isToSingleChar) {
                if (to.value < from.value) {
                  throw Error("Range out of order in character class");
                }
                set.push({ from: from.value, to: to.value });
              } else {
                insertToSet(from.value, set);
                set.push(cc("-"));
                insertToSet(to.value, set);
              }
            } else {
              insertToSet(from.value, set);
            }
          }
          this.consumeChar("]");
          return { type: "Set", complement, value: set };
        };
        RegExpParser.prototype.classAtom = function() {
          switch (this.peekChar()) {
            case "]":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              throw Error("TBD");
            case "\\":
              return this.classEscape();
            default:
              return this.classPatternCharacterAtom();
          }
        };
        RegExpParser.prototype.classEscape = function() {
          this.consumeChar("\\");
          switch (this.peekChar()) {
            case "b":
              this.consumeChar("b");
              return { type: "Character", value: cc("\b") };
            case "d":
            case "D":
            case "s":
            case "S":
            case "w":
            case "W":
              return this.characterClassEscape();
            case "f":
            case "n":
            case "r":
            case "t":
            case "v":
              return this.controlEscapeAtom();
            case "c":
              return this.controlLetterEscapeAtom();
            case "0":
              return this.nulCharacterAtom();
            case "x":
              return this.hexEscapeSequenceAtom();
            case "u":
              return this.regExpUnicodeEscapeSequenceAtom();
            default:
              return this.identityEscapeAtom();
          }
        };
        RegExpParser.prototype.group = function() {
          var capturing = true;
          this.consumeChar("(");
          switch (this.peekChar(0)) {
            case "?":
              this.consumeChar("?");
              this.consumeChar(":");
              capturing = false;
              break;
            default:
              this.groupIdx++;
              break;
          }
          var value = this.disjunction();
          this.consumeChar(")");
          var groupAst = {
            type: "Group",
            capturing,
            value
          };
          if (capturing) {
            groupAst.idx = this.groupIdx;
          }
          return groupAst;
        };
        RegExpParser.prototype.positiveInteger = function() {
          var number2 = this.popChar();
          if (decimalPatternNoZero.test(number2) === false) {
            throw Error("Expecting a positive integer");
          }
          while (decimalPattern.test(this.peekChar(0))) {
            number2 += this.popChar();
          }
          return parseInt(number2, 10);
        };
        RegExpParser.prototype.integerIncludingZero = function() {
          var number2 = this.popChar();
          if (decimalPattern.test(number2) === false) {
            throw Error("Expecting an integer");
          }
          while (decimalPattern.test(this.peekChar(0))) {
            number2 += this.popChar();
          }
          return parseInt(number2, 10);
        };
        RegExpParser.prototype.patternCharacter = function() {
          var nextChar2 = this.popChar();
          switch (nextChar2) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
            case "^":
            case "$":
            case "\\":
            case ".":
            case "*":
            case "+":
            case "?":
            case "(":
            case ")":
            case "[":
            case "|":
              throw Error("TBD");
            default:
              return { type: "Character", value: cc(nextChar2) };
          }
        };
        RegExpParser.prototype.isRegExpFlag = function() {
          switch (this.peekChar(0)) {
            case "g":
            case "i":
            case "m":
            case "u":
            case "y":
              return true;
            default:
              return false;
          }
        };
        RegExpParser.prototype.isRangeDash = function() {
          return this.peekChar() === "-" && this.isClassAtom(1);
        };
        RegExpParser.prototype.isDigit = function() {
          return decimalPattern.test(this.peekChar(0));
        };
        RegExpParser.prototype.isClassAtom = function(howMuch) {
          if (howMuch === void 0) {
            howMuch = 0;
          }
          switch (this.peekChar(howMuch)) {
            case "]":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return false;
            default:
              return true;
          }
        };
        RegExpParser.prototype.isTerm = function() {
          return this.isAtom() || this.isAssertion();
        };
        RegExpParser.prototype.isAtom = function() {
          if (this.isPatternCharacter()) {
            return true;
          }
          switch (this.peekChar(0)) {
            case ".":
            case "\\":
            case "[":
            case "(":
              return true;
            default:
              return false;
          }
        };
        RegExpParser.prototype.isAssertion = function() {
          switch (this.peekChar(0)) {
            case "^":
            case "$":
              return true;
            case "\\":
              switch (this.peekChar(1)) {
                case "b":
                case "B":
                  return true;
                default:
                  return false;
              }
            case "(":
              return this.peekChar(1) === "?" && (this.peekChar(2) === "=" || this.peekChar(2) === "!");
            default:
              return false;
          }
        };
        RegExpParser.prototype.isQuantifier = function() {
          var prevState = this.saveState();
          try {
            return this.quantifier(true) !== void 0;
          } catch (e) {
            return false;
          } finally {
            this.restoreState(prevState);
          }
        };
        RegExpParser.prototype.isPatternCharacter = function() {
          switch (this.peekChar()) {
            case "^":
            case "$":
            case "\\":
            case ".":
            case "*":
            case "+":
            case "?":
            case "(":
            case ")":
            case "[":
            case "|":
            case "/":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return false;
            default:
              return true;
          }
        };
        RegExpParser.prototype.parseHexDigits = function(howMany) {
          var hexString = "";
          for (var i2 = 0; i2 < howMany; i2++) {
            var hexChar = this.popChar();
            if (hexDigitPattern.test(hexChar) === false) {
              throw Error("Expecting a HexDecimal digits");
            }
            hexString += hexChar;
          }
          var charCode = parseInt(hexString, 16);
          return { type: "Character", value: charCode };
        };
        RegExpParser.prototype.peekChar = function(howMuch) {
          if (howMuch === void 0) {
            howMuch = 0;
          }
          return this.input[this.idx + howMuch];
        };
        RegExpParser.prototype.popChar = function() {
          var nextChar2 = this.peekChar(0);
          this.consumeChar();
          return nextChar2;
        };
        RegExpParser.prototype.consumeChar = function(char) {
          if (char !== void 0 && this.input[this.idx] !== char) {
            throw Error(
              "Expected: '" + char + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx
            );
          }
          if (this.idx >= this.input.length) {
            throw Error("Unexpected end of input");
          }
          this.idx++;
        };
        RegExpParser.prototype.loc = function(begin) {
          return { begin, end: this.idx };
        };
        var hexDigitPattern = /[0-9a-fA-F]/;
        var decimalPattern = /[0-9]/;
        var decimalPatternNoZero = /[1-9]/;
        function cc(char) {
          return char.charCodeAt(0);
        }
        function insertToSet(item, set) {
          if (item.length !== void 0) {
            item.forEach(function(subItem) {
              set.push(subItem);
            });
          } else {
            set.push(item);
          }
        }
        function addFlag(flagObj, flagKey) {
          if (flagObj[flagKey] === true) {
            throw "duplicate flag " + flagKey;
          }
          flagObj[flagKey] = true;
        }
        function ASSERT_EXISTS(obj) {
          if (obj === void 0) {
            throw Error("Internal Error - Should never get here!");
          }
        }
        function ASSERT_NEVER_REACH_HERE() {
          throw Error("Internal Error - Should never get here!");
        }
        var i;
        var digitsCharCodes = [];
        for (i = cc("0"); i <= cc("9"); i++) {
          digitsCharCodes.push(i);
        }
        var wordCharCodes = [cc("_")].concat(digitsCharCodes);
        for (i = cc("a"); i <= cc("z"); i++) {
          wordCharCodes.push(i);
        }
        for (i = cc("A"); i <= cc("Z"); i++) {
          wordCharCodes.push(i);
        }
        var whitespaceCodes = [
          cc(" "),
          cc("\f"),
          cc("\n"),
          cc("\r"),
          cc("	"),
          cc("\v"),
          cc("	"),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc(" "),
          cc("\u2028"),
          cc("\u2029"),
          cc(" "),
          cc(" "),
          cc("　"),
          cc("\uFEFF")
        ];
        function BaseRegExpVisitor() {
        }
        BaseRegExpVisitor.prototype.visitChildren = function(node) {
          for (var key in node) {
            var child = node[key];
            if (node.hasOwnProperty(key)) {
              if (child.type !== void 0) {
                this.visit(child);
              } else if (Array.isArray(child)) {
                child.forEach(function(subChild) {
                  this.visit(subChild);
                }, this);
              }
            }
          }
        };
        BaseRegExpVisitor.prototype.visit = function(node) {
          switch (node.type) {
            case "Pattern":
              this.visitPattern(node);
              break;
            case "Flags":
              this.visitFlags(node);
              break;
            case "Disjunction":
              this.visitDisjunction(node);
              break;
            case "Alternative":
              this.visitAlternative(node);
              break;
            case "StartAnchor":
              this.visitStartAnchor(node);
              break;
            case "EndAnchor":
              this.visitEndAnchor(node);
              break;
            case "WordBoundary":
              this.visitWordBoundary(node);
              break;
            case "NonWordBoundary":
              this.visitNonWordBoundary(node);
              break;
            case "Lookahead":
              this.visitLookahead(node);
              break;
            case "NegativeLookahead":
              this.visitNegativeLookahead(node);
              break;
            case "Character":
              this.visitCharacter(node);
              break;
            case "Set":
              this.visitSet(node);
              break;
            case "Group":
              this.visitGroup(node);
              break;
            case "GroupBackReference":
              this.visitGroupBackReference(node);
              break;
            case "Quantifier":
              this.visitQuantifier(node);
              break;
          }
          this.visitChildren(node);
        };
        BaseRegExpVisitor.prototype.visitPattern = function(node) {
        };
        BaseRegExpVisitor.prototype.visitFlags = function(node) {
        };
        BaseRegExpVisitor.prototype.visitDisjunction = function(node) {
        };
        BaseRegExpVisitor.prototype.visitAlternative = function(node) {
        };
        BaseRegExpVisitor.prototype.visitStartAnchor = function(node) {
        };
        BaseRegExpVisitor.prototype.visitEndAnchor = function(node) {
        };
        BaseRegExpVisitor.prototype.visitWordBoundary = function(node) {
        };
        BaseRegExpVisitor.prototype.visitNonWordBoundary = function(node) {
        };
        BaseRegExpVisitor.prototype.visitLookahead = function(node) {
        };
        BaseRegExpVisitor.prototype.visitNegativeLookahead = function(node) {
        };
        BaseRegExpVisitor.prototype.visitCharacter = function(node) {
        };
        BaseRegExpVisitor.prototype.visitSet = function(node) {
        };
        BaseRegExpVisitor.prototype.visitGroup = function(node) {
        };
        BaseRegExpVisitor.prototype.visitGroupBackReference = function(node) {
        };
        BaseRegExpVisitor.prototype.visitQuantifier = function(node) {
        };
        return {
          RegExpParser,
          BaseRegExpVisitor,
          VERSION: "0.5.0"
        };
      }
    );
  })(regexpToAst);
  return regexpToAst.exports;
}
var hasRequiredRegexUtil;
function requireRegexUtil() {
  if (hasRequiredRegexUtil)
    return regexUtil;
  hasRequiredRegexUtil = 1;
  Object.defineProperty(regexUtil, "__esModule", { value: true });
  regexUtil.partialRegex = regexUtil.partialMatches = regexUtil.getCaseInsensitivePattern = regexUtil.escapeRegExp = regexUtil.isWhitespaceRegExp = regexUtil.isMultilineComment = regexUtil.getTerminalParts = void 0;
  const regexp_to_ast_1 = requireRegexpToAst();
  const regexParser = new regexp_to_ast_1.RegExpParser();
  class TerminalRegexVisitor extends regexp_to_ast_1.BaseRegExpVisitor {
    constructor() {
      super(...arguments);
      this.isStarting = true;
      this.endRegexStack = [];
      this.multiline = false;
    }
    get endRegex() {
      return this.endRegexStack.join("");
    }
    reset(regex) {
      this.multiline = false;
      this.regex = regex;
      this.startRegex = "";
      this.isStarting = true;
      this.endRegexStack = [];
    }
    visitGroup(node) {
      if (node.quantifier) {
        this.isStarting = false;
        this.endRegexStack = [];
      }
    }
    visitCharacter(node) {
      const char = String.fromCharCode(node.value);
      if (!this.multiline && char === "\n") {
        this.multiline = true;
      }
      if (node.quantifier) {
        this.isStarting = false;
        this.endRegexStack = [];
      } else {
        const escapedChar = escapeRegExp(char);
        this.endRegexStack.push(escapedChar);
        if (this.isStarting) {
          this.startRegex += escapedChar;
        }
      }
    }
    visitSet(node) {
      if (!this.multiline) {
        const set = this.regex.substring(node.loc.begin, node.loc.end);
        const regex = new RegExp(set);
        this.multiline = Boolean("\n".match(regex));
      }
      if (node.quantifier) {
        this.isStarting = false;
        this.endRegexStack = [];
      } else {
        const set = this.regex.substring(node.loc.begin, node.loc.end);
        this.endRegexStack.push(set);
        if (this.isStarting) {
          this.startRegex += set;
        }
      }
    }
    visitChildren(node) {
      if (node.type === "Group") {
        const group = node;
        if (group.quantifier) {
          return;
        }
      }
      super.visitChildren(node);
    }
  }
  const visitor2 = new TerminalRegexVisitor();
  function getTerminalParts(regex) {
    try {
      if (typeof regex !== "string") {
        regex = regex.source;
      }
      regex = `/${regex}/`;
      const pattern = regexParser.pattern(regex);
      const parts = [];
      for (const alternative of pattern.value.value) {
        visitor2.reset(regex);
        visitor2.visit(alternative);
        parts.push({
          start: visitor2.startRegex,
          end: visitor2.endRegex
        });
      }
      return parts;
    } catch (_a2) {
      return [];
    }
  }
  regexUtil.getTerminalParts = getTerminalParts;
  function isMultilineComment(regex) {
    try {
      if (typeof regex !== "string") {
        regex = regex.source;
      }
      regex = `/${regex}/`;
      visitor2.reset(regex);
      visitor2.visit(regexParser.pattern(regex));
      return visitor2.multiline;
    } catch (_a2) {
      return false;
    }
  }
  regexUtil.isMultilineComment = isMultilineComment;
  function isWhitespaceRegExp(value) {
    const regexp = typeof value === "string" ? new RegExp(value) : value;
    return regexp.test(" ");
  }
  regexUtil.isWhitespaceRegExp = isWhitespaceRegExp;
  function escapeRegExp(value) {
    return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  regexUtil.escapeRegExp = escapeRegExp;
  function getCaseInsensitivePattern(keyword2) {
    return Array.prototype.map.call(keyword2, (letter) => /\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)).join("");
  }
  regexUtil.getCaseInsensitivePattern = getCaseInsensitivePattern;
  function partialMatches(regex, input) {
    const partial = partialRegex(regex);
    const match = input.match(partial);
    return !!match && match[0].length > 0;
  }
  regexUtil.partialMatches = partialMatches;
  function partialRegex(regex) {
    if (typeof regex === "string") {
      regex = new RegExp(regex);
    }
    const re = regex, source = regex.source;
    let i = 0;
    function process2() {
      let result = "", tmp;
      function appendRaw(nbChars) {
        result += source.substr(i, nbChars);
        i += nbChars;
      }
      function appendOptional(nbChars) {
        result += "(?:" + source.substr(i, nbChars) + "|$)";
        i += nbChars;
      }
      while (i < source.length) {
        switch (source[i]) {
          case "\\":
            switch (source[i + 1]) {
              case "c":
                appendOptional(3);
                break;
              case "x":
                appendOptional(4);
                break;
              case "u":
                if (re.unicode) {
                  if (source[i + 2] === "{") {
                    appendOptional(source.indexOf("}", i) - i + 1);
                  } else {
                    appendOptional(6);
                  }
                } else {
                  appendOptional(2);
                }
                break;
              case "p":
              case "P":
                if (re.unicode) {
                  appendOptional(source.indexOf("}", i) - i + 1);
                } else {
                  appendOptional(2);
                }
                break;
              case "k":
                appendOptional(source.indexOf(">", i) - i + 1);
                break;
              default:
                appendOptional(2);
                break;
            }
            break;
          case "[":
            tmp = /\[(?:\\.|.)*?\]/g;
            tmp.lastIndex = i;
            tmp = tmp.exec(source) || [];
            appendOptional(tmp[0].length);
            break;
          case "|":
          case "^":
          case "$":
          case "*":
          case "+":
          case "?":
            appendRaw(1);
            break;
          case "{":
            tmp = /\{\d+,?\d*\}/g;
            tmp.lastIndex = i;
            tmp = tmp.exec(source);
            if (tmp) {
              appendRaw(tmp[0].length);
            } else {
              appendOptional(1);
            }
            break;
          case "(":
            if (source[i + 1] === "?") {
              switch (source[i + 2]) {
                case ":":
                  result += "(?:";
                  i += 3;
                  result += process2() + "|$)";
                  break;
                case "=":
                  result += "(?=";
                  i += 3;
                  result += process2() + ")";
                  break;
                case "!":
                  tmp = i;
                  i += 3;
                  process2();
                  result += source.substr(tmp, i - tmp);
                  break;
                case "<":
                  switch (source[i + 3]) {
                    case "=":
                    case "!":
                      tmp = i;
                      i += 4;
                      process2();
                      result += source.substr(tmp, i - tmp);
                      break;
                    default:
                      appendRaw(source.indexOf(">", i) - i + 1);
                      result += process2() + "|$)";
                      break;
                  }
                  break;
              }
            } else {
              appendRaw(1);
              result += process2() + "|$)";
            }
            break;
          case ")":
            ++i;
            return result;
          default:
            appendOptional(1);
            break;
        }
      }
      return result;
    }
    return new RegExp(process2(), regex.flags);
  }
  regexUtil.partialRegex = partialRegex;
  return regexUtil;
}
var hasRequiredInternalGrammarUtil;
function requireInternalGrammarUtil() {
  if (hasRequiredInternalGrammarUtil)
    return internalGrammarUtil;
  hasRequiredInternalGrammarUtil = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(internalGrammarUtil, "__esModule", { value: true });
  internalGrammarUtil.isPrimitiveType = internalGrammarUtil.extractAssignments = internalGrammarUtil.resolveTransitiveImports = internalGrammarUtil.resolveImport = internalGrammarUtil.resolveImportUri = internalGrammarUtil.terminalRegex = internalGrammarUtil.getRuleType = internalGrammarUtil.getActionType = internalGrammarUtil.getExplicitRuleType = internalGrammarUtil.getTypeNameWithoutError = internalGrammarUtil.getTypeName = internalGrammarUtil.getActionAtElement = internalGrammarUtil.isDataType = internalGrammarUtil.hasDataTypeReturn = internalGrammarUtil.isDataTypeRule = internalGrammarUtil.isArrayOperator = internalGrammarUtil.isArrayCardinality = internalGrammarUtil.isOptionalCardinality = void 0;
  const ast2 = __importStar(requireAst());
  const vscode_uri_1 = require$$1;
  const ast_util_1 = requireAstUtil();
  const types_1 = requireTypes();
  const regex_util_1 = requireRegexUtil();
  function isOptionalCardinality(cardinality) {
    return cardinality === "?" || cardinality === "*";
  }
  internalGrammarUtil.isOptionalCardinality = isOptionalCardinality;
  function isArrayCardinality(cardinality) {
    return cardinality === "*" || cardinality === "+";
  }
  internalGrammarUtil.isArrayCardinality = isArrayCardinality;
  function isArrayOperator(operator2) {
    return operator2 === "+=";
  }
  internalGrammarUtil.isArrayOperator = isArrayOperator;
  function isDataTypeRule(rule) {
    return isDataTypeRuleInternal(rule, /* @__PURE__ */ new Set());
  }
  internalGrammarUtil.isDataTypeRule = isDataTypeRule;
  function isDataTypeRuleInternal(rule, visited) {
    if (visited.has(rule)) {
      return true;
    } else {
      visited.add(rule);
    }
    for (const node of (0, ast_util_1.streamAllContents)(rule)) {
      if (ast2.isRuleCall(node)) {
        if (!node.rule.ref) {
          return false;
        }
        if (ast2.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {
          return false;
        }
      } else if (ast2.isAssignment(node)) {
        return false;
      } else if (ast2.isAction(node)) {
        return false;
      }
    }
    return Boolean(rule.definition);
  }
  function hasDataTypeReturn(rule) {
    var _a2;
    const returnType = (_a2 = rule.returnType) === null || _a2 === void 0 ? void 0 : _a2.ref;
    return rule.dataType !== void 0 || ast2.isType(returnType) && isDataType(returnType);
  }
  internalGrammarUtil.hasDataTypeReturn = hasDataTypeReturn;
  function isDataType(type) {
    return isDataTypeInternal(type.type, /* @__PURE__ */ new Set());
  }
  internalGrammarUtil.isDataType = isDataType;
  function isDataTypeInternal(type, visited) {
    if (visited.has(type)) {
      return true;
    } else {
      visited.add(type);
    }
    if (ast2.isArrayType(type)) {
      return false;
    } else if (ast2.isReferenceType(type)) {
      return false;
    } else if (ast2.isUnionType(type)) {
      return type.types.every((e) => isDataTypeInternal(e, visited));
    } else if (ast2.isSimpleType(type)) {
      if (type.primitiveType !== void 0) {
        return true;
      } else if (type.stringType !== void 0) {
        return true;
      } else if (type.typeRef !== void 0) {
        const ref = type.typeRef.ref;
        if (ast2.isType(ref)) {
          return isDataTypeInternal(ref.type, visited);
        } else {
          return false;
        }
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  function getActionAtElement(element) {
    const parent = element.$container;
    if (ast2.isGroup(parent)) {
      const elements = parent.elements;
      const index = elements.indexOf(element);
      for (let i = index - 1; i >= 0; i--) {
        const item = elements[i];
        if (ast2.isAction(item)) {
          return item;
        } else {
          const action = (0, ast_util_1.streamAllContents)(elements[i]).find(ast2.isAction);
          if (action) {
            return action;
          }
        }
      }
    }
    if (ast2.isAbstractElement(parent)) {
      return getActionAtElement(parent);
    } else {
      return void 0;
    }
  }
  internalGrammarUtil.getActionAtElement = getActionAtElement;
  function getTypeName(type) {
    var _a2;
    if (ast2.isParserRule(type)) {
      return isDataTypeRule(type) ? type.name : (_a2 = getExplicitRuleType(type)) !== null && _a2 !== void 0 ? _a2 : type.name;
    } else if (ast2.isInterface(type) || ast2.isType(type) || ast2.isReturnType(type)) {
      return type.name;
    } else if (ast2.isAction(type)) {
      const actionType = getActionType(type);
      if (actionType) {
        return actionType;
      }
    } else if (ast2.isInferredType(type)) {
      return type.name;
    }
    throw new types_1.TypeResolutionError("Cannot get name of Unknown Type", type.$cstNode);
  }
  internalGrammarUtil.getTypeName = getTypeName;
  function getTypeNameWithoutError(type) {
    if (!type) {
      return void 0;
    }
    try {
      return getTypeName(type);
    } catch (_a2) {
      return void 0;
    }
  }
  internalGrammarUtil.getTypeNameWithoutError = getTypeNameWithoutError;
  function getExplicitRuleType(rule) {
    if (rule.inferredType) {
      return rule.inferredType.name;
    } else if (rule.dataType) {
      return rule.dataType;
    } else if (rule.returnType) {
      const refType = rule.returnType.ref;
      if (refType) {
        if (ast2.isParserRule(refType)) {
          return refType.name;
        } else if (ast2.isInterface(refType) || ast2.isType(refType)) {
          return refType.name;
        }
      }
    }
    return void 0;
  }
  internalGrammarUtil.getExplicitRuleType = getExplicitRuleType;
  function getActionType(action) {
    var _a2;
    if (action.inferredType) {
      return action.inferredType.name;
    } else if ((_a2 = action.type) === null || _a2 === void 0 ? void 0 : _a2.ref) {
      return getTypeName(action.type.ref);
    }
    return void 0;
  }
  internalGrammarUtil.getActionType = getActionType;
  function getRuleType(rule) {
    var _a2, _b2, _c2;
    if (ast2.isTerminalRule(rule)) {
      return (_b2 = (_a2 = rule.type) === null || _a2 === void 0 ? void 0 : _a2.name) !== null && _b2 !== void 0 ? _b2 : "string";
    } else {
      return isDataTypeRule(rule) ? rule.name : (_c2 = getExplicitRuleType(rule)) !== null && _c2 !== void 0 ? _c2 : rule.name;
    }
  }
  internalGrammarUtil.getRuleType = getRuleType;
  function terminalRegex(terminalRule) {
    return abstractElementToRegex(terminalRule.definition);
  }
  internalGrammarUtil.terminalRegex = terminalRegex;
  const WILDCARD2 = /[\s\S]/.source;
  function abstractElementToRegex(element) {
    if (ast2.isTerminalAlternatives(element)) {
      return terminalAlternativesToRegex(element);
    } else if (ast2.isTerminalGroup(element)) {
      return terminalGroupToRegex(element);
    } else if (ast2.isCharacterRange(element)) {
      return characterRangeToRegex(element);
    } else if (ast2.isTerminalRuleCall(element)) {
      const rule = element.rule.ref;
      if (!rule) {
        throw new Error("Missing rule reference.");
      }
      return withCardinality(terminalRegex(rule), {
        cardinality: element.cardinality,
        lookahead: element.lookahead
      });
    } else if (ast2.isNegatedToken(element)) {
      return negateTokenToRegex(element);
    } else if (ast2.isUntilToken(element)) {
      return untilTokenToRegex(element);
    } else if (ast2.isRegexToken(element)) {
      return withCardinality(element.regex, {
        cardinality: element.cardinality,
        lookahead: element.lookahead,
        wrap: false
      });
    } else if (ast2.isWildcard(element)) {
      return withCardinality(WILDCARD2, {
        cardinality: element.cardinality,
        lookahead: element.lookahead
      });
    } else {
      throw new Error(`Invalid terminal element: ${element === null || element === void 0 ? void 0 : element.$type}`);
    }
  }
  function terminalAlternativesToRegex(alternatives) {
    return withCardinality(alternatives.elements.map(abstractElementToRegex).join("|"), {
      cardinality: alternatives.cardinality,
      lookahead: alternatives.lookahead
    });
  }
  function terminalGroupToRegex(group) {
    return withCardinality(group.elements.map(abstractElementToRegex).join(""), {
      cardinality: group.cardinality,
      lookahead: group.lookahead
    });
  }
  function untilTokenToRegex(until) {
    return withCardinality(`${WILDCARD2}*?${abstractElementToRegex(until.terminal)}`, {
      cardinality: until.cardinality,
      lookahead: until.lookahead
    });
  }
  function negateTokenToRegex(negate) {
    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD2}*?`, {
      cardinality: negate.cardinality,
      lookahead: negate.lookahead
    });
  }
  function characterRangeToRegex(range2) {
    if (range2.right) {
      return withCardinality(`[${keywordToRegex(range2.left)}-${keywordToRegex(range2.right)}]`, {
        cardinality: range2.cardinality,
        lookahead: range2.lookahead,
        wrap: false
      });
    }
    return withCardinality(keywordToRegex(range2.left), {
      cardinality: range2.cardinality,
      lookahead: range2.lookahead,
      wrap: false
    });
  }
  function keywordToRegex(keyword2) {
    return (0, regex_util_1.escapeRegExp)(keyword2.value);
  }
  function withCardinality(regex, options) {
    var _a2;
    if (options.wrap !== false || options.lookahead) {
      regex = `(${(_a2 = options.lookahead) !== null && _a2 !== void 0 ? _a2 : ""}${regex})`;
    }
    if (options.cardinality) {
      return `${regex}${options.cardinality}`;
    }
    return regex;
  }
  function resolveImportUri(imp) {
    if (imp.path === void 0 || imp.path.length === 0) {
      return void 0;
    }
    const dirUri = vscode_uri_1.Utils.dirname((0, ast_util_1.getDocument)(imp).uri);
    let grammarPath = imp.path;
    if (!grammarPath.endsWith(".langium")) {
      grammarPath += ".langium";
    }
    return vscode_uri_1.Utils.resolvePath(dirUri, grammarPath);
  }
  internalGrammarUtil.resolveImportUri = resolveImportUri;
  function resolveImport(documents2, imp) {
    const resolvedUri = resolveImportUri(imp);
    try {
      if (resolvedUri) {
        const resolvedDocument = documents2.getOrCreateDocument(resolvedUri);
        const node = resolvedDocument.parseResult.value;
        if (ast2.isGrammar(node)) {
          return node;
        }
      }
    } catch (_a2) {
    }
    return void 0;
  }
  internalGrammarUtil.resolveImport = resolveImport;
  function resolveTransitiveImports(documents2, grammarOrImport) {
    if (ast2.isGrammarImport(grammarOrImport)) {
      const resolvedGrammar = resolveImport(documents2, grammarOrImport);
      if (resolvedGrammar) {
        const transitiveGrammars = resolveTransitiveImportsInternal(documents2, resolvedGrammar);
        transitiveGrammars.push(resolvedGrammar);
        return transitiveGrammars;
      }
      return [];
    } else {
      return resolveTransitiveImportsInternal(documents2, grammarOrImport);
    }
  }
  internalGrammarUtil.resolveTransitiveImports = resolveTransitiveImports;
  function resolveTransitiveImportsInternal(documents2, grammar2, initialGrammar = grammar2, visited = /* @__PURE__ */ new Set(), grammars = /* @__PURE__ */ new Set()) {
    const doc2 = (0, ast_util_1.getDocument)(grammar2);
    if (initialGrammar !== grammar2) {
      grammars.add(grammar2);
    }
    if (!visited.has(doc2.uri)) {
      visited.add(doc2.uri);
      for (const imp of grammar2.imports) {
        const importedGrammar = resolveImport(documents2, imp);
        if (importedGrammar) {
          resolveTransitiveImportsInternal(documents2, importedGrammar, initialGrammar, visited, grammars);
        }
      }
    }
    return Array.from(grammars);
  }
  function extractAssignments(element) {
    if (ast2.isAssignment(element)) {
      return [element];
    } else if (ast2.isAlternatives(element) || ast2.isGroup(element) || ast2.isUnorderedGroup(element)) {
      return element.elements.flatMap((e) => extractAssignments(e));
    } else if (ast2.isRuleCall(element) && element.rule.ref) {
      return extractAssignments(element.rule.ref.definition);
    }
    return [];
  }
  internalGrammarUtil.extractAssignments = extractAssignments;
  const primitiveTypes = ["string", "number", "boolean", "Date", "bigint"];
  function isPrimitiveType(type) {
    return primitiveTypes.includes(type);
  }
  internalGrammarUtil.isPrimitiveType = isPrimitiveType;
  return internalGrammarUtil;
}
var plainTypes = {};
var hasRequiredPlainTypes;
function requirePlainTypes() {
  if (hasRequiredPlainTypes)
    return plainTypes;
  hasRequiredPlainTypes = 1;
  Object.defineProperty(plainTypes, "__esModule", { value: true });
  plainTypes.flattenPlainType = plainTypes.mergePropertyTypes = plainTypes.plainToTypes = plainTypes.isPlainStringType = plainTypes.isPlainPrimitiveType = plainTypes.isPlainValueType = plainTypes.isPlainPropertyUnion = plainTypes.isPlainArrayType = plainTypes.isPlainReferenceType = plainTypes.isPlainUnion = plainTypes.isPlainInterface = void 0;
  const types_1 = requireTypes();
  function isPlainInterface(type) {
    return !isPlainUnion(type);
  }
  plainTypes.isPlainInterface = isPlainInterface;
  function isPlainUnion(type) {
    return "type" in type;
  }
  plainTypes.isPlainUnion = isPlainUnion;
  function isPlainReferenceType(propertyType) {
    return "referenceType" in propertyType;
  }
  plainTypes.isPlainReferenceType = isPlainReferenceType;
  function isPlainArrayType(propertyType) {
    return "elementType" in propertyType;
  }
  plainTypes.isPlainArrayType = isPlainArrayType;
  function isPlainPropertyUnion(propertyType) {
    return "types" in propertyType;
  }
  plainTypes.isPlainPropertyUnion = isPlainPropertyUnion;
  function isPlainValueType(propertyType) {
    return "value" in propertyType;
  }
  plainTypes.isPlainValueType = isPlainValueType;
  function isPlainPrimitiveType(propertyType) {
    return "primitive" in propertyType;
  }
  plainTypes.isPlainPrimitiveType = isPlainPrimitiveType;
  function isPlainStringType(propertyType) {
    return "string" in propertyType;
  }
  plainTypes.isPlainStringType = isPlainStringType;
  function plainToTypes(plain) {
    const interfaceTypes = /* @__PURE__ */ new Map();
    const unionTypes = /* @__PURE__ */ new Map();
    for (const interfaceValue of plain.interfaces) {
      const type = new types_1.InterfaceType(interfaceValue.name, interfaceValue.declared, interfaceValue.abstract);
      interfaceTypes.set(interfaceValue.name, type);
    }
    for (const unionValue of plain.unions) {
      const type = new types_1.UnionType(unionValue.name, {
        declared: unionValue.declared,
        dataType: unionValue.dataType
      });
      unionTypes.set(unionValue.name, type);
    }
    for (const interfaceValue of plain.interfaces) {
      const type = interfaceTypes.get(interfaceValue.name);
      for (const superTypeName of interfaceValue.superTypes) {
        const superType = interfaceTypes.get(superTypeName) || unionTypes.get(superTypeName);
        if (superType) {
          type.superTypes.add(superType);
        }
      }
      for (const subTypeName of interfaceValue.subTypes) {
        const subType = interfaceTypes.get(subTypeName) || unionTypes.get(subTypeName);
        if (subType) {
          type.subTypes.add(subType);
        }
      }
      for (const property of interfaceValue.properties) {
        const prop = plainToProperty(property, interfaceTypes, unionTypes);
        type.properties.push(prop);
      }
    }
    for (const unionValue of plain.unions) {
      const type = unionTypes.get(unionValue.name);
      type.type = plainToPropertyType(unionValue.type, type, interfaceTypes, unionTypes);
    }
    return {
      interfaces: Array.from(interfaceTypes.values()),
      unions: Array.from(unionTypes.values())
    };
  }
  plainTypes.plainToTypes = plainToTypes;
  function plainToProperty(property, interfaces, unions) {
    return {
      name: property.name,
      optional: property.optional,
      astNodes: property.astNodes,
      type: plainToPropertyType(property.type, void 0, interfaces, unions)
    };
  }
  function plainToPropertyType(type, union, interfaces, unions) {
    if (isPlainArrayType(type)) {
      return {
        elementType: plainToPropertyType(type.elementType, union, interfaces, unions)
      };
    } else if (isPlainReferenceType(type)) {
      return {
        referenceType: plainToPropertyType(type.referenceType, void 0, interfaces, unions)
      };
    } else if (isPlainPropertyUnion(type)) {
      return {
        types: type.types.map((e) => plainToPropertyType(e, union, interfaces, unions))
      };
    } else if (isPlainStringType(type)) {
      return {
        string: type.string
      };
    } else if (isPlainPrimitiveType(type)) {
      return {
        primitive: type.primitive,
        regex: type.regex
      };
    } else if (isPlainValueType(type)) {
      const value = interfaces.get(type.value) || unions.get(type.value);
      if (!value) {
        return {
          primitive: "unknown"
        };
      }
      if (union) {
        union.subTypes.add(value);
      }
      return {
        value
      };
    } else {
      throw new Error("Invalid property type");
    }
  }
  function mergePropertyTypes(first2, second) {
    const flattenedFirst = flattenPlainType(first2);
    const flattenedSecond = flattenPlainType(second);
    for (const second2 of flattenedSecond) {
      if (!includesType(flattenedFirst, second2)) {
        flattenedFirst.push(second2);
      }
    }
    if (flattenedFirst.length === 1) {
      return flattenedFirst[0];
    } else {
      return {
        types: flattenedFirst
      };
    }
  }
  plainTypes.mergePropertyTypes = mergePropertyTypes;
  function includesType(list, value) {
    return list.some((e) => typeEquals(e, value));
  }
  function typeEquals(first2, second) {
    if (isPlainArrayType(first2) && isPlainArrayType(second)) {
      return typeEquals(first2.elementType, second.elementType);
    } else if (isPlainReferenceType(first2) && isPlainReferenceType(second)) {
      return typeEquals(first2.referenceType, second.referenceType);
    } else if (isPlainValueType(first2) && isPlainValueType(second)) {
      return first2.value === second.value;
    } else {
      return false;
    }
  }
  function flattenPlainType(type) {
    if (isPlainPropertyUnion(type)) {
      return type.types.flatMap((e) => flattenPlainType(e));
    } else {
      return [type];
    }
  }
  plainTypes.flattenPlainType = flattenPlainType;
  return plainTypes;
}
var hasRequiredInferredTypes;
function requireInferredTypes() {
  if (hasRequiredInferredTypes)
    return inferredTypes;
  hasRequiredInferredTypes = 1;
  Object.defineProperty(inferredTypes, "__esModule", { value: true });
  inferredTypes.collectInferredTypes = void 0;
  const name_provider_1 = requireNameProvider();
  const collections_1 = requireCollections();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const plain_types_1 = requirePlainTypes();
  class TypeGraph {
    constructor(context, root) {
      this.context = context;
      this.root = root;
    }
    getTypes() {
      const rootType = {
        name: this.root.name,
        properties: this.root.properties,
        ruleCalls: this.root.ruleCalls,
        super: []
      };
      if (this.root.children.length === 0) {
        return [{ alt: rootType, next: [] }];
      } else {
        return this.applyNext(this.root, {
          alt: rootType,
          next: this.root.children
        });
      }
    }
    applyNext(root, nextPath) {
      const splits = this.splitType(nextPath.alt, nextPath.next.length);
      const paths = [];
      for (let i = 0; i < nextPath.next.length; i++) {
        const split = splits[i];
        const part = nextPath.next[i];
        if (part.actionWithAssignment) {
          paths.push({
            alt: copyTypeAlternative(split),
            next: []
          });
        }
        if (part.name !== void 0 && part.name !== split.name) {
          if (part.actionWithAssignment) {
            split.properties = [];
            split.ruleCalls = [];
            split.super = [root.name];
            split.name = part.name;
          } else {
            split.super = [split.name, ...split.ruleCalls];
            split.properties = [];
            split.ruleCalls = [];
            split.name = part.name;
          }
        }
        split.properties.push(...part.properties);
        split.ruleCalls.push(...part.ruleCalls);
        const path = {
          alt: split,
          next: part.children
        };
        if (path.next.length === 0) {
          path.alt.super = path.alt.super.filter((e) => e !== path.alt.name);
          paths.push(path);
        } else {
          paths.push(...this.applyNext(root, path));
        }
      }
      return flattenTypes(paths);
    }
    splitType(type, count) {
      const alternatives = [];
      for (let i = 0; i < count; i++) {
        alternatives.push(copyTypeAlternative(type));
      }
      return alternatives;
    }
    getSuperTypes(node) {
      const set = /* @__PURE__ */ new Set();
      this.collectSuperTypes(node, node, set);
      return Array.from(set);
    }
    collectSuperTypes(original, part, set) {
      if (part.ruleCalls.length > 0) {
        for (const ruleCall of part.ruleCalls) {
          set.add(ruleCall);
        }
        return;
      }
      for (const parent of part.parents) {
        if (original.name === void 0) {
          this.collectSuperTypes(parent, parent, set);
        } else if (parent.name !== void 0 && parent.name !== original.name) {
          set.add(parent.name);
        } else {
          this.collectSuperTypes(original, parent, set);
        }
      }
      if (part.parents.length === 0 && part.name) {
        set.add(part.name);
      }
    }
    connect(parent, children) {
      children.parents.push(parent);
      parent.children.push(children);
      return children;
    }
    merge(...parts) {
      if (parts.length === 1) {
        return parts[0];
      } else if (parts.length === 0) {
        throw new Error("No parts to merge");
      }
      const node = newTypePart();
      node.parents = parts;
      for (const parent of parts) {
        parent.children.push(node);
      }
      return node;
    }
    hasLeafNode(part) {
      return this.partHasLeafNode(part);
    }
    partHasLeafNode(part, ignore) {
      if (part.children.some((e) => e !== ignore)) {
        return true;
      } else if (part.name) {
        return false;
      } else {
        return part.parents.some((e) => this.partHasLeafNode(e, part));
      }
    }
  }
  function copyTypePart(value) {
    return {
      name: value.name,
      children: [],
      parents: [],
      actionWithAssignment: value.actionWithAssignment,
      ruleCalls: [...value.ruleCalls],
      properties: value.properties.map(copyProperty)
    };
  }
  function copyTypeAlternative(value) {
    return {
      name: value.name,
      super: value.super,
      ruleCalls: value.ruleCalls,
      properties: value.properties.map((e) => copyProperty(e))
    };
  }
  function copyProperty(value) {
    return {
      name: value.name,
      optional: value.optional,
      type: value.type,
      astNodes: value.astNodes
    };
  }
  function collectInferredTypes(parserRules, datatypeRules, declared) {
    const allTypes2 = [];
    const context = {
      fragments: /* @__PURE__ */ new Map()
    };
    for (const rule of parserRules) {
      allTypes2.push(...getRuleTypes(context, rule));
    }
    const interfaces = calculateInterfaces(allTypes2);
    const unions = buildSuperUnions(interfaces);
    const astTypes = extractUnions(interfaces, unions, declared);
    for (const rule of datatypeRules) {
      const type = getDataRuleType(rule);
      astTypes.unions.push({
        name: rule.name,
        declared: false,
        type,
        subTypes: /* @__PURE__ */ new Set(),
        superTypes: /* @__PURE__ */ new Set(),
        dataType: rule.dataType
      });
    }
    return astTypes;
  }
  inferredTypes.collectInferredTypes = collectInferredTypes;
  function getDataRuleType(rule) {
    if (rule.dataType && rule.dataType !== "string") {
      return {
        primitive: rule.dataType
      };
    }
    let cancelled = false;
    const cancel = () => {
      cancelled = true;
      return {
        primitive: "unknown"
      };
    };
    const type = buildDataRuleType(rule.definition, cancel);
    if (cancelled) {
      return {
        primitive: "string"
      };
    } else {
      return type;
    }
  }
  function buildDataRuleType(element, cancel) {
    var _a2, _b2, _c2;
    if (element.cardinality) {
      return cancel();
    }
    if ((0, ast_1.isAlternatives)(element)) {
      return {
        types: element.elements.map((e) => buildDataRuleType(e, cancel))
      };
    } else if ((0, ast_1.isGroup)(element) || (0, ast_1.isUnorderedGroup)(element)) {
      if (element.elements.length !== 1) {
        return cancel();
      } else {
        return buildDataRuleType(element.elements[0], cancel);
      }
    } else if ((0, ast_1.isRuleCall)(element)) {
      const ref = (_a2 = element.rule) === null || _a2 === void 0 ? void 0 : _a2.ref;
      if (ref) {
        if ((0, ast_1.isTerminalRule)(ref)) {
          return {
            primitive: (_c2 = (_b2 = ref.type) === null || _b2 === void 0 ? void 0 : _b2.name) !== null && _c2 !== void 0 ? _c2 : "string",
            regex: (0, internal_grammar_util_1.terminalRegex)(ref)
          };
        } else {
          return {
            value: ref.name
          };
        }
      } else {
        return cancel();
      }
    } else if ((0, ast_1.isKeyword)(element)) {
      return {
        string: element.value
      };
    }
    return cancel();
  }
  function getRuleTypes(context, rule) {
    const type = newTypePart(rule);
    const graph = new TypeGraph(context, type);
    if (rule.definition) {
      collectElement(graph, graph.root, rule.definition);
    }
    return graph.getTypes();
  }
  function newTypePart(element) {
    return {
      name: (0, ast_1.isParserRule)(element) || (0, ast_1.isAction)(element) ? (0, internal_grammar_util_1.getTypeNameWithoutError)(element) : element,
      properties: [],
      ruleCalls: [],
      children: [],
      parents: [],
      actionWithAssignment: false
    };
  }
  function collectElement(graph, current, element) {
    const optional = (0, internal_grammar_util_1.isOptionalCardinality)(element.cardinality);
    if ((0, ast_1.isAlternatives)(element)) {
      const children = [];
      if (optional) {
        children.push(graph.connect(current, newTypePart()));
      }
      for (const alt of element.elements) {
        const altType = graph.connect(current, newTypePart());
        children.push(collectElement(graph, altType, alt));
      }
      return graph.merge(...children);
    } else if ((0, ast_1.isGroup)(element) || (0, ast_1.isUnorderedGroup)(element)) {
      let groupNode = graph.connect(current, newTypePart());
      let skipNode;
      if (optional) {
        skipNode = graph.connect(current, newTypePart());
      }
      for (const item of element.elements) {
        groupNode = collectElement(graph, groupNode, item);
      }
      if (skipNode) {
        return graph.merge(skipNode, groupNode);
      } else {
        return groupNode;
      }
    } else if ((0, ast_1.isAction)(element)) {
      return addAction(graph, current, element);
    } else if ((0, ast_1.isAssignment)(element)) {
      addAssignment(current, element);
    } else if ((0, ast_1.isRuleCall)(element)) {
      addRuleCall(graph, current, element);
    }
    return current;
  }
  function addAction(graph, parent, action) {
    var _a2;
    if (!graph.hasLeafNode(parent)) {
      const copy = copyTypePart(parent);
      graph.connect(parent, copy);
    }
    const typeNode = graph.connect(parent, newTypePart(action));
    if (action.type) {
      const type = (_a2 = action.type) === null || _a2 === void 0 ? void 0 : _a2.ref;
      if (type && (0, name_provider_1.isNamed)(type))
        typeNode.name = type.name;
    }
    if (action.feature && action.operator) {
      typeNode.actionWithAssignment = true;
      typeNode.properties.push({
        name: action.feature,
        optional: false,
        type: toPropertyType(action.operator === "+=", false, graph.root.ruleCalls.length !== 0 ? graph.root.ruleCalls : graph.getSuperTypes(typeNode)),
        astNodes: /* @__PURE__ */ new Set([action])
      });
    }
    return typeNode;
  }
  function addAssignment(current, assignment) {
    const typeItems = { types: /* @__PURE__ */ new Set(), reference: false };
    findTypes(assignment.terminal, typeItems);
    const type = toPropertyType(assignment.operator === "+=", typeItems.reference, assignment.operator === "?=" ? ["boolean"] : Array.from(typeItems.types));
    current.properties.push({
      name: assignment.feature,
      optional: (0, internal_grammar_util_1.isOptionalCardinality)(assignment.cardinality),
      type,
      astNodes: /* @__PURE__ */ new Set([assignment])
    });
  }
  function findTypes(terminal, types2) {
    if ((0, ast_1.isAlternatives)(terminal) || (0, ast_1.isUnorderedGroup)(terminal) || (0, ast_1.isGroup)(terminal)) {
      for (const element of terminal.elements) {
        findTypes(element, types2);
      }
    } else if ((0, ast_1.isKeyword)(terminal)) {
      types2.types.add(`'${terminal.value}'`);
    } else if ((0, ast_1.isRuleCall)(terminal) && terminal.rule.ref) {
      types2.types.add((0, internal_grammar_util_1.getRuleType)(terminal.rule.ref));
    } else if ((0, ast_1.isCrossReference)(terminal) && terminal.type.ref) {
      const refTypeName = (0, internal_grammar_util_1.getTypeNameWithoutError)(terminal.type.ref);
      if (refTypeName) {
        types2.types.add(refTypeName);
      }
      types2.reference = true;
    }
  }
  function addRuleCall(graph, current, ruleCall) {
    const rule = ruleCall.rule.ref;
    if ((0, ast_1.isParserRule)(rule) && rule.fragment) {
      const properties2 = getFragmentProperties(rule, graph.context);
      if ((0, internal_grammar_util_1.isOptionalCardinality)(ruleCall.cardinality)) {
        current.properties.push(...properties2.map((e) => Object.assign(Object.assign({}, e), { optional: true })));
      } else {
        current.properties.push(...properties2);
      }
    } else if ((0, ast_1.isParserRule)(rule)) {
      current.ruleCalls.push((0, internal_grammar_util_1.getRuleType)(rule));
    }
  }
  function getFragmentProperties(fragment, context) {
    const existing = context.fragments.get(fragment);
    if (existing) {
      return existing;
    }
    const properties2 = [];
    context.fragments.set(fragment, properties2);
    const fragmentName = (0, internal_grammar_util_1.getTypeNameWithoutError)(fragment);
    const typeAlternatives = getRuleTypes(context, fragment).filter((e) => e.alt.name === fragmentName);
    properties2.push(...typeAlternatives.flatMap((e) => e.alt.properties));
    return properties2;
  }
  function calculateInterfaces(alternatives) {
    const interfaces = /* @__PURE__ */ new Map();
    const ruleCallAlternatives = [];
    const flattened = flattenTypes(alternatives).map((e) => e.alt);
    for (const flat of flattened) {
      const interfaceType = {
        name: flat.name,
        properties: flat.properties,
        superTypes: new Set(flat.super),
        subTypes: /* @__PURE__ */ new Set(),
        declared: false,
        abstract: false
      };
      interfaces.set(interfaceType.name, interfaceType);
      if (flat.ruleCalls.length > 0) {
        ruleCallAlternatives.push(flat);
        flat.ruleCalls.forEach((e) => {
          if (e !== interfaceType.name) {
            interfaceType.subTypes.add(e);
          }
        });
      }
    }
    for (const ruleCallType of ruleCallAlternatives) {
      for (const ruleCall of ruleCallType.ruleCalls) {
        const calledInterface = interfaces.get(ruleCall);
        if (calledInterface) {
          if (calledInterface.name !== ruleCallType.name) {
            calledInterface.superTypes.add(ruleCallType.name);
          }
        }
      }
    }
    return Array.from(interfaces.values());
  }
  function flattenTypes(alternatives) {
    const nameToAlternatives = alternatives.reduce((acc, e) => acc.add(e.alt.name, e), new collections_1.MultiMap());
    const types2 = [];
    for (const [name2, namedAlternatives] of nameToAlternatives.entriesGroupedByKey()) {
      const properties2 = [];
      const ruleCalls = /* @__PURE__ */ new Set();
      const type = { alt: { name: name2, properties: properties2, ruleCalls: [], super: [] }, next: [] };
      for (const path of namedAlternatives) {
        const alt = path.alt;
        type.alt.super.push(...alt.super);
        type.next.push(...path.next);
        const altProperties = alt.properties;
        for (const altProperty of altProperties) {
          const existingProperty = properties2.find((e) => e.name === altProperty.name);
          if (existingProperty) {
            existingProperty.type = (0, plain_types_1.mergePropertyTypes)(existingProperty.type, altProperty.type);
            altProperty.astNodes.forEach((e) => existingProperty.astNodes.add(e));
          } else {
            properties2.push(Object.assign({}, altProperty));
          }
        }
        alt.ruleCalls.forEach((ruleCall) => ruleCalls.add(ruleCall));
      }
      for (const path of namedAlternatives) {
        const alt = path.alt;
        if (alt.ruleCalls.length === 0) {
          for (const property of properties2) {
            if (!alt.properties.find((e) => e.name === property.name)) {
              property.optional = true;
            }
          }
        }
      }
      type.alt.ruleCalls = Array.from(ruleCalls);
      types2.push(type);
    }
    return types2;
  }
  function buildSuperUnions(interfaces) {
    const interfaceMap = new Map(interfaces.map((e) => [e.name, e]));
    const unions = [];
    const allSupertypes = new collections_1.MultiMap();
    for (const interfaceType of interfaces) {
      for (const superType of interfaceType.superTypes) {
        allSupertypes.add(superType, interfaceType.name);
      }
    }
    for (const [superType, types2] of allSupertypes.entriesGroupedByKey()) {
      if (!interfaceMap.has(superType)) {
        const union = {
          declared: false,
          name: superType,
          subTypes: /* @__PURE__ */ new Set(),
          superTypes: /* @__PURE__ */ new Set(),
          type: toPropertyType(false, false, types2)
        };
        unions.push(union);
      }
    }
    return unions;
  }
  function extractUnions(interfaces, unions, declared) {
    const subTypes = new collections_1.MultiMap();
    for (const interfaceType of interfaces) {
      for (const superTypeName of interfaceType.superTypes) {
        subTypes.add(superTypeName, interfaceType.name);
      }
    }
    const declaredInterfaces = new Set(declared.interfaces.map((e) => e.name));
    const astTypes = { interfaces: [], unions };
    const unionTypes = new Map(unions.map((e) => [e.name, e]));
    for (const interfaceType of interfaces) {
      const interfaceSubTypes = new Set(subTypes.get(interfaceType.name));
      if (interfaceType.properties.length === 0 && interfaceSubTypes.size > 0) {
        if (declaredInterfaces.has(interfaceType.name)) {
          interfaceType.abstract = true;
          astTypes.interfaces.push(interfaceType);
        } else {
          const interfaceTypeValue = toPropertyType(false, false, Array.from(interfaceSubTypes));
          const existingUnion = unionTypes.get(interfaceType.name);
          if (existingUnion) {
            existingUnion.type = (0, plain_types_1.mergePropertyTypes)(existingUnion.type, interfaceTypeValue);
          } else {
            const unionType = {
              name: interfaceType.name,
              declared: false,
              subTypes: interfaceSubTypes,
              superTypes: interfaceType.superTypes,
              type: interfaceTypeValue
            };
            astTypes.unions.push(unionType);
            unionTypes.set(interfaceType.name, unionType);
          }
        }
      } else {
        astTypes.interfaces.push(interfaceType);
      }
    }
    for (const interfaceType of astTypes.interfaces) {
      interfaceType.superTypes = new Set([...interfaceType.superTypes].filter((superType) => !unionTypes.has(superType)));
    }
    return astTypes;
  }
  function toPropertyType(array, reference, types2) {
    if (array) {
      return {
        elementType: toPropertyType(false, reference, types2)
      };
    } else if (reference) {
      return {
        referenceType: toPropertyType(false, false, types2)
      };
    } else if (types2.length === 1) {
      const type = types2[0];
      if (type.startsWith("'")) {
        return {
          string: type.substring(1, type.length - 1)
        };
      }
      if ((0, internal_grammar_util_1.isPrimitiveType)(type)) {
        return {
          primitive: type
        };
      } else {
        return {
          value: type
        };
      }
    } else {
      return {
        types: types2.map((e) => toPropertyType(false, false, [e]))
      };
    }
  }
  return inferredTypes;
}
var declaredTypes = {};
var hasRequiredDeclaredTypes;
function requireDeclaredTypes() {
  if (hasRequiredDeclaredTypes)
    return declaredTypes;
  hasRequiredDeclaredTypes = 1;
  Object.defineProperty(declaredTypes, "__esModule", { value: true });
  declaredTypes.typeDefinitionToPropertyType = declaredTypes.collectDeclaredTypes = void 0;
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  function collectDeclaredTypes(interfaces, unions) {
    const declaredTypes2 = { unions: [], interfaces: [] };
    for (const type of interfaces) {
      const properties2 = [];
      for (const attribute of type.attributes) {
        properties2.push({
          name: attribute.name,
          optional: attribute.isOptional,
          astNodes: /* @__PURE__ */ new Set([attribute]),
          type: typeDefinitionToPropertyType(attribute.type)
        });
      }
      const superTypes = /* @__PURE__ */ new Set();
      for (const superType of type.superTypes) {
        if (superType.ref) {
          superTypes.add((0, internal_grammar_util_1.getTypeName)(superType.ref));
        }
      }
      const interfaceType = {
        name: type.name,
        declared: true,
        abstract: false,
        properties: properties2,
        superTypes,
        subTypes: /* @__PURE__ */ new Set()
      };
      declaredTypes2.interfaces.push(interfaceType);
    }
    for (const union of unions) {
      const unionType = {
        name: union.name,
        declared: true,
        type: typeDefinitionToPropertyType(union.type),
        superTypes: /* @__PURE__ */ new Set(),
        subTypes: /* @__PURE__ */ new Set()
      };
      declaredTypes2.unions.push(unionType);
    }
    return declaredTypes2;
  }
  declaredTypes.collectDeclaredTypes = collectDeclaredTypes;
  function typeDefinitionToPropertyType(type) {
    if ((0, ast_1.isArrayType)(type)) {
      return {
        elementType: typeDefinitionToPropertyType(type.elementType)
      };
    } else if ((0, ast_1.isReferenceType)(type)) {
      return {
        referenceType: typeDefinitionToPropertyType(type.referenceType)
      };
    } else if ((0, ast_1.isUnionType)(type)) {
      return {
        types: type.types.map(typeDefinitionToPropertyType)
      };
    } else if ((0, ast_1.isSimpleType)(type)) {
      let value;
      if (type.primitiveType) {
        value = type.primitiveType;
        return {
          primitive: value
        };
      } else if (type.stringType) {
        value = type.stringType;
        return {
          string: value
        };
      } else if (type.typeRef) {
        const ref = type.typeRef.ref;
        const value2 = (0, internal_grammar_util_1.getTypeNameWithoutError)(ref);
        if (value2) {
          if ((0, internal_grammar_util_1.isPrimitiveType)(value2)) {
            return {
              primitive: value2
            };
          } else {
            return {
              value: value2
            };
          }
        }
      }
    }
    return {
      primitive: "unknown"
    };
  }
  declaredTypes.typeDefinitionToPropertyType = typeDefinitionToPropertyType;
  return declaredTypes;
}
var hasRequiredAllTypes;
function requireAllTypes() {
  if (hasRequiredAllTypes)
    return allTypes;
  hasRequiredAllTypes = 1;
  Object.defineProperty(allTypes, "__esModule", { value: true });
  allTypes.collectAllAstResources = allTypes.collectTypeResources = void 0;
  const inferred_types_1 = requireInferredTypes();
  const declared_types_1 = requireDeclaredTypes();
  const ast_util_1 = requireAstUtil();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  function collectTypeResources(grammars, documents2) {
    const astResources = collectAllAstResources(grammars, documents2);
    const declared = (0, declared_types_1.collectDeclaredTypes)(astResources.interfaces, astResources.types);
    const inferred = (0, inferred_types_1.collectInferredTypes)(astResources.parserRules, astResources.datatypeRules, declared);
    return {
      astResources,
      inferred,
      declared
    };
  }
  allTypes.collectTypeResources = collectTypeResources;
  function collectAllAstResources(grammars, documents2, visited = /* @__PURE__ */ new Set(), astResources = { parserRules: [], datatypeRules: [], interfaces: [], types: [] }) {
    if (!Array.isArray(grammars))
      grammars = [grammars];
    for (const grammar2 of grammars) {
      const doc2 = (0, ast_util_1.getDocument)(grammar2);
      if (visited.has(doc2.uri)) {
        continue;
      }
      visited.add(doc2.uri);
      for (const rule of grammar2.rules) {
        if ((0, ast_1.isParserRule)(rule) && !rule.fragment) {
          if ((0, internal_grammar_util_1.isDataTypeRule)(rule)) {
            astResources.datatypeRules.push(rule);
          } else {
            astResources.parserRules.push(rule);
          }
        }
      }
      grammar2.interfaces.forEach((e) => astResources.interfaces.push(e));
      grammar2.types.forEach((e) => astResources.types.push(e));
      if (documents2) {
        const importedGrammars = grammar2.imports.map((e) => (0, internal_grammar_util_1.resolveImport)(documents2, e)).filter((e) => e !== void 0);
        collectAllAstResources(importedGrammars, documents2, visited, astResources);
      }
    }
    return astResources;
  }
  allTypes.collectAllAstResources = collectAllAstResources;
  return allTypes;
}
var hasRequiredAstCollector;
function requireAstCollector() {
  if (hasRequiredAstCollector)
    return astCollector;
  hasRequiredAstCollector = 1;
  Object.defineProperty(astCollector, "__esModule", { value: true });
  astCollector.specifyAstNodeProperties = astCollector.createAstTypes = astCollector.collectValidationAst = astCollector.collectAst = void 0;
  const types_util_1 = requireTypesUtil();
  const types_1 = requireTypes();
  const all_types_1 = requireAllTypes();
  const plain_types_1 = requirePlainTypes();
  function collectAst(grammars, documents2) {
    const { inferred, declared } = (0, all_types_1.collectTypeResources)(grammars, documents2);
    return createAstTypes(inferred, declared);
  }
  astCollector.collectAst = collectAst;
  function collectValidationAst(grammars, documents2) {
    const { inferred, declared, astResources } = (0, all_types_1.collectTypeResources)(grammars, documents2);
    return {
      astResources,
      inferred: createAstTypes(declared, inferred),
      declared: createAstTypes(inferred, declared)
    };
  }
  astCollector.collectValidationAst = collectValidationAst;
  function createAstTypes(first2, second) {
    var _a2, _b2;
    const astTypes = {
      interfaces: (0, types_util_1.sortInterfacesTopologically)(mergeAndRemoveDuplicates(...first2.interfaces, ...(_a2 = second === null || second === void 0 ? void 0 : second.interfaces) !== null && _a2 !== void 0 ? _a2 : [])),
      unions: mergeAndRemoveDuplicates(...first2.unions, ...(_b2 = second === null || second === void 0 ? void 0 : second.unions) !== null && _b2 !== void 0 ? _b2 : [])
    };
    const finalTypes = (0, plain_types_1.plainToTypes)(astTypes);
    specifyAstNodeProperties(finalTypes);
    return finalTypes;
  }
  astCollector.createAstTypes = createAstTypes;
  function mergeAndRemoveDuplicates(...elements) {
    return Array.from(elements.reduce((acc, type) => {
      acc.set(type.name, type);
      return acc;
    }, /* @__PURE__ */ new Map()).values()).sort((a2, b2) => a2.name.localeCompare(b2.name));
  }
  function specifyAstNodeProperties(astTypes) {
    const nameToType = filterInterfaceLikeTypes(astTypes);
    const array = Array.from(nameToType.values());
    addSubTypes(array);
    buildContainerTypes(array);
    buildTypeNames(array);
  }
  astCollector.specifyAstNodeProperties = specifyAstNodeProperties;
  function buildTypeNames(types2) {
    const visited = /* @__PURE__ */ new Set();
    const collect = (type) => {
      if (visited.has(type))
        return;
      visited.add(type);
      type.typeNames.add(type.name);
      for (const subtype of type.subTypes) {
        collect(subtype);
        subtype.typeNames.forEach((n2) => type.typeNames.add(n2));
      }
    };
    types2.forEach(collect);
  }
  function filterInterfaceLikeTypes({ interfaces, unions }) {
    const nameToType = interfaces.concat(unions).reduce((acc, e) => {
      acc.set(e.name, e);
      return acc;
    }, /* @__PURE__ */ new Map());
    const cache2 = /* @__PURE__ */ new Map();
    for (const union of unions) {
      cache2.set(union, isDataType(union.type, /* @__PURE__ */ new Set()));
    }
    for (const [union, isDataType2] of cache2) {
      if (isDataType2) {
        nameToType.delete(union.name);
      }
    }
    return nameToType;
  }
  function isDataType(property, visited) {
    if (visited.has(property)) {
      return true;
    }
    visited.add(property);
    if ((0, types_1.isPropertyUnion)(property)) {
      return property.types.every((e) => isDataType(e, visited));
    } else if ((0, types_1.isValueType)(property)) {
      const value = property.value;
      if ((0, types_1.isUnionType)(value)) {
        return isDataType(value.type, visited);
      } else {
        return false;
      }
    } else {
      return (0, types_1.isPrimitiveType)(property) || (0, types_1.isStringType)(property);
    }
  }
  function addSubTypes(types2) {
    for (const interfaceType of types2) {
      for (const superTypeName of interfaceType.superTypes) {
        superTypeName.subTypes.add(interfaceType);
      }
    }
  }
  function buildContainerTypes(types2) {
    const interfaces = types2.filter(types_1.isInterfaceType);
    for (const interfaceType of interfaces) {
      const refTypes = interfaceType.properties.flatMap((property) => findChildTypes(property.type, /* @__PURE__ */ new Set()));
      for (const refType of refTypes) {
        refType.containerTypes.add(interfaceType);
      }
    }
    const connectedComponents = calculateConnectedComponents(types2);
    shareContainerTypes(connectedComponents);
  }
  function findChildTypes(type, set) {
    if ((0, types_1.isPropertyUnion)(type)) {
      return type.types.flatMap((e) => findChildTypes(e, set));
    } else if ((0, types_1.isValueType)(type)) {
      if (set.has(type.value)) {
        return [];
      } else {
        set.add(type.value);
      }
      return [type.value];
    } else if ((0, types_1.isArrayType)(type)) {
      return findChildTypes(type.elementType, set);
    } else {
      return [];
    }
  }
  function calculateConnectedComponents(interfaces) {
    function dfs(typeInterface) {
      const component = [typeInterface];
      visited.add(typeInterface);
      const allTypes2 = [
        ...hierarchy.subTypes.get(typeInterface.name),
        ...hierarchy.superTypes.get(typeInterface.name)
      ];
      for (const nextTypeInterface of allTypes2) {
        const nextType = map2.get(nextTypeInterface);
        if (nextType && !visited.has(nextType)) {
          component.push(...dfs(nextType));
        }
      }
      return component;
    }
    const map2 = new Map(interfaces.map((e) => [e.name, e]));
    const connectedComponents = [];
    const hierarchy = (0, types_util_1.collectTypeHierarchy)(interfaces);
    const visited = /* @__PURE__ */ new Set();
    for (const typeInterface of interfaces) {
      if (!visited.has(typeInterface)) {
        connectedComponents.push(dfs(typeInterface));
      }
    }
    return connectedComponents;
  }
  function shareContainerTypes(connectedComponents) {
    for (const component of connectedComponents) {
      const superSet = /* @__PURE__ */ new Set();
      component.forEach((type) => type.containerTypes.forEach((e) => superSet.add(e)));
      component.forEach((type) => type.containerTypes = superSet);
    }
  }
  return astCollector;
}
var hasRequiredAstReflectionInterpreter;
function requireAstReflectionInterpreter() {
  if (hasRequiredAstReflectionInterpreter)
    return astReflectionInterpreter;
  hasRequiredAstReflectionInterpreter = 1;
  Object.defineProperty(astReflectionInterpreter, "__esModule", { value: true });
  astReflectionInterpreter.interpretAstReflection = void 0;
  const syntax_tree_1 = requireSyntaxTree();
  const collections_1 = requireCollections();
  const ast_1 = requireAst();
  const ast_collector_1 = requireAstCollector();
  const types_util_1 = requireTypesUtil();
  function interpretAstReflection(grammarOrTypes, documents2) {
    let collectedTypes;
    if ((0, ast_1.isGrammar)(grammarOrTypes)) {
      collectedTypes = (0, ast_collector_1.collectAst)(grammarOrTypes, documents2);
    } else {
      collectedTypes = grammarOrTypes;
    }
    const allTypes2 = collectedTypes.interfaces.map((e) => e.name).concat(collectedTypes.unions.filter((e) => (0, types_util_1.isAstType)(e.type)).map((e) => e.name));
    const references2 = buildReferenceTypes(collectedTypes);
    const metaData = buildTypeMetaData(collectedTypes);
    const superTypes = (0, types_util_1.collectTypeHierarchy)((0, types_util_1.mergeTypesAndInterfaces)(collectedTypes)).superTypes;
    return new InterpretedAstReflection({
      allTypes: allTypes2,
      references: references2,
      metaData,
      superTypes
    });
  }
  astReflectionInterpreter.interpretAstReflection = interpretAstReflection;
  class InterpretedAstReflection extends syntax_tree_1.AbstractAstReflection {
    constructor(options) {
      super();
      this.allTypes = options.allTypes;
      this.references = options.references;
      this.metaData = options.metaData;
      this.superTypes = options.superTypes;
    }
    getAllTypes() {
      return this.allTypes;
    }
    getReferenceType(refInfo) {
      const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
      const referenceType = this.references.get(referenceId);
      if (referenceType) {
        return referenceType;
      }
      throw new Error("Could not find reference type for " + referenceId);
    }
    getTypeMetaData(type) {
      var _a2;
      return (_a2 = this.metaData.get(type)) !== null && _a2 !== void 0 ? _a2 : {
        name: type,
        mandatory: []
      };
    }
    computeIsSubtype(subtype, originalSuperType) {
      const superTypes = this.superTypes.get(subtype);
      for (const superType of superTypes) {
        if (this.isSubtype(superType, originalSuperType)) {
          return true;
        }
      }
      return false;
    }
  }
  function buildReferenceTypes(astTypes) {
    const references2 = new collections_1.MultiMap();
    for (const interfaceType of astTypes.interfaces) {
      for (const property of interfaceType.properties) {
        for (const referenceType of (0, types_util_1.findReferenceTypes)(property.type)) {
          references2.add(interfaceType.name, [property.name, referenceType]);
        }
      }
      for (const superType of interfaceType.interfaceSuperTypes) {
        const superTypeReferences = references2.get(superType.name);
        references2.addAll(interfaceType.name, superTypeReferences);
      }
    }
    const map2 = /* @__PURE__ */ new Map();
    for (const [type, [property, target]] of references2) {
      map2.set(`${type}:${property}`, target);
    }
    return map2;
  }
  function buildTypeMetaData(astTypes) {
    const map2 = /* @__PURE__ */ new Map();
    for (const interfaceType of astTypes.interfaces) {
      const props = interfaceType.superProperties;
      const arrayProps = props.filter((e) => (0, types_util_1.hasArrayType)(e.type));
      const booleanProps = props.filter((e) => !(0, types_util_1.hasArrayType)(e.type) && (0, types_util_1.hasBooleanType)(e.type));
      if (arrayProps.length > 0 || booleanProps.length > 0) {
        map2.set(interfaceType.name, {
          name: interfaceType.name,
          mandatory: buildMandatoryMetaData(arrayProps, booleanProps)
        });
      }
    }
    return map2;
  }
  function buildMandatoryMetaData(arrayProps, booleanProps) {
    const array = [];
    const all = arrayProps.concat(booleanProps).sort((a2, b2) => a2.name.localeCompare(b2.name));
    for (const property of all) {
      const type = arrayProps.includes(property) ? "array" : "boolean";
      array.push({
        name: property.name,
        type
      });
    }
    return array;
  }
  return astReflectionInterpreter;
}
var langiumGrammarModule = {};
var module$1 = {};
var grammar$1 = {};
var hasRequiredGrammar$1;
function requireGrammar$1() {
  if (hasRequiredGrammar$1)
    return grammar$1;
  hasRequiredGrammar$1 = 1;
  Object.defineProperty(grammar$1, "__esModule", { value: true });
  grammar$1.LangiumGrammarGrammar = void 0;
  const grammar_util_1 = requireGrammarUtil();
  let loadedLangiumGrammarGrammar;
  const LangiumGrammarGrammar = () => loadedLangiumGrammarGrammar !== null && loadedLangiumGrammarGrammar !== void 0 ? loadedLangiumGrammarGrammar : loadedLangiumGrammarGrammar = (0, grammar_util_1.loadGrammarFromJson)(`{
  "$type": "Grammar",
  "isDeclared": true,
  "name": "LangiumGrammar",
  "rules": [
    {
      "$type": "ParserRule",
      "name": "Grammar",
      "entry": true,
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "isDeclared",
                "operator": "?=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "grammar"
                }
              },
              {
                "$type": "Assignment",
                "feature": "name",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@59"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "with"
                  },
                  {
                    "$type": "Assignment",
                    "feature": "usedGrammars",
                    "operator": "+=",
                    "terminal": {
                      "$type": "CrossReference",
                      "type": {
                        "$ref": "#/rules@0"
                      },
                      "terminal": {
                        "$type": "RuleCall",
                        "rule": {
                          "$ref": "#/rules@59"
                        },
                        "arguments": []
                      },
                      "deprecatedSyntax": false
                    }
                  },
                  {
                    "$type": "Group",
                    "elements": [
                      {
                        "$type": "Keyword",
                        "value": ","
                      },
                      {
                        "$type": "Assignment",
                        "feature": "usedGrammars",
                        "operator": "+=",
                        "terminal": {
                          "$type": "CrossReference",
                          "type": {
                            "$ref": "#/rules@0"
                          },
                          "terminal": {
                            "$type": "RuleCall",
                            "rule": {
                              "$ref": "#/rules@59"
                            },
                            "arguments": []
                          },
                          "deprecatedSyntax": false
                        }
                      }
                    ],
                    "cardinality": "*"
                  }
                ],
                "cardinality": "?"
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "definesHiddenTokens",
                    "operator": "?=",
                    "terminal": {
                      "$type": "Keyword",
                      "value": "hidden"
                    }
                  },
                  {
                    "$type": "Keyword",
                    "value": "("
                  },
                  {
                    "$type": "Group",
                    "elements": [
                      {
                        "$type": "Assignment",
                        "feature": "hiddenTokens",
                        "operator": "+=",
                        "terminal": {
                          "$type": "CrossReference",
                          "type": {
                            "$ref": "#/rules@11"
                          },
                          "terminal": {
                            "$type": "RuleCall",
                            "rule": {
                              "$ref": "#/rules@59"
                            },
                            "arguments": []
                          },
                          "deprecatedSyntax": false
                        }
                      },
                      {
                        "$type": "Group",
                        "elements": [
                          {
                            "$type": "Keyword",
                            "value": ","
                          },
                          {
                            "$type": "Assignment",
                            "feature": "hiddenTokens",
                            "operator": "+=",
                            "terminal": {
                              "$type": "CrossReference",
                              "type": {
                                "$ref": "#/rules@11"
                              },
                              "terminal": {
                                "$type": "RuleCall",
                                "rule": {
                                  "$ref": "#/rules@59"
                                },
                                "arguments": []
                              },
                              "deprecatedSyntax": false
                            }
                          }
                        ],
                        "cardinality": "*"
                      }
                    ],
                    "cardinality": "?"
                  },
                  {
                    "$type": "Keyword",
                    "value": ")"
                  }
                ],
                "cardinality": "?"
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Assignment",
            "feature": "imports",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@12"
              },
              "arguments": []
            },
            "cardinality": "*"
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "rules",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@11"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Assignment",
                "feature": "interfaces",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@1"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Assignment",
                "feature": "types",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@10"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "+"
          }
        ]
      },
      "definesHiddenTokens": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Interface",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "interface"
          },
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@59"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "extends"
              },
              {
                "$type": "Assignment",
                "feature": "superTypes",
                "operator": "+=",
                "terminal": {
                  "$type": "CrossReference",
                  "type": {
                    "$ref": "#/types@0"
                  },
                  "terminal": {
                    "$type": "RuleCall",
                    "rule": {
                      "$ref": "#/rules@59"
                    },
                    "arguments": []
                  },
                  "deprecatedSyntax": false
                }
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": ","
                  },
                  {
                    "$type": "Assignment",
                    "feature": "superTypes",
                    "operator": "+=",
                    "terminal": {
                      "$type": "CrossReference",
                      "type": {
                        "$ref": "#/types@0"
                      },
                      "terminal": {
                        "$type": "RuleCall",
                        "rule": {
                          "$ref": "#/rules@59"
                        },
                        "arguments": []
                      },
                      "deprecatedSyntax": false
                    }
                  }
                ],
                "cardinality": "*"
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@2"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "SchemaType",
      "fragment": true,
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "{"
          },
          {
            "$type": "Assignment",
            "feature": "attributes",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@3"
              },
              "arguments": []
            },
            "cardinality": "*"
          },
          {
            "$type": "Keyword",
            "value": "}"
          },
          {
            "$type": "Keyword",
            "value": ";",
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TypeAttribute",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@58"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "isOptional",
            "operator": "?=",
            "terminal": {
              "$type": "Keyword",
              "value": "?"
            },
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": ":"
          },
          {
            "$type": "Assignment",
            "feature": "type",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@4"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";",
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TypeDefinition",
      "definition": {
        "$type": "RuleCall",
        "rule": {
          "$ref": "#/rules@5"
        },
        "arguments": []
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "UnionType",
      "inferredType": {
        "$type": "InferredType",
        "name": "TypeDefinition"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@6"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "UnionType"
                },
                "feature": "types",
                "operator": "+="
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "|"
                  },
                  {
                    "$type": "Assignment",
                    "feature": "types",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@6"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "+"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ArrayType",
      "inferredType": {
        "$type": "InferredType",
        "name": "TypeDefinition"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@7"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "ArrayType"
                },
                "feature": "elementType",
                "operator": "="
              },
              {
                "$type": "Keyword",
                "value": "["
              },
              {
                "$type": "Keyword",
                "value": "]"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ReferenceType",
      "inferredType": {
        "$type": "InferredType",
        "name": "TypeDefinition"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@8"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "ReferenceType"
                }
              },
              {
                "$type": "Keyword",
                "value": "@"
              },
              {
                "$type": "Assignment",
                "feature": "referenceType",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@8"
                  },
                  "arguments": []
                }
              }
            ]
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "SimpleType",
      "inferredType": {
        "$type": "InferredType",
        "name": "TypeDefinition"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "("
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@4"
                },
                "arguments": []
              },
              {
                "$type": "Keyword",
                "value": ")"
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "SimpleType"
                }
              },
              {
                "$type": "Alternatives",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "typeRef",
                    "operator": "=",
                    "terminal": {
                      "$type": "CrossReference",
                      "type": {
                        "$ref": "#/types@0"
                      },
                      "terminal": {
                        "$type": "RuleCall",
                        "rule": {
                          "$ref": "#/rules@59"
                        },
                        "arguments": []
                      },
                      "deprecatedSyntax": false
                    }
                  },
                  {
                    "$type": "Assignment",
                    "feature": "primitiveType",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@9"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "$type": "Assignment",
                    "feature": "stringType",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@60"
                      },
                      "arguments": []
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PrimitiveType",
      "dataType": "string",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Keyword",
            "value": "string"
          },
          {
            "$type": "Keyword",
            "value": "number"
          },
          {
            "$type": "Keyword",
            "value": "boolean"
          },
          {
            "$type": "Keyword",
            "value": "Date"
          },
          {
            "$type": "Keyword",
            "value": "bigint"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Type",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "type"
          },
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@59"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": "="
          },
          {
            "$type": "Assignment",
            "feature": "type",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@4"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";",
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AbstractRule",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@13"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@46"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "GrammarImport",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "import"
          },
          {
            "$type": "Assignment",
            "feature": "path",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@60"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";",
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ParserRule",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "entry",
                "operator": "?=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "entry"
                }
              },
              {
                "$type": "Assignment",
                "feature": "fragment",
                "operator": "?=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "fragment"
                }
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@15"
            },
            "arguments": []
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "wildcard",
                "operator": "?=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "*"
                }
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "returns"
                  },
                  {
                    "$type": "Alternatives",
                    "elements": [
                      {
                        "$type": "Assignment",
                        "feature": "returnType",
                        "operator": "=",
                        "terminal": {
                          "$type": "CrossReference",
                          "type": {
                            "$ref": "#/types@0"
                          },
                          "terminal": {
                            "$type": "RuleCall",
                            "rule": {
                              "$ref": "#/rules@59"
                            },
                            "arguments": []
                          },
                          "deprecatedSyntax": false
                        }
                      },
                      {
                        "$type": "Assignment",
                        "feature": "dataType",
                        "operator": "=",
                        "terminal": {
                          "$type": "RuleCall",
                          "rule": {
                            "$ref": "#/rules@9"
                          },
                          "arguments": []
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "$type": "Assignment",
                "feature": "inferredType",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@14"
                  },
                  "arguments": [
                    {
                      "$type": "NamedArgument",
                      "value": {
                        "$type": "LiteralCondition",
                        "true": false
                      },
                      "calledByName": false
                    }
                  ]
                }
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "definesHiddenTokens",
                "operator": "?=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "hidden"
                }
              },
              {
                "$type": "Keyword",
                "value": "("
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "hiddenTokens",
                    "operator": "+=",
                    "terminal": {
                      "$type": "CrossReference",
                      "type": {
                        "$ref": "#/rules@11"
                      },
                      "terminal": {
                        "$type": "RuleCall",
                        "rule": {
                          "$ref": "#/rules@59"
                        },
                        "arguments": []
                      },
                      "deprecatedSyntax": false
                    }
                  },
                  {
                    "$type": "Group",
                    "elements": [
                      {
                        "$type": "Keyword",
                        "value": ","
                      },
                      {
                        "$type": "Assignment",
                        "feature": "hiddenTokens",
                        "operator": "+=",
                        "terminal": {
                          "$type": "CrossReference",
                          "type": {
                            "$ref": "#/rules@11"
                          },
                          "terminal": {
                            "$type": "RuleCall",
                            "rule": {
                              "$ref": "#/rules@59"
                            },
                            "arguments": []
                          },
                          "deprecatedSyntax": false
                        }
                      }
                    ],
                    "cardinality": "*"
                  }
                ],
                "cardinality": "?"
              },
              {
                "$type": "Keyword",
                "value": ")"
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": ":"
          },
          {
            "$type": "Assignment",
            "feature": "definition",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@17"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "InferredType",
      "parameters": [
        {
          "$type": "Parameter",
          "name": "imperative"
        }
      ],
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Group",
                "guardCondition": {
                  "$type": "ParameterReference",
                  "parameter": {
                    "$ref": "#/rules@14/parameters@0"
                  }
                },
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "infer"
                  }
                ]
              },
              {
                "$type": "Group",
                "guardCondition": {
                  "$type": "Negation",
                  "value": {
                    "$type": "ParameterReference",
                    "parameter": {
                      "$ref": "#/rules@14/parameters@0"
                    }
                  }
                },
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "infers"
                  }
                ]
              }
            ]
          },
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@59"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "RuleNameAndParams",
      "fragment": true,
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@59"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "<"
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "parameters",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@16"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "$type": "Group",
                    "elements": [
                      {
                        "$type": "Keyword",
                        "value": ","
                      },
                      {
                        "$type": "Assignment",
                        "feature": "parameters",
                        "operator": "+=",
                        "terminal": {
                          "$type": "RuleCall",
                          "rule": {
                            "$ref": "#/rules@16"
                          },
                          "arguments": []
                        }
                      }
                    ],
                    "cardinality": "*"
                  }
                ],
                "cardinality": "?"
              },
              {
                "$type": "Keyword",
                "value": ">"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Parameter",
      "definition": {
        "$type": "Assignment",
        "feature": "name",
        "operator": "=",
        "terminal": {
          "$type": "RuleCall",
          "rule": {
            "$ref": "#/rules@59"
          },
          "arguments": []
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Alternatives",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@18"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Alternatives"
                },
                "feature": "elements",
                "operator": "+="
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "|"
                  },
                  {
                    "$type": "Assignment",
                    "feature": "elements",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@18"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "+"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ConditionalBranch",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@19"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Group"
                }
              },
              {
                "$type": "Keyword",
                "value": "<"
              },
              {
                "$type": "Assignment",
                "feature": "guardCondition",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@29"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Keyword",
                "value": ">"
              },
              {
                "$type": "Assignment",
                "feature": "elements",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@21"
                  },
                  "arguments": []
                },
                "cardinality": "+"
              }
            ]
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "UnorderedGroup",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@20"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "UnorderedGroup"
                },
                "feature": "elements",
                "operator": "+="
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "&"
                  },
                  {
                    "$type": "Assignment",
                    "feature": "elements",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@20"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "+"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Group",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@21"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Group"
                },
                "feature": "elements",
                "operator": "+="
              },
              {
                "$type": "Assignment",
                "feature": "elements",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@21"
                  },
                  "arguments": []
                },
                "cardinality": "+"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AbstractToken",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@22"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@23"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AbstractTokenWithCardinality",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@37"
                },
                "arguments": []
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@24"
                },
                "arguments": []
              }
            ]
          },
          {
            "$type": "Assignment",
            "feature": "cardinality",
            "operator": "=",
            "terminal": {
              "$type": "Alternatives",
              "elements": [
                {
                  "$type": "Keyword",
                  "value": "?"
                },
                {
                  "$type": "Keyword",
                  "value": "*"
                },
                {
                  "$type": "Keyword",
                  "value": "+"
                }
              ]
            },
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Action",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "Action"
            }
          },
          {
            "$type": "Keyword",
            "value": "{"
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "type",
                "operator": "=",
                "terminal": {
                  "$type": "CrossReference",
                  "type": {
                    "$ref": "#/types@0"
                  },
                  "terminal": {
                    "$type": "RuleCall",
                    "rule": {
                      "$ref": "#/rules@59"
                    },
                    "arguments": []
                  },
                  "deprecatedSyntax": false
                }
              },
              {
                "$type": "Assignment",
                "feature": "inferredType",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@14"
                  },
                  "arguments": [
                    {
                      "$type": "NamedArgument",
                      "value": {
                        "$type": "LiteralCondition",
                        "true": true
                      },
                      "calledByName": false
                    }
                  ]
                }
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "."
              },
              {
                "$type": "Assignment",
                "feature": "feature",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@58"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Alternatives",
                  "elements": [
                    {
                      "$type": "Keyword",
                      "value": "="
                    },
                    {
                      "$type": "Keyword",
                      "value": "+="
                    }
                  ]
                }
              },
              {
                "$type": "Keyword",
                "value": "current"
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": "}"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AbstractTerminal",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@25"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@26"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@43"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@35"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@36"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@44"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Keyword",
      "definition": {
        "$type": "Assignment",
        "feature": "value",
        "operator": "=",
        "terminal": {
          "$type": "RuleCall",
          "rule": {
            "$ref": "#/rules@60"
          },
          "arguments": []
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "RuleCall",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "rule",
            "operator": "=",
            "terminal": {
              "$type": "CrossReference",
              "type": {
                "$ref": "#/rules@11"
              },
              "terminal": {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@59"
                },
                "arguments": []
              },
              "deprecatedSyntax": false
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "<"
              },
              {
                "$type": "Assignment",
                "feature": "arguments",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@27"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": ","
                  },
                  {
                    "$type": "Assignment",
                    "feature": "arguments",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@27"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "*"
              },
              {
                "$type": "Keyword",
                "value": ">"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "NamedArgument",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "parameter",
                "operator": "=",
                "terminal": {
                  "$type": "CrossReference",
                  "type": {
                    "$ref": "#/rules@16"
                  },
                  "terminal": {
                    "$type": "RuleCall",
                    "rule": {
                      "$ref": "#/rules@59"
                    },
                    "arguments": []
                  },
                  "deprecatedSyntax": false
                }
              },
              {
                "$type": "Assignment",
                "feature": "calledByName",
                "operator": "?=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "="
                }
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Assignment",
            "feature": "value",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@29"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "LiteralCondition",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "true",
            "operator": "?=",
            "terminal": {
              "$type": "Keyword",
              "value": "true"
            }
          },
          {
            "$type": "Keyword",
            "value": "false"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Disjunction",
      "inferredType": {
        "$type": "InferredType",
        "name": "Condition"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@30"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Disjunction"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Keyword",
                "value": "|"
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@30"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Conjunction",
      "inferredType": {
        "$type": "InferredType",
        "name": "Condition"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@31"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Conjunction"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Keyword",
                "value": "&"
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@31"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Negation",
      "inferredType": {
        "$type": "InferredType",
        "name": "Condition"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@32"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Negation"
                }
              },
              {
                "$type": "Keyword",
                "value": "!"
              },
              {
                "$type": "Assignment",
                "feature": "value",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@31"
                  },
                  "arguments": []
                }
              }
            ]
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Atom",
      "inferredType": {
        "$type": "InferredType",
        "name": "Condition"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@34"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@33"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@28"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ParenthesizedCondition",
      "inferredType": {
        "$type": "InferredType",
        "name": "Condition"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@29"
            },
            "arguments": []
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ParameterReference",
      "definition": {
        "$type": "Assignment",
        "feature": "parameter",
        "operator": "=",
        "terminal": {
          "$type": "CrossReference",
          "type": {
            "$ref": "#/rules@16"
          },
          "terminal": {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@59"
            },
            "arguments": []
          },
          "deprecatedSyntax": false
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PredicatedKeyword",
      "inferredType": {
        "$type": "InferredType",
        "name": "Keyword"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Keyword",
                "value": "=>"
              },
              {
                "$type": "Keyword",
                "value": "->"
              }
            ]
          },
          {
            "$type": "Assignment",
            "feature": "value",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@60"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PredicatedRuleCall",
      "inferredType": {
        "$type": "InferredType",
        "name": "RuleCall"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Keyword",
                "value": "=>"
              },
              {
                "$type": "Keyword",
                "value": "->"
              }
            ]
          },
          {
            "$type": "Assignment",
            "feature": "rule",
            "operator": "=",
            "terminal": {
              "$type": "CrossReference",
              "type": {
                "$ref": "#/rules@11"
              },
              "terminal": {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@59"
                },
                "arguments": []
              },
              "deprecatedSyntax": false
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "<"
              },
              {
                "$type": "Assignment",
                "feature": "arguments",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@27"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": ","
                  },
                  {
                    "$type": "Assignment",
                    "feature": "arguments",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@27"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "*"
              },
              {
                "$type": "Keyword",
                "value": ">"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Assignment",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "Assignment"
            }
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Keyword",
                "value": "=>"
              },
              {
                "$type": "Keyword",
                "value": "->"
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Assignment",
            "feature": "feature",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@58"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "operator",
            "operator": "=",
            "terminal": {
              "$type": "Alternatives",
              "elements": [
                {
                  "$type": "Keyword",
                  "value": "+="
                },
                {
                  "$type": "Keyword",
                  "value": "="
                },
                {
                  "$type": "Keyword",
                  "value": "?="
                }
              ]
            }
          },
          {
            "$type": "Assignment",
            "feature": "terminal",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@38"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AssignableTerminal",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@25"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@26"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@39"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@41"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ParenthesizedAssignableElement",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@40"
            },
            "arguments": []
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AssignableAlternatives",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@38"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "Alternatives"
                },
                "feature": "elements",
                "operator": "+="
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": "|"
                  },
                  {
                    "$type": "Assignment",
                    "feature": "elements",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@38"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "+"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "CrossReference",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "CrossReference"
            }
          },
          {
            "$type": "Keyword",
            "value": "["
          },
          {
            "$type": "Assignment",
            "feature": "type",
            "operator": "=",
            "terminal": {
              "$type": "CrossReference",
              "type": {
                "$ref": "#/types@0"
              },
              "deprecatedSyntax": false
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Alternatives",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "deprecatedSyntax",
                    "operator": "?=",
                    "terminal": {
                      "$type": "Keyword",
                      "value": "|"
                    }
                  },
                  {
                    "$type": "Keyword",
                    "value": ":"
                  }
                ]
              },
              {
                "$type": "Assignment",
                "feature": "terminal",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@42"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": "]"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "CrossReferenceableTerminal",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@25"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@26"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ParenthesizedElement",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@17"
            },
            "arguments": []
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PredicatedGroup",
      "inferredType": {
        "$type": "InferredType",
        "name": "Group"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Keyword",
                "value": "=>"
              },
              {
                "$type": "Keyword",
                "value": "->"
              }
            ]
          },
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "Assignment",
            "feature": "elements",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@17"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ReturnType",
      "definition": {
        "$type": "Assignment",
        "feature": "name",
        "operator": "=",
        "terminal": {
          "$type": "Alternatives",
          "elements": [
            {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@9"
              },
              "arguments": []
            },
            {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@59"
              },
              "arguments": []
            }
          ]
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TerminalRule",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "hidden",
            "operator": "?=",
            "terminal": {
              "$type": "Keyword",
              "value": "hidden"
            },
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": "terminal"
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "fragment",
                    "operator": "?=",
                    "terminal": {
                      "$type": "Keyword",
                      "value": "fragment"
                    }
                  },
                  {
                    "$type": "Assignment",
                    "feature": "name",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@59"
                      },
                      "arguments": []
                    }
                  }
                ]
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "name",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@59"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "$type": "Group",
                    "elements": [
                      {
                        "$type": "Keyword",
                        "value": "returns"
                      },
                      {
                        "$type": "Assignment",
                        "feature": "type",
                        "operator": "=",
                        "terminal": {
                          "$type": "RuleCall",
                          "rule": {
                            "$ref": "#/rules@45"
                          },
                          "arguments": []
                        }
                      }
                    ],
                    "cardinality": "?"
                  }
                ]
              }
            ]
          },
          {
            "$type": "Keyword",
            "value": ":"
          },
          {
            "$type": "Assignment",
            "feature": "definition",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@47"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TerminalAlternatives",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@48"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "TerminalAlternatives"
                },
                "feature": "elements",
                "operator": "+="
              },
              {
                "$type": "Keyword",
                "value": "|"
              },
              {
                "$type": "Assignment",
                "feature": "elements",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@48"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TerminalGroup",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@49"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "inferredType": {
                  "$type": "InferredType",
                  "name": "TerminalGroup"
                },
                "feature": "elements",
                "operator": "+="
              },
              {
                "$type": "Assignment",
                "feature": "elements",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@49"
                  },
                  "arguments": []
                },
                "cardinality": "+"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TerminalToken",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@50"
            },
            "arguments": []
          },
          {
            "$type": "Assignment",
            "feature": "cardinality",
            "operator": "=",
            "terminal": {
              "$type": "Alternatives",
              "elements": [
                {
                  "$type": "Keyword",
                  "value": "?"
                },
                {
                  "$type": "Keyword",
                  "value": "*"
                },
                {
                  "$type": "Keyword",
                  "value": "+"
                }
              ]
            },
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TerminalTokenElement",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@57"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@52"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@51"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@53"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@54"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@55"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@56"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ParenthesizedTerminalElement",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "Assignment",
            "feature": "lookahead",
            "operator": "=",
            "terminal": {
              "$type": "Alternatives",
              "elements": [
                {
                  "$type": "Keyword",
                  "value": "?="
                },
                {
                  "$type": "Keyword",
                  "value": "?!"
                }
              ]
            },
            "cardinality": "?"
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@47"
            },
            "arguments": []
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TerminalRuleCall",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "TerminalRuleCall"
            }
          },
          {
            "$type": "Assignment",
            "feature": "rule",
            "operator": "=",
            "terminal": {
              "$type": "CrossReference",
              "type": {
                "$ref": "#/rules@46"
              },
              "terminal": {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@59"
                },
                "arguments": []
              },
              "deprecatedSyntax": false
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "NegatedToken",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "NegatedToken"
            }
          },
          {
            "$type": "Keyword",
            "value": "!"
          },
          {
            "$type": "Assignment",
            "feature": "terminal",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@50"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "UntilToken",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "UntilToken"
            }
          },
          {
            "$type": "Keyword",
            "value": "->"
          },
          {
            "$type": "Assignment",
            "feature": "terminal",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@50"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "RegexToken",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "RegexToken"
            }
          },
          {
            "$type": "Assignment",
            "feature": "regex",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@61"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Wildcard",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "Wildcard"
            }
          },
          {
            "$type": "Keyword",
            "value": "."
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "CharacterRange",
      "inferredType": {
        "$type": "InferredType",
        "name": "AbstractElement"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Action",
            "inferredType": {
              "$type": "InferredType",
              "name": "CharacterRange"
            }
          },
          {
            "$type": "Assignment",
            "feature": "left",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@25"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": ".."
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@25"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "FeatureName",
      "dataType": "string",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Keyword",
            "value": "current"
          },
          {
            "$type": "Keyword",
            "value": "entry"
          },
          {
            "$type": "Keyword",
            "value": "extends"
          },
          {
            "$type": "Keyword",
            "value": "false"
          },
          {
            "$type": "Keyword",
            "value": "fragment"
          },
          {
            "$type": "Keyword",
            "value": "grammar"
          },
          {
            "$type": "Keyword",
            "value": "hidden"
          },
          {
            "$type": "Keyword",
            "value": "import"
          },
          {
            "$type": "Keyword",
            "value": "interface"
          },
          {
            "$type": "Keyword",
            "value": "returns"
          },
          {
            "$type": "Keyword",
            "value": "terminal"
          },
          {
            "$type": "Keyword",
            "value": "true"
          },
          {
            "$type": "Keyword",
            "value": "type"
          },
          {
            "$type": "Keyword",
            "value": "infer"
          },
          {
            "$type": "Keyword",
            "value": "infers"
          },
          {
            "$type": "Keyword",
            "value": "with"
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@9"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$ref": "#/rules@59"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "TerminalRule",
      "name": "ID",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\^?[_a-zA-Z][\\\\w_]*"
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "STRING",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\"(\\\\\\\\.|[^\\"\\\\\\\\])*\\"|'(\\\\\\\\.|[^'\\\\\\\\])*'"
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "RegexLiteral",
      "type": {
        "$type": "ReturnType",
        "name": "string"
      },
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\/(?![*+?])(?:[^\\\\r\\\\n\\\\[/\\\\\\\\]|\\\\\\\\.|\\\\[(?:[^\\\\r\\\\n\\\\]\\\\\\\\]|\\\\\\\\.)*\\\\])+\\\\/"
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "WS",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\s+"
      },
      "fragment": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "ML_COMMENT",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/"
      },
      "fragment": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "SL_COMMENT",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\/\\\\/[^\\\\n\\\\r]*"
      },
      "fragment": false
    }
  ],
  "types": [
    {
      "$type": "Type",
      "name": "AbstractType",
      "type": {
        "$type": "UnionType",
        "types": [
          {
            "$type": "SimpleType",
            "typeRef": {
              "$ref": "#/rules@1"
            }
          },
          {
            "$type": "SimpleType",
            "typeRef": {
              "$ref": "#/rules@10"
            }
          },
          {
            "$type": "SimpleType",
            "typeRef": {
              "$ref": "#/rules@23/definition/elements@0"
            }
          },
          {
            "$type": "SimpleType",
            "typeRef": {
              "$ref": "#/rules@13"
            }
          }
        ]
      }
    }
  ],
  "definesHiddenTokens": false,
  "hiddenTokens": [],
  "imports": [],
  "interfaces": [],
  "usedGrammars": []
}`);
  grammar$1.LangiumGrammarGrammar = LangiumGrammarGrammar;
  return grammar$1;
}
var hasRequiredModule;
function requireModule() {
  if (hasRequiredModule)
    return module$1;
  hasRequiredModule = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangiumGrammarGeneratedModule = exports.LangiumGrammarGeneratedSharedModule = exports.LangiumGrammarParserConfig = exports.LangiumGrammarLanguageMetaData = void 0;
    const ast_1 = requireAst();
    const grammar_1 = requireGrammar$1();
    exports.LangiumGrammarLanguageMetaData = {
      languageId: "langium",
      fileExtensions: [".langium"],
      caseInsensitive: false
    };
    exports.LangiumGrammarParserConfig = {
      maxLookahead: 3
    };
    exports.LangiumGrammarGeneratedSharedModule = {
      AstReflection: () => new ast_1.LangiumGrammarAstReflection()
    };
    exports.LangiumGrammarGeneratedModule = {
      Grammar: () => (0, grammar_1.LangiumGrammarGrammar)(),
      LanguageMetaData: () => exports.LangiumGrammarLanguageMetaData,
      parser: {
        ParserConfig: () => exports.LangiumGrammarParserConfig
      }
    };
  })(module$1);
  return module$1;
}
var grammarScope = {};
var scopeComputation = {};
var promiseUtil = {};
var hasRequiredPromiseUtil;
function requirePromiseUtil() {
  if (hasRequiredPromiseUtil)
    return promiseUtil;
  hasRequiredPromiseUtil = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Deferred = exports.MutexLock = exports.interruptAndCheck = exports.isOperationCancelled = exports.OperationCancelled = exports.setInterruptionPeriod = exports.startCancelableOperation = exports.delayNextTick = void 0;
    const vscode_jsonrpc_1 = requireMain$2();
    function delayNextTick() {
      return new Promise((resolve) => {
        if (typeof setImmediate === "undefined") {
          setTimeout(resolve, 0);
        } else {
          setImmediate(resolve);
        }
      });
    }
    exports.delayNextTick = delayNextTick;
    let lastTick = 0;
    let globalInterruptionPeriod = 10;
    function startCancelableOperation() {
      lastTick = Date.now();
      return new vscode_jsonrpc_1.CancellationTokenSource();
    }
    exports.startCancelableOperation = startCancelableOperation;
    function setInterruptionPeriod(period2) {
      globalInterruptionPeriod = period2;
    }
    exports.setInterruptionPeriod = setInterruptionPeriod;
    exports.OperationCancelled = Symbol("OperationCancelled");
    function isOperationCancelled(err) {
      return err === exports.OperationCancelled;
    }
    exports.isOperationCancelled = isOperationCancelled;
    async function interruptAndCheck(token) {
      if (token === vscode_jsonrpc_1.CancellationToken.None) {
        return;
      }
      const current = Date.now();
      if (current - lastTick >= globalInterruptionPeriod) {
        lastTick = current;
        await delayNextTick();
      }
      if (token.isCancellationRequested) {
        throw exports.OperationCancelled;
      }
    }
    exports.interruptAndCheck = interruptAndCheck;
    class MutexLock {
      constructor() {
        this.previousAction = Promise.resolve();
        this.previousTokenSource = new vscode_jsonrpc_1.CancellationTokenSource();
      }
      /**
       * Performs a single async action, like initializing the workspace or processing document changes.
       * Only one action will be executed at a time.
       *
       * When another action is queued up, the token provided for the action will be cancelled.
       * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.
       */
      lock(action) {
        this.cancel();
        const tokenSource = new vscode_jsonrpc_1.CancellationTokenSource();
        this.previousTokenSource = tokenSource;
        return this.previousAction = this.previousAction.then(() => action(tokenSource.token).catch((err) => {
          if (!isOperationCancelled(err)) {
            console.error("Error: ", err);
          }
        }));
      }
      /**
       * Cancels the currently executed action
       */
      cancel() {
        this.previousTokenSource.cancel();
      }
    }
    exports.MutexLock = MutexLock;
    class Deferred {
      constructor() {
        this.promise = new Promise((resolve, reject) => {
          this.resolve = (arg) => (resolve(arg), this);
          this.reject = (err) => (reject(err), this);
        });
      }
    }
    exports.Deferred = Deferred;
  })(promiseUtil);
  return promiseUtil;
}
var hasRequiredScopeComputation;
function requireScopeComputation() {
  if (hasRequiredScopeComputation)
    return scopeComputation;
  hasRequiredScopeComputation = 1;
  Object.defineProperty(scopeComputation, "__esModule", { value: true });
  scopeComputation.DefaultScopeComputation = void 0;
  const vscode_jsonrpc_1 = requireMain$2();
  const ast_util_1 = requireAstUtil();
  const collections_1 = requireCollections();
  const promise_util_1 = requirePromiseUtil();
  class DefaultScopeComputation {
    constructor(services2) {
      this.nameProvider = services2.references.NameProvider;
      this.descriptions = services2.workspace.AstNodeDescriptionProvider;
    }
    async computeExports(document2, cancelToken = vscode_jsonrpc_1.CancellationToken.None) {
      return this.computeExportsForNode(document2.parseResult.value, document2, void 0, cancelToken);
    }
    /**
     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.
     * The list of children to be considered is determined by the function parameter {@link children}.
     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.
     *
     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.
     * @param document The document containing the AST node to be exported.
     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.
     * @param cancelToken Indicates when to cancel the current operation.
     * @throws `OperationCanceled` if a user action occurs during execution.
     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.
     */
    async computeExportsForNode(parentNode, document2, children = ast_util_1.streamContents, cancelToken = vscode_jsonrpc_1.CancellationToken.None) {
      const exports = [];
      this.exportNode(parentNode, exports, document2);
      for (const node of children(parentNode)) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        this.exportNode(node, exports, document2);
      }
      return exports;
    }
    /**
     * Add a single node to the list of exports if it has a name. Override this method to change how
     * symbols are exported, e.g. by modifying their exported name.
     */
    exportNode(node, exports, document2) {
      const name2 = this.nameProvider.getName(node);
      if (name2) {
        exports.push(this.descriptions.createDescription(node, name2, document2));
      }
    }
    async computeLocalScopes(document2, cancelToken = vscode_jsonrpc_1.CancellationToken.None) {
      const rootNode = document2.parseResult.value;
      const scopes = new collections_1.MultiMap();
      for (const node of (0, ast_util_1.streamAllContents)(rootNode)) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        this.processNode(node, document2, scopes);
      }
      return scopes;
    }
    /**
     * Process a single node during scopes computation. The default implementation makes the node visible
     * in the subtree of its container (if the node has a name). Override this method to change this,
     * e.g. by increasing the visibility to a higher level in the AST.
     */
    processNode(node, document2, scopes) {
      const container = node.$container;
      if (container) {
        const name2 = this.nameProvider.getName(node);
        if (name2) {
          scopes.add(container, this.descriptions.createDescription(node, name2, document2));
        }
      }
    }
  }
  scopeComputation.DefaultScopeComputation = DefaultScopeComputation;
  return scopeComputation;
}
var scopeProvider = {};
var hasRequiredScopeProvider;
function requireScopeProvider() {
  if (hasRequiredScopeProvider)
    return scopeProvider;
  hasRequiredScopeProvider = 1;
  Object.defineProperty(scopeProvider, "__esModule", { value: true });
  scopeProvider.DefaultScopeProvider = scopeProvider.EMPTY_SCOPE = scopeProvider.StreamScope = void 0;
  const ast_util_1 = requireAstUtil();
  const stream_1 = requireStream();
  class StreamScope {
    constructor(elements, outerScope, options) {
      this.elements = elements;
      this.outerScope = outerScope;
      this.caseInsensitive = options === null || options === void 0 ? void 0 : options.caseInsensitive;
    }
    getAllElements() {
      if (this.outerScope) {
        return this.elements.concat(this.outerScope.getAllElements());
      } else {
        return this.elements;
      }
    }
    getElement(name2) {
      const local = this.caseInsensitive ? this.elements.find((e) => e.name.toLowerCase() === name2.toLowerCase()) : this.elements.find((e) => e.name === name2);
      if (local) {
        return local;
      }
      if (this.outerScope) {
        return this.outerScope.getElement(name2);
      }
      return void 0;
    }
  }
  scopeProvider.StreamScope = StreamScope;
  scopeProvider.EMPTY_SCOPE = {
    getElement() {
      return void 0;
    },
    getAllElements() {
      return stream_1.EMPTY_STREAM;
    }
  };
  class DefaultScopeProvider {
    constructor(services2) {
      this.reflection = services2.shared.AstReflection;
      this.nameProvider = services2.references.NameProvider;
      this.descriptions = services2.workspace.AstNodeDescriptionProvider;
      this.indexManager = services2.shared.workspace.IndexManager;
    }
    getScope(context) {
      const scopes = [];
      const referenceType = this.reflection.getReferenceType(context);
      const precomputed = (0, ast_util_1.getDocument)(context.container).precomputedScopes;
      if (precomputed) {
        let currentNode = context.container;
        do {
          const allDescriptions = precomputed.get(currentNode);
          if (allDescriptions.length > 0) {
            scopes.push((0, stream_1.stream)(allDescriptions).filter((desc) => this.reflection.isSubtype(desc.type, referenceType)));
          }
          currentNode = currentNode.$container;
        } while (currentNode);
      }
      let result = this.getGlobalScope(referenceType, context);
      for (let i = scopes.length - 1; i >= 0; i--) {
        result = this.createScope(scopes[i], result);
      }
      return result;
    }
    /**
     * Create a scope for the given collection of AST node descriptions.
     */
    createScope(elements, outerScope, options) {
      return new StreamScope((0, stream_1.stream)(elements), outerScope, options);
    }
    /**
     * Create a scope for the given collection of AST nodes, which need to be transformed into respective
     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.
     */
    createScopeForNodes(elements, outerScope, options) {
      const s2 = (0, stream_1.stream)(elements).map((e) => {
        const name2 = this.nameProvider.getName(e);
        if (name2) {
          return this.descriptions.createDescription(e, name2);
        }
        return void 0;
      }).nonNullable();
      return new StreamScope(s2, outerScope, options);
    }
    /**
     * Create a global scope filtered for the given reference type.
     */
    getGlobalScope(referenceType, _context) {
      return new StreamScope(this.indexManager.allElements(referenceType));
    }
  }
  scopeProvider.DefaultScopeProvider = DefaultScopeProvider;
  return scopeProvider;
}
var uriUtil = {};
var hasRequiredUriUtil;
function requireUriUtil() {
  if (hasRequiredUriUtil)
    return uriUtil;
  hasRequiredUriUtil = 1;
  Object.defineProperty(uriUtil, "__esModule", { value: true });
  uriUtil.relativeURI = uriUtil.equalURI = void 0;
  function equalURI(a2, b2) {
    return (a2 === null || a2 === void 0 ? void 0 : a2.toString()) === (b2 === null || b2 === void 0 ? void 0 : b2.toString());
  }
  uriUtil.equalURI = equalURI;
  function relativeURI(from, to) {
    const fromPath = from.path;
    const toPath = to.path;
    const fromParts = fromPath.split("/").filter((e) => e.length > 0);
    const toParts = toPath.split("/").filter((e) => e.length > 0);
    let i = 0;
    for (; i < fromParts.length; i++) {
      if (fromParts[i] !== toParts[i]) {
        break;
      }
    }
    const backPart = "../".repeat(fromParts.length - i);
    const toPart = toParts.slice(i).join("/");
    return backPart + toPart;
  }
  uriUtil.relativeURI = relativeURI;
  return uriUtil;
}
var hasRequiredGrammarScope;
function requireGrammarScope() {
  if (hasRequiredGrammarScope)
    return grammarScope;
  hasRequiredGrammarScope = 1;
  Object.defineProperty(grammarScope, "__esModule", { value: true });
  grammarScope.LangiumGrammarScopeComputation = grammarScope.LangiumGrammarScopeProvider = void 0;
  const scope_computation_1 = requireScopeComputation();
  const scope_provider_1 = requireScopeProvider();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const stream_1 = requireStream();
  const uri_util_1 = requireUriUtil();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  class LangiumGrammarScopeProvider extends scope_provider_1.DefaultScopeProvider {
    constructor(services2) {
      super(services2);
    }
    getScope(context) {
      const referenceType = this.reflection.getReferenceType(context);
      if (referenceType === ast_1.AbstractType) {
        return this.getTypeScope(referenceType, context);
      } else {
        return super.getScope(context);
      }
    }
    getTypeScope(referenceType, context) {
      let localScope;
      const precomputed = (0, ast_util_1.getDocument)(context.container).precomputedScopes;
      const rootNode = (0, ast_util_1.findRootNode)(context.container);
      if (precomputed && rootNode) {
        const allDescriptions = precomputed.get(rootNode);
        if (allDescriptions.length > 0) {
          localScope = (0, stream_1.stream)(allDescriptions).filter((des) => des.type === ast_1.Interface || des.type === ast_1.Type);
        }
      }
      const globalScope = this.getGlobalScope(referenceType, context);
      if (localScope) {
        return this.createScope(localScope, globalScope);
      } else {
        return globalScope;
      }
    }
    getGlobalScope(referenceType, context) {
      const grammar2 = (0, ast_util_1.getContainerOfType)(context.container, ast_1.isGrammar);
      if (!grammar2) {
        return scope_provider_1.EMPTY_SCOPE;
      }
      const importedUris = (0, stream_1.stream)(grammar2.imports).map(internal_grammar_util_1.resolveImportUri).nonNullable();
      let importedElements = this.indexManager.allElements(referenceType).filter((des) => importedUris.some((importedUri) => (0, uri_util_1.equalURI)(des.documentUri, importedUri)));
      if (referenceType === ast_1.AbstractType) {
        importedElements = importedElements.filter((des) => des.type === ast_1.Interface || des.type === ast_1.Type);
      }
      return new scope_provider_1.StreamScope(importedElements);
    }
  }
  grammarScope.LangiumGrammarScopeProvider = LangiumGrammarScopeProvider;
  class LangiumGrammarScopeComputation extends scope_computation_1.DefaultScopeComputation {
    constructor(services2) {
      super(services2);
      this.astNodeLocator = services2.workspace.AstNodeLocator;
    }
    exportNode(node, exports, document2) {
      var _a2;
      super.exportNode(node, exports, document2);
      if ((0, ast_1.isParserRule)(node)) {
        if (!node.returnType && !node.dataType) {
          const typeNode = (_a2 = node.inferredType) !== null && _a2 !== void 0 ? _a2 : node;
          exports.push(this.createInterfaceDescription(typeNode, typeNode.name, document2));
        }
        (0, ast_util_1.streamAllContents)(node).forEach((childNode) => {
          if ((0, ast_1.isAction)(childNode) && childNode.inferredType) {
            const typeName2 = (0, internal_grammar_util_1.getActionType)(childNode);
            if (typeName2) {
              exports.push(this.createInterfaceDescription(childNode, typeName2, document2));
            }
          }
        });
      }
    }
    processNode(node, document2, scopes) {
      if ((0, ast_1.isReturnType)(node))
        return;
      this.processTypeNode(node, document2, scopes);
      this.processActionNode(node, document2, scopes);
      super.processNode(node, document2, scopes);
    }
    /**
     * Add synthetic Interface in case of explicitly or implicitly inferred type:<br>
     * cases: `ParserRule: ...;` or `ParserRule infers Type: ...;`
     */
    processTypeNode(node, document2, scopes) {
      var _a2;
      const container = node.$container;
      if (container && (0, ast_1.isParserRule)(node) && !node.returnType && !node.dataType) {
        const typeNode = (_a2 = node.inferredType) !== null && _a2 !== void 0 ? _a2 : node;
        scopes.add(container, this.createInterfaceDescription(typeNode, typeNode.name, document2));
      }
    }
    /**
     * Add synthetic Interface in case of explicitly inferred type:
     *
     * case: `{infer Action}`
     */
    processActionNode(node, document2, scopes) {
      const container = (0, ast_util_1.findRootNode)(node);
      if (container && (0, ast_1.isAction)(node) && node.inferredType) {
        const typeName2 = (0, internal_grammar_util_1.getActionType)(node);
        if (typeName2) {
          scopes.add(container, this.createInterfaceDescription(node, typeName2, document2));
        }
      }
    }
    createInterfaceDescription(node, name2, document2 = (0, ast_util_1.getDocument)(node)) {
      var _a2;
      const nameNode = (_a2 = this.nameProvider.getNameNode(node)) !== null && _a2 !== void 0 ? _a2 : node.$cstNode;
      return {
        node,
        name: name2,
        nameSegment: (0, cst_util_1.toDocumentSegment)(nameNode),
        selectionSegment: (0, cst_util_1.toDocumentSegment)(node.$cstNode),
        type: "Interface",
        documentUri: document2.uri,
        path: this.astNodeLocator.getAstNodePath(node)
      };
    }
  }
  grammarScope.LangiumGrammarScopeComputation = LangiumGrammarScopeComputation;
  return grammarScope;
}
var validator = {};
var hasRequiredValidator;
function requireValidator() {
  if (hasRequiredValidator)
    return validator;
  hasRequiredValidator = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangiumGrammarValidator = exports.IssueCodes = exports.registerValidationChecks = void 0;
    const vscode_languageserver_types_1 = require$$0;
    const ast_util_1 = requireAstUtil();
    const collections_1 = requireCollections();
    const cst_util_1 = requireCstUtil();
    const grammar_util_1 = requireGrammarUtil();
    const stream_1 = requireStream();
    const ast2 = __importStar(requireAst());
    const ast_1 = requireAst();
    const internal_grammar_util_1 = requireInternalGrammarUtil();
    const declared_types_1 = requireDeclaredTypes();
    const plain_types_1 = requirePlainTypes();
    function registerValidationChecks(services2) {
      const registry = services2.validation.ValidationRegistry;
      const validator2 = services2.validation.LangiumGrammarValidator;
      const checks2 = {
        Action: [
          validator2.checkAssignmentReservedName
        ],
        AbstractRule: validator2.checkRuleName,
        Assignment: [
          validator2.checkAssignmentWithFeatureName,
          validator2.checkAssignmentToFragmentRule,
          validator2.checkAssignmentTypes,
          validator2.checkAssignmentReservedName
        ],
        ParserRule: [
          validator2.checkParserRuleDataType,
          validator2.checkRuleParametersUsed,
          validator2.checkParserRuleReservedName
        ],
        TerminalRule: [
          validator2.checkTerminalRuleReturnType,
          validator2.checkHiddenTerminalRule,
          validator2.checkEmptyTerminalRule
        ],
        InferredType: validator2.checkTypeReservedName,
        Keyword: validator2.checkKeyword,
        UnorderedGroup: validator2.checkUnorderedGroup,
        Grammar: [
          validator2.checkGrammarName,
          validator2.checkEntryGrammarRule,
          validator2.checkUniqueRuleName,
          validator2.checkUniqueTypeName,
          validator2.checkUniqueImportedRules,
          validator2.checkDuplicateImportedGrammar,
          validator2.checkGrammarHiddenTokens,
          validator2.checkGrammarForUnusedRules,
          validator2.checkGrammarTypeInfer,
          validator2.checkClashingTerminalNames
        ],
        GrammarImport: validator2.checkPackageImport,
        CharacterRange: validator2.checkInvalidCharacterRange,
        Interface: [
          validator2.checkTypeReservedName,
          validator2.checkInterfacePropertyTypes
        ],
        Type: [
          validator2.checkTypeReservedName
        ],
        TypeAttribute: validator2.checkTypeReservedName,
        RuleCall: [
          validator2.checkUsedHiddenTerminalRule,
          validator2.checkUsedFragmentTerminalRule,
          validator2.checkRuleCallParameters
        ],
        TerminalRuleCall: validator2.checkUsedHiddenTerminalRule,
        CrossReference: [
          validator2.checkCrossReferenceSyntax,
          validator2.checkCrossRefNameAssignment,
          validator2.checkCrossRefTerminalType,
          validator2.checkCrossRefType,
          validator2.checkCrossReferenceToTypeUnion
        ],
        SimpleType: validator2.checkFragmentsInTypes,
        ReferenceType: validator2.checkReferenceTypeUnion
      };
      registry.register(checks2, validator2);
    }
    exports.registerValidationChecks = registerValidationChecks;
    var IssueCodes;
    (function(IssueCodes2) {
      IssueCodes2.GrammarNameUppercase = "grammar-name-uppercase";
      IssueCodes2.RuleNameUppercase = "rule-name-uppercase";
      IssueCodes2.HiddenGrammarTokens = "hidden-grammar-tokens";
      IssueCodes2.UseRegexTokens = "use-regex-tokens";
      IssueCodes2.EntryRuleTokenSyntax = "entry-rule-token-syntax";
      IssueCodes2.CrossRefTokenSyntax = "cross-ref-token-syntax";
      IssueCodes2.UnnecessaryFileExtension = "unnecessary-file-extension";
      IssueCodes2.InvalidReturns = "invalid-returns";
      IssueCodes2.InvalidInfers = "invalid-infers";
      IssueCodes2.MissingInfer = "missing-infer";
      IssueCodes2.MissingReturns = "missing-returns";
      IssueCodes2.SuperfluousInfer = "superfluous-infer";
      IssueCodes2.OptionalUnorderedGroup = "optional-unordered-group";
    })(IssueCodes = exports.IssueCodes || (exports.IssueCodes = {}));
    class LangiumGrammarValidator {
      constructor(services2) {
        this.references = services2.references.References;
        this.documents = services2.shared.workspace.LangiumDocuments;
      }
      checkGrammarName(grammar2, accept) {
        if (grammar2.name) {
          const firstChar = grammar2.name.substring(0, 1);
          if (firstChar.toUpperCase() !== firstChar) {
            accept("warning", "Grammar name should start with an upper case letter.", { node: grammar2, property: "name", code: IssueCodes.GrammarNameUppercase });
          }
        }
      }
      checkEntryGrammarRule(grammar2, accept) {
        if (grammar2.isDeclared && !grammar2.name) {
          return;
        }
        const entryRules = grammar2.rules.filter((e) => ast2.isParserRule(e) && e.entry);
        if (grammar2.isDeclared && entryRules.length === 0) {
          const possibleEntryRule = grammar2.rules.find((e) => ast2.isParserRule(e) && !(0, internal_grammar_util_1.isDataTypeRule)(e));
          if (possibleEntryRule) {
            accept("error", "The grammar is missing an entry parser rule. This rule can be an entry one.", { node: possibleEntryRule, property: "name", code: IssueCodes.EntryRuleTokenSyntax });
          } else {
            accept("error", "This grammar is missing an entry parser rule.", { node: grammar2, property: "name" });
          }
        } else if (!grammar2.isDeclared && entryRules.length >= 1) {
          entryRules.forEach((rule) => accept("error", "Cannot declare entry rules for unnamed grammars.", { node: rule, property: "name" }));
        } else if (entryRules.length > 1) {
          entryRules.forEach((rule) => accept("error", "The entry rule has to be unique.", { node: rule, property: "name" }));
        } else if (entryRules.length === 1 && (0, internal_grammar_util_1.isDataTypeRule)(entryRules[0])) {
          accept("error", "The entry rule cannot be a data type rule.", { node: entryRules[0], property: "name" });
        }
      }
      /**
       * Check whether any rule defined in this grammar is a duplicate of an already defined rule or an imported rule
       */
      checkUniqueRuleName(grammar2, accept) {
        const extractor = (grammar3) => (0, stream_1.stream)(grammar3.rules).filter((rule) => !isEmptyRule(rule));
        this.checkUniqueName(grammar2, accept, extractor, "rule");
      }
      /**
       * Check whether any type defined in this grammar is a duplicate of an already defined type or an imported type
       */
      checkUniqueTypeName(grammar2, accept) {
        const extractor = (grammar3) => (0, stream_1.stream)(grammar3.types).concat(grammar3.interfaces);
        this.checkUniqueName(grammar2, accept, extractor, "type");
      }
      checkUniqueName(grammar2, accept, extractor, uniqueObjName) {
        const map2 = new collections_1.MultiMap();
        extractor(grammar2).forEach((e) => map2.add(e.name, e));
        for (const [, types2] of map2.entriesGroupedByKey()) {
          if (types2.length > 1) {
            types2.forEach((e) => {
              accept("error", `A ${uniqueObjName}'s name has to be unique.`, { node: e, property: "name" });
            });
          }
        }
        const imported = /* @__PURE__ */ new Set();
        const resolvedGrammars = (0, internal_grammar_util_1.resolveTransitiveImports)(this.documents, grammar2);
        for (const resolvedGrammar of resolvedGrammars) {
          extractor(resolvedGrammar).forEach((e) => imported.add(e.name));
        }
        for (const name2 of map2.keys()) {
          if (imported.has(name2)) {
            const types2 = map2.get(name2);
            types2.forEach((e) => {
              accept("error", `A ${uniqueObjName} with the name '${e.name}' already exists in an imported grammar.`, { node: e, property: "name" });
            });
          }
        }
      }
      checkDuplicateImportedGrammar(grammar2, accept) {
        const importMap = new collections_1.MultiMap();
        for (const imp of grammar2.imports) {
          const resolvedGrammar = (0, internal_grammar_util_1.resolveImport)(this.documents, imp);
          if (resolvedGrammar) {
            importMap.add(resolvedGrammar, imp);
          }
        }
        for (const [, imports] of importMap.entriesGroupedByKey()) {
          if (imports.length > 1) {
            imports.forEach((imp, i) => {
              if (i > 0) {
                accept("warning", "The grammar is already being directly imported.", { node: imp, tags: [vscode_languageserver_types_1.DiagnosticTag.Unnecessary] });
              }
            });
          }
        }
      }
      /**
       * Compared to the validation above, this validation only checks whether two imported grammars export the same grammar rule.
       */
      checkUniqueImportedRules(grammar2, accept) {
        const imports = /* @__PURE__ */ new Map();
        for (const imp of grammar2.imports) {
          const importedGrammars = (0, internal_grammar_util_1.resolveTransitiveImports)(this.documents, imp);
          imports.set(imp, importedGrammars);
        }
        const allDuplicates = new collections_1.MultiMap();
        for (const outerImport of grammar2.imports) {
          const outerGrammars = imports.get(outerImport);
          for (const innerImport of grammar2.imports) {
            if (outerImport === innerImport) {
              continue;
            }
            const innerGrammars = imports.get(innerImport);
            const duplicates = this.getDuplicateExportedRules(outerGrammars, innerGrammars);
            for (const duplicate of duplicates) {
              allDuplicates.add(outerImport, duplicate);
            }
          }
        }
        for (const imp of grammar2.imports) {
          const duplicates = allDuplicates.get(imp);
          if (duplicates.length > 0) {
            accept("error", "Some rules exported by this grammar are also included in other imports: " + (0, stream_1.stream)(duplicates).distinct().join(", "), { node: imp, property: "path" });
          }
        }
      }
      getDuplicateExportedRules(outer, inner) {
        const exclusiveOuter = outer.filter((g2) => !inner.includes(g2));
        const outerRules = exclusiveOuter.flatMap((e) => e.rules);
        const innerRules = inner.flatMap((e) => e.rules);
        const duplicates = /* @__PURE__ */ new Set();
        for (const outerRule of outerRules) {
          const outerName = outerRule.name;
          for (const innerRule of innerRules) {
            const innerName = innerRule.name;
            if (outerName === innerName) {
              duplicates.add(innerRule.name);
            }
          }
        }
        return duplicates;
      }
      checkGrammarTypeInfer(grammar2, accept) {
        var _a2, _b2, _c2;
        const types2 = /* @__PURE__ */ new Set();
        for (const type of grammar2.types) {
          types2.add(type.name);
        }
        for (const interfaceType of grammar2.interfaces) {
          types2.add(interfaceType.name);
        }
        (0, internal_grammar_util_1.resolveTransitiveImports)(this.documents, grammar2).forEach((grammar3) => {
          grammar3.types.forEach((type) => types2.add(type.name));
          grammar3.interfaces.forEach((iface) => types2.add(iface.name));
        });
        for (const rule of grammar2.rules.filter(ast2.isParserRule)) {
          if (isEmptyRule(rule)) {
            continue;
          }
          const isDataType = (0, internal_grammar_util_1.isDataTypeRule)(rule);
          const isInfers = !rule.returnType && !rule.dataType;
          const ruleTypeName = (0, internal_grammar_util_1.getTypeNameWithoutError)(rule);
          if (!isDataType && ruleTypeName && types2.has(ruleTypeName) === isInfers) {
            if ((isInfers || ((_a2 = rule.returnType) === null || _a2 === void 0 ? void 0 : _a2.ref) !== void 0) && rule.inferredType === void 0) {
              accept("error", getMessage(ruleTypeName, isInfers), {
                node: rule,
                property: "name",
                code: IssueCodes.MissingReturns
              });
            } else if (isInfers || ((_b2 = rule.returnType) === null || _b2 === void 0 ? void 0 : _b2.ref) !== void 0) {
              const infersNode = (0, grammar_util_1.findNodeForKeyword)(rule.inferredType.$cstNode, "infers");
              accept("error", getMessage(ruleTypeName, isInfers), {
                node: rule.inferredType,
                property: "name",
                code: IssueCodes.InvalidInfers,
                data: (0, cst_util_1.toDocumentSegment)(infersNode)
              });
            }
          } else if (isDataType && isInfers) {
            const inferNode = (0, grammar_util_1.findNodeForKeyword)(rule.$cstNode, "infer");
            accept("error", "Data type rules cannot infer a type.", {
              node: rule,
              property: "inferredType",
              code: IssueCodes.InvalidInfers,
              data: (0, cst_util_1.toDocumentSegment)(inferNode)
            });
          }
        }
        for (const action of (0, ast_util_1.streamAllContents)(grammar2).filter(ast2.isAction)) {
          const actionType = this.getActionType(action);
          if (actionType) {
            const isInfers = Boolean(action.inferredType);
            const typeName2 = (0, internal_grammar_util_1.getTypeNameWithoutError)(action);
            if (action.type && typeName2 && types2.has(typeName2) === isInfers) {
              const keywordNode = isInfers ? (0, grammar_util_1.findNodeForKeyword)(action.$cstNode, "infer") : (0, grammar_util_1.findNodeForKeyword)(action.$cstNode, "{");
              accept("error", getMessage(typeName2, isInfers), {
                node: action,
                property: "type",
                code: isInfers ? IssueCodes.SuperfluousInfer : IssueCodes.MissingInfer,
                data: (0, cst_util_1.toDocumentSegment)(keywordNode)
              });
            } else if (actionType && typeName2 && types2.has(typeName2) && isInfers) {
              if (action.$cstNode) {
                const inferredTypeNode = (0, grammar_util_1.findNodeForProperty)((_c2 = action.inferredType) === null || _c2 === void 0 ? void 0 : _c2.$cstNode, "name");
                const keywordNode = (0, grammar_util_1.findNodeForKeyword)(action.$cstNode, "{");
                if (inferredTypeNode && keywordNode) {
                  accept("error", `${typeName2} is a declared type and cannot be redefined.`, {
                    node: action,
                    property: "type",
                    code: IssueCodes.SuperfluousInfer,
                    data: {
                      start: keywordNode.range.end,
                      end: inferredTypeNode.range.start
                    }
                  });
                }
              }
            }
          }
        }
        function getMessage(name2, infer) {
          if (infer) {
            return `The type '${name2}' is already explicitly declared and cannot be inferred.`;
          } else {
            return `The type '${name2}' is not explicitly declared and must be inferred.`;
          }
        }
      }
      getActionType(rule) {
        var _a2;
        if (rule.type) {
          return (_a2 = rule.type) === null || _a2 === void 0 ? void 0 : _a2.ref;
        } else if (rule.inferredType) {
          return rule.inferredType;
        }
        return void 0;
      }
      checkGrammarHiddenTokens(grammar2, accept) {
        if (grammar2.definesHiddenTokens) {
          accept("error", "Hidden terminals are declared at the terminal definition.", { node: grammar2, property: "definesHiddenTokens", code: IssueCodes.HiddenGrammarTokens });
        }
      }
      checkHiddenTerminalRule(terminalRule, accept) {
        if (terminalRule.hidden && terminalRule.fragment) {
          accept("error", "Cannot use terminal fragments as hidden tokens.", { node: terminalRule, property: "hidden" });
        }
      }
      checkEmptyTerminalRule(terminalRule, accept) {
        try {
          const regex = (0, internal_grammar_util_1.terminalRegex)(terminalRule);
          if (new RegExp(regex).test("")) {
            accept("error", "This terminal could match an empty string.", { node: terminalRule, property: "name" });
          }
        } catch (_a2) {
        }
      }
      checkUsedHiddenTerminalRule(ruleCall, accept) {
        const parentRule = (0, ast_util_1.getContainerOfType)(ruleCall, (n2) => ast2.isTerminalRule(n2) || ast2.isParserRule(n2));
        if (parentRule) {
          if ("hidden" in parentRule && parentRule.hidden) {
            return;
          }
          const ref = ruleCall.rule.ref;
          if (ast2.isTerminalRule(ref) && ref.hidden) {
            accept("error", "Cannot use hidden terminal in non-hidden rule", { node: ruleCall, property: "rule" });
          }
        }
      }
      checkUsedFragmentTerminalRule(ruleCall, accept) {
        const terminal = ruleCall.rule.ref;
        if (ast2.isTerminalRule(terminal) && terminal.fragment) {
          const parentRule = (0, ast_util_1.getContainerOfType)(ruleCall, ast2.isParserRule);
          if (parentRule) {
            accept("error", "Cannot use terminal fragments as part of parser rules.", { node: ruleCall, property: "rule" });
          }
        }
      }
      checkCrossReferenceSyntax(crossRef, accept) {
        if (crossRef.deprecatedSyntax) {
          accept("error", "'|' is deprecated. Please, use ':' instead.", { node: crossRef, property: "deprecatedSyntax", code: IssueCodes.CrossRefTokenSyntax });
        }
      }
      checkPackageImport(imp, accept) {
        const resolvedGrammar = (0, internal_grammar_util_1.resolveImport)(this.documents, imp);
        if (resolvedGrammar === void 0) {
          accept("error", "Import cannot be resolved.", { node: imp, property: "path" });
        } else if (imp.path.endsWith(".langium")) {
          accept("warning", "Imports do not need file extensions.", { node: imp, property: "path", code: IssueCodes.UnnecessaryFileExtension });
        }
      }
      checkInvalidCharacterRange(range2, accept) {
        if (range2.right) {
          const message = "Character ranges cannot use more than one character";
          let invalid = false;
          if (range2.left.value.length > 1) {
            invalid = true;
            accept("error", message, { node: range2.left, property: "value" });
          }
          if (range2.right.value.length > 1) {
            invalid = true;
            accept("error", message, { node: range2.right, property: "value" });
          }
          if (!invalid) {
            accept("hint", "Consider using regex instead of character ranges", { node: range2, code: IssueCodes.UseRegexTokens });
          }
        }
      }
      checkGrammarForUnusedRules(grammar2, accept) {
        const reachableRules = (0, grammar_util_1.getAllReachableRules)(grammar2, true);
        for (const rule of grammar2.rules) {
          if (ast2.isTerminalRule(rule) && rule.hidden || isEmptyRule(rule)) {
            continue;
          }
          if (!reachableRules.has(rule)) {
            accept("hint", "This rule is declared but never referenced.", {
              node: rule,
              property: "name",
              tags: [vscode_languageserver_types_1.DiagnosticTag.Unnecessary]
            });
          }
        }
      }
      checkClashingTerminalNames(grammar2, accept) {
        const localTerminals = new collections_1.MultiMap();
        const localKeywords = /* @__PURE__ */ new Set();
        for (const rule of grammar2.rules) {
          if (ast2.isTerminalRule(rule) && rule.name) {
            localTerminals.add(rule.name, rule);
          }
          if (ast2.isParserRule(rule)) {
            const keywords2 = (0, ast_util_1.streamAllContents)(rule).filter(ast2.isKeyword);
            keywords2.forEach((e) => localKeywords.add(e.value));
          }
        }
        const importedTerminals = new collections_1.MultiMap();
        const importedKeywords = new collections_1.MultiMap();
        for (const importNode of grammar2.imports) {
          const importedGrammars = (0, internal_grammar_util_1.resolveTransitiveImports)(this.documents, importNode);
          for (const importedGrammar of importedGrammars) {
            for (const rule of importedGrammar.rules) {
              if (ast2.isTerminalRule(rule) && rule.name) {
                importedTerminals.add(rule.name, importNode);
              } else if (ast2.isParserRule(rule) && rule.name) {
                const keywords2 = (0, ast_util_1.streamAllContents)(rule).filter(ast2.isKeyword);
                keywords2.forEach((e) => importedKeywords.add(e.value, importNode));
              }
            }
          }
        }
        for (const localTerminal of localTerminals.values()) {
          if (localKeywords.has(localTerminal.name)) {
            accept("error", "Terminal name clashes with existing keyword.", {
              node: localTerminal,
              property: "name"
            });
          } else if (importedKeywords.has(localTerminal.name)) {
            const importNode = importedKeywords.get(localTerminal.name);
            accept("error", `Terminal name clashes with imported keyword from "${importNode[0].path}".`, {
              node: localTerminal,
              property: "name"
            });
          }
        }
        const importTerminalMap = new collections_1.MultiMap();
        for (const localKeyword of localKeywords) {
          for (const importNode of importedTerminals.get(localKeyword)) {
            importTerminalMap.add(importNode, localKeyword);
          }
        }
        for (const [importNode, keywords2] of importTerminalMap.entriesGroupedByKey()) {
          if (keywords2.length > 0) {
            accept("error", `Imported terminals (${keywords2.join(", ")}) clash with locally defined keywords.`, {
              node: importNode,
              property: "path"
            });
          }
        }
        const importKeywordMap = new collections_1.MultiMap();
        for (const [name2, imports] of importedTerminals.entriesGroupedByKey()) {
          const keywordImports = importedKeywords.get(name2);
          if (keywordImports.length > 0) {
            imports.filter((e) => !keywordImports.includes(e)).forEach((e) => importKeywordMap.add(e, name2));
          }
        }
        for (const [importNode, keywords2] of importKeywordMap.entriesGroupedByKey()) {
          if (keywords2.length > 0) {
            accept("error", `Imported terminals (${keywords2.join(", ")}) clash with imported keywords.`, {
              node: importNode,
              property: "path"
            });
          }
        }
      }
      checkRuleName(rule, accept) {
        if (rule.name && !isEmptyRule(rule)) {
          const firstChar = rule.name.substring(0, 1);
          if (firstChar.toUpperCase() !== firstChar) {
            accept("warning", "Rule name should start with an upper case letter.", {
              node: rule,
              property: "name",
              code: IssueCodes.RuleNameUppercase
            });
          }
        }
      }
      checkTypeReservedName(type, accept) {
        this.checkReservedName(type, "name", accept);
      }
      checkAssignmentReservedName(assignment, accept) {
        this.checkReservedName(assignment, "feature", accept);
      }
      checkParserRuleReservedName(rule, accept) {
        if (!rule.inferredType) {
          this.checkReservedName(rule, "name", accept);
        }
      }
      checkReservedName(node, property, accept) {
        const name2 = node[property];
        if (typeof name2 === "string" && reservedNames.has(name2)) {
          accept("error", `'${name2}' is a reserved name of the JavaScript runtime.`, {
            node,
            property
          });
        }
      }
      checkKeyword(keyword2, accept) {
        if ((0, ast_util_1.getContainerOfType)(keyword2, ast_1.isParserRule)) {
          if (keyword2.value.length === 0) {
            accept("error", "Keywords cannot be empty.", { node: keyword2 });
          } else if (keyword2.value.trim().length === 0) {
            accept("error", "Keywords cannot only consist of whitespace characters.", { node: keyword2 });
          } else if (/\s/g.test(keyword2.value)) {
            accept("warning", "Keywords should not contain whitespace characters.", { node: keyword2 });
          }
        }
      }
      checkUnorderedGroup(unorderedGroup, accept) {
        unorderedGroup.elements.forEach((ele) => {
          if ((0, internal_grammar_util_1.isOptionalCardinality)(ele.cardinality)) {
            accept("error", "Optional elements in Unordered groups are currently not supported", { node: ele, code: IssueCodes.OptionalUnorderedGroup });
          }
        });
      }
      checkRuleParametersUsed(rule, accept) {
        const parameters = rule.parameters;
        if (parameters.length > 0) {
          const allReferences = (0, ast_util_1.streamAllContents)(rule).filter(ast2.isParameterReference);
          for (const parameter of parameters) {
            if (!allReferences.some((e) => e.parameter.ref === parameter)) {
              accept("hint", `Parameter '${parameter.name}' is unused.`, {
                node: parameter,
                tags: [vscode_languageserver_types_1.DiagnosticTag.Unnecessary]
              });
            }
          }
        }
      }
      checkParserRuleDataType(rule, accept) {
        if (isEmptyRule(rule)) {
          return;
        }
        const hasDatatypeReturnType = (0, internal_grammar_util_1.hasDataTypeReturn)(rule);
        const dataTypeRule = (0, internal_grammar_util_1.isDataTypeRule)(rule);
        if (!hasDatatypeReturnType && dataTypeRule) {
          accept("error", "This parser rule does not create an object. Add a primitive return type or an action to the start of the rule to force object instantiation.", { node: rule, property: "name" });
        } else if (hasDatatypeReturnType && !dataTypeRule) {
          accept("error", "Normal parser rules are not allowed to return a primitive value. Use a datatype rule for that.", { node: rule, property: rule.dataType ? "dataType" : "returnType" });
        }
      }
      checkAssignmentToFragmentRule(assignment, accept) {
        if (!assignment.terminal) {
          return;
        }
        if ((0, ast_1.isRuleCall)(assignment.terminal) && (0, ast_1.isParserRule)(assignment.terminal.rule.ref) && assignment.terminal.rule.ref.fragment) {
          accept("error", `Cannot use fragment rule '${assignment.terminal.rule.ref.name}' for assignment of property '${assignment.feature}'.`, { node: assignment, property: "terminal" });
        }
      }
      checkAssignmentTypes(assignment, accept) {
        if (!assignment.terminal) {
          return;
        }
        let firstType;
        const foundMixed = (0, ast_util_1.streamAllContents)(assignment.terminal).map((node) => ast2.isCrossReference(node) ? "ref" : "other").find((type) => {
          if (!firstType) {
            firstType = type;
            return false;
          }
          return type !== firstType;
        });
        if (foundMixed) {
          accept("error", this.createMixedTypeError(assignment.feature), {
            node: assignment,
            property: "terminal"
          });
        }
      }
      checkInterfacePropertyTypes(interfaceDecl, accept) {
        for (const attribute of interfaceDecl.attributes) {
          if (attribute.type) {
            const plainType = (0, declared_types_1.typeDefinitionToPropertyType)(attribute.type);
            const flattened = (0, plain_types_1.flattenPlainType)(plainType);
            let hasRef = false;
            let hasNonRef = false;
            for (const flat of flattened) {
              if ((0, plain_types_1.isPlainReferenceType)(flat)) {
                hasRef = true;
              } else if (!(0, plain_types_1.isPlainReferenceType)(flat)) {
                hasNonRef = true;
              }
            }
            if (hasRef && hasNonRef) {
              accept("error", this.createMixedTypeError(attribute.name), {
                node: attribute,
                property: "type"
              });
            }
          }
        }
      }
      createMixedTypeError(propName) {
        return `Mixing a cross-reference with other types is not supported. Consider splitting property "${propName}" into two or more different properties.`;
      }
      checkTerminalRuleReturnType(rule, accept) {
        var _a2;
        if (((_a2 = rule.type) === null || _a2 === void 0 ? void 0 : _a2.name) && !(0, internal_grammar_util_1.isPrimitiveType)(rule.type.name)) {
          accept("error", "Terminal rules can only return primitive types like 'string', 'boolean', 'number', 'Date' or 'bigint'.", { node: rule.type, property: "name" });
        }
      }
      checkRuleCallParameters(ruleCall, accept) {
        const rule = ruleCall.rule.ref;
        if (ast2.isParserRule(rule)) {
          const expected = rule.parameters.length;
          const given = ruleCall.arguments.length;
          if (expected !== given) {
            accept("error", `Rule '${rule.name}' expects ${expected} arguments, but got ${given}.`, { node: ruleCall });
          }
        } else if (ast2.isTerminalRule(rule) && ruleCall.arguments.length > 0) {
          accept("error", "Terminal rules do not accept any arguments", { node: ruleCall });
        }
      }
      checkCrossRefNameAssignment(reference, accept) {
        if (!reference.terminal && reference.type.ref && !(0, grammar_util_1.findNameAssignment)(reference.type.ref)) {
          accept("error", "Cannot infer terminal or data type rule for cross reference.", { node: reference, property: "type" });
        }
      }
      checkCrossRefTerminalType(reference, accept) {
        if (ast2.isRuleCall(reference.terminal) && ast2.isParserRule(reference.terminal.rule.ref) && !(0, internal_grammar_util_1.isDataTypeRule)(reference.terminal.rule.ref)) {
          accept("error", "Parser rules cannot be used for cross references.", { node: reference.terminal, property: "rule" });
        }
      }
      checkCrossRefType(reference, accept) {
        const issue = this.checkReferenceToRuleButNotType(reference === null || reference === void 0 ? void 0 : reference.type);
        if (issue) {
          accept("error", issue, { node: reference, property: "type" });
        }
      }
      checkCrossReferenceToTypeUnion(reference, accept) {
        if (ast2.isType(reference.type.ref) && ast2.isUnionType(reference.type.ref.type)) {
          const errors2 = checkTypeUnionContainsOnlyParseRules(reference.type.ref.type);
          if (errors2.length > 0) {
            accept("error", `Cross-reference on type union is only valid if all alternatives are AST nodes. ${errors2.join(", ")} ${errors2.length > 1 ? "are" : "is"} not ${errors2.length > 1 ? "" : "an "}AST node${errors2.length > 1 ? "s" : ""}.`, { node: reference, property: "type" });
          }
        }
      }
      checkFragmentsInTypes(type, accept) {
        var _a2, _b2;
        if (ast2.isParserRule((_a2 = type.typeRef) === null || _a2 === void 0 ? void 0 : _a2.ref) && ((_b2 = type.typeRef) === null || _b2 === void 0 ? void 0 : _b2.ref.fragment)) {
          accept("error", "Cannot use rule fragments in types.", { node: type, property: "typeRef" });
        }
      }
      checkReferenceTypeUnion(type, accept) {
        if (!ast2.isSimpleType(type.referenceType)) {
          accept("error", "Only direct rule references are allowed in reference types.", { node: type, property: "referenceType" });
        }
      }
      checkReferenceToRuleButNotType(type) {
        if (type && ast2.isParserRule(type.ref) && !(0, internal_grammar_util_1.isDataTypeRule)(type.ref) && (type.ref.returnType || type.ref.inferredType)) {
          const typeName2 = (0, internal_grammar_util_1.getTypeNameWithoutError)(type.ref);
          if (typeName2) {
            return `Use the rule type '${typeName2}' instead of the typed rule name '${type.ref.name}' for cross references.`;
          }
        }
        return void 0;
      }
      checkAssignmentWithFeatureName(assignment, accept) {
        if (assignment.feature === "name" && ast2.isCrossReference(assignment.terminal)) {
          accept("warning", 'The "name" property is not recommended for cross-references.', { node: assignment, property: "feature" });
        }
      }
    }
    exports.LangiumGrammarValidator = LangiumGrammarValidator;
    function isEmptyRule(rule) {
      return !rule.definition || !rule.definition.$cstNode || rule.definition.$cstNode.length === 0;
    }
    const reservedNames = /* @__PURE__ */ new Set([
      // Built-in objects, properties and methods
      // Collections
      "Array",
      "Int8Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Int16Array",
      "Uint16Array",
      "Int32Array",
      "Uint32Array",
      "Float32Array",
      "Float64Array",
      "BigInt64Array",
      "BigUint64Array",
      // Keyed collections
      "Map",
      "Set",
      "WeakMap",
      "WeakSet",
      // Errors
      "Error",
      "AggregateError",
      "EvalError",
      "InternalError",
      "RangeError",
      "ReferenceError",
      "SyntaxError",
      "TypeError",
      "URIError",
      // Primitives
      "BigInt",
      "RegExp",
      "Number",
      "Object",
      "Function",
      "Symbol",
      "String",
      // Math
      "Math",
      "NaN",
      "Infinity",
      "isFinite",
      "isNaN",
      // Structured data
      "Buffer",
      "ArrayBuffer",
      "SharedArrayBuffer",
      "Atomics",
      "DataView",
      "JSON",
      "globalThis",
      "decodeURIComponent",
      "decodeURI",
      "encodeURIComponent",
      "encodeURI",
      "parseInt",
      "parseFloat",
      // Control abstraction
      "Promise",
      "Generator",
      "GeneratorFunction",
      "AsyncFunction",
      "AsyncGenerator",
      "AsyncGeneratorFunction",
      // Reflection
      "Reflect",
      "Proxy",
      // Others
      "Date",
      "Intl",
      "eval",
      "undefined"
    ]);
    function checkTypeUnionContainsOnlyParseRules(type) {
      const errors2 = [];
      type.types.forEach((type2) => {
        var _a2;
        if (ast2.isSimpleType(type2)) {
          if ((_a2 = type2.typeRef) === null || _a2 === void 0 ? void 0 : _a2.ref) {
            if (ast2.isType(type2.typeRef.ref)) {
              if (ast2.isUnionType(type2.typeRef.ref.type)) {
                errors2.push(...checkTypeUnionContainsOnlyParseRules(type2.typeRef.ref.type));
              } else {
                errors2.push(type2.typeRef.ref.name);
              }
            }
          } else if (type2.stringType) {
            errors2.push(`"${type2.stringType}"`);
          } else if (type2.primitiveType) {
            errors2.push(type2.primitiveType);
          }
        }
      });
      return Array.from(new Set(errors2));
    }
  })(validator);
  return validator;
}
var grammarCodeActions = {};
var documentValidator = {};
var hasRequiredDocumentValidator;
function requireDocumentValidator() {
  if (hasRequiredDocumentValidator)
    return documentValidator;
  hasRequiredDocumentValidator = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DocumentValidator = exports.toDiagnosticSeverity = exports.getDiagnosticRange = exports.DefaultDocumentValidator = void 0;
    const vscode_languageserver_1 = requireMain();
    const grammar_util_1 = requireGrammarUtil();
    const ast_util_1 = requireAstUtil();
    const cst_util_1 = requireCstUtil();
    const promise_util_1 = requirePromiseUtil();
    class DefaultDocumentValidator {
      constructor(services2) {
        this.validationRegistry = services2.validation.ValidationRegistry;
        this.metadata = services2.LanguageMetaData;
      }
      async validateDocument(document2, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        const parseResult = document2.parseResult;
        const diagnostics = [];
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        for (const lexerError of parseResult.lexerErrors) {
          const diagnostic2 = {
            severity: vscode_languageserver_1.DiagnosticSeverity.Error,
            range: {
              start: {
                line: lexerError.line - 1,
                character: lexerError.column - 1
              },
              end: {
                line: lexerError.line - 1,
                character: lexerError.column + lexerError.length - 1
              }
            },
            message: lexerError.message,
            code: DocumentValidator.LexingError,
            source: this.getSource()
          };
          diagnostics.push(diagnostic2);
        }
        for (const parserError of parseResult.parserErrors) {
          let range2 = void 0;
          if (isNaN(parserError.token.startOffset)) {
            if ("previousToken" in parserError) {
              const token = parserError.previousToken;
              if (!isNaN(token.startOffset)) {
                const position = vscode_languageserver_1.Position.create(token.endLine - 1, token.endColumn);
                range2 = vscode_languageserver_1.Range.create(position, position);
              } else {
                range2 = vscode_languageserver_1.Range.create(0, 0, 0, 0);
              }
            }
          } else {
            range2 = (0, cst_util_1.tokenToRange)(parserError.token);
          }
          if (range2) {
            const diagnostic2 = {
              severity: vscode_languageserver_1.DiagnosticSeverity.Error,
              range: range2,
              message: parserError.message,
              code: DocumentValidator.ParsingError,
              source: this.getSource()
            };
            diagnostics.push(diagnostic2);
          }
        }
        for (const reference of document2.references) {
          const linkingError = reference.error;
          if (linkingError) {
            const data = {
              containerType: linkingError.container.$type,
              property: linkingError.property,
              refText: linkingError.reference.$refText
            };
            const info = {
              node: linkingError.container,
              property: linkingError.property,
              index: linkingError.index,
              code: DocumentValidator.LinkingError,
              data
            };
            diagnostics.push(this.toDiagnostic("error", linkingError.message, info));
          }
        }
        try {
          diagnostics.push(...await this.validateAst(parseResult.value, document2, cancelToken));
        } catch (err) {
          if ((0, promise_util_1.isOperationCancelled)(err)) {
            throw err;
          }
          console.error("An error occurred during validation:", err);
        }
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        return diagnostics;
      }
      async validateAst(rootNode, document2, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        const validationItems = [];
        const acceptor = (severity, message, info) => {
          validationItems.push(this.toDiagnostic(severity, message, info));
        };
        await Promise.all((0, ast_util_1.streamAst)(rootNode).map(async (node) => {
          await (0, promise_util_1.interruptAndCheck)(cancelToken);
          const checks2 = this.validationRegistry.getChecks(node.$type);
          for (const check of checks2) {
            await check(node, acceptor, cancelToken);
          }
        }));
        return validationItems;
      }
      toDiagnostic(severity, message, info) {
        return {
          message,
          range: getDiagnosticRange(info),
          severity: toDiagnosticSeverity(severity),
          code: info.code,
          codeDescription: info.codeDescription,
          tags: info.tags,
          relatedInformation: info.relatedInformation,
          data: info.data,
          source: this.getSource()
        };
      }
      getSource() {
        return this.metadata.languageId;
      }
    }
    exports.DefaultDocumentValidator = DefaultDocumentValidator;
    function getDiagnosticRange(info) {
      if (vscode_languageserver_1.Range.is(info.range)) {
        return info.range;
      }
      let cstNode;
      if (typeof info.property === "string") {
        cstNode = (0, grammar_util_1.findNodeForProperty)(info.node.$cstNode, info.property, info.index);
      } else if (typeof info.keyword === "string") {
        cstNode = (0, grammar_util_1.findNodeForKeyword)(info.node.$cstNode, info.keyword, info.index);
      }
      cstNode !== null && cstNode !== void 0 ? cstNode : cstNode = info.node.$cstNode;
      if (!cstNode) {
        return {
          start: { line: 0, character: 0 },
          end: { line: 0, character: 0 }
        };
      }
      return cstNode.range;
    }
    exports.getDiagnosticRange = getDiagnosticRange;
    function toDiagnosticSeverity(severity) {
      switch (severity) {
        case "error":
          return vscode_languageserver_1.DiagnosticSeverity.Error;
        case "warning":
          return vscode_languageserver_1.DiagnosticSeverity.Warning;
        case "info":
          return vscode_languageserver_1.DiagnosticSeverity.Information;
        case "hint":
          return vscode_languageserver_1.DiagnosticSeverity.Hint;
        default:
          throw new Error("Invalid diagnostic severity: " + severity);
      }
    }
    exports.toDiagnosticSeverity = toDiagnosticSeverity;
    var DocumentValidator;
    (function(DocumentValidator2) {
      DocumentValidator2.LexingError = "lexing-error";
      DocumentValidator2.ParsingError = "parsing-error";
      DocumentValidator2.LinkingError = "linking-error";
    })(DocumentValidator = exports.DocumentValidator || (exports.DocumentValidator = {}));
  })(documentValidator);
  return documentValidator;
}
var hasRequiredGrammarCodeActions;
function requireGrammarCodeActions() {
  if (hasRequiredGrammarCodeActions)
    return grammarCodeActions;
  hasRequiredGrammarCodeActions = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(grammarCodeActions, "__esModule", { value: true });
  grammarCodeActions.LangiumGrammarCodeActionProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const vscode_uri_1 = require$$1;
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const regex_util_1 = requireRegexUtil();
  const uri_util_1 = requireUriUtil();
  const document_validator_1 = requireDocumentValidator();
  const ast2 = __importStar(requireAst());
  const validator_1 = requireValidator();
  class LangiumGrammarCodeActionProvider {
    constructor(services2) {
      this.reflection = services2.shared.AstReflection;
      this.indexManager = services2.shared.workspace.IndexManager;
    }
    getCodeActions(document2, params) {
      const result = [];
      const acceptor = (ca) => ca && result.push(ca);
      for (const diagnostic2 of params.context.diagnostics) {
        this.createCodeActions(diagnostic2, document2, acceptor);
      }
      return result;
    }
    createCodeActions(diagnostic2, document2, accept) {
      switch (diagnostic2.code) {
        case validator_1.IssueCodes.GrammarNameUppercase:
        case validator_1.IssueCodes.RuleNameUppercase:
          accept(this.makeUpperCase(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.HiddenGrammarTokens:
          accept(this.fixHiddenTerminals(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.UseRegexTokens:
          accept(this.fixRegexTokens(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.EntryRuleTokenSyntax:
          accept(this.addEntryKeyword(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.CrossRefTokenSyntax:
          accept(this.fixCrossRefSyntax(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.UnnecessaryFileExtension:
          accept(this.fixUnnecessaryFileExtension(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.MissingReturns:
          accept(this.fixMissingReturns(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.InvalidInfers:
        case validator_1.IssueCodes.InvalidReturns:
          accept(this.fixInvalidReturnsInfers(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.MissingInfer:
          accept(this.fixMissingInfer(diagnostic2, document2));
          break;
        case validator_1.IssueCodes.SuperfluousInfer:
          accept(this.fixSuperfluousInfer(diagnostic2, document2));
          break;
        case document_validator_1.DocumentValidator.LinkingError: {
          const data = diagnostic2.data;
          if (data && data.containerType === "RuleCall" && data.property === "rule") {
            accept(this.addNewRule(diagnostic2, data, document2));
          }
          if (data) {
            this.lookInGlobalScope(diagnostic2, data, document2).forEach(accept);
          }
          break;
        }
      }
      return void 0;
    }
    /**
     * Adds missing returns for parser rule
     */
    fixMissingReturns(diagnostic2, document2) {
      const text = document2.textDocument.getText(diagnostic2.range);
      if (text) {
        return {
          title: `Add explicit return type for parser rule ${text}`,
          kind: vscode_languageserver_1.CodeActionKind.QuickFix,
          diagnostics: [diagnostic2],
          edit: {
            changes: {
              [document2.textDocument.uri]: [{
                range: diagnostic2.range,
                newText: `${text} returns ${text}`
                // suggestion adds missing 'return'
              }]
            }
          }
        };
      }
      return void 0;
    }
    fixInvalidReturnsInfers(diagnostic2, document2) {
      const data = diagnostic2.data;
      if (data) {
        const text = document2.textDocument.getText(data.range);
        return {
          title: `Correct ${text} usage`,
          kind: vscode_languageserver_1.CodeActionKind.QuickFix,
          diagnostics: [diagnostic2],
          edit: {
            changes: {
              [document2.textDocument.uri]: [{
                range: data.range,
                newText: text === "infers" ? "returns" : "infers"
              }]
            }
          }
        };
      }
      return void 0;
    }
    fixMissingInfer(diagnostic2, document2) {
      const data = diagnostic2.data;
      if (data) {
        return {
          title: "Correct 'infer' usage",
          kind: vscode_languageserver_1.CodeActionKind.QuickFix,
          diagnostics: [diagnostic2],
          edit: {
            changes: {
              [document2.textDocument.uri]: [{
                range: {
                  start: data.range.end,
                  end: data.range.end
                },
                newText: "infer "
              }]
            }
          }
        };
      }
      return void 0;
    }
    fixSuperfluousInfer(diagnostic2, document2) {
      if (diagnostic2.data) {
        return {
          title: "Remove the 'infer' keyword",
          kind: vscode_languageserver_1.CodeActionKind.QuickFix,
          diagnostics: [diagnostic2],
          edit: {
            changes: {
              [document2.textDocument.uri]: [{
                range: diagnostic2.data,
                newText: ""
              }]
            }
          }
        };
      }
      return void 0;
    }
    fixUnnecessaryFileExtension(diagnostic2, document2) {
      const end = Object.assign({}, diagnostic2.range.end);
      end.character -= 1;
      const start = Object.assign({}, end);
      start.character -= ".langium".length;
      return {
        title: "Remove file extension",
        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
        diagnostics: [diagnostic2],
        isPreferred: true,
        edit: {
          changes: {
            [document2.textDocument.uri]: [{
              range: {
                start,
                end
              },
              newText: ""
            }]
          }
        }
      };
    }
    makeUpperCase(diagnostic2, document2) {
      const range2 = {
        start: diagnostic2.range.start,
        end: {
          line: diagnostic2.range.start.line,
          character: diagnostic2.range.start.character + 1
        }
      };
      return {
        title: "First letter to upper case",
        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
        diagnostics: [diagnostic2],
        isPreferred: true,
        edit: {
          changes: {
            [document2.textDocument.uri]: [{
              range: range2,
              newText: document2.textDocument.getText(range2).toUpperCase()
            }]
          }
        }
      };
    }
    addEntryKeyword(diagnostic2, document2) {
      return {
        title: "Add entry keyword",
        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
        diagnostics: [diagnostic2],
        isPreferred: true,
        edit: {
          changes: {
            [document2.textDocument.uri]: [{
              range: { start: diagnostic2.range.start, end: diagnostic2.range.start },
              newText: "entry "
            }]
          }
        }
      };
    }
    fixRegexTokens(diagnostic2, document2) {
      const offset = document2.textDocument.offsetAt(diagnostic2.range.start);
      const rootCst = document2.parseResult.value.$cstNode;
      if (rootCst) {
        const cstNode = (0, cst_util_1.findLeafNodeAtOffset)(rootCst, offset);
        const container = (0, ast_util_1.getContainerOfType)(cstNode === null || cstNode === void 0 ? void 0 : cstNode.element, ast2.isCharacterRange);
        if (container && container.right && container.$cstNode) {
          const left = container.left.value;
          const right = container.right.value;
          return {
            title: "Refactor into regular expression",
            kind: vscode_languageserver_1.CodeActionKind.QuickFix,
            diagnostics: [diagnostic2],
            isPreferred: true,
            edit: {
              changes: {
                [document2.textDocument.uri]: [{
                  range: container.$cstNode.range,
                  newText: `/[${(0, regex_util_1.escapeRegExp)(left)}-${(0, regex_util_1.escapeRegExp)(right)}]/`
                }]
              }
            }
          };
        }
      }
      return void 0;
    }
    fixCrossRefSyntax(diagnostic2, document2) {
      return {
        title: "Replace '|' with ':'",
        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
        diagnostics: [diagnostic2],
        isPreferred: true,
        edit: {
          changes: {
            [document2.textDocument.uri]: [{
              range: diagnostic2.range,
              newText: ":"
            }]
          }
        }
      };
    }
    fixHiddenTerminals(diagnostic2, document2) {
      const grammar2 = document2.parseResult.value;
      const hiddenTokens = grammar2.hiddenTokens;
      const changes = [];
      const hiddenNode = (0, grammar_util_1.findNodeForProperty)(grammar2.$cstNode, "definesHiddenTokens");
      if (hiddenNode) {
        const start = hiddenNode.range.start;
        const offset = hiddenNode.offset;
        const end = grammar2.$cstNode.text.indexOf(")", offset) + 1;
        changes.push({
          newText: "",
          range: {
            start,
            end: document2.textDocument.positionAt(end)
          }
        });
      }
      for (const terminal of hiddenTokens) {
        const ref = terminal.ref;
        if (ref && ast2.isTerminalRule(ref) && !ref.hidden && ref.$cstNode) {
          const start = ref.$cstNode.range.start;
          changes.push({
            newText: "hidden ",
            range: {
              start,
              end: start
            }
          });
        }
      }
      return {
        title: "Fix hidden terminals",
        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
        diagnostics: [diagnostic2],
        isPreferred: true,
        edit: {
          changes: {
            [document2.textDocument.uri]: changes
          }
        }
      };
    }
    addNewRule(diagnostic2, data, document2) {
      const offset = document2.textDocument.offsetAt(diagnostic2.range.start);
      const rootCst = document2.parseResult.value.$cstNode;
      if (rootCst) {
        const cstNode = (0, cst_util_1.findLeafNodeAtOffset)(rootCst, offset);
        const container = (0, ast_util_1.getContainerOfType)(cstNode === null || cstNode === void 0 ? void 0 : cstNode.element, ast2.isParserRule);
        if (container && container.$cstNode) {
          return {
            title: `Add new rule '${data.refText}'`,
            kind: vscode_languageserver_1.CodeActionKind.QuickFix,
            diagnostics: [diagnostic2],
            isPreferred: false,
            edit: {
              changes: {
                [document2.textDocument.uri]: [{
                  range: {
                    start: container.$cstNode.range.end,
                    end: container.$cstNode.range.end
                  },
                  newText: "\n\n" + data.refText + ":\n    /* TODO implement rule */ {infer " + data.refText + "};"
                }]
              }
            }
          };
        }
      }
      return void 0;
    }
    lookInGlobalScope(diagnostic2, data, document2) {
      var _a2, _b2;
      const refInfo = {
        container: {
          $type: data.containerType
        },
        property: data.property,
        reference: {
          $refText: data.refText
        }
      };
      const referenceType = this.reflection.getReferenceType(refInfo);
      const candidates = this.indexManager.allElements(referenceType).filter((e) => e.name === data.refText);
      const result = [];
      let shortestPathIndex = -1;
      let shortestPathLength = -1;
      for (const candidate of candidates) {
        if ((0, uri_util_1.equalURI)(candidate.documentUri, document2.uri)) {
          continue;
        }
        const importPath = getRelativeImport(document2.uri, candidate.documentUri);
        let position;
        let suffix = "";
        const grammar2 = document2.parseResult.value;
        const nextImport = grammar2.imports.find((imp) => imp.path && importPath < imp.path);
        if (nextImport) {
          position = (_a2 = nextImport.$cstNode) === null || _a2 === void 0 ? void 0 : _a2.range.start;
        } else if (grammar2.imports.length > 0) {
          const rangeEnd2 = grammar2.imports[grammar2.imports.length - 1].$cstNode.range.end;
          if (rangeEnd2) {
            position = { line: rangeEnd2.line + 1, character: 0 };
          }
        } else if (grammar2.rules.length > 0) {
          position = (_b2 = grammar2.rules[0].$cstNode) === null || _b2 === void 0 ? void 0 : _b2.range.start;
          suffix = "\n";
        }
        if (position) {
          if (shortestPathIndex < 0 || importPath.length < shortestPathLength) {
            shortestPathIndex = result.length;
            shortestPathLength = importPath.length;
          }
          result.push({
            title: `Add import to '${importPath}'`,
            kind: vscode_languageserver_1.CodeActionKind.QuickFix,
            diagnostics: [diagnostic2],
            isPreferred: false,
            edit: {
              changes: {
                [document2.textDocument.uri]: [{
                  range: {
                    start: position,
                    end: position
                  },
                  newText: `import '${importPath}'
${suffix}`
                }]
              }
            }
          });
        }
      }
      if (shortestPathIndex >= 0) {
        result[shortestPathIndex].isPreferred = true;
      }
      return result;
    }
  }
  grammarCodeActions.LangiumGrammarCodeActionProvider = LangiumGrammarCodeActionProvider;
  function getRelativeImport(source, target) {
    const sourceDir = vscode_uri_1.Utils.dirname(source);
    let relativePath = (0, uri_util_1.relativeURI)(sourceDir, target);
    if (!relativePath.startsWith("./") && !relativePath.startsWith("../")) {
      relativePath = "./" + relativePath;
    }
    if (relativePath.endsWith(".langium")) {
      relativePath = relativePath.substring(0, relativePath.length - ".langium".length);
    }
    return relativePath;
  }
  return grammarCodeActions;
}
var grammarFoldingRanges = {};
var foldingRangeProvider = {};
var hasRequiredFoldingRangeProvider;
function requireFoldingRangeProvider() {
  if (hasRequiredFoldingRangeProvider)
    return foldingRangeProvider;
  hasRequiredFoldingRangeProvider = 1;
  Object.defineProperty(foldingRangeProvider, "__esModule", { value: true });
  foldingRangeProvider.DefaultFoldingRangeProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  class DefaultFoldingRangeProvider {
    constructor(services2) {
      this.commentNames = services2.parser.GrammarConfig.multilineCommentRules;
    }
    getFoldingRanges(document2) {
      const foldings = [];
      const acceptor = (foldingRange) => foldings.push(foldingRange);
      this.collectFolding(document2, acceptor);
      return foldings;
    }
    collectFolding(document2, acceptor) {
      var _a2;
      const root = (_a2 = document2.parseResult) === null || _a2 === void 0 ? void 0 : _a2.value;
      if (root) {
        if (this.shouldProcessContent(root)) {
          const treeIterator = (0, ast_util_1.streamAllContents)(root).iterator();
          let result;
          do {
            result = treeIterator.next();
            if (!result.done) {
              const node = result.value;
              if (this.shouldProcess(node)) {
                this.collectObjectFolding(document2, node, acceptor);
              }
              if (!this.shouldProcessContent(node)) {
                treeIterator.prune();
              }
            }
          } while (!result.done);
        }
        this.collectCommentFolding(document2, root, acceptor);
      }
    }
    /**
     * Template method to determine whether the specified `AstNode` should be handled by the folding range provider.
     * Returns true by default for all nodes. Returning false only ignores the specified node and not its content.
     * To ignore the content of a node use `shouldProcessContent`.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    shouldProcess(node) {
      return true;
    }
    /**
     * Template method to determine whether the content/children of the specified `AstNode` should be handled by the folding range provider.
     * Returns true by default for all nodes. Returning false ignores _all_ content of this node, even transitive ones.
     * For more precise control over foldings use the `shouldProcess` method.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    shouldProcessContent(node) {
      return true;
    }
    collectObjectFolding(document2, node, acceptor) {
      const cstNode = node.$cstNode;
      if (cstNode) {
        const foldingRange = this.toFoldingRange(document2, cstNode);
        if (foldingRange) {
          acceptor(foldingRange);
        }
      }
    }
    collectCommentFolding(document2, node, acceptor) {
      const cstNode = node.$cstNode;
      if (cstNode) {
        for (const node2 of (0, cst_util_1.flattenCst)(cstNode)) {
          if (this.commentNames.includes(node2.tokenType.name)) {
            const foldingRange = this.toFoldingRange(document2, node2, vscode_languageserver_1.FoldingRangeKind.Comment);
            if (foldingRange) {
              acceptor(foldingRange);
            }
          }
        }
      }
    }
    toFoldingRange(document2, node, kind) {
      const range2 = node.range;
      const start = range2.start;
      let end = range2.end;
      if (end.line - start.line < 2) {
        return void 0;
      }
      if (!this.includeLastFoldingLine(node, kind)) {
        end = document2.textDocument.positionAt(document2.textDocument.offsetAt({ line: end.line, character: 0 }) - 1);
      }
      return vscode_languageserver_1.FoldingRange.create(start.line, end.line, start.character, end.character, kind);
    }
    /**
     * Template method to determine whether the folding range for this cst node should include its last line.
     * Returns false by default for ast nodes which end in braces and for comments.
     */
    includeLastFoldingLine(node, kind) {
      if (kind === vscode_languageserver_1.FoldingRangeKind.Comment) {
        return false;
      }
      const nodeText = node.text;
      const endChar = nodeText.charAt(nodeText.length - 1);
      if (endChar === "}" || endChar === ")" || endChar === "]") {
        return false;
      }
      return true;
    }
  }
  foldingRangeProvider.DefaultFoldingRangeProvider = DefaultFoldingRangeProvider;
  return foldingRangeProvider;
}
var hasRequiredGrammarFoldingRanges;
function requireGrammarFoldingRanges() {
  if (hasRequiredGrammarFoldingRanges)
    return grammarFoldingRanges;
  hasRequiredGrammarFoldingRanges = 1;
  Object.defineProperty(grammarFoldingRanges, "__esModule", { value: true });
  grammarFoldingRanges.LangiumGrammarFoldingRangeProvider = void 0;
  const folding_range_provider_1 = requireFoldingRangeProvider();
  const ast_1 = requireAst();
  class LangiumGrammarFoldingRangeProvider extends folding_range_provider_1.DefaultFoldingRangeProvider {
    shouldProcessContent(node) {
      return !(0, ast_1.isParserRule)(node);
    }
  }
  grammarFoldingRanges.LangiumGrammarFoldingRangeProvider = LangiumGrammarFoldingRangeProvider;
  return grammarFoldingRanges;
}
var grammarFormatter = {};
var formatter = {};
var hasRequiredFormatter;
function requireFormatter() {
  if (hasRequiredFormatter)
    return formatter;
  hasRequiredFormatter = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Formatting = exports.FormattingRegion = exports.DefaultNodeFormatter = exports.AbstractFormatter = void 0;
    const grammar_util_1 = requireGrammarUtil();
    const syntax_tree_1 = requireSyntaxTree();
    const ast_util_1 = requireAstUtil();
    const cst_util_1 = requireCstUtil();
    const stream_1 = requireStream();
    class AbstractFormatter {
      constructor() {
        this.collector = () => {
        };
      }
      /**
       * Creates a formatter scoped to the supplied AST node.
       * Allows to define fine-grained formatting rules for elements.
       *
       * Example usage:
       *
       * ```ts
       * export class CustomFormatter extends AbstractFormatter {
       *   protected override format(node: AstNode): void {
       *     if (isPerson(node)) {
       *       const formatter = this.getNodeFormatter(node);
       *       formatter.property('name').prepend(Formatting.oneSpace());
       *     }
       *   }
       * }
       * ```
       * @param node The specific node the formatter should be scoped to. Every call to properties or keywords will only select those which belong to the supplied AST node.
       */
      getNodeFormatter(node) {
        return new DefaultNodeFormatter(node, this.collector);
      }
      formatDocument(document2, params) {
        const pr = document2.parseResult;
        if (pr.lexerErrors.length === 0 && pr.parserErrors.length === 0) {
          return this.doDocumentFormat(document2, params.options);
        } else {
          return [];
        }
      }
      /**
       * Returns whether a range for a given document is error free, i.e. safe to format
       *
       * @param document Document to inspect for lexer & parser errors that may produce an unsafe range
       * @param range Formatting range to check for safety
       * @returns Whether the given formatting range does not overlap with or follow any regions with an error
       */
      isFormatRangeErrorFree(document2, range2) {
        const pr = document2.parseResult;
        if (pr.lexerErrors.length || pr.parserErrors.length) {
          const earliestErrLine = Math.min(...pr.lexerErrors.map((e) => {
            var _a2;
            return (_a2 = e.line) !== null && _a2 !== void 0 ? _a2 : Number.MAX_VALUE;
          }), ...pr.parserErrors.map((e) => {
            var _a2;
            return (_a2 = e.token.startLine) !== null && _a2 !== void 0 ? _a2 : Number.MAX_VALUE;
          }));
          return earliestErrLine > range2.end.line;
        } else {
          return true;
        }
      }
      formatDocumentRange(document2, params) {
        if (this.isFormatRangeErrorFree(document2, params.range)) {
          return this.doDocumentFormat(document2, params.options, params.range);
        } else {
          return [];
        }
      }
      formatDocumentOnType(document2, params) {
        const range2 = {
          start: {
            character: 0,
            line: params.position.line
          },
          end: params.position
        };
        if (this.isFormatRangeErrorFree(document2, range2)) {
          return this.doDocumentFormat(document2, params.options, range2);
        } else {
          return [];
        }
      }
      get formatOnTypeOptions() {
        return void 0;
      }
      doDocumentFormat(document2, options, range2) {
        const map2 = /* @__PURE__ */ new Map();
        const collector = (node, mode, formatting) => {
          var _a2, _b2;
          const key = this.nodeModeToKey(node, mode);
          const existing = map2.get(key);
          const priority = (_a2 = formatting.options.priority) !== null && _a2 !== void 0 ? _a2 : 0;
          const existingPriority = (_b2 = existing === null || existing === void 0 ? void 0 : existing.options.priority) !== null && _b2 !== void 0 ? _b2 : 0;
          if (!existing || existingPriority <= priority) {
            map2.set(key, formatting);
          }
        };
        this.collector = collector;
        this.iterateAstFormatting(document2, range2);
        const edits = this.iterateCstFormatting(document2, map2, options, range2);
        return this.avoidOverlappingEdits(document2.textDocument, edits);
      }
      avoidOverlappingEdits(textDocument, textEdits) {
        const edits = [];
        for (const edit of textEdits) {
          const last2 = edits[edits.length - 1];
          if (last2) {
            const currentStart = textDocument.offsetAt(edit.range.start);
            const lastEnd = textDocument.offsetAt(last2.range.end);
            if (currentStart < lastEnd) {
              edits.pop();
            }
          }
          edits.push(edit);
        }
        return edits;
      }
      iterateAstFormatting(document2, range2) {
        const root = document2.parseResult.value;
        this.format(root);
        const treeIterator = (0, ast_util_1.streamAllContents)(root).iterator();
        let result;
        do {
          result = treeIterator.next();
          if (!result.done) {
            const node = result.value;
            const inside2 = this.insideRange(node.$cstNode.range, range2);
            if (inside2) {
              this.format(node);
            } else {
              treeIterator.prune();
            }
          }
        } while (!result.done);
      }
      nodeModeToKey(node, mode) {
        return `${node.offset}:${node.end}:${mode}`;
      }
      insideRange(inside2, total) {
        if (!total) {
          return true;
        }
        if (inside2.start.line <= total.start.line && inside2.end.line >= total.end.line || inside2.start.line >= total.start.line && inside2.end.line <= total.end.line || inside2.start.line <= total.end.line && inside2.end.line >= total.end.line) {
          return true;
        }
        return false;
      }
      isNecessary(edit, document2) {
        const existing = document2.getText(edit.range);
        return existing !== edit.newText;
      }
      iterateCstFormatting(document2, formattings, options, range2) {
        const context = {
          indentation: 0,
          options,
          document: document2.textDocument
        };
        const edits = [];
        const cstTreeStream = this.iterateCstTree(document2, context);
        const iterator = cstTreeStream.iterator();
        let lastNode;
        let result;
        do {
          result = iterator.next();
          if (!result.done) {
            const node = result.value;
            const isLeaf = (0, syntax_tree_1.isLeafCstNode)(node);
            const prependKey = this.nodeModeToKey(node, "prepend");
            const prependFormatting = formattings.get(prependKey);
            formattings.delete(prependKey);
            if (prependFormatting) {
              const nodeEdits = this.createTextEdit(lastNode, node, prependFormatting, context);
              for (const edit of nodeEdits) {
                if (edit && this.insideRange(edit.range, range2) && this.isNecessary(edit, document2.textDocument)) {
                  edits.push(edit);
                }
              }
            }
            const appendKey = this.nodeModeToKey(node, "append");
            const appendFormatting = formattings.get(appendKey);
            formattings.delete(appendKey);
            if (appendFormatting) {
              const nextNode = (0, cst_util_1.getNextNode)(node);
              if (nextNode) {
                const nodeEdits = this.createTextEdit(node, nextNode, appendFormatting, context);
                for (const edit of nodeEdits) {
                  if (edit && this.insideRange(edit.range, range2) && this.isNecessary(edit, document2.textDocument)) {
                    edits.push(edit);
                  }
                }
              }
            }
            if (!prependFormatting && node.hidden) {
              const hiddenEdits = this.createHiddenTextEdits(lastNode, node, void 0, context);
              for (const edit of hiddenEdits) {
                if (edit && this.insideRange(edit.range, range2) && this.isNecessary(edit, document2.textDocument)) {
                  edits.push(edit);
                }
              }
            }
            if (isLeaf) {
              lastNode = node;
            }
          }
        } while (!result.done);
        return edits;
      }
      createHiddenTextEdits(previous, hidden, formatting, context) {
        var _a2;
        const startLine = hidden.range.start.line;
        if (previous && previous.range.end.line === startLine) {
          return [];
        }
        const edits = [];
        const startRange = {
          start: {
            character: 0,
            line: startLine
          },
          end: hidden.range.start
        };
        const hiddenStartText = context.document.getText(startRange);
        const move = this.findFittingMove(startRange, (_a2 = formatting === null || formatting === void 0 ? void 0 : formatting.moves) !== null && _a2 !== void 0 ? _a2 : [], context);
        const hiddenStartChar = this.getExistingIndentationCharacterCount(hiddenStartText, context);
        const expectedStartChar = this.getIndentationCharacterCount(context, move);
        const characterIncrease = expectedStartChar - hiddenStartChar;
        if (characterIncrease === 0) {
          return [];
        }
        let newText = "";
        if (characterIncrease > 0) {
          newText = (context.options.insertSpaces ? " " : "	").repeat(characterIncrease);
        }
        const lines = hidden.text.split("\n");
        lines[0] = hiddenStartText + lines[0];
        for (let i = 0; i < lines.length; i++) {
          const currentLine = startLine + i;
          const pos = {
            character: 0,
            line: currentLine
          };
          if (characterIncrease > 0) {
            edits.push({
              newText,
              range: {
                start: pos,
                end: pos
              }
            });
          } else {
            const currentText = lines[i];
            let j2 = 0;
            for (; j2 < currentText.length; j2++) {
              const char = currentText.charAt(j2);
              if (char !== " " && char !== "	") {
                break;
              }
            }
            edits.push({
              newText: "",
              range: {
                start: pos,
                end: {
                  line: currentLine,
                  // Remove as much whitespace characters as necessary
                  // In some cases `characterIncrease` is actually larger than the amount of whitespace available
                  // So we simply remove all whitespace characters `j`
                  character: Math.min(j2, Math.abs(characterIncrease))
                }
              }
            });
          }
        }
        return edits;
      }
      getExistingIndentationCharacterCount(text, context) {
        const tabWhitespace = " ".repeat(context.options.tabSize);
        const normalized = context.options.insertSpaces ? text.replaceAll("	", tabWhitespace) : text.replaceAll(tabWhitespace, "	");
        return normalized.length;
      }
      getIndentationCharacterCount(context, formattingMove) {
        let indentation = context.indentation;
        if (formattingMove && formattingMove.tabs) {
          indentation += formattingMove.tabs;
        }
        return (context.options.insertSpaces ? context.options.tabSize : 1) * indentation;
      }
      createTextEdit(a2, b2, formatting, context) {
        var _a2;
        if (b2.hidden) {
          return this.createHiddenTextEdits(a2, b2, formatting, context);
        }
        const betweenRange = {
          start: (_a2 = a2 === null || a2 === void 0 ? void 0 : a2.range.end) !== null && _a2 !== void 0 ? _a2 : {
            character: 0,
            line: 0
          },
          end: b2.range.start
        };
        const move = this.findFittingMove(betweenRange, formatting.moves, context);
        if (!move) {
          return [];
        }
        const chars = move.characters;
        const lines = move.lines;
        const tabs = move.tabs;
        const existingIndentation = context.indentation;
        context.indentation += tabs !== null && tabs !== void 0 ? tabs : 0;
        const edits = [];
        if (chars !== void 0) {
          edits.push(this.createSpaceTextEdit(betweenRange, chars, formatting.options));
        } else if (lines !== void 0) {
          edits.push(this.createLineTextEdit(betweenRange, lines, context, formatting.options));
        } else if (tabs !== void 0) {
          edits.push(this.createTabTextEdit(betweenRange, Boolean(a2), context));
        }
        if ((0, syntax_tree_1.isLeafCstNode)(b2)) {
          context.indentation = existingIndentation;
        }
        return edits;
      }
      createSpaceTextEdit(range2, spaces2, options) {
        if (range2.start.line === range2.end.line) {
          const existingSpaces = range2.end.character - range2.start.character;
          spaces2 = this.fitIntoOptions(spaces2, existingSpaces, options);
        }
        const newText = " ".repeat(spaces2);
        return {
          newText,
          range: range2
        };
      }
      createLineTextEdit(range2, lines, context, options) {
        const existingLines = range2.end.line - range2.start.line;
        lines = this.fitIntoOptions(lines, existingLines, options);
        const indent = context.options.insertSpaces ? " ".repeat(context.options.tabSize) : "	";
        const nodeIndent = indent.repeat(context.indentation);
        const newText = `${"\n".repeat(lines)}${nodeIndent}`;
        return {
          newText,
          range: range2
        };
      }
      createTabTextEdit(range2, hasPrevious, context) {
        const indent = context.options.insertSpaces ? " ".repeat(context.options.tabSize) : "	";
        const nodeIndent = indent.repeat(context.indentation);
        const minimumLines = hasPrevious ? 1 : 0;
        const lines = Math.max(range2.end.line - range2.start.line, minimumLines);
        const newText = `${"\n".repeat(lines)}${nodeIndent}`;
        return {
          newText,
          range: range2
        };
      }
      fitIntoOptions(value, existing, options) {
        if (options.allowMore) {
          value = Math.max(existing, value);
        } else if (options.allowLess) {
          value = Math.min(existing, value);
        }
        return value;
      }
      findFittingMove(range2, moves, _context) {
        if (moves.length === 0) {
          return void 0;
        } else if (moves.length === 1) {
          return moves[0];
        }
        const existingLines = range2.end.line - range2.start.line;
        for (const move of moves) {
          if (move.lines !== void 0 && existingLines <= move.lines) {
            return move;
          } else if (move.lines === void 0 && existingLines === 0) {
            return move;
          }
        }
        return moves[moves.length - 1];
      }
      iterateCstTree(document2, context) {
        const root = document2.parseResult.value;
        const rootCst = root.$cstNode;
        if (!rootCst) {
          return stream_1.EMPTY_STREAM;
        }
        return new stream_1.TreeStreamImpl(rootCst, (node) => this.iterateCst(node, context));
      }
      iterateCst(node, context) {
        if (!(0, syntax_tree_1.isCompositeCstNode)(node)) {
          return stream_1.EMPTY_STREAM;
        }
        const initial = context.indentation;
        return new stream_1.StreamImpl(() => ({ index: 0 }), (state) => {
          if (state.index < node.children.length) {
            return { done: false, value: node.children[state.index++] };
          } else {
            context.indentation = initial;
            return stream_1.DONE_RESULT;
          }
        });
      }
    }
    exports.AbstractFormatter = AbstractFormatter;
    class DefaultNodeFormatter {
      constructor(astNode, collector) {
        this.astNode = astNode;
        this.collector = collector;
      }
      node(node) {
        return new FormattingRegion(node.$cstNode ? [node.$cstNode] : [], this.collector);
      }
      nodes(...nodes) {
        const cstNodes = [];
        for (const node of nodes) {
          if (node.$cstNode) {
            cstNodes.push(node.$cstNode);
          }
        }
        return new FormattingRegion(cstNodes, this.collector);
      }
      property(feature, index) {
        const cstNode = (0, grammar_util_1.findNodeForProperty)(this.astNode.$cstNode, feature, index);
        return new FormattingRegion(cstNode ? [cstNode] : [], this.collector);
      }
      properties(...features) {
        const nodes = [];
        for (const feature of features) {
          const cstNodes = (0, grammar_util_1.findNodesForProperty)(this.astNode.$cstNode, feature);
          nodes.push(...cstNodes);
        }
        return new FormattingRegion(nodes, this.collector);
      }
      keyword(keyword2, index) {
        const cstNode = (0, grammar_util_1.findNodeForKeyword)(this.astNode.$cstNode, keyword2, index);
        return new FormattingRegion(cstNode ? [cstNode] : [], this.collector);
      }
      keywords(...keywords2) {
        const nodes = [];
        for (const feature of keywords2) {
          const cstNodes = (0, grammar_util_1.findNodesForKeyword)(this.astNode.$cstNode, feature);
          nodes.push(...cstNodes);
        }
        return new FormattingRegion(nodes, this.collector);
      }
      cst(nodes) {
        return new FormattingRegion([...nodes], this.collector);
      }
      interior(start, end) {
        const startNodes = start.nodes;
        const endNodes = end.nodes;
        if (startNodes.length !== 1 || endNodes.length !== 1) {
          return new FormattingRegion([], this.collector);
        }
        let startNode = startNodes[0];
        let endNode = endNodes[0];
        if (startNode.offset > endNode.offset) {
          const intermediate = startNode;
          startNode = endNode;
          endNode = intermediate;
        }
        return new FormattingRegion((0, cst_util_1.getInteriorNodes)(startNode, endNode), this.collector);
      }
    }
    exports.DefaultNodeFormatter = DefaultNodeFormatter;
    class FormattingRegion {
      constructor(nodes, collector) {
        this.nodes = nodes;
        this.collector = collector;
      }
      /**
       * Prepends the specified formatting to all nodes of this region.
       */
      prepend(formatting) {
        for (const node of this.nodes) {
          this.collector(node, "prepend", formatting);
        }
        return this;
      }
      /**
       * Appends the specified formatting to all nodes of this region.
       */
      append(formatting) {
        for (const node of this.nodes) {
          this.collector(node, "append", formatting);
        }
        return this;
      }
      /**
       * Sorrounds all nodes of this region with the specified formatting.
       * Functionally the same as invoking `prepend` and `append` with the same formatting.
       */
      surround(formatting) {
        for (const node of this.nodes) {
          this.collector(node, "prepend", formatting);
          this.collector(node, "append", formatting);
        }
        return this;
      }
      /**
       * Creates a copy of this region with a slice of the selected nodes.
       * For both start and end, a negative index can be used to indicate an offset from the end of the array.
       * For example, -2 refers to the second to last element of the array.
       * @param start The beginning index of the specified portion of the region. If start is undefined, then the slice begins at index 0.
       * @param end The end index of the specified portion of the region. This is exclusive of the element at the index 'end'. If end is undefined, then the slice extends to the end of the region.
       */
      slice(start, end) {
        return new FormattingRegion(this.nodes.slice(start, end), this.collector);
      }
    }
    exports.FormattingRegion = FormattingRegion;
    (function(Formatting) {
      function fit(...formattings) {
        return {
          options: {},
          moves: formattings.flatMap((e) => e.moves).sort(compareMoves)
        };
      }
      Formatting.fit = fit;
      function noSpace(options) {
        return spaces2(0, options);
      }
      Formatting.noSpace = noSpace;
      function oneSpace(options) {
        return spaces2(1, options);
      }
      Formatting.oneSpace = oneSpace;
      function spaces2(count, options) {
        return {
          options: options !== null && options !== void 0 ? options : {},
          moves: [{
            characters: count
          }]
        };
      }
      Formatting.spaces = spaces2;
      function newLine(options) {
        return newLines(1, options);
      }
      Formatting.newLine = newLine;
      function newLines(count, options) {
        return {
          options: options !== null && options !== void 0 ? options : {},
          moves: [{
            lines: count
          }]
        };
      }
      Formatting.newLines = newLines;
      function indent(options) {
        return {
          options: options !== null && options !== void 0 ? options : {},
          moves: [{
            tabs: 1,
            lines: 1
          }]
        };
      }
      Formatting.indent = indent;
      function noIndent(options) {
        return {
          options: options !== null && options !== void 0 ? options : {},
          moves: [{
            tabs: 0
          }]
        };
      }
      Formatting.noIndent = noIndent;
      function compareMoves(a2, b2) {
        var _a2, _b2, _c2, _d, _e, _f;
        const aLines = (_a2 = a2.lines) !== null && _a2 !== void 0 ? _a2 : 0;
        const bLines = (_b2 = b2.lines) !== null && _b2 !== void 0 ? _b2 : 0;
        const aTabs = (_c2 = a2.tabs) !== null && _c2 !== void 0 ? _c2 : 0;
        const bTabs = (_d = b2.tabs) !== null && _d !== void 0 ? _d : 0;
        const aSpaces = (_e = a2.characters) !== null && _e !== void 0 ? _e : 0;
        const bSpaces = (_f = b2.characters) !== null && _f !== void 0 ? _f : 0;
        if (aLines < bLines) {
          return -1;
        } else if (aLines > bLines) {
          return 1;
        } else if (aTabs < bTabs) {
          return -1;
        } else if (aTabs > bTabs) {
          return 1;
        } else if (aSpaces < bSpaces) {
          return -1;
        } else if (aSpaces > bSpaces) {
          return 1;
        } else {
          return 0;
        }
      }
    })(exports.Formatting || (exports.Formatting = {}));
  })(formatter);
  return formatter;
}
var hasRequiredGrammarFormatter;
function requireGrammarFormatter() {
  if (hasRequiredGrammarFormatter)
    return grammarFormatter;
  hasRequiredGrammarFormatter = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(grammarFormatter, "__esModule", { value: true });
  grammarFormatter.LangiumGrammarFormatter = void 0;
  const formatter_1 = requireFormatter();
  const ast2 = __importStar(requireAst());
  class LangiumGrammarFormatter extends formatter_1.AbstractFormatter {
    format(node) {
      if (ast2.isCrossReference(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.properties("type", "terminal").surround(formatter_1.Formatting.noSpace());
      } else if (ast2.isParserRule(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.keywords("entry", "fragment", "returns").append(formatter_1.Formatting.oneSpace());
        if ((node.inferredType || node.returnType || node.dataType) && node.parameters.length === 0) {
          formatter2.property("name").append(formatter_1.Formatting.oneSpace());
        } else {
          formatter2.property("name").append(formatter_1.Formatting.noSpace());
        }
        formatter2.properties("parameters").append(formatter_1.Formatting.noSpace());
        formatter2.keywords(",").append(formatter_1.Formatting.oneSpace());
        formatter2.keywords("<").append(formatter_1.Formatting.noSpace());
        const semicolon2 = formatter2.keyword(";");
        const colon2 = formatter2.keyword(":");
        colon2.prepend(formatter_1.Formatting.noSpace());
        formatter2.interior(colon2, semicolon2).prepend(formatter_1.Formatting.indent());
        semicolon2.prepend(formatter_1.Formatting.fit(formatter_1.Formatting.noSpace(), formatter_1.Formatting.newLine()));
        formatter2.node(node).prepend(formatter_1.Formatting.noIndent());
      } else if (ast2.isTerminalRule(node)) {
        const formatter2 = this.getNodeFormatter(node);
        if (node.type) {
          formatter2.property("name").append(formatter_1.Formatting.oneSpace());
          formatter2.keyword("returns").append(formatter_1.Formatting.oneSpace());
        }
        formatter2.keywords("hidden", "terminal", "fragment").append(formatter_1.Formatting.oneSpace());
        formatter2.keyword(":").prepend(formatter_1.Formatting.noSpace());
        formatter2.keyword(";").prepend(formatter_1.Formatting.fit(formatter_1.Formatting.noSpace(), formatter_1.Formatting.newLine()));
        formatter2.node(node).prepend(formatter_1.Formatting.noIndent());
      } else if (ast2.isAction(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.keyword("{").append(formatter_1.Formatting.noSpace());
        formatter2.keywords(".", "+=", "=").surround(formatter_1.Formatting.noSpace());
        formatter2.keyword("}").prepend(formatter_1.Formatting.noSpace());
      } else if (ast2.isInferredType(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.keywords("infer", "infers").append(formatter_1.Formatting.oneSpace());
      } else if (ast2.isAssignment(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.keywords("=", "+=", "?=").surround(formatter_1.Formatting.noSpace());
      } else if (ast2.isRuleCall(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.keyword("<").surround(formatter_1.Formatting.noSpace());
        formatter2.keyword(",").append(formatter_1.Formatting.oneSpace());
        formatter2.properties("arguments").append(formatter_1.Formatting.noSpace());
      }
      if (ast2.isAbstractElement(node)) {
        const formatter2 = this.getNodeFormatter(node);
        formatter2.property("cardinality").prepend(formatter_1.Formatting.noSpace());
      }
    }
  }
  grammarFormatter.LangiumGrammarFormatter = LangiumGrammarFormatter;
  return grammarFormatter;
}
var grammarSemanticTokens = {};
var semanticTokenProvider = {};
var hasRequiredSemanticTokenProvider;
function requireSemanticTokenProvider() {
  if (hasRequiredSemanticTokenProvider)
    return semanticTokenProvider;
  hasRequiredSemanticTokenProvider = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SemanticTokensDecoder = exports.AbstractSemanticTokenProvider = exports.SemanticTokensBuilder = exports.DefaultSemanticTokenOptions = exports.AllSemanticTokenModifiers = exports.AllSemanticTokenTypes = void 0;
    const vscode_languageserver_1 = requireMain();
    const grammar_util_1 = requireGrammarUtil();
    const ast_util_1 = requireAstUtil();
    const promise_util_1 = requirePromiseUtil();
    const cst_util_1 = requireCstUtil();
    exports.AllSemanticTokenTypes = {
      [vscode_languageserver_1.SemanticTokenTypes.class]: 0,
      [vscode_languageserver_1.SemanticTokenTypes.comment]: 1,
      [vscode_languageserver_1.SemanticTokenTypes.enum]: 2,
      [vscode_languageserver_1.SemanticTokenTypes.enumMember]: 3,
      [vscode_languageserver_1.SemanticTokenTypes.event]: 4,
      [vscode_languageserver_1.SemanticTokenTypes.function]: 5,
      [vscode_languageserver_1.SemanticTokenTypes.interface]: 6,
      [vscode_languageserver_1.SemanticTokenTypes.keyword]: 7,
      [vscode_languageserver_1.SemanticTokenTypes.macro]: 8,
      [vscode_languageserver_1.SemanticTokenTypes.method]: 9,
      [vscode_languageserver_1.SemanticTokenTypes.modifier]: 10,
      [vscode_languageserver_1.SemanticTokenTypes.namespace]: 11,
      [vscode_languageserver_1.SemanticTokenTypes.number]: 12,
      [vscode_languageserver_1.SemanticTokenTypes.operator]: 13,
      [vscode_languageserver_1.SemanticTokenTypes.parameter]: 14,
      [vscode_languageserver_1.SemanticTokenTypes.property]: 15,
      [vscode_languageserver_1.SemanticTokenTypes.regexp]: 16,
      [vscode_languageserver_1.SemanticTokenTypes.string]: 17,
      [vscode_languageserver_1.SemanticTokenTypes.struct]: 18,
      [vscode_languageserver_1.SemanticTokenTypes.type]: 19,
      [vscode_languageserver_1.SemanticTokenTypes.typeParameter]: 20,
      [vscode_languageserver_1.SemanticTokenTypes.variable]: 21
    };
    exports.AllSemanticTokenModifiers = {
      [vscode_languageserver_1.SemanticTokenModifiers.abstract]: 1 << 0,
      [vscode_languageserver_1.SemanticTokenModifiers.async]: 1 << 1,
      [vscode_languageserver_1.SemanticTokenModifiers.declaration]: 1 << 2,
      [vscode_languageserver_1.SemanticTokenModifiers.defaultLibrary]: 1 << 3,
      [vscode_languageserver_1.SemanticTokenModifiers.definition]: 1 << 4,
      [vscode_languageserver_1.SemanticTokenModifiers.deprecated]: 1 << 5,
      [vscode_languageserver_1.SemanticTokenModifiers.documentation]: 1 << 6,
      [vscode_languageserver_1.SemanticTokenModifiers.modification]: 1 << 7,
      [vscode_languageserver_1.SemanticTokenModifiers.readonly]: 1 << 8,
      [vscode_languageserver_1.SemanticTokenModifiers.static]: 1 << 9
    };
    exports.DefaultSemanticTokenOptions = {
      legend: {
        tokenTypes: Object.keys(exports.AllSemanticTokenTypes),
        tokenModifiers: Object.keys(exports.AllSemanticTokenModifiers)
      },
      full: {
        delta: true
      },
      range: true
    };
    class SemanticTokensBuilder extends vscode_languageserver_1.SemanticTokensBuilder {
      constructor() {
        super(...arguments);
        this._tokens = [];
      }
      push(line, char, length, tokenType, tokenModifiers) {
        this._tokens.push({
          line,
          char,
          length,
          tokenType,
          tokenModifiers
        });
      }
      build() {
        this.applyTokens();
        return super.build();
      }
      buildEdits() {
        this.applyTokens();
        return super.buildEdits();
      }
      applyTokens() {
        for (const token of this._tokens.sort(this.compareTokens)) {
          super.push(token.line, token.char, token.length, token.tokenType, token.tokenModifiers);
        }
        this._tokens = [];
      }
      compareTokens(a2, b2) {
        if (a2.line === b2.line) {
          return a2.char - b2.char;
        }
        return a2.line - b2.line;
      }
    }
    exports.SemanticTokensBuilder = SemanticTokensBuilder;
    class AbstractSemanticTokenProvider {
      constructor(services2) {
        this.tokensBuilders = /* @__PURE__ */ new Map();
        services2.shared.workspace.TextDocuments.onDidClose((e) => {
          this.tokensBuilders.delete(e.document.uri);
        });
        services2.shared.lsp.LanguageServer.onInitialize((params) => {
          var _a2;
          this.initialize((_a2 = params.capabilities.textDocument) === null || _a2 === void 0 ? void 0 : _a2.semanticTokens);
        });
      }
      initialize(clientCapabilities) {
        this.clientCapabilities = clientCapabilities;
      }
      async semanticHighlight(document2, _params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        this.currentRange = void 0;
        this.currentDocument = document2;
        this.currentTokensBuilder = this.getDocumentTokensBuilder(document2);
        await this.computeHighlighting(document2, this.createAcceptor(), cancelToken);
        return this.currentTokensBuilder.build();
      }
      async semanticHighlightRange(document2, params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        this.currentRange = params.range;
        this.currentDocument = document2;
        this.currentTokensBuilder = this.getDocumentTokensBuilder(document2);
        await this.computeHighlighting(document2, this.createAcceptor(), cancelToken);
        return this.currentTokensBuilder.build();
      }
      async semanticHighlightDelta(document2, params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
        this.currentRange = void 0;
        this.currentDocument = document2;
        this.currentTokensBuilder = this.getDocumentTokensBuilder(document2);
        this.currentTokensBuilder.previousResult(params.previousResultId);
        await this.computeHighlighting(document2, this.createAcceptor(), cancelToken);
        return this.currentTokensBuilder.buildEdits();
      }
      createAcceptor() {
        const acceptor = (options) => {
          if ("line" in options) {
            this.highlightToken({
              range: {
                start: {
                  line: options.line,
                  character: options.char
                },
                end: {
                  line: options.line,
                  character: options.char + options.length
                }
              },
              type: options.type,
              modifier: options.modifier
            });
          } else if ("range" in options) {
            this.highlightToken(options);
          } else if ("keyword" in options) {
            this.highlightKeyword(options);
          } else if ("property" in options) {
            this.highlightProperty(options);
          } else {
            this.highlightNode({
              node: options.cst,
              type: options.type,
              modifier: options.modifier
            });
          }
        };
        return acceptor;
      }
      getDocumentTokensBuilder(document2) {
        const existing = this.tokensBuilders.get(document2.uri.toString());
        if (existing) {
          return existing;
        }
        const builder = new SemanticTokensBuilder();
        this.tokensBuilders.set(document2.uri.toString(), builder);
        return builder;
      }
      async computeHighlighting(document2, acceptor, cancelToken) {
        const root = document2.parseResult.value;
        const treeIterator = (0, ast_util_1.streamAst)(root, { range: this.currentRange }).iterator();
        let result;
        do {
          result = treeIterator.next();
          if (!result.done) {
            await (0, promise_util_1.interruptAndCheck)(cancelToken);
            const node = result.value;
            if (this.highlightElement(node, acceptor) === "prune") {
              treeIterator.prune();
            }
          }
        } while (!result.done);
      }
      highlightToken(options) {
        var _a2;
        const { range: range2, type } = options;
        let modifiers2 = options.modifier;
        if (this.currentRange && !(0, cst_util_1.inRange)(range2, this.currentRange) || !this.currentDocument || !this.currentTokensBuilder) {
          return;
        }
        const intType = exports.AllSemanticTokenTypes[type];
        let totalModifier = 0;
        if (modifiers2 !== void 0) {
          if (typeof modifiers2 === "string") {
            modifiers2 = [modifiers2];
          }
          for (const modifier of modifiers2) {
            const intModifier = exports.AllSemanticTokenModifiers[modifier];
            totalModifier |= intModifier;
          }
        }
        const startLine = range2.start.line;
        const endLine = range2.end.line;
        if (startLine === endLine) {
          const char = range2.start.character;
          const length = range2.end.character - char;
          this.currentTokensBuilder.push(startLine, char, length, intType, totalModifier);
        } else if ((_a2 = this.clientCapabilities) === null || _a2 === void 0 ? void 0 : _a2.multilineTokenSupport) {
          const startChar = range2.start.character;
          const startOffset = this.currentDocument.textDocument.offsetAt(range2.start);
          const endOffset = this.currentDocument.textDocument.offsetAt(range2.end);
          this.currentTokensBuilder.push(startLine, startChar, endOffset - startOffset, intType, totalModifier);
        } else {
          const firstLineStart = range2.start;
          let nextLineOffset = this.currentDocument.textDocument.offsetAt({
            line: startLine + 1,
            character: 0
          });
          this.currentTokensBuilder.push(firstLineStart.line, firstLineStart.character, nextLineOffset - firstLineStart.character - 1, intType, totalModifier);
          for (let i = startLine + 1; i < endLine; i++) {
            const currentLineOffset = nextLineOffset;
            nextLineOffset = this.currentDocument.textDocument.offsetAt({
              line: i + 1,
              character: 0
            });
            this.currentTokensBuilder.push(i, 0, nextLineOffset - currentLineOffset - 1, intType, totalModifier);
          }
          this.currentTokensBuilder.push(endLine, 0, range2.end.character, intType, totalModifier);
        }
      }
      highlightProperty(options) {
        const nodes = [];
        if (typeof options.index === "number") {
          const node = (0, grammar_util_1.findNodeForProperty)(options.node.$cstNode, options.property, options.index);
          if (node) {
            nodes.push(node);
          }
        } else {
          nodes.push(...(0, grammar_util_1.findNodesForProperty)(options.node.$cstNode, options.property));
        }
        const { type, modifier } = options;
        for (const node of nodes) {
          this.highlightNode({
            node,
            type,
            modifier
          });
        }
      }
      highlightKeyword(options) {
        const { node, keyword: keyword2, type, index, modifier } = options;
        const nodes = [];
        if (typeof index === "number") {
          const keywordNode = (0, grammar_util_1.findNodeForKeyword)(node.$cstNode, keyword2, index);
          if (keywordNode) {
            nodes.push(keywordNode);
          }
        } else {
          nodes.push(...(0, grammar_util_1.findNodesForKeyword)(node.$cstNode, keyword2));
        }
        for (const keywordNode of nodes) {
          this.highlightNode({
            node: keywordNode,
            type,
            modifier
          });
        }
      }
      highlightNode(options) {
        const { node, type, modifier } = options;
        const range2 = node.range;
        this.highlightToken({
          range: range2,
          type,
          modifier
        });
      }
    }
    exports.AbstractSemanticTokenProvider = AbstractSemanticTokenProvider;
    (function(SemanticTokensDecoder) {
      function decode(tokens2, document2) {
        const typeMap = /* @__PURE__ */ new Map();
        Object.entries(exports.AllSemanticTokenTypes).forEach(([type, index]) => typeMap.set(index, type));
        let line = 0;
        let character = 0;
        return sliceIntoChunks(tokens2.data, 5).map((t2) => {
          line += t2[0];
          if (t2[0] !== 0) {
            character = 0;
          }
          character += t2[1];
          const length = t2[2];
          const offset = document2.textDocument.offsetAt({ line, character });
          return {
            offset,
            tokenType: typeMap.get(t2[3]),
            tokenModifiers: t2[4],
            text: document2.textDocument.getText({ start: { line, character }, end: { line, character: character + length } })
          };
        });
      }
      SemanticTokensDecoder.decode = decode;
      function sliceIntoChunks(arr, chunkSize) {
        const res = [];
        for (let i = 0; i < arr.length; i += chunkSize) {
          const chunk = arr.slice(i, i + chunkSize);
          res.push(chunk);
        }
        return res;
      }
    })(exports.SemanticTokensDecoder || (exports.SemanticTokensDecoder = {}));
  })(semanticTokenProvider);
  return semanticTokenProvider;
}
var hasRequiredGrammarSemanticTokens;
function requireGrammarSemanticTokens() {
  if (hasRequiredGrammarSemanticTokens)
    return grammarSemanticTokens;
  hasRequiredGrammarSemanticTokens = 1;
  Object.defineProperty(grammarSemanticTokens, "__esModule", { value: true });
  grammarSemanticTokens.LangiumGrammarSemanticTokenProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const semantic_token_provider_1 = requireSemanticTokenProvider();
  const ast_1 = requireAst();
  class LangiumGrammarSemanticTokenProvider extends semantic_token_provider_1.AbstractSemanticTokenProvider {
    highlightElement(node, acceptor) {
      var _a2;
      if ((0, ast_1.isAssignment)(node)) {
        acceptor({
          node,
          property: "feature",
          type: vscode_languageserver_1.SemanticTokenTypes.property
        });
      } else if ((0, ast_1.isAction)(node)) {
        if (node.feature) {
          acceptor({
            node,
            property: "feature",
            type: vscode_languageserver_1.SemanticTokenTypes.property
          });
        }
      } else if ((0, ast_1.isReturnType)(node)) {
        acceptor({
          node,
          property: "name",
          type: vscode_languageserver_1.SemanticTokenTypes.type
        });
      } else if ((0, ast_1.isSimpleType)(node)) {
        if (node.primitiveType || node.typeRef) {
          acceptor({
            node,
            property: node.primitiveType ? "primitiveType" : "typeRef",
            type: vscode_languageserver_1.SemanticTokenTypes.type
          });
        }
      } else if ((0, ast_1.isParameter)(node)) {
        acceptor({
          node,
          property: "name",
          type: vscode_languageserver_1.SemanticTokenTypes.parameter
        });
      } else if ((0, ast_1.isParameterReference)(node)) {
        acceptor({
          node,
          property: "parameter",
          type: vscode_languageserver_1.SemanticTokenTypes.parameter
        });
      } else if ((0, ast_1.isRuleCall)(node)) {
        if ((_a2 = node.rule.ref) === null || _a2 === void 0 ? void 0 : _a2.fragment) {
          acceptor({
            node,
            property: "rule",
            type: vscode_languageserver_1.SemanticTokenTypes.type
          });
        }
      } else if ((0, ast_1.isTypeAttribute)(node)) {
        acceptor({
          node,
          property: "name",
          type: vscode_languageserver_1.SemanticTokenTypes.property
        });
      }
    }
  }
  grammarSemanticTokens.LangiumGrammarSemanticTokenProvider = LangiumGrammarSemanticTokenProvider;
  return grammarSemanticTokens;
}
var grammarNaming = {};
var hasRequiredGrammarNaming;
function requireGrammarNaming() {
  if (hasRequiredGrammarNaming)
    return grammarNaming;
  hasRequiredGrammarNaming = 1;
  Object.defineProperty(grammarNaming, "__esModule", { value: true });
  grammarNaming.LangiumGrammarNameProvider = void 0;
  const name_provider_1 = requireNameProvider();
  const grammar_util_1 = requireGrammarUtil();
  const ast_1 = requireAst();
  class LangiumGrammarNameProvider extends name_provider_1.DefaultNameProvider {
    getName(node) {
      if ((0, ast_1.isAssignment)(node)) {
        return node.feature;
      } else {
        return super.getName(node);
      }
    }
    getNameNode(node) {
      if ((0, ast_1.isAssignment)(node)) {
        return (0, grammar_util_1.findNodeForProperty)(node.$cstNode, "feature");
      } else {
        return super.getNameNode(node);
      }
    }
  }
  grammarNaming.LangiumGrammarNameProvider = LangiumGrammarNameProvider;
  return grammarNaming;
}
var grammarReferences = {};
var references$1 = {};
var hasRequiredReferences$1;
function requireReferences$1() {
  if (hasRequiredReferences$1)
    return references$1;
  hasRequiredReferences$1 = 1;
  Object.defineProperty(references$1, "__esModule", { value: true });
  references$1.DefaultReferences = void 0;
  const grammar_util_1 = requireGrammarUtil();
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const stream_1 = requireStream();
  const uri_util_1 = requireUriUtil();
  class DefaultReferences {
    constructor(services2) {
      this.nameProvider = services2.references.NameProvider;
      this.index = services2.shared.workspace.IndexManager;
      this.nodeLocator = services2.workspace.AstNodeLocator;
    }
    findDeclaration(sourceCstNode) {
      if (sourceCstNode) {
        const assignment = (0, grammar_util_1.findAssignment)(sourceCstNode);
        const nodeElem = sourceCstNode.element;
        if (assignment && nodeElem) {
          const reference = nodeElem[assignment.feature];
          if ((0, syntax_tree_1.isReference)(reference)) {
            return reference.ref;
          } else if (Array.isArray(reference)) {
            for (const ref of reference) {
              if ((0, syntax_tree_1.isReference)(ref) && ref.$refNode && ref.$refNode.offset <= sourceCstNode.offset && ref.$refNode.end >= sourceCstNode.end) {
                return ref.ref;
              }
            }
          }
        }
        if (nodeElem) {
          const nameNode = this.nameProvider.getNameNode(nodeElem);
          if (nameNode && (nameNode === sourceCstNode || (0, cst_util_1.isCstChildNode)(sourceCstNode, nameNode))) {
            return nodeElem;
          }
        }
      }
      return void 0;
    }
    findDeclarationNode(sourceCstNode) {
      const astNode = this.findDeclaration(sourceCstNode);
      if (astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) {
        const targetNode = this.nameProvider.getNameNode(astNode);
        return targetNode !== null && targetNode !== void 0 ? targetNode : astNode.$cstNode;
      }
      return void 0;
    }
    findReferences(targetNode, options) {
      const refs = [];
      if (options.includeDeclaration) {
        const ref = this.getReferenceToSelf(targetNode);
        if (ref) {
          refs.push(ref);
        }
      }
      let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));
      if (options.documentUri) {
        indexReferences = indexReferences.filter((ref) => (0, uri_util_1.equalURI)(ref.sourceUri, options.documentUri));
      }
      refs.push(...indexReferences);
      return (0, stream_1.stream)(refs);
    }
    getReferenceToSelf(targetNode) {
      const nameNode = this.nameProvider.getNameNode(targetNode);
      if (nameNode) {
        const doc2 = (0, ast_util_1.getDocument)(targetNode);
        const path = this.nodeLocator.getAstNodePath(targetNode);
        return {
          sourceUri: doc2.uri,
          sourcePath: path,
          targetUri: doc2.uri,
          targetPath: path,
          segment: (0, cst_util_1.toDocumentSegment)(nameNode),
          local: true
        };
      }
      return void 0;
    }
  }
  references$1.DefaultReferences = DefaultReferences;
  return references$1;
}
var hasRequiredGrammarReferences;
function requireGrammarReferences() {
  if (hasRequiredGrammarReferences)
    return grammarReferences;
  hasRequiredGrammarReferences = 1;
  Object.defineProperty(grammarReferences, "__esModule", { value: true });
  grammarReferences.LangiumGrammarReferences = void 0;
  const references_1 = requireReferences$1();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const stream_1 = requireStream();
  const uri_util_1 = requireUriUtil();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const types_util_1 = requireTypesUtil();
  class LangiumGrammarReferences extends references_1.DefaultReferences {
    constructor(services2) {
      super(services2);
      this.documents = services2.shared.workspace.LangiumDocuments;
    }
    findDeclaration(sourceCstNode) {
      const nodeElem = sourceCstNode.element;
      const assignment = (0, grammar_util_1.findAssignment)(sourceCstNode);
      if (assignment && assignment.feature === "feature") {
        if ((0, ast_1.isAssignment)(nodeElem)) {
          return this.findAssignmentDeclaration(nodeElem);
        } else if ((0, ast_1.isAction)(nodeElem)) {
          return this.findActionDeclaration(nodeElem);
        }
      }
      return super.findDeclaration(sourceCstNode);
    }
    findReferences(targetNode, options) {
      var _a2;
      if ((0, ast_1.isTypeAttribute)(targetNode)) {
        return this.findReferencesToTypeAttribute(targetNode, (_a2 = options.includeDeclaration) !== null && _a2 !== void 0 ? _a2 : false);
      } else {
        return super.findReferences(targetNode, options);
      }
    }
    findReferencesToTypeAttribute(targetNode, includeDeclaration) {
      const refs = [];
      const interfaceNode = (0, ast_util_1.getContainerOfType)(targetNode, ast_1.isInterface);
      if (interfaceNode) {
        if (includeDeclaration) {
          const ref = this.getReferenceToSelf(targetNode);
          if (ref) {
            refs.push(ref);
          }
        }
        const interfaces = (0, types_util_1.collectChildrenTypes)(interfaceNode, this, this.documents, this.nodeLocator);
        const targetRules = [];
        interfaces.forEach((interf) => {
          const rules = this.findRulesWithReturnType(interf);
          targetRules.push(...rules);
        });
        targetRules.forEach((rule) => {
          const references2 = this.createReferencesToAttribute(rule, targetNode);
          refs.push(...references2);
        });
      }
      return (0, stream_1.stream)(refs);
    }
    createReferencesToAttribute(ruleOrAction, attribute) {
      const refs = [];
      if ((0, ast_1.isParserRule)(ruleOrAction)) {
        const assignment = (0, internal_grammar_util_1.extractAssignments)(ruleOrAction.definition).find((a2) => a2.feature === attribute.name);
        if (assignment === null || assignment === void 0 ? void 0 : assignment.$cstNode) {
          const leaf = this.nameProvider.getNameNode(assignment);
          if (leaf) {
            refs.push({
              sourceUri: (0, ast_util_1.getDocument)(assignment).uri,
              sourcePath: this.nodeLocator.getAstNodePath(assignment),
              targetUri: (0, ast_util_1.getDocument)(attribute).uri,
              targetPath: this.nodeLocator.getAstNodePath(attribute),
              segment: (0, cst_util_1.toDocumentSegment)(leaf),
              local: (0, uri_util_1.equalURI)((0, ast_util_1.getDocument)(assignment).uri, (0, ast_util_1.getDocument)(attribute).uri)
            });
          }
        }
      } else {
        if (ruleOrAction.feature === attribute.name) {
          const leaf = (0, grammar_util_1.findNodeForProperty)(ruleOrAction.$cstNode, "feature");
          if (leaf) {
            refs.push({
              sourceUri: (0, ast_util_1.getDocument)(ruleOrAction).uri,
              sourcePath: this.nodeLocator.getAstNodePath(ruleOrAction),
              targetUri: (0, ast_util_1.getDocument)(attribute).uri,
              targetPath: this.nodeLocator.getAstNodePath(attribute),
              segment: (0, cst_util_1.toDocumentSegment)(leaf),
              local: (0, uri_util_1.equalURI)((0, ast_util_1.getDocument)(ruleOrAction).uri, (0, ast_util_1.getDocument)(attribute).uri)
            });
          }
        }
        const parserRule = (0, ast_util_1.getContainerOfType)(ruleOrAction, ast_1.isParserRule);
        refs.push(...this.createReferencesToAttribute(parserRule, attribute));
      }
      return refs;
    }
    findAssignmentDeclaration(assignment) {
      var _a2;
      const parserRule = (0, ast_util_1.getContainerOfType)(assignment, ast_1.isParserRule);
      const action = (0, internal_grammar_util_1.getActionAtElement)(assignment);
      if (action) {
        const actionDeclaration = this.findActionDeclaration(action, assignment.feature);
        if (actionDeclaration) {
          return actionDeclaration;
        }
      }
      if ((_a2 = parserRule === null || parserRule === void 0 ? void 0 : parserRule.returnType) === null || _a2 === void 0 ? void 0 : _a2.ref) {
        if ((0, ast_1.isInterface)(parserRule.returnType.ref) || (0, ast_1.isType)(parserRule.returnType.ref)) {
          const interfaces = (0, types_util_1.collectSuperTypes)(parserRule.returnType.ref);
          for (const interf of interfaces) {
            const typeAttribute = interf.attributes.find((att) => att.name === assignment.feature);
            if (typeAttribute) {
              return typeAttribute;
            }
          }
        }
      }
      return assignment;
    }
    findActionDeclaration(action, featureName) {
      var _a2;
      if ((_a2 = action.type) === null || _a2 === void 0 ? void 0 : _a2.ref) {
        const feature = featureName !== null && featureName !== void 0 ? featureName : action.feature;
        const interfaces = (0, types_util_1.collectSuperTypes)(action.type.ref);
        for (const interf of interfaces) {
          const typeAttribute = interf.attributes.find((att) => att.name === feature);
          if (typeAttribute) {
            return typeAttribute;
          }
        }
      }
      return void 0;
    }
    findRulesWithReturnType(interf) {
      const rules = [];
      const refs = this.index.findAllReferences(interf, this.nodeLocator.getAstNodePath(interf));
      refs.forEach((ref) => {
        const doc2 = this.documents.getOrCreateDocument(ref.sourceUri);
        const astNode = this.nodeLocator.getAstNode(doc2.parseResult.value, ref.sourcePath);
        if ((0, ast_1.isParserRule)(astNode) || (0, ast_1.isAction)(astNode)) {
          rules.push(astNode);
        }
      });
      return rules;
    }
  }
  grammarReferences.LangiumGrammarReferences = LangiumGrammarReferences;
  return grammarReferences;
}
var grammarDefinition = {};
var lsp = {};
var completionProvider = {};
var followElementComputation = {};
var hasRequiredFollowElementComputation;
function requireFollowElementComputation() {
  if (hasRequiredFollowElementComputation)
    return followElementComputation;
  hasRequiredFollowElementComputation = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(followElementComputation, "__esModule", { value: true });
  followElementComputation.findFirstFeatures = followElementComputation.findNextFeatures = void 0;
  const ast2 = __importStar(requireAst());
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const grammar_util_1 = requireGrammarUtil();
  function findNextFeatures(featureStack, unparsedTokens) {
    const context = {
      stacks: featureStack,
      tokens: unparsedTokens
    };
    interpretTokens(context);
    context.stacks.flat().forEach((feature) => {
      feature.property = void 0;
    });
    const nextStacks = findNextFeatureStacks(context.stacks);
    return nextStacks.map((e) => e[e.length - 1]);
  }
  followElementComputation.findNextFeatures = findNextFeatures;
  function findNextFeaturesInternal(options) {
    const { next, cardinalities, visited, plus: plus2 } = options;
    const features = [];
    const feature = next.feature;
    if (visited.has(feature)) {
      return [];
    } else {
      visited.add(feature);
    }
    let parent;
    let item = feature;
    while (item.$container) {
      if (ast2.isGroup(item.$container)) {
        parent = item.$container;
        break;
      } else if (ast2.isAbstractElement(item.$container)) {
        item = item.$container;
      } else {
        break;
      }
    }
    if ((0, internal_grammar_util_1.isArrayCardinality)(item.cardinality)) {
      const repeatingFeatures = findFirstFeaturesInternal({
        next: {
          feature: item,
          type: next.type,
          new: false
        },
        cardinalities,
        visited,
        plus: plus2
      });
      for (const repeatingFeature of repeatingFeatures) {
        plus2.add(repeatingFeature.feature);
      }
      features.push(...repeatingFeatures);
    }
    if (parent) {
      const ownIndex = parent.elements.indexOf(item);
      if (ownIndex !== void 0 && ownIndex < parent.elements.length - 1) {
        features.push(...findNextFeaturesInGroup({
          feature: parent,
          type: next.type,
          new: false
        }, ownIndex + 1, cardinalities, visited, plus2));
      }
      if (features.every((e) => (0, internal_grammar_util_1.isOptionalCardinality)(e.feature.cardinality) || (0, internal_grammar_util_1.isOptionalCardinality)(cardinalities.get(e.feature)) || plus2.has(e.feature))) {
        features.push(...findNextFeaturesInternal({
          next: {
            feature: parent,
            type: next.type,
            new: false
          },
          cardinalities,
          visited,
          plus: plus2
        }));
      }
    }
    return features;
  }
  function findFirstFeatures(next) {
    if ((0, syntax_tree_1.isAstNode)(next)) {
      next = { feature: next };
    }
    return findFirstFeaturesInternal({ next, cardinalities: /* @__PURE__ */ new Map(), visited: /* @__PURE__ */ new Set(), plus: /* @__PURE__ */ new Set() });
  }
  followElementComputation.findFirstFeatures = findFirstFeatures;
  function findFirstFeaturesInternal(options) {
    var _a2, _b2, _c2;
    const { next, cardinalities, visited, plus: plus2 } = options;
    if (next === void 0) {
      return [];
    }
    const { feature, type } = next;
    if (ast2.isGroup(feature)) {
      if (visited.has(feature)) {
        return [];
      } else {
        visited.add(feature);
      }
    }
    if (ast2.isGroup(feature)) {
      return findNextFeaturesInGroup(next, 0, cardinalities, visited, plus2).map((e) => modifyCardinality(e, feature.cardinality, cardinalities));
    } else if (ast2.isAlternatives(feature) || ast2.isUnorderedGroup(feature)) {
      return feature.elements.flatMap((e) => findFirstFeaturesInternal({
        next: { feature: e, new: false, type },
        cardinalities,
        visited,
        plus: plus2
      })).map((e) => modifyCardinality(e, feature.cardinality, cardinalities));
    } else if (ast2.isAssignment(feature)) {
      const assignmentNext = {
        feature: feature.terminal,
        new: false,
        type,
        property: (_a2 = next.property) !== null && _a2 !== void 0 ? _a2 : feature.feature
      };
      return findFirstFeaturesInternal({ next: assignmentNext, cardinalities, visited, plus: plus2 }).map((e) => modifyCardinality(e, feature.cardinality, cardinalities));
    } else if (ast2.isAction(feature)) {
      return findNextFeaturesInternal({
        next: {
          feature,
          new: true,
          type: (0, internal_grammar_util_1.getTypeName)(feature),
          property: (_b2 = next.property) !== null && _b2 !== void 0 ? _b2 : feature.feature
        },
        cardinalities,
        visited,
        plus: plus2
      });
    } else if (ast2.isRuleCall(feature) && ast2.isParserRule(feature.rule.ref)) {
      const rule = feature.rule.ref;
      const ruleCallNext = {
        feature: rule.definition,
        new: true,
        type: rule.fragment ? void 0 : (_c2 = (0, internal_grammar_util_1.getExplicitRuleType)(rule)) !== null && _c2 !== void 0 ? _c2 : rule.name,
        property: next.property
      };
      return findFirstFeaturesInternal({ next: ruleCallNext, cardinalities, visited, plus: plus2 }).map((e) => modifyCardinality(e, feature.cardinality, cardinalities));
    } else {
      return [next];
    }
  }
  function modifyCardinality(next, cardinality, cardinalities) {
    cardinalities.set(next.feature, cardinality);
    return next;
  }
  function findNextFeaturesInGroup(next, index, cardinalities, visited, plus2) {
    var _a2;
    const features = [];
    let firstFeature;
    while (index < next.feature.elements.length) {
      firstFeature = { feature: next.feature.elements[index++], new: false, type: next.type };
      features.push(...findFirstFeaturesInternal({
        next: firstFeature,
        cardinalities,
        visited,
        plus: plus2
      }));
      if (!(0, internal_grammar_util_1.isOptionalCardinality)((_a2 = firstFeature.feature.cardinality) !== null && _a2 !== void 0 ? _a2 : cardinalities.get(firstFeature.feature))) {
        break;
      }
    }
    return features;
  }
  function interpretTokens(context) {
    for (const token of context.tokens) {
      const nextFeatureStacks = findNextFeatureStacks(context.stacks, token);
      context.stacks = nextFeatureStacks;
    }
  }
  function findNextFeatureStacks(stacks, token) {
    const newStacks = [];
    for (const stack of stacks) {
      newStacks.push(...interpretStackToken(stack, token));
    }
    return newStacks;
  }
  function interpretStackToken(stack, token) {
    const cardinalities = /* @__PURE__ */ new Map();
    const plus2 = new Set(stack.map((e) => e.feature).filter(isPlusFeature));
    const newStacks = [];
    while (stack.length > 0) {
      const top2 = stack.pop();
      const allNextFeatures = findNextFeaturesInternal({
        next: top2,
        cardinalities,
        plus: plus2,
        visited: /* @__PURE__ */ new Set()
      }).filter((next) => token ? featureMatches(next.feature, token) : true);
      for (const nextFeature of allNextFeatures) {
        newStacks.push([...stack, nextFeature]);
      }
      if (!allNextFeatures.every((e) => (0, internal_grammar_util_1.isOptionalCardinality)(e.feature.cardinality) || (0, internal_grammar_util_1.isOptionalCardinality)(cardinalities.get(e.feature)))) {
        break;
      }
    }
    return newStacks;
  }
  function isPlusFeature(feature) {
    if (feature.cardinality === "+") {
      return true;
    }
    const assignment = (0, ast_util_1.getContainerOfType)(feature, ast2.isAssignment);
    if (assignment && assignment.cardinality === "+") {
      return true;
    }
    return false;
  }
  function featureMatches(feature, token) {
    if (ast2.isKeyword(feature)) {
      const content2 = feature.value;
      return content2 === token.image;
    } else if (ast2.isRuleCall(feature)) {
      return ruleMatches(feature.rule.ref, token);
    } else if (ast2.isCrossReference(feature)) {
      const crossRefTerminal = (0, grammar_util_1.getCrossReferenceTerminal)(feature);
      if (crossRefTerminal) {
        return featureMatches(crossRefTerminal, token);
      }
    }
    return false;
  }
  function ruleMatches(rule, token) {
    if (ast2.isParserRule(rule)) {
      const ruleFeatures = findFirstFeatures(rule.definition);
      return ruleFeatures.some((e) => featureMatches(e.feature, token));
    } else if (ast2.isTerminalRule(rule)) {
      return new RegExp((0, internal_grammar_util_1.terminalRegex)(rule)).test(token.image);
    } else {
      return false;
    }
  }
  return followElementComputation;
}
var hasRequiredCompletionProvider;
function requireCompletionProvider() {
  if (hasRequiredCompletionProvider)
    return completionProvider;
  hasRequiredCompletionProvider = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(completionProvider, "__esModule", { value: true });
  completionProvider.DefaultCompletionProvider = completionProvider.mergeCompletionProviderOptions = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast2 = __importStar(requireAst());
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const stream_1 = requireStream();
  const follow_element_computation_1 = requireFollowElementComputation();
  function mergeCompletionProviderOptions(options) {
    const triggerCharacters = Array.from(new Set(options.flatMap((option) => {
      var _a2;
      return (_a2 = option === null || option === void 0 ? void 0 : option.triggerCharacters) !== null && _a2 !== void 0 ? _a2 : [];
    })));
    const allCommitCharacters = Array.from(new Set(options.flatMap((option) => {
      var _a2;
      return (_a2 = option === null || option === void 0 ? void 0 : option.allCommitCharacters) !== null && _a2 !== void 0 ? _a2 : [];
    })));
    return {
      triggerCharacters: triggerCharacters.length > 0 ? triggerCharacters : void 0,
      allCommitCharacters: allCommitCharacters.length > 0 ? allCommitCharacters : void 0
    };
  }
  completionProvider.mergeCompletionProviderOptions = mergeCompletionProviderOptions;
  class DefaultCompletionProvider {
    constructor(services2) {
      this.scopeProvider = services2.references.ScopeProvider;
      this.grammar = services2.Grammar;
      this.completionParser = services2.parser.CompletionParser;
      this.nameProvider = services2.references.NameProvider;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    async getCompletion(document2, params) {
      var _a2, _b2;
      const root = document2.parseResult.value;
      const cst2 = root.$cstNode;
      if (!cst2) {
        return void 0;
      }
      const items = [];
      const textDocument = document2.textDocument;
      const text = textDocument.getText();
      const offset = textDocument.offsetAt(params.position);
      const acceptor = (value) => {
        const completionItem = this.fillCompletionItem(textDocument, offset, value);
        if (completionItem) {
          items.push(completionItem);
        }
      };
      const lastTokenOffset = this.backtrackToAnyToken(text, offset);
      const astNode = (_a2 = (0, cst_util_1.findLeafNodeAtOffset)(cst2, lastTokenOffset)) === null || _a2 === void 0 ? void 0 : _a2.element;
      const context = {
        document: document2,
        textDocument,
        node: astNode,
        offset,
        position: params.position
      };
      if (!astNode) {
        const parserRule = (0, grammar_util_1.getEntryRule)(this.grammar);
        await this.completionForRule(context, parserRule, acceptor);
        return vscode_languageserver_1.CompletionList.create(this.deduplicateItems(items), true);
      }
      const contexts = [context];
      if (lastTokenOffset === offset && lastTokenOffset > 0) {
        const previousAstNode = (_b2 = (0, cst_util_1.findLeafNodeAtOffset)(cst2, lastTokenOffset - 1)) === null || _b2 === void 0 ? void 0 : _b2.element;
        if (previousAstNode !== astNode) {
          contexts.push({
            document: document2,
            textDocument,
            node: previousAstNode,
            offset,
            position: params.position
          });
        }
      }
      const parserStart = this.backtrackToTokenStart(text, offset);
      const beforeFeatures = this.findFeaturesAt(textDocument, parserStart);
      let afterFeatures = [];
      const reparse = this.canReparse() && offset !== parserStart;
      if (reparse) {
        afterFeatures = this.findFeaturesAt(textDocument, offset);
      }
      const distinctionFunction = (element) => {
        if (ast2.isKeyword(element.feature)) {
          return element.feature.value;
        } else {
          return element.feature;
        }
      };
      await Promise.all((0, stream_1.stream)(beforeFeatures).distinct(distinctionFunction).map((e) => this.completionForContexts(contexts, e, acceptor)));
      if (reparse) {
        await Promise.all((0, stream_1.stream)(afterFeatures).exclude(beforeFeatures, distinctionFunction).distinct(distinctionFunction).map((e) => this.completionForContexts(contexts, e, acceptor)));
      }
      return vscode_languageserver_1.CompletionList.create(this.deduplicateItems(items), true);
    }
    /**
     * The completion algorithm could yield the same reference/keyword multiple times.
     *
     * This methods deduplicates these items afterwards before returning to the client.
     * Unique items are identified as a combination of `kind`, `label` and `detail`
     */
    deduplicateItems(items) {
      return (0, stream_1.stream)(items).distinct((item) => `${item.kind}_${item.label}_${item.detail}`).toArray();
    }
    /**
     * Determines whether the completion parser will reparse the input at the point of completion.
     * By default, this returns `false`, indicating that the completion will only look for completion results starting from the token at the cursor position.
     * Override this and return `true` to indicate that the completion should parse the input a second time.
     * This might add some missing completions at the cost at parsing the input twice.
     */
    canReparse() {
      return false;
    }
    findFeaturesAt(document2, offset) {
      const text = document2.getText({
        start: vscode_languageserver_1.Position.create(0, 0),
        end: document2.positionAt(offset)
      });
      const parserResult = this.completionParser.parse(text);
      const tokens2 = parserResult.tokens;
      if (parserResult.tokenIndex === 0) {
        const parserRule = (0, grammar_util_1.getEntryRule)(this.grammar);
        const firstFeatures = (0, follow_element_computation_1.findFirstFeatures)({
          feature: parserRule.definition,
          new: true,
          type: (0, internal_grammar_util_1.getExplicitRuleType)(parserRule)
        });
        if (tokens2.length > 0) {
          tokens2.shift();
          return (0, follow_element_computation_1.findNextFeatures)(firstFeatures.map((e) => [e]), tokens2);
        } else {
          return firstFeatures;
        }
      }
      const leftoverTokens = [...tokens2].splice(parserResult.tokenIndex);
      const features = (0, follow_element_computation_1.findNextFeatures)([parserResult.elementStack.map((feature) => ({ feature }))], leftoverTokens);
      return features;
    }
    backtrackToAnyToken(text, offset) {
      if (offset >= text.length) {
        offset = text.length - 1;
      }
      while (offset > 0 && /\s/.test(text.charAt(offset))) {
        offset--;
      }
      return offset;
    }
    backtrackToTokenStart(text, offset) {
      if (offset < 1) {
        return offset;
      }
      const wordRegex = this.grammarConfig.nameRegexp;
      let lastCharacter = text.charAt(offset - 1);
      while (offset > 0 && wordRegex.test(lastCharacter)) {
        offset--;
        lastCharacter = text.charAt(offset - 1);
      }
      return offset;
    }
    async completionForRule(context, rule, acceptor) {
      if (ast2.isParserRule(rule)) {
        const firstFeatures = (0, follow_element_computation_1.findFirstFeatures)(rule.definition);
        await Promise.all(firstFeatures.map((next) => this.completionFor(context, next, acceptor)));
      }
    }
    async completionForContexts(contexts, next, acceptor) {
      for (const context of contexts) {
        await this.completionFor(context, next, acceptor);
      }
    }
    completionFor(context, next, acceptor) {
      if (ast2.isKeyword(next.feature)) {
        return this.completionForKeyword(context, next.feature, acceptor);
      } else if (ast2.isCrossReference(next.feature) && context.node) {
        return this.completionForCrossReference(context, next, acceptor);
      }
    }
    completionForCrossReference(context, crossRef, acceptor) {
      const assignment = (0, ast_util_1.getContainerOfType)(crossRef.feature, ast2.isAssignment);
      let node = context.node;
      if (assignment && node) {
        if (crossRef.type && (crossRef.new || node.$type !== crossRef.type)) {
          node = {
            $type: crossRef.type,
            $container: node,
            $containerProperty: crossRef.property
          };
        }
        if (!context) {
          return;
        }
        const refInfo = {
          reference: {},
          container: node,
          property: assignment.feature
        };
        try {
          const scope = this.scopeProvider.getScope(refInfo);
          const duplicateStore = /* @__PURE__ */ new Set();
          scope.getAllElements().forEach((e) => {
            if (!duplicateStore.has(e.name) && this.filterCrossReference(e)) {
              acceptor(this.createReferenceCompletionItem(e));
              duplicateStore.add(e.name);
            }
          });
        } catch (err) {
          console.error(err);
        }
      }
    }
    /**
     * Override this method to change how reference completion items are created.
     * Most notably useful to change the `kind` property which indicates which icon to display on the client.
     *
     * @param nodeDescription The description of a reference candidate
     * @returns A partial completion item
     */
    createReferenceCompletionItem(nodeDescription) {
      return {
        nodeDescription,
        kind: vscode_languageserver_1.CompletionItemKind.Reference,
        detail: nodeDescription.type,
        sortText: "0"
      };
    }
    filterCrossReference(_nodeDescription) {
      return true;
    }
    completionForKeyword(context, keyword2, acceptor) {
      if (!keyword2.value.match(/[\w]/)) {
        return;
      }
      acceptor({
        label: keyword2.value,
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "Keyword",
        sortText: "1"
      });
    }
    fillCompletionItem(document2, offset, item) {
      var _a2, _b2;
      let label;
      if (typeof item.label === "string") {
        label = item.label;
      } else if ("node" in item) {
        const name2 = this.nameProvider.getName(item.node);
        if (!name2) {
          return void 0;
        }
        label = name2;
      } else if ("nodeDescription" in item) {
        label = item.nodeDescription.name;
      } else {
        return void 0;
      }
      let insertText;
      if (typeof ((_a2 = item.textEdit) === null || _a2 === void 0 ? void 0 : _a2.newText) === "string") {
        insertText = item.textEdit.newText;
      } else if (typeof item.insertText === "string") {
        insertText = item.insertText;
      } else {
        insertText = label;
      }
      const textEdit = (_b2 = item.textEdit) !== null && _b2 !== void 0 ? _b2 : this.buildCompletionTextEdit(document2, offset, label, insertText);
      if (!textEdit) {
        return void 0;
      }
      const completionItem = {
        additionalTextEdits: item.additionalTextEdits,
        command: item.command,
        commitCharacters: item.commitCharacters,
        data: item.data,
        detail: item.detail,
        documentation: item.documentation,
        filterText: item.filterText,
        insertText: item.insertText,
        insertTextFormat: item.insertTextFormat,
        insertTextMode: item.insertTextMode,
        kind: item.kind,
        labelDetails: item.labelDetails,
        preselect: item.preselect,
        sortText: item.sortText,
        tags: item.tags,
        textEditText: item.textEditText,
        textEdit,
        label
      };
      return completionItem;
    }
    buildCompletionTextEdit(document2, offset, label, newText) {
      const content2 = document2.getText();
      const tokenStart = this.backtrackToTokenStart(content2, offset);
      const identifier2 = content2.substring(tokenStart, offset);
      if (this.charactersFuzzyMatch(identifier2, label)) {
        const start = document2.positionAt(tokenStart);
        const end = document2.positionAt(offset);
        return {
          newText,
          range: {
            start,
            end
          }
        };
      } else {
        return void 0;
      }
    }
    isWordCharacterAt(content2, index) {
      return this.grammarConfig.nameRegexp.test(content2.charAt(index));
    }
    charactersFuzzyMatch(existingValue, completionValue) {
      if (existingValue.length === 0) {
        return true;
      }
      completionValue = completionValue.toLowerCase();
      let matchedFirstCharacter = false;
      let previous;
      let character = 0;
      const len = completionValue.length;
      for (let i = 0; i < len; i++) {
        const strChar = completionValue.charCodeAt(i);
        const testChar = existingValue.charCodeAt(character);
        if (strChar === testChar || this.toUpperCharCode(strChar) === this.toUpperCharCode(testChar)) {
          matchedFirstCharacter || (matchedFirstCharacter = previous === void 0 || // Beginning of word
          this.isWordTransition(previous, strChar));
          if (matchedFirstCharacter) {
            character++;
          }
          if (character === existingValue.length) {
            return true;
          }
        }
        previous = strChar;
      }
      return false;
    }
    isWordTransition(previous, current) {
      return a2 <= previous && previous <= z2 && A2 <= current && current <= Z2 || // camelCase transition
      previous === _ && current !== _;
    }
    toUpperCharCode(charCode) {
      if (a2 <= charCode && charCode <= z2) {
        return charCode - 32;
      }
      return charCode;
    }
  }
  completionProvider.DefaultCompletionProvider = DefaultCompletionProvider;
  const a2 = "a".charCodeAt(0);
  const z2 = "z".charCodeAt(0);
  const A2 = "A".charCodeAt(0);
  const Z2 = "Z".charCodeAt(0);
  const _ = "_".charCodeAt(0);
  return completionProvider;
}
var callHierarchyProvider = {};
var hasRequiredCallHierarchyProvider;
function requireCallHierarchyProvider() {
  if (hasRequiredCallHierarchyProvider)
    return callHierarchyProvider;
  hasRequiredCallHierarchyProvider = 1;
  Object.defineProperty(callHierarchyProvider, "__esModule", { value: true });
  callHierarchyProvider.AbstractCallHierarchyProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const vscode_uri_1 = require$$1;
  const cst_util_1 = requireCstUtil();
  class AbstractCallHierarchyProvider {
    constructor(services2) {
      this.grammarConfig = services2.parser.GrammarConfig;
      this.nameProvider = services2.references.NameProvider;
      this.documents = services2.shared.workspace.LangiumDocuments;
      this.references = services2.references.References;
    }
    prepareCallHierarchy(document2, params) {
      const rootNode = document2.parseResult.value;
      const targetNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode.$cstNode, document2.textDocument.offsetAt(params.position), this.grammarConfig.nameRegexp);
      if (!targetNode) {
        return void 0;
      }
      const declarationNode = this.references.findDeclarationNode(targetNode);
      if (!declarationNode) {
        return void 0;
      }
      return this.getCallHierarchyItems(declarationNode.element, document2);
    }
    getCallHierarchyItems(targetNode, document2) {
      const nameNode = this.nameProvider.getNameNode(targetNode);
      const name2 = this.nameProvider.getName(targetNode);
      if (!nameNode || !targetNode.$cstNode || name2 === void 0) {
        return void 0;
      }
      return [Object.assign({ kind: vscode_languageserver_1.SymbolKind.Method, name: name2, range: targetNode.$cstNode.range, selectionRange: nameNode.range, uri: document2.uri.toString() }, this.getCallHierarchyItem(targetNode))];
    }
    getCallHierarchyItem(_targetNode) {
      return void 0;
    }
    incomingCalls(params) {
      const document2 = this.documents.getOrCreateDocument(vscode_uri_1.URI.parse(params.item.uri));
      const rootNode = document2.parseResult.value;
      const targetNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode.$cstNode, document2.textDocument.offsetAt(params.item.range.start), this.grammarConfig.nameRegexp);
      if (!targetNode) {
        return void 0;
      }
      const references2 = this.references.findReferences(targetNode.element, {
        includeDeclaration: false
      });
      return this.getIncomingCalls(targetNode.element, references2);
    }
    outgoingCalls(params) {
      const document2 = this.documents.getOrCreateDocument(vscode_uri_1.URI.parse(params.item.uri));
      const rootNode = document2.parseResult.value;
      const targetNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode.$cstNode, document2.textDocument.offsetAt(params.item.range.start), this.grammarConfig.nameRegexp);
      if (!targetNode) {
        return void 0;
      }
      return this.getOutgoingCalls(targetNode.element);
    }
  }
  callHierarchyProvider.AbstractCallHierarchyProvider = AbstractCallHierarchyProvider;
  return callHierarchyProvider;
}
var codeAction = {};
var hasRequiredCodeAction;
function requireCodeAction() {
  if (hasRequiredCodeAction)
    return codeAction;
  hasRequiredCodeAction = 1;
  Object.defineProperty(codeAction, "__esModule", { value: true });
  return codeAction;
}
var codeLensProvider = {};
var hasRequiredCodeLensProvider;
function requireCodeLensProvider() {
  if (hasRequiredCodeLensProvider)
    return codeLensProvider;
  hasRequiredCodeLensProvider = 1;
  Object.defineProperty(codeLensProvider, "__esModule", { value: true });
  return codeLensProvider;
}
var declarationProvider = {};
var hasRequiredDeclarationProvider;
function requireDeclarationProvider() {
  if (hasRequiredDeclarationProvider)
    return declarationProvider;
  hasRequiredDeclarationProvider = 1;
  Object.defineProperty(declarationProvider, "__esModule", { value: true });
  return declarationProvider;
}
var definitionProvider = {};
var hasRequiredDefinitionProvider;
function requireDefinitionProvider() {
  if (hasRequiredDefinitionProvider)
    return definitionProvider;
  hasRequiredDefinitionProvider = 1;
  Object.defineProperty(definitionProvider, "__esModule", { value: true });
  definitionProvider.DefaultDefinitionProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  class DefaultDefinitionProvider {
    constructor(services2) {
      this.nameProvider = services2.references.NameProvider;
      this.references = services2.references.References;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    getDefinition(document2, params) {
      const rootNode = document2.parseResult.value;
      if (rootNode.$cstNode) {
        const cst2 = rootNode.$cstNode;
        const sourceCstNode = (0, cst_util_1.findDeclarationNodeAtOffset)(cst2, document2.textDocument.offsetAt(params.position), this.grammarConfig.nameRegexp);
        if (sourceCstNode) {
          return this.collectLocationLinks(sourceCstNode, params);
        }
      }
      return void 0;
    }
    collectLocationLinks(sourceCstNode, _params) {
      var _a2;
      const goToLink = this.findLink(sourceCstNode);
      if (goToLink) {
        return [vscode_languageserver_1.LocationLink.create(goToLink.targetDocument.textDocument.uri, ((_a2 = goToLink.target.element.$cstNode) !== null && _a2 !== void 0 ? _a2 : goToLink.target).range, goToLink.target.range, goToLink.source.range)];
      }
      return void 0;
    }
    findLink(source) {
      const target = this.references.findDeclarationNode(source);
      if (target === null || target === void 0 ? void 0 : target.element) {
        const targetDocument = (0, ast_util_1.getDocument)(target.element);
        if (target && targetDocument) {
          return { source, target, targetDocument };
        }
      }
      return void 0;
    }
  }
  definitionProvider.DefaultDefinitionProvider = DefaultDefinitionProvider;
  return definitionProvider;
}
var documentHighlightProvider = {};
var hasRequiredDocumentHighlightProvider;
function requireDocumentHighlightProvider() {
  if (hasRequiredDocumentHighlightProvider)
    return documentHighlightProvider;
  hasRequiredDocumentHighlightProvider = 1;
  Object.defineProperty(documentHighlightProvider, "__esModule", { value: true });
  documentHighlightProvider.DefaultDocumentHighlightProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const uri_util_1 = requireUriUtil();
  class DefaultDocumentHighlightProvider {
    constructor(services2) {
      this.references = services2.references.References;
      this.nameProvider = services2.references.NameProvider;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    getDocumentHighlight(document2, params) {
      const rootNode = document2.parseResult.value.$cstNode;
      if (!rootNode) {
        return void 0;
      }
      const selectedNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode, document2.textDocument.offsetAt(params.position), this.grammarConfig.nameRegexp);
      if (!selectedNode) {
        return void 0;
      }
      const targetAstNode = this.references.findDeclaration(selectedNode);
      if (targetAstNode) {
        const includeDeclaration = (0, uri_util_1.equalURI)((0, ast_util_1.getDocument)(targetAstNode).uri, document2.uri);
        const options = { documentUri: document2.uri, includeDeclaration };
        const references2 = this.references.findReferences(targetAstNode, options);
        return references2.map((ref) => this.createDocumentHighlight(ref)).toArray();
      }
      return void 0;
    }
    /**
    * Override this method to determine the highlight kind of the given reference.
    */
    createDocumentHighlight(reference) {
      return vscode_languageserver_1.DocumentHighlight.create(reference.segment.range);
    }
  }
  documentHighlightProvider.DefaultDocumentHighlightProvider = DefaultDocumentHighlightProvider;
  return documentHighlightProvider;
}
var documentLinkProvider = {};
var hasRequiredDocumentLinkProvider;
function requireDocumentLinkProvider() {
  if (hasRequiredDocumentLinkProvider)
    return documentLinkProvider;
  hasRequiredDocumentLinkProvider = 1;
  Object.defineProperty(documentLinkProvider, "__esModule", { value: true });
  return documentLinkProvider;
}
var documentSymbolProvider = {};
var hasRequiredDocumentSymbolProvider;
function requireDocumentSymbolProvider() {
  if (hasRequiredDocumentSymbolProvider)
    return documentSymbolProvider;
  hasRequiredDocumentSymbolProvider = 1;
  Object.defineProperty(documentSymbolProvider, "__esModule", { value: true });
  documentSymbolProvider.DefaultDocumentSymbolProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast_util_1 = requireAstUtil();
  class DefaultDocumentSymbolProvider {
    constructor(services2) {
      this.nameProvider = services2.references.NameProvider;
    }
    getSymbols(document2) {
      return this.getSymbol(document2, document2.parseResult.value);
    }
    getSymbol(document2, astNode) {
      const node = astNode.$cstNode;
      const nameNode = this.nameProvider.getNameNode(astNode);
      if (nameNode && node) {
        const name2 = this.nameProvider.getName(astNode);
        return [{
          kind: this.getSymbolKind(astNode.$type),
          name: name2 !== null && name2 !== void 0 ? name2 : nameNode.text,
          range: node.range,
          selectionRange: nameNode.range,
          children: this.getChildSymbols(document2, astNode)
        }];
      } else {
        return this.getChildSymbols(document2, astNode) || [];
      }
    }
    getChildSymbols(document2, astNode) {
      const children = [];
      for (const child of (0, ast_util_1.streamContents)(astNode)) {
        const result = this.getSymbol(document2, child);
        children.push(...result);
      }
      if (children.length > 0) {
        return children;
      }
      return void 0;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getSymbolKind(type) {
      return vscode_languageserver_1.SymbolKind.Field;
    }
  }
  documentSymbolProvider.DefaultDocumentSymbolProvider = DefaultDocumentSymbolProvider;
  return documentSymbolProvider;
}
var executeCommandHandler = {};
var hasRequiredExecuteCommandHandler;
function requireExecuteCommandHandler() {
  if (hasRequiredExecuteCommandHandler)
    return executeCommandHandler;
  hasRequiredExecuteCommandHandler = 1;
  Object.defineProperty(executeCommandHandler, "__esModule", { value: true });
  executeCommandHandler.AbstractExecuteCommandHandler = void 0;
  const vscode_languageserver_1 = requireMain();
  class AbstractExecuteCommandHandler {
    get commands() {
      return Array.from(this.registeredCommands.keys());
    }
    constructor() {
      this.registeredCommands = /* @__PURE__ */ new Map();
      this.registerCommands(this.createCommandAcceptor());
    }
    async executeCommand(name2, args, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const command2 = this.registeredCommands.get(name2);
      if (command2) {
        return command2(args, cancelToken);
      } else {
        return void 0;
      }
    }
    createCommandAcceptor() {
      return (name2, execute) => this.registeredCommands.set(name2, execute);
    }
  }
  executeCommandHandler.AbstractExecuteCommandHandler = AbstractExecuteCommandHandler;
  return executeCommandHandler;
}
var hoverProvider = {};
var hasRequiredHoverProvider;
function requireHoverProvider() {
  if (hasRequiredHoverProvider)
    return hoverProvider;
  hasRequiredHoverProvider = 1;
  Object.defineProperty(hoverProvider, "__esModule", { value: true });
  hoverProvider.MultilineCommentHoverProvider = hoverProvider.AstNodeHoverProvider = void 0;
  const cst_util_1 = requireCstUtil();
  class AstNodeHoverProvider {
    constructor(services2) {
      this.references = services2.references.References;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    getHoverContent(document2, params) {
      var _a2, _b2;
      const rootNode = (_b2 = (_a2 = document2.parseResult) === null || _a2 === void 0 ? void 0 : _a2.value) === null || _b2 === void 0 ? void 0 : _b2.$cstNode;
      if (rootNode) {
        const offset = document2.textDocument.offsetAt(params.position);
        const cstNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode, offset, this.grammarConfig.nameRegexp);
        if (cstNode && cstNode.offset + cstNode.length > offset) {
          const targetNode = this.references.findDeclaration(cstNode);
          if (targetNode) {
            return this.getAstNodeHoverContent(targetNode);
          }
        }
      }
      return void 0;
    }
  }
  hoverProvider.AstNodeHoverProvider = AstNodeHoverProvider;
  class MultilineCommentHoverProvider extends AstNodeHoverProvider {
    constructor(services2) {
      super(services2);
      this.documentationProvider = services2.documentation.DocumentationProvider;
    }
    getAstNodeHoverContent(node) {
      const content2 = this.documentationProvider.getDocumentation(node);
      if (content2) {
        return {
          contents: {
            kind: "markdown",
            value: content2
          }
        };
      }
      return void 0;
    }
  }
  hoverProvider.MultilineCommentHoverProvider = MultilineCommentHoverProvider;
  return hoverProvider;
}
var implementationProvider = {};
var hasRequiredImplementationProvider;
function requireImplementationProvider() {
  if (hasRequiredImplementationProvider)
    return implementationProvider;
  hasRequiredImplementationProvider = 1;
  Object.defineProperty(implementationProvider, "__esModule", { value: true });
  implementationProvider.AbstractGoToImplementationProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const cst_util_1 = requireCstUtil();
  class AbstractGoToImplementationProvider {
    constructor(services2) {
      this.references = services2.references.References;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    getImplementation(document2, params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const rootNode = document2.parseResult.value;
      if (rootNode.$cstNode) {
        const sourceCstNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode.$cstNode, document2.textDocument.offsetAt(params.position), this.grammarConfig.nameRegexp);
        if (sourceCstNode) {
          const nodeDeclaration = this.references.findDeclaration(sourceCstNode);
          if (nodeDeclaration) {
            return this.collectGoToImplementationLocationLinks(nodeDeclaration, cancelToken);
          }
        }
      }
      return void 0;
    }
  }
  implementationProvider.AbstractGoToImplementationProvider = AbstractGoToImplementationProvider;
  return implementationProvider;
}
var inlayHintProvider = {};
var hasRequiredInlayHintProvider;
function requireInlayHintProvider() {
  if (hasRequiredInlayHintProvider)
    return inlayHintProvider;
  hasRequiredInlayHintProvider = 1;
  Object.defineProperty(inlayHintProvider, "__esModule", { value: true });
  inlayHintProvider.AbstractInlayHintProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast_util_1 = requireAstUtil();
  const promise_util_1 = requirePromiseUtil();
  class AbstractInlayHintProvider {
    async getInlayHints(document2, params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const root = document2.parseResult.value;
      const inlayHints = [];
      const acceptor = (hint) => inlayHints.push(hint);
      for (const node of (0, ast_util_1.streamAst)(root, { range: params.range })) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        this.computeInlayHint(node, acceptor);
      }
      return inlayHints;
    }
  }
  inlayHintProvider.AbstractInlayHintProvider = AbstractInlayHintProvider;
  return inlayHintProvider;
}
var languageServer = {};
var documents$1 = {};
var hasRequiredDocuments$1;
function requireDocuments$1() {
  if (hasRequiredDocuments$1)
    return documents$1;
  hasRequiredDocuments$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultLangiumDocuments = exports.DefaultLangiumDocumentFactory = exports.DocumentState = void 0;
    const vscode_languageserver_textdocument_1 = require$$1$1;
    const vscode_uri_1 = require$$1;
    const stream_1 = requireStream();
    var DocumentState;
    (function(DocumentState2) {
      DocumentState2[DocumentState2["Changed"] = 0] = "Changed";
      DocumentState2[DocumentState2["Parsed"] = 1] = "Parsed";
      DocumentState2[DocumentState2["IndexedContent"] = 2] = "IndexedContent";
      DocumentState2[DocumentState2["ComputedScopes"] = 3] = "ComputedScopes";
      DocumentState2[DocumentState2["Linked"] = 4] = "Linked";
      DocumentState2[DocumentState2["IndexedReferences"] = 5] = "IndexedReferences";
      DocumentState2[DocumentState2["Validated"] = 6] = "Validated";
    })(DocumentState = exports.DocumentState || (exports.DocumentState = {}));
    class DefaultLangiumDocumentFactory {
      constructor(services2) {
        this.serviceRegistry = services2.ServiceRegistry;
        this.textDocuments = services2.workspace.TextDocuments;
        this.fileSystemProvider = services2.workspace.FileSystemProvider;
      }
      fromTextDocument(textDocument, uri) {
        return this.create(uri !== null && uri !== void 0 ? uri : vscode_uri_1.URI.parse(textDocument.uri), textDocument);
      }
      fromString(text, uri) {
        return this.create(uri, text);
      }
      fromModel(model2, uri) {
        return this.create(uri, { $model: model2 });
      }
      create(uri, content2) {
        content2 !== null && content2 !== void 0 ? content2 : content2 = this.textDocuments.get(uri.toString());
        content2 !== null && content2 !== void 0 ? content2 : content2 = this.getContentFromFileSystem(uri);
        if (typeof content2 === "string") {
          const parseResult = this.parse(uri, content2);
          return this.createLangiumDocument(parseResult, uri, void 0, content2);
        } else if ("$model" in content2) {
          const parseResult = { value: content2.$model, parserErrors: [], lexerErrors: [] };
          return this.createLangiumDocument(parseResult, uri);
        } else {
          const parseResult = this.parse(uri, content2.getText());
          return this.createLangiumDocument(parseResult, uri, content2);
        }
      }
      /**
       * Create a LangiumDocument from a given parse result.
       *
       * A TextDocument is created on demand if it is not provided as argument here. Usually this
       * should not be necessary because the main purpose of the TextDocument is to convert between
       * text ranges and offsets, which is done solely in LSP request handling.
       *
       * With the introduction of {@link update} below this method is supposed to be mainly called
       * during workspace initialization and on addition/recognition of new files, while changes in
       * existing documents are processed via {@link update}.
       */
      createLangiumDocument(parseResult, uri, textDocument, text) {
        let document2;
        if (textDocument) {
          document2 = {
            parseResult,
            uri,
            state: DocumentState.Parsed,
            references: [],
            textDocument
          };
        } else {
          const textDocumentGetter = this.createTextDocumentGetter(uri, text);
          document2 = {
            parseResult,
            uri,
            state: DocumentState.Parsed,
            references: [],
            get textDocument() {
              return textDocumentGetter();
            }
          };
        }
        parseResult.value.$document = document2;
        return document2;
      }
      update(document2) {
        const textDocument = this.textDocuments.get(document2.uri.toString());
        const text = textDocument ? textDocument.getText() : this.getContentFromFileSystem(document2.uri);
        if (textDocument) {
          Object.defineProperty(document2, "textDocument", {
            value: textDocument
          });
        } else {
          const textDocumentGetter = this.createTextDocumentGetter(document2.uri, text);
          Object.defineProperty(document2, "textDocument", {
            get: textDocumentGetter
          });
        }
        document2.parseResult = this.parse(document2.uri, text);
        document2.parseResult.value.$document = document2;
        document2.state = DocumentState.Parsed;
        return document2;
      }
      getContentFromFileSystem(uri) {
        return this.fileSystemProvider.readFileSync(uri);
      }
      parse(uri, text) {
        const services2 = this.serviceRegistry.getServices(uri);
        return services2.parser.LangiumParser.parse(text);
      }
      createTextDocumentGetter(uri, text) {
        const serviceRegistry2 = this.serviceRegistry;
        let textDoc = void 0;
        return () => {
          return textDoc !== null && textDoc !== void 0 ? textDoc : textDoc = vscode_languageserver_textdocument_1.TextDocument.create(uri.toString(), serviceRegistry2.getServices(uri).LanguageMetaData.languageId, 0, text !== null && text !== void 0 ? text : "");
        };
      }
    }
    exports.DefaultLangiumDocumentFactory = DefaultLangiumDocumentFactory;
    class DefaultLangiumDocuments {
      constructor(services2) {
        this.documentMap = /* @__PURE__ */ new Map();
        this.langiumDocumentFactory = services2.workspace.LangiumDocumentFactory;
      }
      get all() {
        return (0, stream_1.stream)(this.documentMap.values());
      }
      addDocument(document2) {
        const uriString = document2.uri.toString();
        if (this.documentMap.has(uriString)) {
          throw new Error(`A document with the URI '${uriString}' is already present.`);
        }
        this.documentMap.set(uriString, document2);
      }
      getOrCreateDocument(uri) {
        const uriString = uri.toString();
        let langiumDoc = this.documentMap.get(uriString);
        if (langiumDoc) {
          return langiumDoc;
        }
        langiumDoc = this.langiumDocumentFactory.create(uri);
        this.documentMap.set(uriString, langiumDoc);
        return langiumDoc;
      }
      hasDocument(uri) {
        return this.documentMap.has(uri.toString());
      }
      invalidateDocument(uri) {
        const uriString = uri.toString();
        const langiumDoc = this.documentMap.get(uriString);
        if (langiumDoc) {
          langiumDoc.state = DocumentState.Changed;
          langiumDoc.references = [];
          langiumDoc.precomputedScopes = void 0;
          langiumDoc.diagnostics = [];
        }
        return langiumDoc;
      }
      deleteDocument(uri) {
        const uriString = uri.toString();
        const langiumDoc = this.documentMap.get(uriString);
        if (langiumDoc) {
          langiumDoc.state = DocumentState.Changed;
          this.documentMap.delete(uriString);
        }
        return langiumDoc;
      }
    }
    exports.DefaultLangiumDocuments = DefaultLangiumDocuments;
  })(documents$1);
  return documents$1;
}
var signatureHelpProvider = {};
var hasRequiredSignatureHelpProvider;
function requireSignatureHelpProvider() {
  if (hasRequiredSignatureHelpProvider)
    return signatureHelpProvider;
  hasRequiredSignatureHelpProvider = 1;
  Object.defineProperty(signatureHelpProvider, "__esModule", { value: true });
  signatureHelpProvider.mergeSignatureHelpOptions = signatureHelpProvider.AbstractSignatureHelpProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const cst_util_1 = requireCstUtil();
  class AbstractSignatureHelpProvider {
    provideSignatureHelp(document2, params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const rootNode = document2.parseResult.value;
      const cst2 = rootNode.$cstNode;
      if (cst2) {
        const sourceCstNode = (0, cst_util_1.findLeafNodeAtOffset)(cst2, document2.textDocument.offsetAt(params.position));
        if (sourceCstNode) {
          return this.getSignatureFromElement(sourceCstNode.element, cancelToken);
        }
      }
      return void 0;
    }
    /**
     * Override this getter to return the list of triggering characters for your language. To deactivate the signature help, return an empty object.
     */
    get signatureHelpOptions() {
      return {
        triggerCharacters: ["("],
        retriggerCharacters: [","]
      };
    }
  }
  signatureHelpProvider.AbstractSignatureHelpProvider = AbstractSignatureHelpProvider;
  function mergeSignatureHelpOptions(options) {
    const triggerCharacters = [];
    const retriggerCharacters = [];
    options.forEach((option) => {
      if (option === null || option === void 0 ? void 0 : option.triggerCharacters) {
        triggerCharacters.push(...option.triggerCharacters);
      }
      if (option === null || option === void 0 ? void 0 : option.retriggerCharacters) {
        retriggerCharacters.push(...option.retriggerCharacters);
      }
    });
    const mergedOptions = {
      triggerCharacters: triggerCharacters.length > 0 ? Array.from(new Set(triggerCharacters)).sort() : void 0,
      retriggerCharacters: retriggerCharacters.length > 0 ? Array.from(new Set(retriggerCharacters)).sort() : void 0
    };
    return mergedOptions.triggerCharacters ? mergedOptions : void 0;
  }
  signatureHelpProvider.mergeSignatureHelpOptions = mergeSignatureHelpOptions;
  return signatureHelpProvider;
}
var hasRequiredLanguageServer;
function requireLanguageServer() {
  if (hasRequiredLanguageServer)
    return languageServer;
  hasRequiredLanguageServer = 1;
  Object.defineProperty(languageServer, "__esModule", { value: true });
  languageServer.createRequestHandler = languageServer.createServerRequestHandler = languageServer.createCallHierarchyRequestHandler = languageServer.addCallHierarchyHandler = languageServer.addCodeLensHandler = languageServer.addSignatureHelpHandler = languageServer.addDocumentLinkHandler = languageServer.addExecuteCommandHandler = languageServer.addConfigurationChangeHandler = languageServer.addSemanticTokenHandler = languageServer.addInlayHintHandler = languageServer.addRenameHandler = languageServer.addFormattingHandler = languageServer.addFoldingRangeHandler = languageServer.addHoverHandler = languageServer.addDocumentHighlightsHandler = languageServer.addGoToDeclarationHandler = languageServer.addGoToImplementationHandler = languageServer.addGoToTypeDefinitionHandler = languageServer.addGotoDefinitionHandler = languageServer.addDocumentSymbolHandler = languageServer.addCodeActionHandler = languageServer.addFindReferencesHandler = languageServer.addCompletionHandler = languageServer.addDiagnosticsHandler = languageServer.addDocumentsHandler = languageServer.startLanguageServer = languageServer.DefaultLanguageServer = void 0;
  const vscode_languageserver_1 = requireMain();
  const vscode_uri_1 = require$$1;
  const dependency_injection_1 = requireDependencyInjection();
  const promise_util_1 = requirePromiseUtil();
  const documents_1 = requireDocuments$1();
  const completion_provider_1 = requireCompletionProvider();
  const semantic_token_provider_1 = requireSemanticTokenProvider();
  const signature_help_provider_1 = requireSignatureHelpProvider();
  class DefaultLanguageServer {
    constructor(services2) {
      this.onInitializeEmitter = new vscode_languageserver_1.Emitter();
      this.onInitializedEmitter = new vscode_languageserver_1.Emitter();
      this.services = services2;
    }
    get onInitialize() {
      return this.onInitializeEmitter.event;
    }
    get onInitialized() {
      return this.onInitializedEmitter.event;
    }
    async initialize(params) {
      this.eagerLoadServices();
      this.onInitializeEmitter.fire(params);
      this.onInitializeEmitter.dispose();
      return this.buildInitializeResult(params);
    }
    /**
     * Eagerly loads all services before emitting the `onInitialize` event.
     * Ensures that all services are able to catch the event.
     */
    eagerLoadServices() {
      (0, dependency_injection_1.eagerLoad)(this.services);
      this.services.ServiceRegistry.all.forEach((language2) => (0, dependency_injection_1.eagerLoad)(language2));
    }
    hasService(callback) {
      return this.services.ServiceRegistry.all.some((language2) => callback(language2) !== void 0);
    }
    buildInitializeResult(_params) {
      var _a2;
      const languages = this.services.ServiceRegistry.all;
      const hasFormattingService = this.hasService((e) => e.lsp.Formatter);
      const formattingOnTypeOptions = languages.map((e) => {
        var _a3;
        return (_a3 = e.lsp.Formatter) === null || _a3 === void 0 ? void 0 : _a3.formatOnTypeOptions;
      }).find((e) => Boolean(e));
      const hasCodeActionProvider = this.hasService((e) => e.lsp.CodeActionProvider);
      const hasSemanticTokensProvider = this.hasService((e) => e.lsp.SemanticTokenProvider);
      const commandNames = (_a2 = this.services.lsp.ExecuteCommandHandler) === null || _a2 === void 0 ? void 0 : _a2.commands;
      const documentLinkProvider2 = this.services.lsp.DocumentLinkProvider;
      const signatureHelpOptions = (0, signature_help_provider_1.mergeSignatureHelpOptions)(languages.map((e) => {
        var _a3;
        return (_a3 = e.lsp.SignatureHelp) === null || _a3 === void 0 ? void 0 : _a3.signatureHelpOptions;
      }));
      const hasGoToTypeProvider = this.hasService((e) => e.lsp.TypeProvider);
      const hasGoToImplementationProvider = this.hasService((e) => e.lsp.ImplementationProvider);
      const hasCompletionProvider = this.hasService((e) => e.lsp.CompletionProvider);
      const completionOptions = (0, completion_provider_1.mergeCompletionProviderOptions)(languages.map((e) => {
        var _a3;
        return (_a3 = e.lsp.CompletionProvider) === null || _a3 === void 0 ? void 0 : _a3.completionOptions;
      }));
      const hasReferencesProvider = this.hasService((e) => e.lsp.ReferencesProvider);
      const hasDocumentSymbolProvider = this.hasService((e) => e.lsp.DocumentSymbolProvider);
      const hasDefinitionProvider = this.hasService((e) => e.lsp.DefinitionProvider);
      const hasDocumentHighlightProvider = this.hasService((e) => e.lsp.DocumentHighlightProvider);
      const hasFoldingRangeProvider = this.hasService((e) => e.lsp.FoldingRangeProvider);
      const hasHoverProvider = this.hasService((e) => e.lsp.HoverProvider);
      const hasRenameProvider = this.hasService((e) => e.lsp.RenameProvider);
      const hasCallHierarchyProvider = this.hasService((e) => e.lsp.CallHierarchyProvider);
      const codeLensProvider2 = this.services.lsp.CodeLensProvider;
      const hasDeclarationProvider = this.hasService((e) => e.lsp.DeclarationProvider);
      const inlayHintProvider2 = this.services.lsp.InlayHintProvider;
      const result = {
        capabilities: {
          workspace: {
            workspaceFolders: {
              supported: true
            }
          },
          executeCommandProvider: commandNames && {
            commands: commandNames
          },
          textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Incremental,
          completionProvider: hasCompletionProvider ? completionOptions : void 0,
          referencesProvider: hasReferencesProvider,
          documentSymbolProvider: hasDocumentSymbolProvider,
          definitionProvider: hasDefinitionProvider,
          typeDefinitionProvider: hasGoToTypeProvider,
          documentHighlightProvider: hasDocumentHighlightProvider,
          codeActionProvider: hasCodeActionProvider,
          documentFormattingProvider: hasFormattingService,
          documentRangeFormattingProvider: hasFormattingService,
          documentOnTypeFormattingProvider: formattingOnTypeOptions,
          foldingRangeProvider: hasFoldingRangeProvider,
          hoverProvider: hasHoverProvider,
          renameProvider: hasRenameProvider ? {
            prepareProvider: true
          } : void 0,
          semanticTokensProvider: hasSemanticTokensProvider ? semantic_token_provider_1.DefaultSemanticTokenOptions : void 0,
          signatureHelpProvider: signatureHelpOptions,
          implementationProvider: hasGoToImplementationProvider,
          callHierarchyProvider: hasCallHierarchyProvider ? {} : void 0,
          documentLinkProvider: documentLinkProvider2 ? { resolveProvider: Boolean(documentLinkProvider2.resolveDocumentLink) } : void 0,
          codeLensProvider: codeLensProvider2 ? { resolveProvider: Boolean(codeLensProvider2.resolveCodeLens) } : void 0,
          declarationProvider: hasDeclarationProvider,
          inlayHintProvider: inlayHintProvider2 ? { resolveProvider: Boolean(inlayHintProvider2.resolveInlayHint) } : void 0
        }
      };
      return result;
    }
    async initialized(params) {
      this.onInitializedEmitter.fire(params);
      this.onInitializedEmitter.dispose();
    }
  }
  languageServer.DefaultLanguageServer = DefaultLanguageServer;
  function startLanguageServer(services2) {
    const connection2 = services2.lsp.Connection;
    if (!connection2) {
      throw new Error("Starting a language server requires the languageServer.Connection service to be set.");
    }
    addDocumentsHandler(connection2, services2);
    addDiagnosticsHandler(connection2, services2);
    addCompletionHandler(connection2, services2);
    addFindReferencesHandler(connection2, services2);
    addDocumentSymbolHandler(connection2, services2);
    addGotoDefinitionHandler(connection2, services2);
    addGoToTypeDefinitionHandler(connection2, services2);
    addGoToImplementationHandler(connection2, services2);
    addDocumentHighlightsHandler(connection2, services2);
    addFoldingRangeHandler(connection2, services2);
    addFormattingHandler(connection2, services2);
    addCodeActionHandler(connection2, services2);
    addRenameHandler(connection2, services2);
    addHoverHandler(connection2, services2);
    addInlayHintHandler(connection2, services2);
    addSemanticTokenHandler(connection2, services2);
    addExecuteCommandHandler(connection2, services2);
    addSignatureHelpHandler(connection2, services2);
    addCallHierarchyHandler(connection2, services2);
    addCodeLensHandler(connection2, services2);
    addDocumentLinkHandler(connection2, services2);
    addConfigurationChangeHandler(connection2, services2);
    addGoToDeclarationHandler(connection2, services2);
    connection2.onInitialize((params) => {
      return services2.lsp.LanguageServer.initialize(params);
    });
    connection2.onInitialized((params) => {
      return services2.lsp.LanguageServer.initialized(params);
    });
    const documents2 = services2.workspace.TextDocuments;
    documents2.listen(connection2);
    connection2.listen();
  }
  languageServer.startLanguageServer = startLanguageServer;
  function addDocumentsHandler(connection2, services2) {
    const documentBuilder2 = services2.workspace.DocumentBuilder;
    const mutex = services2.workspace.MutexLock;
    function onDidChange(changed, deleted) {
      mutex.lock((token) => documentBuilder2.update(changed, deleted, token));
    }
    const documents2 = services2.workspace.TextDocuments;
    documents2.onDidChangeContent((change) => {
      onDidChange([vscode_uri_1.URI.parse(change.document.uri)], []);
    });
    connection2.onDidChangeWatchedFiles((params) => {
      const changedUris = [];
      const deletedUris = [];
      for (const change of params.changes) {
        const uri = vscode_uri_1.URI.parse(change.uri);
        if (change.type === vscode_languageserver_1.FileChangeType.Deleted) {
          deletedUris.push(uri);
        } else {
          changedUris.push(uri);
        }
      }
      onDidChange(changedUris, deletedUris);
    });
  }
  languageServer.addDocumentsHandler = addDocumentsHandler;
  function addDiagnosticsHandler(connection2, services2) {
    const documentBuilder2 = services2.workspace.DocumentBuilder;
    documentBuilder2.onBuildPhase(documents_1.DocumentState.Validated, async (documents2, cancelToken) => {
      for (const document2 of documents2) {
        if (document2.diagnostics) {
          connection2.sendDiagnostics({
            uri: document2.uri.toString(),
            diagnostics: document2.diagnostics
          });
        }
        if (cancelToken.isCancellationRequested) {
          return;
        }
      }
    });
  }
  languageServer.addDiagnosticsHandler = addDiagnosticsHandler;
  function addCompletionHandler(connection2, services2) {
    connection2.onCompletion(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.CompletionProvider) === null || _a2 === void 0 ? void 0 : _a2.getCompletion(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addCompletionHandler = addCompletionHandler;
  function addFindReferencesHandler(connection2, services2) {
    connection2.onReferences(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.ReferencesProvider) === null || _a2 === void 0 ? void 0 : _a2.findReferences(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addFindReferencesHandler = addFindReferencesHandler;
  function addCodeActionHandler(connection2, services2) {
    connection2.onCodeAction(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.CodeActionProvider) === null || _a2 === void 0 ? void 0 : _a2.getCodeActions(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addCodeActionHandler = addCodeActionHandler;
  function addDocumentSymbolHandler(connection2, services2) {
    connection2.onDocumentSymbol(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.DocumentSymbolProvider) === null || _a2 === void 0 ? void 0 : _a2.getSymbols(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addDocumentSymbolHandler = addDocumentSymbolHandler;
  function addGotoDefinitionHandler(connection2, services2) {
    connection2.onDefinition(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.DefinitionProvider) === null || _a2 === void 0 ? void 0 : _a2.getDefinition(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addGotoDefinitionHandler = addGotoDefinitionHandler;
  function addGoToTypeDefinitionHandler(connection2, services2) {
    connection2.onTypeDefinition(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.TypeProvider) === null || _a2 === void 0 ? void 0 : _a2.getTypeDefinition(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addGoToTypeDefinitionHandler = addGoToTypeDefinitionHandler;
  function addGoToImplementationHandler(connection2, services2) {
    connection2.onImplementation(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.ImplementationProvider) === null || _a2 === void 0 ? void 0 : _a2.getImplementation(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addGoToImplementationHandler = addGoToImplementationHandler;
  function addGoToDeclarationHandler(connection2, services2) {
    connection2.onDeclaration(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.DeclarationProvider) === null || _a2 === void 0 ? void 0 : _a2.getDeclaration(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addGoToDeclarationHandler = addGoToDeclarationHandler;
  function addDocumentHighlightsHandler(connection2, services2) {
    connection2.onDocumentHighlight(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.DocumentHighlightProvider) === null || _a2 === void 0 ? void 0 : _a2.getDocumentHighlight(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addDocumentHighlightsHandler = addDocumentHighlightsHandler;
  function addHoverHandler(connection2, services2) {
    connection2.onHover(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.HoverProvider) === null || _a2 === void 0 ? void 0 : _a2.getHoverContent(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addHoverHandler = addHoverHandler;
  function addFoldingRangeHandler(connection2, services2) {
    connection2.onFoldingRanges(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.FoldingRangeProvider) === null || _a2 === void 0 ? void 0 : _a2.getFoldingRanges(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addFoldingRangeHandler = addFoldingRangeHandler;
  function addFormattingHandler(connection2, services2) {
    connection2.onDocumentFormatting(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.Formatter) === null || _a2 === void 0 ? void 0 : _a2.formatDocument(document2, params, cancelToken);
    }, services2));
    connection2.onDocumentRangeFormatting(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.Formatter) === null || _a2 === void 0 ? void 0 : _a2.formatDocumentRange(document2, params, cancelToken);
    }, services2));
    connection2.onDocumentOnTypeFormatting(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.Formatter) === null || _a2 === void 0 ? void 0 : _a2.formatDocumentOnType(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addFormattingHandler = addFormattingHandler;
  function addRenameHandler(connection2, services2) {
    connection2.onRenameRequest(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.RenameProvider) === null || _a2 === void 0 ? void 0 : _a2.rename(document2, params, cancelToken);
    }, services2));
    connection2.onPrepareRename(createRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.RenameProvider) === null || _a2 === void 0 ? void 0 : _a2.prepareRename(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addRenameHandler = addRenameHandler;
  function addInlayHintHandler(connection2, services2) {
    var _a2;
    const inlayHintProvider2 = services2.lsp.InlayHintProvider;
    if (inlayHintProvider2) {
      connection2.languages.inlayHint.on(createServerRequestHandler((_, document2, params, cancelToken) => inlayHintProvider2.getInlayHints(document2, params, cancelToken), services2));
      const resolveInlayHint = (_a2 = inlayHintProvider2.resolveInlayHint) === null || _a2 === void 0 ? void 0 : _a2.bind(inlayHintProvider2);
      if (resolveInlayHint) {
        connection2.languages.inlayHint.resolve(async (inlayHint2, token) => {
          try {
            return await resolveInlayHint(inlayHint2, token);
          } catch (err) {
            return responseError(err);
          }
        });
      }
    }
  }
  languageServer.addInlayHintHandler = addInlayHintHandler;
  function addSemanticTokenHandler(connection2, services2) {
    const emptyResult = { data: [] };
    connection2.languages.semanticTokens.on(createServerRequestHandler((services3, document2, params, cancelToken) => {
      if (services3.lsp.SemanticTokenProvider) {
        return services3.lsp.SemanticTokenProvider.semanticHighlight(document2, params, cancelToken);
      }
      return emptyResult;
    }, services2));
    connection2.languages.semanticTokens.onDelta(createServerRequestHandler((services3, document2, params, cancelToken) => {
      if (services3.lsp.SemanticTokenProvider) {
        return services3.lsp.SemanticTokenProvider.semanticHighlightDelta(document2, params, cancelToken);
      }
      return emptyResult;
    }, services2));
    connection2.languages.semanticTokens.onRange(createServerRequestHandler((services3, document2, params, cancelToken) => {
      if (services3.lsp.SemanticTokenProvider) {
        return services3.lsp.SemanticTokenProvider.semanticHighlightRange(document2, params, cancelToken);
      }
      return emptyResult;
    }, services2));
  }
  languageServer.addSemanticTokenHandler = addSemanticTokenHandler;
  function addConfigurationChangeHandler(connection2, services2) {
    connection2.onDidChangeConfiguration((change) => {
      if (change.settings) {
        services2.workspace.ConfigurationProvider.updateConfiguration(change);
      }
    });
  }
  languageServer.addConfigurationChangeHandler = addConfigurationChangeHandler;
  function addExecuteCommandHandler(connection2, services2) {
    const commandHandler = services2.lsp.ExecuteCommandHandler;
    if (commandHandler) {
      connection2.onExecuteCommand(async (params, token) => {
        var _a2;
        try {
          return await commandHandler.executeCommand(params.command, (_a2 = params.arguments) !== null && _a2 !== void 0 ? _a2 : [], token);
        } catch (err) {
          return responseError(err);
        }
      });
    }
  }
  languageServer.addExecuteCommandHandler = addExecuteCommandHandler;
  function addDocumentLinkHandler(connection2, services2) {
    var _a2;
    const documentLinkProvider2 = services2.lsp.DocumentLinkProvider;
    if (documentLinkProvider2) {
      connection2.onDocumentLinks(createServerRequestHandler((_, document2, params, cancelToken) => documentLinkProvider2.getDocumentLinks(document2, params, cancelToken), services2));
      const resolveDocumentLink = (_a2 = documentLinkProvider2.resolveDocumentLink) === null || _a2 === void 0 ? void 0 : _a2.bind(documentLinkProvider2);
      if (resolveDocumentLink) {
        connection2.onDocumentLinkResolve(async (documentLink, token) => {
          try {
            return await resolveDocumentLink(documentLink, token);
          } catch (err) {
            return responseError(err);
          }
        });
      }
    }
  }
  languageServer.addDocumentLinkHandler = addDocumentLinkHandler;
  function addSignatureHelpHandler(connection2, services2) {
    connection2.onSignatureHelp(createServerRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      return (_a2 = services3.lsp.SignatureHelp) === null || _a2 === void 0 ? void 0 : _a2.provideSignatureHelp(document2, params, cancelToken);
    }, services2));
  }
  languageServer.addSignatureHelpHandler = addSignatureHelpHandler;
  function addCodeLensHandler(connection2, services2) {
    var _a2;
    const codeLensProvider2 = services2.lsp.CodeLensProvider;
    if (codeLensProvider2) {
      connection2.onCodeLens(createServerRequestHandler((_, document2, params, cancelToken) => codeLensProvider2.provideCodeLens(document2, params, cancelToken), services2));
      const resolveCodeLens = (_a2 = codeLensProvider2.resolveCodeLens) === null || _a2 === void 0 ? void 0 : _a2.bind(codeLensProvider2);
      if (resolveCodeLens) {
        connection2.onCodeLensResolve(async (codeLens, token) => {
          try {
            return await resolveCodeLens(codeLens, token);
          } catch (err) {
            return responseError(err);
          }
        });
      }
    }
  }
  languageServer.addCodeLensHandler = addCodeLensHandler;
  function addCallHierarchyHandler(connection2, services2) {
    connection2.languages.callHierarchy.onPrepare(createServerRequestHandler((services3, document2, params, cancelToken) => {
      var _a2;
      if (services3.lsp.CallHierarchyProvider) {
        return (_a2 = services3.lsp.CallHierarchyProvider.prepareCallHierarchy(document2, params, cancelToken)) !== null && _a2 !== void 0 ? _a2 : null;
      }
      return null;
    }, services2));
    connection2.languages.callHierarchy.onIncomingCalls(createCallHierarchyRequestHandler((services3, params, cancelToken) => {
      var _a2;
      if (services3.lsp.CallHierarchyProvider) {
        return (_a2 = services3.lsp.CallHierarchyProvider.incomingCalls(params, cancelToken)) !== null && _a2 !== void 0 ? _a2 : null;
      }
      return null;
    }, services2));
    connection2.languages.callHierarchy.onOutgoingCalls(createCallHierarchyRequestHandler((services3, params, cancelToken) => {
      var _a2;
      if (services3.lsp.CallHierarchyProvider) {
        return (_a2 = services3.lsp.CallHierarchyProvider.outgoingCalls(params, cancelToken)) !== null && _a2 !== void 0 ? _a2 : null;
      }
      return null;
    }, services2));
  }
  languageServer.addCallHierarchyHandler = addCallHierarchyHandler;
  function createCallHierarchyRequestHandler(serviceCall, sharedServices) {
    const serviceRegistry2 = sharedServices.ServiceRegistry;
    return async (params, cancelToken) => {
      const uri = vscode_uri_1.URI.parse(params.item.uri);
      const language2 = serviceRegistry2.getServices(uri);
      if (!language2) {
        const message = `Could not find service instance for uri: '${uri.toString()}'`;
        console.error(message);
        throw new Error(message);
      }
      try {
        return await serviceCall(language2, params, cancelToken);
      } catch (err) {
        return responseError(err);
      }
    };
  }
  languageServer.createCallHierarchyRequestHandler = createCallHierarchyRequestHandler;
  function createServerRequestHandler(serviceCall, sharedServices) {
    const documents2 = sharedServices.workspace.LangiumDocuments;
    const serviceRegistry2 = sharedServices.ServiceRegistry;
    return async (params, cancelToken) => {
      const uri = vscode_uri_1.URI.parse(params.textDocument.uri);
      const language2 = serviceRegistry2.getServices(uri);
      if (!language2) {
        console.error(`Could not find service instance for uri: '${uri.toString()}'`);
        throw new Error();
      }
      const document2 = documents2.getOrCreateDocument(uri);
      if (!document2) {
        throw new Error();
      }
      try {
        return await serviceCall(language2, document2, params, cancelToken);
      } catch (err) {
        return responseError(err);
      }
    };
  }
  languageServer.createServerRequestHandler = createServerRequestHandler;
  function createRequestHandler(serviceCall, sharedServices) {
    const documents2 = sharedServices.workspace.LangiumDocuments;
    const serviceRegistry2 = sharedServices.ServiceRegistry;
    return async (params, cancelToken) => {
      const uri = vscode_uri_1.URI.parse(params.textDocument.uri);
      const language2 = serviceRegistry2.getServices(uri);
      if (!language2) {
        console.error(`Could not find service instance for uri: '${uri.toString()}'`);
        return null;
      }
      const document2 = documents2.getOrCreateDocument(uri);
      if (!document2) {
        return null;
      }
      try {
        return await serviceCall(language2, document2, params, cancelToken);
      } catch (err) {
        return responseError(err);
      }
    };
  }
  languageServer.createRequestHandler = createRequestHandler;
  function responseError(err) {
    if ((0, promise_util_1.isOperationCancelled)(err)) {
      return new vscode_languageserver_1.ResponseError(vscode_languageserver_1.LSPErrorCodes.RequestCancelled, "The request has been cancelled.");
    }
    if (err instanceof vscode_languageserver_1.ResponseError) {
      return err;
    }
    throw err;
  }
  return languageServer;
}
var referencesProvider = {};
var hasRequiredReferencesProvider;
function requireReferencesProvider() {
  if (hasRequiredReferencesProvider)
    return referencesProvider;
  hasRequiredReferencesProvider = 1;
  Object.defineProperty(referencesProvider, "__esModule", { value: true });
  referencesProvider.DefaultReferencesProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const cst_util_1 = requireCstUtil();
  class DefaultReferencesProvider {
    constructor(services2) {
      this.nameProvider = services2.references.NameProvider;
      this.references = services2.references.References;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    findReferences(document2, params) {
      const rootNode = document2.parseResult.value.$cstNode;
      if (!rootNode) {
        return [];
      }
      const selectedNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode, document2.textDocument.offsetAt(params.position), this.grammarConfig.nameRegexp);
      if (!selectedNode) {
        return [];
      }
      return this.getReferences(selectedNode, params, document2);
    }
    getReferences(selectedNode, params, _document) {
      const locations = [];
      const targetAstNode = this.references.findDeclaration(selectedNode);
      if (targetAstNode) {
        const options = { includeDeclaration: params.context.includeDeclaration };
        this.references.findReferences(targetAstNode, options).forEach((reference) => {
          locations.push(vscode_languageserver_1.Location.create(reference.sourceUri.toString(), reference.segment.range));
        });
      }
      return locations;
    }
  }
  referencesProvider.DefaultReferencesProvider = DefaultReferencesProvider;
  return referencesProvider;
}
var renameProvider = {};
var hasRequiredRenameProvider;
function requireRenameProvider() {
  if (hasRequiredRenameProvider)
    return renameProvider;
  hasRequiredRenameProvider = 1;
  Object.defineProperty(renameProvider, "__esModule", { value: true });
  renameProvider.DefaultRenameProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const name_provider_1 = requireNameProvider();
  const cst_util_1 = requireCstUtil();
  class DefaultRenameProvider {
    constructor(services2) {
      this.references = services2.references.References;
      this.nameProvider = services2.references.NameProvider;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    async rename(document2, params) {
      const changes = {};
      const rootNode = document2.parseResult.value.$cstNode;
      if (!rootNode)
        return void 0;
      const offset = document2.textDocument.offsetAt(params.position);
      const leafNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode, offset, this.grammarConfig.nameRegexp);
      if (!leafNode)
        return void 0;
      const targetNode = this.references.findDeclaration(leafNode);
      if (!targetNode)
        return void 0;
      const options = { onlyLocal: false, includeDeclaration: true };
      const references2 = this.references.findReferences(targetNode, options);
      references2.forEach((ref) => {
        const change = vscode_languageserver_1.TextEdit.replace(ref.segment.range, params.newName);
        const uri = ref.sourceUri.toString();
        if (changes[uri]) {
          changes[uri].push(change);
        } else {
          changes[uri] = [change];
        }
      });
      return { changes };
    }
    prepareRename(document2, params) {
      return this.renameNodeRange(document2, params.position);
    }
    renameNodeRange(doc2, position) {
      const rootNode = doc2.parseResult.value.$cstNode;
      const offset = doc2.textDocument.offsetAt(position);
      if (rootNode && offset) {
        const leafNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode, offset, this.grammarConfig.nameRegexp);
        if (!leafNode) {
          return void 0;
        }
        const isCrossRef = this.references.findDeclaration(leafNode);
        if (isCrossRef || this.isNameNode(leafNode)) {
          return leafNode.range;
        }
      }
      return void 0;
    }
    isNameNode(leafNode) {
      return (leafNode === null || leafNode === void 0 ? void 0 : leafNode.element) && (0, name_provider_1.isNamed)(leafNode.element) && leafNode === this.nameProvider.getNameNode(leafNode.element);
    }
  }
  renameProvider.DefaultRenameProvider = DefaultRenameProvider;
  return renameProvider;
}
var typeProvider = {};
var hasRequiredTypeProvider;
function requireTypeProvider() {
  if (hasRequiredTypeProvider)
    return typeProvider;
  hasRequiredTypeProvider = 1;
  Object.defineProperty(typeProvider, "__esModule", { value: true });
  typeProvider.AbstractTypeDefinitionProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const cst_util_1 = requireCstUtil();
  class AbstractTypeDefinitionProvider {
    constructor(services2) {
      this.references = services2.references.References;
    }
    getTypeDefinition(document2, params, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const rootNode = document2.parseResult.value;
      if (rootNode.$cstNode) {
        const sourceCstNode = (0, cst_util_1.findDeclarationNodeAtOffset)(rootNode.$cstNode, document2.textDocument.offsetAt(params.position));
        if (sourceCstNode) {
          const nodeDeclaration = this.references.findDeclaration(sourceCstNode);
          if (nodeDeclaration) {
            return this.collectGoToTypeLocationLinks(nodeDeclaration, cancelToken);
          }
        }
      }
      return void 0;
    }
  }
  typeProvider.AbstractTypeDefinitionProvider = AbstractTypeDefinitionProvider;
  return typeProvider;
}
var hasRequiredLsp;
function requireLsp() {
  if (hasRequiredLsp)
    return lsp;
  hasRequiredLsp = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireCompletionProvider(), exports);
    __exportStar(requireFollowElementComputation(), exports);
    __exportStar(requireCallHierarchyProvider(), exports);
    __exportStar(requireCodeAction(), exports);
    __exportStar(requireCodeLensProvider(), exports);
    __exportStar(requireDeclarationProvider(), exports);
    __exportStar(requireDefinitionProvider(), exports);
    __exportStar(requireDocumentHighlightProvider(), exports);
    __exportStar(requireDocumentLinkProvider(), exports);
    __exportStar(requireDocumentSymbolProvider(), exports);
    __exportStar(requireExecuteCommandHandler(), exports);
    __exportStar(requireFoldingRangeProvider(), exports);
    __exportStar(requireFormatter(), exports);
    __exportStar(requireHoverProvider(), exports);
    __exportStar(requireImplementationProvider(), exports);
    __exportStar(requireInlayHintProvider(), exports);
    __exportStar(requireLanguageServer(), exports);
    __exportStar(requireReferencesProvider(), exports);
    __exportStar(requireRenameProvider(), exports);
    __exportStar(requireSemanticTokenProvider(), exports);
    __exportStar(requireSignatureHelpProvider(), exports);
    __exportStar(requireTypeProvider(), exports);
  })(lsp);
  return lsp;
}
var hasRequiredGrammarDefinition;
function requireGrammarDefinition() {
  if (hasRequiredGrammarDefinition)
    return grammarDefinition;
  hasRequiredGrammarDefinition = 1;
  Object.defineProperty(grammarDefinition, "__esModule", { value: true });
  grammarDefinition.LangiumGrammarDefinitionProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const lsp_1 = requireLsp();
  const ast_util_1 = requireAstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  class LangiumGrammarDefinitionProvider extends lsp_1.DefaultDefinitionProvider {
    constructor(services2) {
      super(services2);
      this.documents = services2.shared.workspace.LangiumDocuments;
    }
    collectLocationLinks(sourceCstNode, _params) {
      var _a2, _b2, _c2, _d, _e, _f;
      const pathFeature = "path";
      if ((0, ast_1.isGrammarImport)(sourceCstNode.element) && ((_a2 = (0, grammar_util_1.findAssignment)(sourceCstNode)) === null || _a2 === void 0 ? void 0 : _a2.feature) === pathFeature) {
        const importedGrammar = (0, internal_grammar_util_1.resolveImport)(this.documents, sourceCstNode.element);
        if (importedGrammar === null || importedGrammar === void 0 ? void 0 : importedGrammar.$document) {
          const targetObject = (_b2 = this.findTargetObject(importedGrammar)) !== null && _b2 !== void 0 ? _b2 : importedGrammar;
          const selectionRange = (_d = (_c2 = this.nameProvider.getNameNode(targetObject)) === null || _c2 === void 0 ? void 0 : _c2.range) !== null && _d !== void 0 ? _d : vscode_languageserver_1.Range.create(0, 0, 0, 0);
          const previewRange = (_f = (_e = targetObject.$cstNode) === null || _e === void 0 ? void 0 : _e.range) !== null && _f !== void 0 ? _f : vscode_languageserver_1.Range.create(0, 0, 0, 0);
          return [
            vscode_languageserver_1.LocationLink.create(importedGrammar.$document.uri.toString(), previewRange, selectionRange, sourceCstNode.range)
          ];
        }
        return void 0;
      }
      return super.collectLocationLinks(sourceCstNode, _params);
    }
    findTargetObject(importedGrammar) {
      if (importedGrammar.isDeclared) {
        return importedGrammar;
      }
      return (0, ast_util_1.streamContents)(importedGrammar).head();
    }
  }
  grammarDefinition.LangiumGrammarDefinitionProvider = LangiumGrammarDefinitionProvider;
  return grammarDefinition;
}
var grammarCallHierarchy = {};
var hasRequiredGrammarCallHierarchy;
function requireGrammarCallHierarchy() {
  if (hasRequiredGrammarCallHierarchy)
    return grammarCallHierarchy;
  hasRequiredGrammarCallHierarchy = 1;
  Object.defineProperty(grammarCallHierarchy, "__esModule", { value: true });
  grammarCallHierarchy.LangiumGrammarCallHierarchyProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const call_hierarchy_provider_1 = requireCallHierarchyProvider();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const ast_1 = requireAst();
  class LangiumGrammarCallHierarchyProvider extends call_hierarchy_provider_1.AbstractCallHierarchyProvider {
    getIncomingCalls(node, references2) {
      if (!(0, ast_1.isParserRule)(node)) {
        return void 0;
      }
      const uniqueRules = /* @__PURE__ */ new Map();
      references2.forEach((ref) => {
        const doc2 = this.documents.getOrCreateDocument(ref.sourceUri);
        const rootNode = doc2.parseResult.value;
        if (!rootNode.$cstNode) {
          return;
        }
        const targetNode = (0, cst_util_1.findLeafNodeAtOffset)(rootNode.$cstNode, ref.segment.offset);
        if (!targetNode) {
          return;
        }
        const parserRule = (0, ast_util_1.getContainerOfType)(targetNode.element, ast_1.isParserRule);
        if (!parserRule || !parserRule.$cstNode) {
          return;
        }
        const nameNode = this.nameProvider.getNameNode(parserRule);
        if (!nameNode) {
          return;
        }
        const refDocUri = ref.sourceUri.toString();
        const ruleId = refDocUri + "@" + nameNode.text;
        uniqueRules.has(ruleId) ? uniqueRules.set(ruleId, { parserRule: parserRule.$cstNode, nameNode, targetNodes: [...uniqueRules.get(ruleId).targetNodes, targetNode], docUri: refDocUri }) : uniqueRules.set(ruleId, { parserRule: parserRule.$cstNode, nameNode, targetNodes: [targetNode], docUri: refDocUri });
      });
      if (uniqueRules.size === 0) {
        return void 0;
      }
      return Array.from(uniqueRules.values()).map((rule) => ({
        from: {
          kind: vscode_languageserver_1.SymbolKind.Method,
          name: rule.nameNode.text,
          range: rule.parserRule.range,
          selectionRange: rule.nameNode.range,
          uri: rule.docUri
        },
        fromRanges: rule.targetNodes.map((node2) => node2.range)
      }));
    }
    getOutgoingCalls(node) {
      if (!(0, ast_1.isParserRule)(node)) {
        return void 0;
      }
      const ruleCalls = (0, ast_util_1.streamAllContents)(node).filter(ast_1.isRuleCall).toArray();
      const uniqueRules = /* @__PURE__ */ new Map();
      ruleCalls.forEach((ruleCall) => {
        var _a2;
        const cstNode = ruleCall.$cstNode;
        if (!cstNode) {
          return;
        }
        const refCstNode = (_a2 = ruleCall.rule.ref) === null || _a2 === void 0 ? void 0 : _a2.$cstNode;
        if (!refCstNode) {
          return;
        }
        const refNameNode = this.nameProvider.getNameNode(refCstNode.element);
        if (!refNameNode) {
          return;
        }
        const refDocUri = (0, ast_util_1.getDocument)(refCstNode.element).uri.toString();
        const ruleId = refDocUri + "@" + refNameNode.text;
        uniqueRules.has(ruleId) ? uniqueRules.set(ruleId, { refCstNode, to: refNameNode, from: [...uniqueRules.get(ruleId).from, cstNode.range], docUri: refDocUri }) : uniqueRules.set(ruleId, { refCstNode, to: refNameNode, from: [cstNode.range], docUri: refDocUri });
      });
      if (uniqueRules.size === 0) {
        return void 0;
      }
      return Array.from(uniqueRules.values()).map((rule) => ({
        to: {
          kind: vscode_languageserver_1.SymbolKind.Method,
          name: rule.to.text,
          range: rule.refCstNode.range,
          selectionRange: rule.to.range,
          uri: rule.docUri
        },
        fromRanges: rule.from
      }));
    }
  }
  grammarCallHierarchy.LangiumGrammarCallHierarchyProvider = LangiumGrammarCallHierarchyProvider;
  return grammarCallHierarchy;
}
var validationResourcesCollector = {};
var hasRequiredValidationResourcesCollector;
function requireValidationResourcesCollector() {
  if (hasRequiredValidationResourcesCollector)
    return validationResourcesCollector;
  hasRequiredValidationResourcesCollector = 1;
  Object.defineProperty(validationResourcesCollector, "__esModule", { value: true });
  validationResourcesCollector.LangiumGrammarValidationResourcesCollector = void 0;
  const collections_1 = requireCollections();
  const stream_1 = requireStream();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const types_util_1 = requireTypesUtil();
  const ast_collector_1 = requireAstCollector();
  class LangiumGrammarValidationResourcesCollector {
    constructor(services2) {
      this.documents = services2.shared.workspace.LangiumDocuments;
    }
    collectValidationResources(grammar2) {
      const typeResources = (0, ast_collector_1.collectValidationAst)(grammar2, this.documents);
      return {
        typeToValidationInfo: this.collectValidationInfo(typeResources),
        typeToSuperProperties: this.collectSuperProperties(typeResources)
      };
    }
    collectValidationInfo({ astResources, inferred, declared }) {
      const res = /* @__PURE__ */ new Map();
      const typeNameToRulesActions = collectNameToRulesActions(astResources);
      for (const type of (0, types_util_1.mergeTypesAndInterfaces)(inferred)) {
        res.set(type.name, { inferred: type, inferredNodes: typeNameToRulesActions.get(type.name) });
      }
      const typeNametoInterfacesUnions = (0, stream_1.stream)(astResources.interfaces).concat(astResources.types).reduce((acc, type) => acc.set(type.name, type), /* @__PURE__ */ new Map());
      for (const type of (0, types_util_1.mergeTypesAndInterfaces)(declared)) {
        const node = typeNametoInterfacesUnions.get(type.name);
        if (node) {
          const inferred2 = res.get(type.name);
          res.set(type.name, Object.assign(Object.assign({}, inferred2 !== null && inferred2 !== void 0 ? inferred2 : {}), { declared: type, declaredNode: node }));
        }
      }
      return res;
    }
    collectSuperProperties({ inferred, declared }) {
      const typeToSuperProperties = /* @__PURE__ */ new Map();
      const interfaces = (0, types_util_1.mergeInterfaces)(inferred, declared);
      const interfaceMap = new Map(interfaces.map((e) => [e.name, e]));
      for (const type of (0, types_util_1.mergeInterfaces)(inferred, declared)) {
        typeToSuperProperties.set(type.name, this.addSuperProperties(type, interfaceMap, /* @__PURE__ */ new Set()));
      }
      return typeToSuperProperties;
    }
    addSuperProperties(interfaceType, map2, visited) {
      if (visited.has(interfaceType.name)) {
        return [];
      }
      visited.add(interfaceType.name);
      const properties2 = [...interfaceType.properties];
      for (const superType of interfaceType.superTypes) {
        const value = map2.get(superType.name);
        if (value) {
          properties2.push(...this.addSuperProperties(value, map2, visited));
        }
      }
      return properties2;
    }
  }
  validationResourcesCollector.LangiumGrammarValidationResourcesCollector = LangiumGrammarValidationResourcesCollector;
  function collectNameToRulesActions({ parserRules, datatypeRules }) {
    const acc = new collections_1.MultiMap();
    (0, stream_1.stream)(parserRules).concat(datatypeRules).forEach((rule) => acc.add((0, internal_grammar_util_1.getRuleType)(rule), rule));
    function collectActions(element) {
      if ((0, ast_1.isAction)(element)) {
        const name2 = (0, internal_grammar_util_1.getActionType)(element);
        if (name2) {
          acc.add(name2, element);
        }
      }
      if ((0, ast_1.isAlternatives)(element) || (0, ast_1.isGroup)(element) || (0, ast_1.isUnorderedGroup)(element)) {
        element.elements.forEach((e) => collectActions(e));
      }
    }
    parserRules.forEach((rule) => collectActions(rule.definition));
    return acc;
  }
  return validationResourcesCollector;
}
var typesValidator = {};
var documents = {};
var hasRequiredDocuments;
function requireDocuments() {
  if (hasRequiredDocuments)
    return documents;
  hasRequiredDocuments = 1;
  Object.defineProperty(documents, "__esModule", { value: true });
  documents.isInferredAndDeclared = documents.isInferred = documents.isDeclared = void 0;
  function isDeclared(type) {
    return type && "declared" in type;
  }
  documents.isDeclared = isDeclared;
  function isInferred(type) {
    return type && "inferred" in type;
  }
  documents.isInferred = isInferred;
  function isInferredAndDeclared(type) {
    return type && "inferred" in type && "declared" in type;
  }
  documents.isInferredAndDeclared = isInferredAndDeclared;
  return documents;
}
var hasRequiredTypesValidator;
function requireTypesValidator() {
  if (hasRequiredTypesValidator)
    return typesValidator;
  hasRequiredTypesValidator = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(typesValidator, "__esModule", { value: true });
  typesValidator.LangiumGrammarTypesValidator = typesValidator.registerTypeValidationChecks = void 0;
  const ast2 = __importStar(requireAst());
  const collections_1 = requireCollections();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const types_1 = requireTypes();
  const documents_1 = requireDocuments();
  function registerTypeValidationChecks(services2) {
    const registry = services2.validation.ValidationRegistry;
    const typesValidator2 = services2.validation.LangiumGrammarTypesValidator;
    const checks2 = {
      Action: [
        typesValidator2.checkActionIsNotUnionType
      ],
      Grammar: [
        typesValidator2.checkDeclaredTypesConsistency,
        typesValidator2.checkDeclaredAndInferredTypesConsistency
      ]
    };
    registry.register(checks2, typesValidator2);
  }
  typesValidator.registerTypeValidationChecks = registerTypeValidationChecks;
  class LangiumGrammarTypesValidator {
    checkDeclaredTypesConsistency(grammar2, accept) {
      var _a2;
      const validationResources = (_a2 = grammar2.$document) === null || _a2 === void 0 ? void 0 : _a2.validationResources;
      if (validationResources) {
        for (const typeInfo of validationResources.typeToValidationInfo.values()) {
          if ((0, documents_1.isDeclared)(typeInfo) && (0, types_1.isInterfaceType)(typeInfo.declared) && ast2.isInterface(typeInfo.declaredNode)) {
            const declInterface = typeInfo;
            validateInterfaceSuperTypes(declInterface, accept);
            validateSuperTypesConsistency(declInterface, accept);
          }
        }
      }
    }
    checkDeclaredAndInferredTypesConsistency(grammar2, accept) {
      var _a2;
      const validationResources = (_a2 = grammar2.$document) === null || _a2 === void 0 ? void 0 : _a2.validationResources;
      if (validationResources) {
        for (const typeInfo of validationResources.typeToValidationInfo.values()) {
          if ((0, documents_1.isInferred)(typeInfo) && typeInfo.inferred instanceof types_1.InterfaceType) {
            validateInferredInterface(typeInfo.inferred, accept);
          }
          if ((0, documents_1.isInferredAndDeclared)(typeInfo)) {
            validateDeclaredAndInferredConsistency(typeInfo, validationResources, accept);
          }
        }
      }
    }
    checkActionIsNotUnionType(action, accept) {
      if (ast2.isType(action.type)) {
        accept("error", "Actions cannot create union types.", { node: action, property: "type" });
      }
    }
  }
  typesValidator.LangiumGrammarTypesValidator = LangiumGrammarTypesValidator;
  function validateInferredInterface(inferredInterface, accept) {
    inferredInterface.properties.forEach((prop) => {
      var _a2;
      const flattened = (0, types_1.flattenPropertyUnion)(prop.type);
      if (flattened.length > 1) {
        const typeKind = (type) => (0, types_1.isReferenceType)(type) ? "ref" : "other";
        const firstKind = typeKind(flattened[0]);
        if (flattened.slice(1).some((type) => typeKind(type) !== firstKind)) {
          const targetNode = (_a2 = prop.astNodes.values().next()) === null || _a2 === void 0 ? void 0 : _a2.value;
          if (targetNode) {
            accept("error", `Mixing a cross-reference with other types is not supported. Consider splitting property "${prop.name}" into two or more different properties.`, { node: targetNode });
          }
        }
      }
    });
  }
  function validateInterfaceSuperTypes({ declared, declaredNode }, accept) {
    Array.from(declared.superTypes).forEach((superType, i) => {
      if (superType) {
        if ((0, types_1.isUnionType)(superType)) {
          accept("error", "Interfaces cannot extend union types.", { node: declaredNode, property: "superTypes", index: i });
        }
        if (!superType.declared) {
          accept("error", "Extending an inferred type is discouraged.", { node: declaredNode, property: "superTypes", index: i });
        }
      }
    });
  }
  function validateSuperTypesConsistency({ declared, declaredNode }, accept) {
    const nameToProp = declared.properties.reduce((acc, e) => acc.add(e.name, e), new collections_1.MultiMap());
    for (const [name2, props] of nameToProp.entriesGroupedByKey()) {
      if (props.length > 1) {
        for (const prop of props) {
          accept("error", `Cannot have two properties with the same name '${name2}'.`, {
            node: Array.from(prop.astNodes)[0],
            property: "name"
          });
        }
      }
    }
    const allSuperTypes = Array.from(declared.superTypes);
    for (let i = 0; i < allSuperTypes.length; i++) {
      for (let j2 = i + 1; j2 < allSuperTypes.length; j2++) {
        const outerType = allSuperTypes[i];
        const innerType = allSuperTypes[j2];
        const outerProps = (0, types_1.isInterfaceType)(outerType) ? outerType.superProperties : [];
        const innerProps = (0, types_1.isInterfaceType)(innerType) ? innerType.superProperties : [];
        const nonIdentical = getNonIdenticalProps(outerProps, innerProps);
        if (nonIdentical.length > 0) {
          accept("error", `Cannot simultaneously inherit from '${outerType}' and '${innerType}'. Their ${nonIdentical.map((e) => "'" + e + "'").join(", ")} properties are not identical.`, {
            node: declaredNode,
            property: "name"
          });
        }
      }
    }
    const allSuperProps = /* @__PURE__ */ new Set();
    for (const superType of allSuperTypes) {
      const props = (0, types_1.isInterfaceType)(superType) ? superType.superProperties : [];
      for (const prop of props) {
        allSuperProps.add(prop.name);
      }
    }
    for (const ownProp of declared.properties) {
      if (allSuperProps.has(ownProp.name)) {
        const propNode = declaredNode.attributes.find((e) => e.name === ownProp.name);
        if (propNode) {
          accept("error", `Cannot redeclare property '${ownProp.name}'. It is already inherited from another interface.`, {
            node: propNode,
            property: "name"
          });
        }
      }
    }
  }
  function getNonIdenticalProps(a2, b2) {
    const nonIdentical = [];
    for (const outerProp of a2) {
      const innerProp = b2.find((e) => e.name === outerProp.name);
      if (innerProp && !arePropTypesIdentical(outerProp, innerProp)) {
        nonIdentical.push(outerProp.name);
      }
    }
    return nonIdentical;
  }
  function arePropTypesIdentical(a2, b2) {
    return (0, types_1.isTypeAssignable)(a2.type, b2.type) && (0, types_1.isTypeAssignable)(b2.type, a2.type);
  }
  function validateDeclaredAndInferredConsistency(typeInfo, resources, accept) {
    const { inferred, declared, declaredNode, inferredNodes } = typeInfo;
    const typeName2 = declared.name;
    const applyErrorToRulesAndActions = (msgPostfix) => (errorMsg) => inferredNodes.forEach((node) => accept("error", `${errorMsg}${msgPostfix ? ` ${msgPostfix}` : ""}.`, (node === null || node === void 0 ? void 0 : node.inferredType) ? { node: node === null || node === void 0 ? void 0 : node.inferredType, property: "name" } : { node, property: ast2.isAction(node) ? "type" : "name" }));
    const applyErrorToProperties = (nodes, errorMessage) => nodes.forEach((node) => accept("error", errorMessage, { node, property: ast2.isAssignment(node) || ast2.isAction(node) ? "feature" : "name" }));
    const applyMissingPropErrorToRules = (missingProp) => {
      inferredNodes.forEach((node) => {
        if (ast2.isParserRule(node)) {
          const assignments = (0, internal_grammar_util_1.extractAssignments)(node.definition);
          if (assignments.find((e) => e.feature === missingProp) === void 0) {
            accept("error", `Property '${missingProp}' is missing in a rule '${node.name}', but is required in type '${typeName2}'.`, {
              node,
              property: "parameters"
            });
          }
        }
      });
    };
    if ((0, types_1.isUnionType)(inferred) && (0, types_1.isUnionType)(declared)) {
      validateAlternativesConsistency(inferred.type, declared.type, applyErrorToRulesAndActions(`in a rule that returns type '${typeName2}'`));
    } else if ((0, types_1.isInterfaceType)(inferred) && (0, types_1.isInterfaceType)(declared)) {
      validatePropertiesConsistency(inferred, declared, resources, applyErrorToRulesAndActions(`in a rule that returns type '${typeName2}'`), applyErrorToProperties, applyMissingPropErrorToRules);
    } else {
      const errorMessage = `Inferred and declared versions of type '${typeName2}' both have to be interfaces or unions.`;
      applyErrorToRulesAndActions()(errorMessage);
      accept("error", errorMessage, { node: declaredNode, property: "name" });
    }
  }
  function validateAlternativesConsistency(inferred, declared, applyErrorToInferredTypes) {
    if (!(0, types_1.isTypeAssignable)(inferred, declared)) {
      applyErrorToInferredTypes(`Cannot assign type '${(0, types_1.propertyTypeToString)(inferred, "DeclaredType")}' to '${(0, types_1.propertyTypeToString)(declared, "DeclaredType")}'`);
    }
  }
  function isOptionalProperty(prop) {
    return prop.optional || (0, types_1.isMandatoryPropertyType)(prop.type);
  }
  function validatePropertiesConsistency(inferred, declared, resources, applyErrorToType, applyErrorToProperties, applyMissingPropErrorToRules) {
    const ownInferredProps = new Set(inferred.properties.map((e) => e.name));
    const allInferredProps = new Map(inferred.allProperties.map((e) => [e.name, e]));
    const declaredProps = new Map(declared.superProperties.map((e) => [e.name, e]));
    const matchingProp = (type) => {
      if ((0, types_1.isPropertyUnion)(type))
        return { types: type.types.map((t2) => matchingProp(t2)) };
      if ((0, types_1.isReferenceType)(type))
        return { referenceType: matchingProp(type.referenceType) };
      if ((0, types_1.isArrayType)(type))
        return { elementType: matchingProp(type.elementType) };
      if ((0, types_1.isValueType)(type)) {
        const resource = resources.typeToValidationInfo.get(type.value.name);
        if (!resource)
          return type;
        return { value: "declared" in resource ? resource.declared : resource.inferred };
      }
      return type;
    };
    for (const [name2, foundProp] of allInferredProps.entries()) {
      const expectedProp = declaredProps.get(name2);
      if (expectedProp) {
        const foundTypeAsStr = (0, types_1.propertyTypeToString)(foundProp.type, "DeclaredType");
        const expectedTypeAsStr = (0, types_1.propertyTypeToString)(expectedProp.type, "DeclaredType");
        const typeAlternativesErrors = (0, types_1.isTypeAssignable)(matchingProp(foundProp.type), expectedProp.type);
        if (!typeAlternativesErrors) {
          const errorMsgPrefix = `The assigned type '${foundTypeAsStr}' is not compatible with the declared property '${name2}' of type '${expectedTypeAsStr}'.`;
          applyErrorToProperties(foundProp.astNodes, errorMsgPrefix);
        }
        if (foundProp.optional && !isOptionalProperty(expectedProp)) {
          applyMissingPropErrorToRules(name2);
        }
      } else if (ownInferredProps.has(name2)) {
        applyErrorToProperties(foundProp.astNodes, `A property '${name2}' is not expected.`);
      }
    }
    const missingProps = /* @__PURE__ */ new Set();
    for (const [name2, expectedProperties] of declaredProps.entries()) {
      const foundProperty = allInferredProps.get(name2);
      if (!foundProperty && !isOptionalProperty(expectedProperties)) {
        missingProps.add(name2);
      }
    }
    if (missingProps.size > 0) {
      const prefix = missingProps.size > 1 ? "Properties" : "A property";
      const postfix = missingProps.size > 1 ? "are expected" : "is expected";
      const props = Array.from(missingProps).map((e) => `'${e}'`).sort().join(", ");
      applyErrorToType(`${prefix} ${props} ${postfix}.`);
    }
  }
  return typesValidator;
}
var hasRequiredLangiumGrammarModule;
function requireLangiumGrammarModule() {
  if (hasRequiredLangiumGrammarModule)
    return langiumGrammarModule;
  hasRequiredLangiumGrammarModule = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createLangiumGrammarServices = exports.LangiumGrammarModule = void 0;
    const default_module_1 = requireDefaultModule();
    const dependency_injection_1 = requireDependencyInjection();
    const module_1 = requireModule();
    const grammar_scope_1 = requireGrammarScope();
    const validator_1 = requireValidator();
    const grammar_code_actions_1 = requireGrammarCodeActions();
    const grammar_folding_ranges_1 = requireGrammarFoldingRanges();
    const grammar_formatter_1 = requireGrammarFormatter();
    const grammar_semantic_tokens_1 = requireGrammarSemanticTokens();
    const grammar_naming_1 = requireGrammarNaming();
    const grammar_references_1 = requireGrammarReferences();
    const grammar_definition_1 = requireGrammarDefinition();
    const grammar_call_hierarchy_1 = requireGrammarCallHierarchy();
    const validation_resources_collector_1 = requireValidationResourcesCollector();
    const types_validator_1 = requireTypesValidator();
    const promise_util_1 = requirePromiseUtil();
    const documents_1 = requireDocuments$1();
    exports.LangiumGrammarModule = {
      validation: {
        LangiumGrammarValidator: (services2) => new validator_1.LangiumGrammarValidator(services2),
        ValidationResourcesCollector: (services2) => new validation_resources_collector_1.LangiumGrammarValidationResourcesCollector(services2),
        LangiumGrammarTypesValidator: () => new types_validator_1.LangiumGrammarTypesValidator()
      },
      lsp: {
        FoldingRangeProvider: (services2) => new grammar_folding_ranges_1.LangiumGrammarFoldingRangeProvider(services2),
        CodeActionProvider: (services2) => new grammar_code_actions_1.LangiumGrammarCodeActionProvider(services2),
        SemanticTokenProvider: (services2) => new grammar_semantic_tokens_1.LangiumGrammarSemanticTokenProvider(services2),
        Formatter: () => new grammar_formatter_1.LangiumGrammarFormatter(),
        DefinitionProvider: (services2) => new grammar_definition_1.LangiumGrammarDefinitionProvider(services2),
        CallHierarchyProvider: (services2) => new grammar_call_hierarchy_1.LangiumGrammarCallHierarchyProvider(services2)
      },
      references: {
        ScopeComputation: (services2) => new grammar_scope_1.LangiumGrammarScopeComputation(services2),
        ScopeProvider: (services2) => new grammar_scope_1.LangiumGrammarScopeProvider(services2),
        References: (services2) => new grammar_references_1.LangiumGrammarReferences(services2),
        NameProvider: () => new grammar_naming_1.LangiumGrammarNameProvider()
      }
    };
    function createLangiumGrammarServices(context, sharedModule) {
      const shared = (0, dependency_injection_1.inject)((0, default_module_1.createDefaultSharedModule)(context), module_1.LangiumGrammarGeneratedSharedModule, sharedModule);
      const grammar2 = (0, dependency_injection_1.inject)((0, default_module_1.createDefaultModule)({ shared }), module_1.LangiumGrammarGeneratedModule, exports.LangiumGrammarModule);
      addTypeCollectionPhase(shared, grammar2);
      shared.ServiceRegistry.register(grammar2);
      (0, validator_1.registerValidationChecks)(grammar2);
      (0, types_validator_1.registerTypeValidationChecks)(grammar2);
      return { shared, grammar: grammar2 };
    }
    exports.createLangiumGrammarServices = createLangiumGrammarServices;
    function addTypeCollectionPhase(sharedServices, grammarServices) {
      const documentBuilder2 = sharedServices.workspace.DocumentBuilder;
      documentBuilder2.onBuildPhase(documents_1.DocumentState.IndexedReferences, async (documents2, cancelToken) => {
        for (const document2 of documents2) {
          await (0, promise_util_1.interruptAndCheck)(cancelToken);
          const typeCollector = grammarServices.validation.ValidationResourcesCollector;
          const grammar2 = document2.parseResult.value;
          document2.validationResources = typeCollector.collectValidationResources(grammar2);
        }
      });
    }
  })(langiumGrammarModule);
  return langiumGrammarModule;
}
var fileSystemProvider = {};
var hasRequiredFileSystemProvider;
function requireFileSystemProvider() {
  if (hasRequiredFileSystemProvider)
    return fileSystemProvider;
  hasRequiredFileSystemProvider = 1;
  Object.defineProperty(fileSystemProvider, "__esModule", { value: true });
  fileSystemProvider.EmptyFileSystem = fileSystemProvider.EmptyFileSystemProvider = void 0;
  class EmptyFileSystemProvider {
    readFile() {
      throw new Error("Method not implemented.");
    }
    readFileSync() {
      throw new Error("Method not implemented.");
    }
    async readDirectory() {
      return [];
    }
  }
  fileSystemProvider.EmptyFileSystemProvider = EmptyFileSystemProvider;
  fileSystemProvider.EmptyFileSystem = {
    fileSystemProvider: () => new EmptyFileSystemProvider()
  };
  return fileSystemProvider;
}
var hasRequiredGrammarUtil;
function requireGrammarUtil() {
  if (hasRequiredGrammarUtil)
    return grammarUtil;
  hasRequiredGrammarUtil = 1;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(grammarUtil, "__esModule", { value: true });
  grammarUtil.createServicesForGrammar = grammarUtil.loadGrammarFromJson = grammarUtil.findNameAssignment = grammarUtil.findAssignment = grammarUtil.findNodesForKeywordInternal = grammarUtil.findNodeForKeyword = grammarUtil.findNodesForKeyword = grammarUtil.findNodeForProperty = grammarUtil.findNodesForProperty = grammarUtil.isCommentTerminal = grammarUtil.getCrossReferenceTerminal = grammarUtil.getAllReachableRules = grammarUtil.getHiddenRules = grammarUtil.getEntryRule = void 0;
  const vscode_uri_1 = require$$1;
  const default_module_1 = requireDefaultModule();
  const dependency_injection_1 = requireDependencyInjection();
  const ast_reflection_interpreter_1 = requireAstReflectionInterpreter();
  const ast2 = __importStar(requireAst());
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const langium_grammar_module_1 = requireLangiumGrammarModule();
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const file_system_provider_1 = requireFileSystemProvider();
  function getEntryRule(grammar2) {
    return grammar2.rules.find((e) => ast2.isParserRule(e) && e.entry);
  }
  grammarUtil.getEntryRule = getEntryRule;
  function getHiddenRules(grammar2) {
    return grammar2.rules.filter((e) => ast2.isTerminalRule(e) && e.hidden);
  }
  grammarUtil.getHiddenRules = getHiddenRules;
  function getAllReachableRules(grammar2, allTerminals) {
    const ruleNames = /* @__PURE__ */ new Set();
    const entryRule = getEntryRule(grammar2);
    if (!entryRule) {
      return new Set(grammar2.rules);
    }
    const topMostRules = [entryRule].concat(getHiddenRules(grammar2));
    for (const rule of topMostRules) {
      ruleDfs(rule, ruleNames, allTerminals);
    }
    const rules = /* @__PURE__ */ new Set();
    for (const rule of grammar2.rules) {
      if (ruleNames.has(rule.name) || ast2.isTerminalRule(rule) && rule.hidden) {
        rules.add(rule);
      }
    }
    return rules;
  }
  grammarUtil.getAllReachableRules = getAllReachableRules;
  function ruleDfs(rule, visitedSet, allTerminals) {
    visitedSet.add(rule.name);
    (0, ast_util_1.streamAllContents)(rule).forEach((node) => {
      if (ast2.isRuleCall(node) || allTerminals && ast2.isTerminalRuleCall(node)) {
        const refRule = node.rule.ref;
        if (refRule && !visitedSet.has(refRule.name)) {
          ruleDfs(refRule, visitedSet, allTerminals);
        }
      }
    });
  }
  function getCrossReferenceTerminal(crossRef) {
    if (crossRef.terminal) {
      return crossRef.terminal;
    } else if (crossRef.type.ref) {
      const nameAssigment = findNameAssignment(crossRef.type.ref);
      return nameAssigment === null || nameAssigment === void 0 ? void 0 : nameAssigment.terminal;
    }
    return void 0;
  }
  grammarUtil.getCrossReferenceTerminal = getCrossReferenceTerminal;
  function isCommentTerminal(terminalRule) {
    return terminalRule.hidden && !" ".match((0, internal_grammar_util_1.terminalRegex)(terminalRule));
  }
  grammarUtil.isCommentTerminal = isCommentTerminal;
  function findNodesForProperty(node, property) {
    if (!node || !property) {
      return [];
    }
    return findNodesForPropertyInternal(node, property, node.element, true);
  }
  grammarUtil.findNodesForProperty = findNodesForProperty;
  function findNodeForProperty(node, property, index) {
    if (!node || !property) {
      return void 0;
    }
    const nodes = findNodesForPropertyInternal(node, property, node.element, true);
    if (nodes.length === 0) {
      return void 0;
    }
    if (index !== void 0) {
      index = Math.max(0, Math.min(index, nodes.length - 1));
    } else {
      index = 0;
    }
    return nodes[index];
  }
  grammarUtil.findNodeForProperty = findNodeForProperty;
  function findNodesForPropertyInternal(node, property, element, first2) {
    if (!first2) {
      const nodeFeature = (0, ast_util_1.getContainerOfType)(node.feature, ast2.isAssignment);
      if (nodeFeature && nodeFeature.feature === property) {
        return [node];
      }
    }
    if ((0, syntax_tree_1.isCompositeCstNode)(node) && node.element === element) {
      return node.children.flatMap((e) => findNodesForPropertyInternal(e, property, element, false));
    }
    return [];
  }
  function findNodesForKeyword(node, keyword2) {
    if (!node) {
      return [];
    }
    return findNodesForKeywordInternal(node, keyword2, node === null || node === void 0 ? void 0 : node.element);
  }
  grammarUtil.findNodesForKeyword = findNodesForKeyword;
  function findNodeForKeyword(node, keyword2, index) {
    if (!node) {
      return void 0;
    }
    const nodes = findNodesForKeywordInternal(node, keyword2, node === null || node === void 0 ? void 0 : node.element);
    if (nodes.length === 0) {
      return void 0;
    }
    if (index !== void 0) {
      index = Math.max(0, Math.min(index, nodes.length - 1));
    } else {
      index = 0;
    }
    return nodes[index];
  }
  grammarUtil.findNodeForKeyword = findNodeForKeyword;
  function findNodesForKeywordInternal(node, keyword2, element) {
    if (node.element !== element) {
      return [];
    }
    if (ast2.isKeyword(node.feature) && node.feature.value === keyword2) {
      return [node];
    }
    const treeIterator = (0, cst_util_1.streamCst)(node).iterator();
    let result;
    const keywordNodes = [];
    do {
      result = treeIterator.next();
      if (!result.done) {
        const childNode = result.value;
        if (childNode.element === element) {
          if (ast2.isKeyword(childNode.feature) && childNode.feature.value === keyword2) {
            keywordNodes.push(childNode);
          }
        } else {
          treeIterator.prune();
        }
      }
    } while (!result.done);
    return keywordNodes;
  }
  grammarUtil.findNodesForKeywordInternal = findNodesForKeywordInternal;
  function findAssignment(cstNode) {
    var _a2;
    const astNode = cstNode.element;
    while (astNode === ((_a2 = cstNode.parent) === null || _a2 === void 0 ? void 0 : _a2.element)) {
      const assignment = (0, ast_util_1.getContainerOfType)(cstNode.feature, ast2.isAssignment);
      if (assignment) {
        return assignment;
      }
      cstNode = cstNode.parent;
    }
    return void 0;
  }
  grammarUtil.findAssignment = findAssignment;
  function findNameAssignment(type) {
    if (ast2.isInferredType(type)) {
      type = type.$container;
    }
    return findNameAssignmentInternal(type, /* @__PURE__ */ new Map());
  }
  grammarUtil.findNameAssignment = findNameAssignment;
  function findNameAssignmentInternal(type, cache2) {
    var _a2;
    function go(node, refType) {
      let childAssignment = void 0;
      const parentAssignment = (0, ast_util_1.getContainerOfType)(node, ast2.isAssignment);
      if (!parentAssignment) {
        childAssignment = findNameAssignmentInternal(refType, cache2);
      }
      cache2.set(type, childAssignment);
      return childAssignment;
    }
    if (cache2.has(type))
      return cache2.get(type);
    cache2.set(type, void 0);
    for (const node of (0, ast_util_1.streamAllContents)(type)) {
      if (ast2.isAssignment(node) && node.feature.toLowerCase() === "name") {
        cache2.set(type, node);
        return node;
      } else if (ast2.isRuleCall(node) && ast2.isParserRule(node.rule.ref)) {
        return go(node, node.rule.ref);
      } else if (ast2.isSimpleType(node) && ((_a2 = node.typeRef) === null || _a2 === void 0 ? void 0 : _a2.ref)) {
        return go(node, node.typeRef.ref);
      }
    }
    return void 0;
  }
  function loadGrammarFromJson(json) {
    var _a2;
    const services2 = (0, langium_grammar_module_1.createLangiumGrammarServices)(file_system_provider_1.EmptyFileSystem).grammar;
    const astNode = services2.serializer.JsonSerializer.deserialize(json);
    services2.shared.workspace.LangiumDocumentFactory.fromModel(astNode, vscode_uri_1.URI.parse(`memory://${(_a2 = astNode.name) !== null && _a2 !== void 0 ? _a2 : "grammar"}.langium`));
    return astNode;
  }
  grammarUtil.loadGrammarFromJson = loadGrammarFromJson;
  async function createServicesForGrammar(config2) {
    var _a2, _b2, _c2, _d, _e, _f;
    const grammarServices = (_a2 = config2.grammarServices) !== null && _a2 !== void 0 ? _a2 : (0, langium_grammar_module_1.createLangiumGrammarServices)(file_system_provider_1.EmptyFileSystem).grammar;
    const uri = vscode_uri_1.URI.parse("memory:///grammar.langium");
    const factory = grammarServices.shared.workspace.LangiumDocumentFactory;
    const grammarDocument = typeof config2.grammar === "string" ? factory.fromString(config2.grammar, uri) : (0, ast_util_1.getDocument)(config2.grammar);
    const grammarNode = grammarDocument.parseResult.value;
    const documentBuilder2 = grammarServices.shared.workspace.DocumentBuilder;
    await documentBuilder2.build([grammarDocument], { validationChecks: "none" });
    const parserConfig2 = (_b2 = config2.parserConfig) !== null && _b2 !== void 0 ? _b2 : {
      skipValidations: false
    };
    const languageMetaData2 = (_c2 = config2.languageMetaData) !== null && _c2 !== void 0 ? _c2 : {
      caseInsensitive: false,
      fileExtensions: [`.${(_e = (_d = grammarNode.name) === null || _d === void 0 ? void 0 : _d.toLowerCase()) !== null && _e !== void 0 ? _e : "unknown"}`],
      languageId: (_f = grammarNode.name) !== null && _f !== void 0 ? _f : "UNKNOWN"
    };
    const generatedSharedModule = {
      AstReflection: () => (0, ast_reflection_interpreter_1.interpretAstReflection)(grammarNode)
    };
    const generatedModule = {
      Grammar: () => grammarNode,
      LanguageMetaData: () => languageMetaData2,
      parser: {
        ParserConfig: () => parserConfig2
      }
    };
    const shared = (0, dependency_injection_1.inject)((0, default_module_1.createDefaultSharedModule)(file_system_provider_1.EmptyFileSystem), generatedSharedModule, config2.sharedModule);
    const services2 = (0, dependency_injection_1.inject)((0, default_module_1.createDefaultModule)({ shared }), generatedModule, config2.module);
    shared.ServiceRegistry.register(services2);
    return services2;
  }
  grammarUtil.createServicesForGrammar = createServicesForGrammar;
  return grammarUtil;
}
var hasRequiredGrammarConfig;
function requireGrammarConfig() {
  if (hasRequiredGrammarConfig)
    return grammarConfig;
  hasRequiredGrammarConfig = 1;
  Object.defineProperty(grammarConfig, "__esModule", { value: true });
  grammarConfig.createGrammarConfig = void 0;
  const cst_util_1 = requireCstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const regex_util_1 = requireRegexUtil();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  function createGrammarConfig(services2) {
    const rules = [];
    const grammar2 = services2.Grammar;
    for (const rule of grammar2.rules) {
      if ((0, ast_1.isTerminalRule)(rule) && (0, grammar_util_1.isCommentTerminal)(rule) && (0, regex_util_1.isMultilineComment)((0, internal_grammar_util_1.terminalRegex)(rule))) {
        rules.push(rule.name);
      }
    }
    return {
      multilineCommentRules: rules,
      nameRegexp: cst_util_1.DefaultNameRegexp
    };
  }
  grammarConfig.createGrammarConfig = createGrammarConfig;
  return grammarConfig;
}
var completionParserBuilder = {};
var langiumParser = {};
var api$4 = {};
var version = {};
var hasRequiredVersion;
function requireVersion() {
  if (hasRequiredVersion)
    return version;
  hasRequiredVersion = 1;
  Object.defineProperty(version, "__esModule", { value: true });
  version.VERSION = void 0;
  version.VERSION = "10.4.2";
  return version;
}
var parser$1 = {};
var _isPrototype;
var hasRequired_isPrototype;
function require_isPrototype() {
  if (hasRequired_isPrototype)
    return _isPrototype;
  hasRequired_isPrototype = 1;
  var objectProto = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  _isPrototype = isPrototype;
  return _isPrototype;
}
var _overArg;
var hasRequired_overArg;
function require_overArg() {
  if (hasRequired_overArg)
    return _overArg;
  hasRequired_overArg = 1;
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  _overArg = overArg;
  return _overArg;
}
var _nativeKeys;
var hasRequired_nativeKeys;
function require_nativeKeys() {
  if (hasRequired_nativeKeys)
    return _nativeKeys;
  hasRequired_nativeKeys = 1;
  var overArg = require_overArg();
  var nativeKeys = overArg(Object.keys, Object);
  _nativeKeys = nativeKeys;
  return _nativeKeys;
}
var _baseKeys;
var hasRequired_baseKeys;
function require_baseKeys() {
  if (hasRequired_baseKeys)
    return _baseKeys;
  hasRequired_baseKeys = 1;
  var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty2.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  _baseKeys = baseKeys;
  return _baseKeys;
}
var _freeGlobal;
var hasRequired_freeGlobal;
function require_freeGlobal() {
  if (hasRequired_freeGlobal)
    return _freeGlobal;
  hasRequired_freeGlobal = 1;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  _freeGlobal = freeGlobal;
  return _freeGlobal;
}
var _root;
var hasRequired_root;
function require_root() {
  if (hasRequired_root)
    return _root;
  hasRequired_root = 1;
  var freeGlobal = require_freeGlobal();
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  _root = root;
  return _root;
}
var _Symbol;
var hasRequired_Symbol;
function require_Symbol() {
  if (hasRequired_Symbol)
    return _Symbol;
  hasRequired_Symbol = 1;
  var root = require_root();
  var Symbol2 = root.Symbol;
  _Symbol = Symbol2;
  return _Symbol;
}
var _getRawTag;
var hasRequired_getRawTag;
function require_getRawTag() {
  if (hasRequired_getRawTag)
    return _getRawTag;
  hasRequired_getRawTag = 1;
  var Symbol2 = require_Symbol();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  _getRawTag = getRawTag;
  return _getRawTag;
}
var _objectToString;
var hasRequired_objectToString;
function require_objectToString() {
  if (hasRequired_objectToString)
    return _objectToString;
  hasRequired_objectToString = 1;
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  function objectToString2(value) {
    return nativeObjectToString.call(value);
  }
  _objectToString = objectToString2;
  return _objectToString;
}
var _baseGetTag;
var hasRequired_baseGetTag;
function require_baseGetTag() {
  if (hasRequired_baseGetTag)
    return _baseGetTag;
  hasRequired_baseGetTag = 1;
  var Symbol2 = require_Symbol(), getRawTag = require_getRawTag(), objectToString2 = require_objectToString();
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString2(value);
  }
  _baseGetTag = baseGetTag;
  return _baseGetTag;
}
var isObject_1;
var hasRequiredIsObject;
function requireIsObject() {
  if (hasRequiredIsObject)
    return isObject_1;
  hasRequiredIsObject = 1;
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  isObject_1 = isObject;
  return isObject_1;
}
var isFunction_1;
var hasRequiredIsFunction;
function requireIsFunction() {
  if (hasRequiredIsFunction)
    return isFunction_1;
  hasRequiredIsFunction = 1;
  var baseGetTag = require_baseGetTag(), isObject = requireIsObject();
  var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  isFunction_1 = isFunction;
  return isFunction_1;
}
var _coreJsData;
var hasRequired_coreJsData;
function require_coreJsData() {
  if (hasRequired_coreJsData)
    return _coreJsData;
  hasRequired_coreJsData = 1;
  var root = require_root();
  var coreJsData = root["__core-js_shared__"];
  _coreJsData = coreJsData;
  return _coreJsData;
}
var _isMasked;
var hasRequired_isMasked;
function require_isMasked() {
  if (hasRequired_isMasked)
    return _isMasked;
  hasRequired_isMasked = 1;
  var coreJsData = require_coreJsData();
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  _isMasked = isMasked;
  return _isMasked;
}
var _toSource;
var hasRequired_toSource;
function require_toSource() {
  if (hasRequired_toSource)
    return _toSource;
  hasRequired_toSource = 1;
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  _toSource = toSource;
  return _toSource;
}
var _baseIsNative;
var hasRequired_baseIsNative;
function require_baseIsNative() {
  if (hasRequired_baseIsNative)
    return _baseIsNative;
  hasRequired_baseIsNative = 1;
  var isFunction = requireIsFunction(), isMasked = require_isMasked(), isObject = requireIsObject(), toSource = require_toSource();
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype, objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  _baseIsNative = baseIsNative;
  return _baseIsNative;
}
var _getValue;
var hasRequired_getValue;
function require_getValue() {
  if (hasRequired_getValue)
    return _getValue;
  hasRequired_getValue = 1;
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  _getValue = getValue;
  return _getValue;
}
var _getNative;
var hasRequired_getNative;
function require_getNative() {
  if (hasRequired_getNative)
    return _getNative;
  hasRequired_getNative = 1;
  var baseIsNative = require_baseIsNative(), getValue = require_getValue();
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  _getNative = getNative;
  return _getNative;
}
var _DataView;
var hasRequired_DataView;
function require_DataView() {
  if (hasRequired_DataView)
    return _DataView;
  hasRequired_DataView = 1;
  var getNative = require_getNative(), root = require_root();
  var DataView2 = getNative(root, "DataView");
  _DataView = DataView2;
  return _DataView;
}
var _Map;
var hasRequired_Map;
function require_Map() {
  if (hasRequired_Map)
    return _Map;
  hasRequired_Map = 1;
  var getNative = require_getNative(), root = require_root();
  var Map2 = getNative(root, "Map");
  _Map = Map2;
  return _Map;
}
var _Promise;
var hasRequired_Promise;
function require_Promise() {
  if (hasRequired_Promise)
    return _Promise;
  hasRequired_Promise = 1;
  var getNative = require_getNative(), root = require_root();
  var Promise2 = getNative(root, "Promise");
  _Promise = Promise2;
  return _Promise;
}
var _Set;
var hasRequired_Set;
function require_Set() {
  if (hasRequired_Set)
    return _Set;
  hasRequired_Set = 1;
  var getNative = require_getNative(), root = require_root();
  var Set2 = getNative(root, "Set");
  _Set = Set2;
  return _Set;
}
var _WeakMap;
var hasRequired_WeakMap;
function require_WeakMap() {
  if (hasRequired_WeakMap)
    return _WeakMap;
  hasRequired_WeakMap = 1;
  var getNative = require_getNative(), root = require_root();
  var WeakMap2 = getNative(root, "WeakMap");
  _WeakMap = WeakMap2;
  return _WeakMap;
}
var _getTag;
var hasRequired_getTag;
function require_getTag() {
  if (hasRequired_getTag)
    return _getTag;
  hasRequired_getTag = 1;
  var DataView2 = require_DataView(), Map2 = require_Map(), Promise2 = require_Promise(), Set2 = require_Set(), WeakMap2 = require_WeakMap(), baseGetTag = require_baseGetTag(), toSource = require_toSource();
  var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
  var dataViewTag = "[object DataView]";
  var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
    getTag = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  _getTag = getTag;
  return _getTag;
}
var isObjectLike_1;
var hasRequiredIsObjectLike;
function requireIsObjectLike() {
  if (hasRequiredIsObjectLike)
    return isObjectLike_1;
  hasRequiredIsObjectLike = 1;
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  isObjectLike_1 = isObjectLike;
  return isObjectLike_1;
}
var _baseIsArguments;
var hasRequired_baseIsArguments;
function require_baseIsArguments() {
  if (hasRequired_baseIsArguments)
    return _baseIsArguments;
  hasRequired_baseIsArguments = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  _baseIsArguments = baseIsArguments;
  return _baseIsArguments;
}
var isArguments_1;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments)
    return isArguments_1;
  hasRequiredIsArguments = 1;
  var baseIsArguments = require_baseIsArguments(), isObjectLike = requireIsObjectLike();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var propertyIsEnumerable2 = objectProto.propertyIsEnumerable;
  var isArguments = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
  };
  isArguments_1 = isArguments;
  return isArguments_1;
}
var isArray_1;
var hasRequiredIsArray;
function requireIsArray() {
  if (hasRequiredIsArray)
    return isArray_1;
  hasRequiredIsArray = 1;
  var isArray = Array.isArray;
  isArray_1 = isArray;
  return isArray_1;
}
var isLength_1;
var hasRequiredIsLength;
function requireIsLength() {
  if (hasRequiredIsLength)
    return isLength_1;
  hasRequiredIsLength = 1;
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength2(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  isLength_1 = isLength2;
  return isLength_1;
}
var isArrayLike_1;
var hasRequiredIsArrayLike;
function requireIsArrayLike() {
  if (hasRequiredIsArrayLike)
    return isArrayLike_1;
  hasRequiredIsArrayLike = 1;
  var isFunction = requireIsFunction(), isLength2 = requireIsLength();
  function isArrayLike(value) {
    return value != null && isLength2(value.length) && !isFunction(value);
  }
  isArrayLike_1 = isArrayLike;
  return isArrayLike_1;
}
var isBuffer = { exports: {} };
var stubFalse_1;
var hasRequiredStubFalse;
function requireStubFalse() {
  if (hasRequiredStubFalse)
    return stubFalse_1;
  hasRequiredStubFalse = 1;
  function stubFalse() {
    return false;
  }
  stubFalse_1 = stubFalse;
  return stubFalse_1;
}
isBuffer.exports;
var hasRequiredIsBuffer;
function requireIsBuffer() {
  if (hasRequiredIsBuffer)
    return isBuffer.exports;
  hasRequiredIsBuffer = 1;
  (function(module, exports) {
    var root = require_root(), stubFalse = requireStubFalse();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer2 = nativeIsBuffer || stubFalse;
    module.exports = isBuffer2;
  })(isBuffer, isBuffer.exports);
  return isBuffer.exports;
}
var _baseIsTypedArray;
var hasRequired_baseIsTypedArray;
function require_baseIsTypedArray() {
  if (hasRequired_baseIsTypedArray)
    return _baseIsTypedArray;
  hasRequired_baseIsTypedArray = 1;
  var baseGetTag = require_baseGetTag(), isLength2 = requireIsLength(), isObjectLike = requireIsObjectLike();
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength2(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  _baseIsTypedArray = baseIsTypedArray;
  return _baseIsTypedArray;
}
var _baseUnary;
var hasRequired_baseUnary;
function require_baseUnary() {
  if (hasRequired_baseUnary)
    return _baseUnary;
  hasRequired_baseUnary = 1;
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  _baseUnary = baseUnary;
  return _baseUnary;
}
var _nodeUtil = { exports: {} };
_nodeUtil.exports;
var hasRequired_nodeUtil;
function require_nodeUtil() {
  if (hasRequired_nodeUtil)
    return _nodeUtil.exports;
  hasRequired_nodeUtil = 1;
  (function(module, exports) {
    var freeGlobal = require_freeGlobal();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);
  return _nodeUtil.exports;
}
var isTypedArray_1;
var hasRequiredIsTypedArray;
function requireIsTypedArray() {
  if (hasRequiredIsTypedArray)
    return isTypedArray_1;
  hasRequiredIsTypedArray = 1;
  var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  isTypedArray_1 = isTypedArray;
  return isTypedArray_1;
}
var isEmpty_1;
var hasRequiredIsEmpty;
function requireIsEmpty() {
  if (hasRequiredIsEmpty)
    return isEmpty_1;
  hasRequiredIsEmpty = 1;
  var baseKeys = require_baseKeys(), getTag = require_getTag(), isArguments = requireIsArguments(), isArray = requireIsArray(), isArrayLike = requireIsArrayLike(), isBuffer2 = requireIsBuffer(), isPrototype = require_isPrototype(), isTypedArray = requireIsTypedArray();
  var mapTag = "[object Map]", setTag = "[object Set]";
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty2.call(value, key)) {
        return false;
      }
    }
    return true;
  }
  isEmpty_1 = isEmpty;
  return isEmpty_1;
}
var _arrayMap;
var hasRequired_arrayMap;
function require_arrayMap() {
  if (hasRequired_arrayMap)
    return _arrayMap;
  hasRequired_arrayMap = 1;
  function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  _arrayMap = arrayMap;
  return _arrayMap;
}
var _listCacheClear;
var hasRequired_listCacheClear;
function require_listCacheClear() {
  if (hasRequired_listCacheClear)
    return _listCacheClear;
  hasRequired_listCacheClear = 1;
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  _listCacheClear = listCacheClear;
  return _listCacheClear;
}
var eq_1;
var hasRequiredEq;
function requireEq() {
  if (hasRequiredEq)
    return eq_1;
  hasRequiredEq = 1;
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  eq_1 = eq;
  return eq_1;
}
var _assocIndexOf;
var hasRequired_assocIndexOf;
function require_assocIndexOf() {
  if (hasRequired_assocIndexOf)
    return _assocIndexOf;
  hasRequired_assocIndexOf = 1;
  var eq = requireEq();
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  _assocIndexOf = assocIndexOf;
  return _assocIndexOf;
}
var _listCacheDelete;
var hasRequired_listCacheDelete;
function require_listCacheDelete() {
  if (hasRequired_listCacheDelete)
    return _listCacheDelete;
  hasRequired_listCacheDelete = 1;
  var assocIndexOf = require_assocIndexOf();
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  _listCacheDelete = listCacheDelete;
  return _listCacheDelete;
}
var _listCacheGet;
var hasRequired_listCacheGet;
function require_listCacheGet() {
  if (hasRequired_listCacheGet)
    return _listCacheGet;
  hasRequired_listCacheGet = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  _listCacheGet = listCacheGet;
  return _listCacheGet;
}
var _listCacheHas;
var hasRequired_listCacheHas;
function require_listCacheHas() {
  if (hasRequired_listCacheHas)
    return _listCacheHas;
  hasRequired_listCacheHas = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  _listCacheHas = listCacheHas;
  return _listCacheHas;
}
var _listCacheSet;
var hasRequired_listCacheSet;
function require_listCacheSet() {
  if (hasRequired_listCacheSet)
    return _listCacheSet;
  hasRequired_listCacheSet = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  _listCacheSet = listCacheSet;
  return _listCacheSet;
}
var _ListCache;
var hasRequired_ListCache;
function require_ListCache() {
  if (hasRequired_ListCache)
    return _ListCache;
  hasRequired_ListCache = 1;
  var listCacheClear = require_listCacheClear(), listCacheDelete = require_listCacheDelete(), listCacheGet = require_listCacheGet(), listCacheHas = require_listCacheHas(), listCacheSet = require_listCacheSet();
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  _ListCache = ListCache;
  return _ListCache;
}
var _stackClear;
var hasRequired_stackClear;
function require_stackClear() {
  if (hasRequired_stackClear)
    return _stackClear;
  hasRequired_stackClear = 1;
  var ListCache = require_ListCache();
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  _stackClear = stackClear;
  return _stackClear;
}
var _stackDelete;
var hasRequired_stackDelete;
function require_stackDelete() {
  if (hasRequired_stackDelete)
    return _stackDelete;
  hasRequired_stackDelete = 1;
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  _stackDelete = stackDelete;
  return _stackDelete;
}
var _stackGet;
var hasRequired_stackGet;
function require_stackGet() {
  if (hasRequired_stackGet)
    return _stackGet;
  hasRequired_stackGet = 1;
  function stackGet(key) {
    return this.__data__.get(key);
  }
  _stackGet = stackGet;
  return _stackGet;
}
var _stackHas;
var hasRequired_stackHas;
function require_stackHas() {
  if (hasRequired_stackHas)
    return _stackHas;
  hasRequired_stackHas = 1;
  function stackHas(key) {
    return this.__data__.has(key);
  }
  _stackHas = stackHas;
  return _stackHas;
}
var _nativeCreate;
var hasRequired_nativeCreate;
function require_nativeCreate() {
  if (hasRequired_nativeCreate)
    return _nativeCreate;
  hasRequired_nativeCreate = 1;
  var getNative = require_getNative();
  var nativeCreate = getNative(Object, "create");
  _nativeCreate = nativeCreate;
  return _nativeCreate;
}
var _hashClear;
var hasRequired_hashClear;
function require_hashClear() {
  if (hasRequired_hashClear)
    return _hashClear;
  hasRequired_hashClear = 1;
  var nativeCreate = require_nativeCreate();
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  _hashClear = hashClear;
  return _hashClear;
}
var _hashDelete;
var hasRequired_hashDelete;
function require_hashDelete() {
  if (hasRequired_hashDelete)
    return _hashDelete;
  hasRequired_hashDelete = 1;
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  _hashDelete = hashDelete;
  return _hashDelete;
}
var _hashGet;
var hasRequired_hashGet;
function require_hashGet() {
  if (hasRequired_hashGet)
    return _hashGet;
  hasRequired_hashGet = 1;
  var nativeCreate = require_nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  _hashGet = hashGet;
  return _hashGet;
}
var _hashHas;
var hasRequired_hashHas;
function require_hashHas() {
  if (hasRequired_hashHas)
    return _hashHas;
  hasRequired_hashHas = 1;
  var nativeCreate = require_nativeCreate();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  _hashHas = hashHas;
  return _hashHas;
}
var _hashSet;
var hasRequired_hashSet;
function require_hashSet() {
  if (hasRequired_hashSet)
    return _hashSet;
  hasRequired_hashSet = 1;
  var nativeCreate = require_nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  _hashSet = hashSet;
  return _hashSet;
}
var _Hash;
var hasRequired_Hash;
function require_Hash() {
  if (hasRequired_Hash)
    return _Hash;
  hasRequired_Hash = 1;
  var hashClear = require_hashClear(), hashDelete = require_hashDelete(), hashGet = require_hashGet(), hashHas = require_hashHas(), hashSet = require_hashSet();
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  _Hash = Hash;
  return _Hash;
}
var _mapCacheClear;
var hasRequired_mapCacheClear;
function require_mapCacheClear() {
  if (hasRequired_mapCacheClear)
    return _mapCacheClear;
  hasRequired_mapCacheClear = 1;
  var Hash = require_Hash(), ListCache = require_ListCache(), Map2 = require_Map();
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  _mapCacheClear = mapCacheClear;
  return _mapCacheClear;
}
var _isKeyable;
var hasRequired_isKeyable;
function require_isKeyable() {
  if (hasRequired_isKeyable)
    return _isKeyable;
  hasRequired_isKeyable = 1;
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  _isKeyable = isKeyable;
  return _isKeyable;
}
var _getMapData;
var hasRequired_getMapData;
function require_getMapData() {
  if (hasRequired_getMapData)
    return _getMapData;
  hasRequired_getMapData = 1;
  var isKeyable = require_isKeyable();
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  _getMapData = getMapData;
  return _getMapData;
}
var _mapCacheDelete;
var hasRequired_mapCacheDelete;
function require_mapCacheDelete() {
  if (hasRequired_mapCacheDelete)
    return _mapCacheDelete;
  hasRequired_mapCacheDelete = 1;
  var getMapData = require_getMapData();
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  _mapCacheDelete = mapCacheDelete;
  return _mapCacheDelete;
}
var _mapCacheGet;
var hasRequired_mapCacheGet;
function require_mapCacheGet() {
  if (hasRequired_mapCacheGet)
    return _mapCacheGet;
  hasRequired_mapCacheGet = 1;
  var getMapData = require_getMapData();
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  _mapCacheGet = mapCacheGet;
  return _mapCacheGet;
}
var _mapCacheHas;
var hasRequired_mapCacheHas;
function require_mapCacheHas() {
  if (hasRequired_mapCacheHas)
    return _mapCacheHas;
  hasRequired_mapCacheHas = 1;
  var getMapData = require_getMapData();
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  _mapCacheHas = mapCacheHas;
  return _mapCacheHas;
}
var _mapCacheSet;
var hasRequired_mapCacheSet;
function require_mapCacheSet() {
  if (hasRequired_mapCacheSet)
    return _mapCacheSet;
  hasRequired_mapCacheSet = 1;
  var getMapData = require_getMapData();
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  _mapCacheSet = mapCacheSet;
  return _mapCacheSet;
}
var _MapCache;
var hasRequired_MapCache;
function require_MapCache() {
  if (hasRequired_MapCache)
    return _MapCache;
  hasRequired_MapCache = 1;
  var mapCacheClear = require_mapCacheClear(), mapCacheDelete = require_mapCacheDelete(), mapCacheGet = require_mapCacheGet(), mapCacheHas = require_mapCacheHas(), mapCacheSet = require_mapCacheSet();
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  _MapCache = MapCache;
  return _MapCache;
}
var _stackSet;
var hasRequired_stackSet;
function require_stackSet() {
  if (hasRequired_stackSet)
    return _stackSet;
  hasRequired_stackSet = 1;
  var ListCache = require_ListCache(), Map2 = require_Map(), MapCache = require_MapCache();
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  _stackSet = stackSet;
  return _stackSet;
}
var _Stack;
var hasRequired_Stack;
function require_Stack() {
  if (hasRequired_Stack)
    return _Stack;
  hasRequired_Stack = 1;
  var ListCache = require_ListCache(), stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
  function Stack2(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  Stack2.prototype.clear = stackClear;
  Stack2.prototype["delete"] = stackDelete;
  Stack2.prototype.get = stackGet;
  Stack2.prototype.has = stackHas;
  Stack2.prototype.set = stackSet;
  _Stack = Stack2;
  return _Stack;
}
var _setCacheAdd;
var hasRequired_setCacheAdd;
function require_setCacheAdd() {
  if (hasRequired_setCacheAdd)
    return _setCacheAdd;
  hasRequired_setCacheAdd = 1;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  _setCacheAdd = setCacheAdd;
  return _setCacheAdd;
}
var _setCacheHas;
var hasRequired_setCacheHas;
function require_setCacheHas() {
  if (hasRequired_setCacheHas)
    return _setCacheHas;
  hasRequired_setCacheHas = 1;
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  _setCacheHas = setCacheHas;
  return _setCacheHas;
}
var _SetCache;
var hasRequired_SetCache;
function require_SetCache() {
  if (hasRequired_SetCache)
    return _SetCache;
  hasRequired_SetCache = 1;
  var MapCache = require_MapCache(), setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
  function SetCache(values2) {
    var index = -1, length = values2 == null ? 0 : values2.length;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values2[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  _SetCache = SetCache;
  return _SetCache;
}
var _arraySome;
var hasRequired_arraySome;
function require_arraySome() {
  if (hasRequired_arraySome)
    return _arraySome;
  hasRequired_arraySome = 1;
  function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  _arraySome = arraySome;
  return _arraySome;
}
var _cacheHas;
var hasRequired_cacheHas;
function require_cacheHas() {
  if (hasRequired_cacheHas)
    return _cacheHas;
  hasRequired_cacheHas = 1;
  function cacheHas(cache2, key) {
    return cache2.has(key);
  }
  _cacheHas = cacheHas;
  return _cacheHas;
}
var _equalArrays;
var hasRequired_equalArrays;
function require_equalArrays() {
  if (hasRequired_equalArrays)
    return _equalArrays;
  hasRequired_equalArrays = 1;
  var SetCache = require_SetCache(), arraySome = require_arraySome(), cacheHas = require_cacheHas();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen2 = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen2) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen2, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen2.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  _equalArrays = equalArrays;
  return _equalArrays;
}
var _Uint8Array;
var hasRequired_Uint8Array;
function require_Uint8Array() {
  if (hasRequired_Uint8Array)
    return _Uint8Array;
  hasRequired_Uint8Array = 1;
  var root = require_root();
  var Uint8Array2 = root.Uint8Array;
  _Uint8Array = Uint8Array2;
  return _Uint8Array;
}
var _mapToArray;
var hasRequired_mapToArray;
function require_mapToArray() {
  if (hasRequired_mapToArray)
    return _mapToArray;
  hasRequired_mapToArray = 1;
  function mapToArray(map2) {
    var index = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  _mapToArray = mapToArray;
  return _mapToArray;
}
var _setToArray;
var hasRequired_setToArray;
function require_setToArray() {
  if (hasRequired_setToArray)
    return _setToArray;
  hasRequired_setToArray = 1;
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  _setToArray = setToArray;
  return _setToArray;
}
var _equalByTag;
var hasRequired_equalByTag;
function require_equalByTag() {
  if (hasRequired_equalByTag)
    return _equalByTag;
  hasRequired_equalByTag = 1;
  var Symbol2 = require_Symbol(), Uint8Array2 = require_Uint8Array(), eq = requireEq(), equalArrays = require_equalArrays(), mapToArray = require_mapToArray(), setToArray = require_setToArray();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  _equalByTag = equalByTag;
  return _equalByTag;
}
var _arrayPush;
var hasRequired_arrayPush;
function require_arrayPush() {
  if (hasRequired_arrayPush)
    return _arrayPush;
  hasRequired_arrayPush = 1;
  function arrayPush(array, values2) {
    var index = -1, length = values2.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values2[index];
    }
    return array;
  }
  _arrayPush = arrayPush;
  return _arrayPush;
}
var _baseGetAllKeys;
var hasRequired_baseGetAllKeys;
function require_baseGetAllKeys() {
  if (hasRequired_baseGetAllKeys)
    return _baseGetAllKeys;
  hasRequired_baseGetAllKeys = 1;
  var arrayPush = require_arrayPush(), isArray = requireIsArray();
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  _baseGetAllKeys = baseGetAllKeys;
  return _baseGetAllKeys;
}
var _arrayFilter;
var hasRequired_arrayFilter;
function require_arrayFilter() {
  if (hasRequired_arrayFilter)
    return _arrayFilter;
  hasRequired_arrayFilter = 1;
  function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  _arrayFilter = arrayFilter;
  return _arrayFilter;
}
var stubArray_1;
var hasRequiredStubArray;
function requireStubArray() {
  if (hasRequiredStubArray)
    return stubArray_1;
  hasRequiredStubArray = 1;
  function stubArray() {
    return [];
  }
  stubArray_1 = stubArray;
  return stubArray_1;
}
var _getSymbols;
var hasRequired_getSymbols;
function require_getSymbols() {
  if (hasRequired_getSymbols)
    return _getSymbols;
  hasRequired_getSymbols = 1;
  var arrayFilter = require_arrayFilter(), stubArray = requireStubArray();
  var objectProto = Object.prototype;
  var propertyIsEnumerable2 = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable2.call(object, symbol);
    });
  };
  _getSymbols = getSymbols;
  return _getSymbols;
}
var _baseTimes;
var hasRequired_baseTimes;
function require_baseTimes() {
  if (hasRequired_baseTimes)
    return _baseTimes;
  hasRequired_baseTimes = 1;
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  _baseTimes = baseTimes;
  return _baseTimes;
}
var _isIndex;
var hasRequired_isIndex;
function require_isIndex() {
  if (hasRequired_isIndex)
    return _isIndex;
  hasRequired_isIndex = 1;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  _isIndex = isIndex;
  return _isIndex;
}
var _arrayLikeKeys;
var hasRequired_arrayLikeKeys;
function require_arrayLikeKeys() {
  if (hasRequired_arrayLikeKeys)
    return _arrayLikeKeys;
  hasRequired_arrayLikeKeys = 1;
  var baseTimes = require_baseTimes(), isArguments = requireIsArguments(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isIndex = require_isIndex(), isTypedArray = requireIsTypedArray();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  _arrayLikeKeys = arrayLikeKeys;
  return _arrayLikeKeys;
}
var keys_1;
var hasRequiredKeys$1;
function requireKeys$1() {
  if (hasRequiredKeys$1)
    return keys_1;
  hasRequiredKeys$1 = 1;
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = requireIsArrayLike();
  function keys2(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  keys_1 = keys2;
  return keys_1;
}
var _getAllKeys;
var hasRequired_getAllKeys;
function require_getAllKeys() {
  if (hasRequired_getAllKeys)
    return _getAllKeys;
  hasRequired_getAllKeys = 1;
  var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys2 = requireKeys$1();
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys2, getSymbols);
  }
  _getAllKeys = getAllKeys;
  return _getAllKeys;
}
var _equalObjects;
var hasRequired_equalObjects;
function require_equalObjects() {
  if (hasRequired_equalObjects)
    return _equalObjects;
  hasRequired_equalObjects = 1;
  var getAllKeys = require_getAllKeys();
  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  _equalObjects = equalObjects;
  return _equalObjects;
}
var _baseIsEqualDeep;
var hasRequired_baseIsEqualDeep;
function require_baseIsEqualDeep() {
  if (hasRequired_baseIsEqualDeep)
    return _baseIsEqualDeep;
  hasRequired_baseIsEqualDeep = 1;
  var Stack2 = require_Stack(), equalArrays = require_equalArrays(), equalByTag = require_equalByTag(), equalObjects = require_equalObjects(), getTag = require_getTag(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isTypedArray = requireIsTypedArray();
  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer2(object)) {
      if (!isBuffer2(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack2());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack2());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack2());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  _baseIsEqualDeep = baseIsEqualDeep;
  return _baseIsEqualDeep;
}
var _baseIsEqual;
var hasRequired_baseIsEqual;
function require_baseIsEqual() {
  if (hasRequired_baseIsEqual)
    return _baseIsEqual;
  hasRequired_baseIsEqual = 1;
  var baseIsEqualDeep = require_baseIsEqualDeep(), isObjectLike = requireIsObjectLike();
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  _baseIsEqual = baseIsEqual;
  return _baseIsEqual;
}
var _baseIsMatch;
var hasRequired_baseIsMatch;
function require_baseIsMatch() {
  if (hasRequired_baseIsMatch)
    return _baseIsMatch;
  hasRequired_baseIsMatch = 1;
  var Stack2 = require_Stack(), baseIsEqual = require_baseIsEqual();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack2();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  _baseIsMatch = baseIsMatch;
  return _baseIsMatch;
}
var _isStrictComparable;
var hasRequired_isStrictComparable;
function require_isStrictComparable() {
  if (hasRequired_isStrictComparable)
    return _isStrictComparable;
  hasRequired_isStrictComparable = 1;
  var isObject = requireIsObject();
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }
  _isStrictComparable = isStrictComparable;
  return _isStrictComparable;
}
var _getMatchData;
var hasRequired_getMatchData;
function require_getMatchData() {
  if (hasRequired_getMatchData)
    return _getMatchData;
  hasRequired_getMatchData = 1;
  var isStrictComparable = require_isStrictComparable(), keys2 = requireKeys$1();
  function getMatchData(object) {
    var result = keys2(object), length = result.length;
    while (length--) {
      var key = result[length], value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }
  _getMatchData = getMatchData;
  return _getMatchData;
}
var _matchesStrictComparable;
var hasRequired_matchesStrictComparable;
function require_matchesStrictComparable() {
  if (hasRequired_matchesStrictComparable)
    return _matchesStrictComparable;
  hasRequired_matchesStrictComparable = 1;
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  _matchesStrictComparable = matchesStrictComparable;
  return _matchesStrictComparable;
}
var _baseMatches;
var hasRequired_baseMatches;
function require_baseMatches() {
  if (hasRequired_baseMatches)
    return _baseMatches;
  hasRequired_baseMatches = 1;
  var baseIsMatch = require_baseIsMatch(), getMatchData = require_getMatchData(), matchesStrictComparable = require_matchesStrictComparable();
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }
  _baseMatches = baseMatches;
  return _baseMatches;
}
var isSymbol_1;
var hasRequiredIsSymbol;
function requireIsSymbol() {
  if (hasRequiredIsSymbol)
    return isSymbol_1;
  hasRequiredIsSymbol = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }
  isSymbol_1 = isSymbol;
  return isSymbol_1;
}
var _isKey;
var hasRequired_isKey;
function require_isKey() {
  if (hasRequired_isKey)
    return _isKey;
  hasRequired_isKey = 1;
  var isArray = requireIsArray(), isSymbol = requireIsSymbol();
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  _isKey = isKey;
  return _isKey;
}
var memoize_1;
var hasRequiredMemoize;
function requireMemoize() {
  if (hasRequiredMemoize)
    return memoize_1;
  hasRequiredMemoize = 1;
  var MapCache = require_MapCache();
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize(func, resolver2) {
    if (typeof func != "function" || resolver2 != null && typeof resolver2 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache2 = memoized.cache;
      if (cache2.has(key)) {
        return cache2.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache2.set(key, result) || cache2;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }
  memoize.Cache = MapCache;
  memoize_1 = memoize;
  return memoize_1;
}
var _memoizeCapped;
var hasRequired_memoizeCapped;
function require_memoizeCapped() {
  if (hasRequired_memoizeCapped)
    return _memoizeCapped;
  hasRequired_memoizeCapped = 1;
  var memoize = requireMemoize();
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize(func, function(key) {
      if (cache2.size === MAX_MEMOIZE_SIZE) {
        cache2.clear();
      }
      return key;
    });
    var cache2 = result.cache;
    return result;
  }
  _memoizeCapped = memoizeCapped;
  return _memoizeCapped;
}
var _stringToPath;
var hasRequired_stringToPath;
function require_stringToPath() {
  if (hasRequired_stringToPath)
    return _stringToPath;
  hasRequired_stringToPath = 1;
  var memoizeCapped = require_memoizeCapped();
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function(string2) {
    var result = [];
    if (string2.charCodeAt(0) === 46) {
      result.push("");
    }
    string2.replace(rePropName, function(match, number2, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
    });
    return result;
  });
  _stringToPath = stringToPath;
  return _stringToPath;
}
var _baseToString;
var hasRequired_baseToString;
function require_baseToString() {
  if (hasRequired_baseToString)
    return _baseToString;
  hasRequired_baseToString = 1;
  var Symbol2 = require_Symbol(), arrayMap = require_arrayMap(), isArray = requireIsArray(), isSymbol = requireIsSymbol();
  var INFINITY = 1 / 0;
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray(value)) {
      return arrayMap(value, baseToString) + "";
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  _baseToString = baseToString;
  return _baseToString;
}
var toString_1;
var hasRequiredToString;
function requireToString() {
  if (hasRequiredToString)
    return toString_1;
  hasRequiredToString = 1;
  var baseToString = require_baseToString();
  function toString(value) {
    return value == null ? "" : baseToString(value);
  }
  toString_1 = toString;
  return toString_1;
}
var _castPath;
var hasRequired_castPath;
function require_castPath() {
  if (hasRequired_castPath)
    return _castPath;
  hasRequired_castPath = 1;
  var isArray = requireIsArray(), isKey = require_isKey(), stringToPath = require_stringToPath(), toString = requireToString();
  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }
  _castPath = castPath;
  return _castPath;
}
var _toKey;
var hasRequired_toKey;
function require_toKey() {
  if (hasRequired_toKey)
    return _toKey;
  hasRequired_toKey = 1;
  var isSymbol = requireIsSymbol();
  var INFINITY = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  _toKey = toKey;
  return _toKey;
}
var _baseGet;
var hasRequired_baseGet;
function require_baseGet() {
  if (hasRequired_baseGet)
    return _baseGet;
  hasRequired_baseGet = 1;
  var castPath = require_castPath(), toKey = require_toKey();
  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index == length ? object : void 0;
  }
  _baseGet = baseGet;
  return _baseGet;
}
var get_1;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet)
    return get_1;
  hasRequiredGet = 1;
  var baseGet = require_baseGet();
  function get(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet(object, path);
    return result === void 0 ? defaultValue : result;
  }
  get_1 = get;
  return get_1;
}
var _baseHasIn;
var hasRequired_baseHasIn;
function require_baseHasIn() {
  if (hasRequired_baseHasIn)
    return _baseHasIn;
  hasRequired_baseHasIn = 1;
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  _baseHasIn = baseHasIn;
  return _baseHasIn;
}
var _hasPath;
var hasRequired_hasPath;
function require_hasPath() {
  if (hasRequired_hasPath)
    return _hasPath;
  hasRequired_hasPath = 1;
  var castPath = require_castPath(), isArguments = requireIsArguments(), isArray = requireIsArray(), isIndex = require_isIndex(), isLength2 = requireIsLength(), toKey = require_toKey();
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength2(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }
  _hasPath = hasPath;
  return _hasPath;
}
var hasIn_1;
var hasRequiredHasIn;
function requireHasIn() {
  if (hasRequiredHasIn)
    return hasIn_1;
  hasRequiredHasIn = 1;
  var baseHasIn = require_baseHasIn(), hasPath = require_hasPath();
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }
  hasIn_1 = hasIn;
  return hasIn_1;
}
var _baseMatchesProperty;
var hasRequired_baseMatchesProperty;
function require_baseMatchesProperty() {
  if (hasRequired_baseMatchesProperty)
    return _baseMatchesProperty;
  hasRequired_baseMatchesProperty = 1;
  var baseIsEqual = require_baseIsEqual(), get = requireGet(), hasIn = requireHasIn(), isKey = require_isKey(), isStrictComparable = require_isStrictComparable(), matchesStrictComparable = require_matchesStrictComparable(), toKey = require_toKey();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get(object, path);
      return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }
  _baseMatchesProperty = baseMatchesProperty;
  return _baseMatchesProperty;
}
var identity_1;
var hasRequiredIdentity;
function requireIdentity() {
  if (hasRequiredIdentity)
    return identity_1;
  hasRequiredIdentity = 1;
  function identity(value) {
    return value;
  }
  identity_1 = identity;
  return identity_1;
}
var _baseProperty;
var hasRequired_baseProperty;
function require_baseProperty() {
  if (hasRequired_baseProperty)
    return _baseProperty;
  hasRequired_baseProperty = 1;
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  _baseProperty = baseProperty;
  return _baseProperty;
}
var _basePropertyDeep;
var hasRequired_basePropertyDeep;
function require_basePropertyDeep() {
  if (hasRequired_basePropertyDeep)
    return _basePropertyDeep;
  hasRequired_basePropertyDeep = 1;
  var baseGet = require_baseGet();
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }
  _basePropertyDeep = basePropertyDeep;
  return _basePropertyDeep;
}
var property_1;
var hasRequiredProperty;
function requireProperty() {
  if (hasRequiredProperty)
    return property_1;
  hasRequiredProperty = 1;
  var baseProperty = require_baseProperty(), basePropertyDeep = require_basePropertyDeep(), isKey = require_isKey(), toKey = require_toKey();
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }
  property_1 = property;
  return property_1;
}
var _baseIteratee;
var hasRequired_baseIteratee;
function require_baseIteratee() {
  if (hasRequired_baseIteratee)
    return _baseIteratee;
  hasRequired_baseIteratee = 1;
  var baseMatches = require_baseMatches(), baseMatchesProperty = require_baseMatchesProperty(), identity = requireIdentity(), isArray = requireIsArray(), property = requireProperty();
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == "object") {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }
  _baseIteratee = baseIteratee;
  return _baseIteratee;
}
var _createBaseFor;
var hasRequired_createBaseFor;
function require_createBaseFor() {
  if (hasRequired_createBaseFor)
    return _createBaseFor;
  hasRequired_createBaseFor = 1;
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  _createBaseFor = createBaseFor;
  return _createBaseFor;
}
var _baseFor;
var hasRequired_baseFor;
function require_baseFor() {
  if (hasRequired_baseFor)
    return _baseFor;
  hasRequired_baseFor = 1;
  var createBaseFor = require_createBaseFor();
  var baseFor = createBaseFor();
  _baseFor = baseFor;
  return _baseFor;
}
var _baseForOwn;
var hasRequired_baseForOwn;
function require_baseForOwn() {
  if (hasRequired_baseForOwn)
    return _baseForOwn;
  hasRequired_baseForOwn = 1;
  var baseFor = require_baseFor(), keys2 = requireKeys$1();
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys2);
  }
  _baseForOwn = baseForOwn;
  return _baseForOwn;
}
var _createBaseEach;
var hasRequired_createBaseEach;
function require_createBaseEach() {
  if (hasRequired_createBaseEach)
    return _createBaseEach;
  hasRequired_createBaseEach = 1;
  var isArrayLike = requireIsArrayLike();
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  _createBaseEach = createBaseEach;
  return _createBaseEach;
}
var _baseEach;
var hasRequired_baseEach;
function require_baseEach() {
  if (hasRequired_baseEach)
    return _baseEach;
  hasRequired_baseEach = 1;
  var baseForOwn = require_baseForOwn(), createBaseEach = require_createBaseEach();
  var baseEach = createBaseEach(baseForOwn);
  _baseEach = baseEach;
  return _baseEach;
}
var _baseMap;
var hasRequired_baseMap;
function require_baseMap() {
  if (hasRequired_baseMap)
    return _baseMap;
  hasRequired_baseMap = 1;
  var baseEach = require_baseEach(), isArrayLike = requireIsArrayLike();
  function baseMap(collection, iteratee) {
    var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
    baseEach(collection, function(value, key, collection2) {
      result[++index] = iteratee(value, key, collection2);
    });
    return result;
  }
  _baseMap = baseMap;
  return _baseMap;
}
var map_1;
var hasRequiredMap;
function requireMap() {
  if (hasRequiredMap)
    return map_1;
  hasRequiredMap = 1;
  var arrayMap = require_arrayMap(), baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), isArray = requireIsArray();
  function map2(collection, iteratee) {
    var func = isArray(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee(iteratee, 3));
  }
  map_1 = map2;
  return map_1;
}
var _arrayEach;
var hasRequired_arrayEach;
function require_arrayEach() {
  if (hasRequired_arrayEach)
    return _arrayEach;
  hasRequired_arrayEach = 1;
  function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  _arrayEach = arrayEach;
  return _arrayEach;
}
var _castFunction;
var hasRequired_castFunction;
function require_castFunction() {
  if (hasRequired_castFunction)
    return _castFunction;
  hasRequired_castFunction = 1;
  var identity = requireIdentity();
  function castFunction(value) {
    return typeof value == "function" ? value : identity;
  }
  _castFunction = castFunction;
  return _castFunction;
}
var forEach_1;
var hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach)
    return forEach_1;
  hasRequiredForEach = 1;
  var arrayEach = require_arrayEach(), baseEach = require_baseEach(), castFunction = require_castFunction(), isArray = requireIsArray();
  function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, castFunction(iteratee));
  }
  forEach_1 = forEach;
  return forEach_1;
}
var _baseValues;
var hasRequired_baseValues;
function require_baseValues() {
  if (hasRequired_baseValues)
    return _baseValues;
  hasRequired_baseValues = 1;
  var arrayMap = require_arrayMap();
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }
  _baseValues = baseValues;
  return _baseValues;
}
var values_1;
var hasRequiredValues;
function requireValues() {
  if (hasRequiredValues)
    return values_1;
  hasRequiredValues = 1;
  var baseValues = require_baseValues(), keys2 = requireKeys$1();
  function values2(object) {
    return object == null ? [] : baseValues(object, keys2(object));
  }
  values_1 = values2;
  return values_1;
}
var _baseHas;
var hasRequired_baseHas;
function require_baseHas() {
  if (hasRequired_baseHas)
    return _baseHas;
  hasRequired_baseHas = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function baseHas(object, key) {
    return object != null && hasOwnProperty2.call(object, key);
  }
  _baseHas = baseHas;
  return _baseHas;
}
var has_1;
var hasRequiredHas;
function requireHas() {
  if (hasRequiredHas)
    return has_1;
  hasRequiredHas = 1;
  var baseHas = require_baseHas(), hasPath = require_hasPath();
  function has2(object, path) {
    return object != null && hasPath(object, path, baseHas);
  }
  has_1 = has2;
  return has_1;
}
var _defineProperty;
var hasRequired_defineProperty;
function require_defineProperty() {
  if (hasRequired_defineProperty)
    return _defineProperty;
  hasRequired_defineProperty = 1;
  var getNative = require_getNative();
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  _defineProperty = defineProperty;
  return _defineProperty;
}
var _baseAssignValue;
var hasRequired_baseAssignValue;
function require_baseAssignValue() {
  if (hasRequired_baseAssignValue)
    return _baseAssignValue;
  hasRequired_baseAssignValue = 1;
  var defineProperty = require_defineProperty();
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty) {
      defineProperty(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  _baseAssignValue = baseAssignValue;
  return _baseAssignValue;
}
var _assignValue;
var hasRequired_assignValue;
function require_assignValue() {
  if (hasRequired_assignValue)
    return _assignValue;
  hasRequired_assignValue = 1;
  var baseAssignValue = require_baseAssignValue(), eq = requireEq();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  _assignValue = assignValue;
  return _assignValue;
}
var _copyObject;
var hasRequired_copyObject;
function require_copyObject() {
  if (hasRequired_copyObject)
    return _copyObject;
  hasRequired_copyObject = 1;
  var assignValue = require_assignValue(), baseAssignValue = require_baseAssignValue();
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }
  _copyObject = copyObject;
  return _copyObject;
}
var _baseAssign;
var hasRequired_baseAssign;
function require_baseAssign() {
  if (hasRequired_baseAssign)
    return _baseAssign;
  hasRequired_baseAssign = 1;
  var copyObject = require_copyObject(), keys2 = requireKeys$1();
  function baseAssign(object, source) {
    return object && copyObject(source, keys2(source), object);
  }
  _baseAssign = baseAssign;
  return _baseAssign;
}
var _nativeKeysIn;
var hasRequired_nativeKeysIn;
function require_nativeKeysIn() {
  if (hasRequired_nativeKeysIn)
    return _nativeKeysIn;
  hasRequired_nativeKeysIn = 1;
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  _nativeKeysIn = nativeKeysIn;
  return _nativeKeysIn;
}
var _baseKeysIn;
var hasRequired_baseKeysIn;
function require_baseKeysIn() {
  if (hasRequired_baseKeysIn)
    return _baseKeysIn;
  hasRequired_baseKeysIn = 1;
  var isObject = requireIsObject(), isPrototype = require_isPrototype(), nativeKeysIn = require_nativeKeysIn();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  _baseKeysIn = baseKeysIn;
  return _baseKeysIn;
}
var keysIn_1;
var hasRequiredKeysIn;
function requireKeysIn() {
  if (hasRequiredKeysIn)
    return keysIn_1;
  hasRequiredKeysIn = 1;
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeysIn = require_baseKeysIn(), isArrayLike = requireIsArrayLike();
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  keysIn_1 = keysIn;
  return keysIn_1;
}
var _baseAssignIn;
var hasRequired_baseAssignIn;
function require_baseAssignIn() {
  if (hasRequired_baseAssignIn)
    return _baseAssignIn;
  hasRequired_baseAssignIn = 1;
  var copyObject = require_copyObject(), keysIn = requireKeysIn();
  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }
  _baseAssignIn = baseAssignIn;
  return _baseAssignIn;
}
var _cloneBuffer = { exports: {} };
_cloneBuffer.exports;
var hasRequired_cloneBuffer;
function require_cloneBuffer() {
  if (hasRequired_cloneBuffer)
    return _cloneBuffer.exports;
  hasRequired_cloneBuffer = 1;
  (function(module, exports) {
    var root = require_root();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);
  return _cloneBuffer.exports;
}
var _copyArray;
var hasRequired_copyArray;
function require_copyArray() {
  if (hasRequired_copyArray)
    return _copyArray;
  hasRequired_copyArray = 1;
  function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  _copyArray = copyArray;
  return _copyArray;
}
var _copySymbols;
var hasRequired_copySymbols;
function require_copySymbols() {
  if (hasRequired_copySymbols)
    return _copySymbols;
  hasRequired_copySymbols = 1;
  var copyObject = require_copyObject(), getSymbols = require_getSymbols();
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }
  _copySymbols = copySymbols;
  return _copySymbols;
}
var _getPrototype;
var hasRequired_getPrototype;
function require_getPrototype() {
  if (hasRequired_getPrototype)
    return _getPrototype;
  hasRequired_getPrototype = 1;
  var overArg = require_overArg();
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  _getPrototype = getPrototype;
  return _getPrototype;
}
var _getSymbolsIn;
var hasRequired_getSymbolsIn;
function require_getSymbolsIn() {
  if (hasRequired_getSymbolsIn)
    return _getSymbolsIn;
  hasRequired_getSymbolsIn = 1;
  var arrayPush = require_arrayPush(), getPrototype = require_getPrototype(), getSymbols = require_getSymbols(), stubArray = requireStubArray();
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }
    return result;
  };
  _getSymbolsIn = getSymbolsIn;
  return _getSymbolsIn;
}
var _copySymbolsIn;
var hasRequired_copySymbolsIn;
function require_copySymbolsIn() {
  if (hasRequired_copySymbolsIn)
    return _copySymbolsIn;
  hasRequired_copySymbolsIn = 1;
  var copyObject = require_copyObject(), getSymbolsIn = require_getSymbolsIn();
  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }
  _copySymbolsIn = copySymbolsIn;
  return _copySymbolsIn;
}
var _getAllKeysIn;
var hasRequired_getAllKeysIn;
function require_getAllKeysIn() {
  if (hasRequired_getAllKeysIn)
    return _getAllKeysIn;
  hasRequired_getAllKeysIn = 1;
  var baseGetAllKeys = require_baseGetAllKeys(), getSymbolsIn = require_getSymbolsIn(), keysIn = requireKeysIn();
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }
  _getAllKeysIn = getAllKeysIn;
  return _getAllKeysIn;
}
var _initCloneArray;
var hasRequired_initCloneArray;
function require_initCloneArray() {
  if (hasRequired_initCloneArray)
    return _initCloneArray;
  hasRequired_initCloneArray = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  _initCloneArray = initCloneArray;
  return _initCloneArray;
}
var _cloneArrayBuffer;
var hasRequired_cloneArrayBuffer;
function require_cloneArrayBuffer() {
  if (hasRequired_cloneArrayBuffer)
    return _cloneArrayBuffer;
  hasRequired_cloneArrayBuffer = 1;
  var Uint8Array2 = require_Uint8Array();
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  _cloneArrayBuffer = cloneArrayBuffer;
  return _cloneArrayBuffer;
}
var _cloneDataView;
var hasRequired_cloneDataView;
function require_cloneDataView() {
  if (hasRequired_cloneDataView)
    return _cloneDataView;
  hasRequired_cloneDataView = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer();
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  _cloneDataView = cloneDataView;
  return _cloneDataView;
}
var _cloneRegExp;
var hasRequired_cloneRegExp;
function require_cloneRegExp() {
  if (hasRequired_cloneRegExp)
    return _cloneRegExp;
  hasRequired_cloneRegExp = 1;
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  _cloneRegExp = cloneRegExp;
  return _cloneRegExp;
}
var _cloneSymbol;
var hasRequired_cloneSymbol;
function require_cloneSymbol() {
  if (hasRequired_cloneSymbol)
    return _cloneSymbol;
  hasRequired_cloneSymbol = 1;
  var Symbol2 = require_Symbol();
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  _cloneSymbol = cloneSymbol;
  return _cloneSymbol;
}
var _cloneTypedArray;
var hasRequired_cloneTypedArray;
function require_cloneTypedArray() {
  if (hasRequired_cloneTypedArray)
    return _cloneTypedArray;
  hasRequired_cloneTypedArray = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer();
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  _cloneTypedArray = cloneTypedArray;
  return _cloneTypedArray;
}
var _initCloneByTag;
var hasRequired_initCloneByTag;
function require_initCloneByTag() {
  if (hasRequired_initCloneByTag)
    return _initCloneByTag;
  hasRequired_initCloneByTag = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer(), cloneDataView = require_cloneDataView(), cloneRegExp = require_cloneRegExp(), cloneSymbol = require_cloneSymbol(), cloneTypedArray = require_cloneTypedArray();
  var boolTag = "[object Boolean]", dateTag = "[object Date]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case dataViewTag:
        return cloneDataView(object, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);
      case mapTag:
        return new Ctor();
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        return cloneRegExp(object);
      case setTag:
        return new Ctor();
      case symbolTag:
        return cloneSymbol(object);
    }
  }
  _initCloneByTag = initCloneByTag;
  return _initCloneByTag;
}
var _baseCreate;
var hasRequired_baseCreate;
function require_baseCreate() {
  if (hasRequired_baseCreate)
    return _baseCreate;
  hasRequired_baseCreate = 1;
  var isObject = requireIsObject();
  var objectCreate = Object.create;
  var baseCreate = function() {
    function object() {
    }
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  _baseCreate = baseCreate;
  return _baseCreate;
}
var _initCloneObject;
var hasRequired_initCloneObject;
function require_initCloneObject() {
  if (hasRequired_initCloneObject)
    return _initCloneObject;
  hasRequired_initCloneObject = 1;
  var baseCreate = require_baseCreate(), getPrototype = require_getPrototype(), isPrototype = require_isPrototype();
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  _initCloneObject = initCloneObject;
  return _initCloneObject;
}
var _baseIsMap;
var hasRequired_baseIsMap;
function require_baseIsMap() {
  if (hasRequired_baseIsMap)
    return _baseIsMap;
  hasRequired_baseIsMap = 1;
  var getTag = require_getTag(), isObjectLike = requireIsObjectLike();
  var mapTag = "[object Map]";
  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }
  _baseIsMap = baseIsMap;
  return _baseIsMap;
}
var isMap_1;
var hasRequiredIsMap;
function requireIsMap() {
  if (hasRequiredIsMap)
    return isMap_1;
  hasRequiredIsMap = 1;
  var baseIsMap = require_baseIsMap(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  isMap_1 = isMap;
  return isMap_1;
}
var _baseIsSet;
var hasRequired_baseIsSet;
function require_baseIsSet() {
  if (hasRequired_baseIsSet)
    return _baseIsSet;
  hasRequired_baseIsSet = 1;
  var getTag = require_getTag(), isObjectLike = requireIsObjectLike();
  var setTag = "[object Set]";
  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }
  _baseIsSet = baseIsSet;
  return _baseIsSet;
}
var isSet_1;
var hasRequiredIsSet;
function requireIsSet() {
  if (hasRequiredIsSet)
    return isSet_1;
  hasRequiredIsSet = 1;
  var baseIsSet = require_baseIsSet(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  isSet_1 = isSet;
  return isSet_1;
}
var _baseClone;
var hasRequired_baseClone;
function require_baseClone() {
  if (hasRequired_baseClone)
    return _baseClone;
  hasRequired_baseClone = 1;
  var Stack2 = require_Stack(), arrayEach = require_arrayEach(), assignValue = require_assignValue(), baseAssign = require_baseAssign(), baseAssignIn = require_baseAssignIn(), cloneBuffer = require_cloneBuffer(), copyArray = require_copyArray(), copySymbols = require_copySymbols(), copySymbolsIn = require_copySymbolsIn(), getAllKeys = require_getAllKeys(), getAllKeysIn = require_getAllKeysIn(), getTag = require_getTag(), initCloneArray = require_initCloneArray(), initCloneByTag = require_initCloneByTag(), initCloneObject = require_initCloneObject(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isMap = requireIsMap(), isObject = requireIsObject(), isSet = requireIsSet(), keys2 = requireKeys$1(), keysIn = requireKeysIn();
  var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer2(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack2());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
    var props = isArr ? void 0 : keysFunc(value);
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  _baseClone = baseClone;
  return _baseClone;
}
var clone_1;
var hasRequiredClone;
function requireClone() {
  if (hasRequiredClone)
    return clone_1;
  hasRequiredClone = 1;
  var baseClone = require_baseClone();
  var CLONE_SYMBOLS_FLAG = 4;
  function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
  }
  clone_1 = clone;
  return clone_1;
}
var api$3 = {};
var print = {};
var hasRequiredPrint;
function requirePrint() {
  if (hasRequiredPrint)
    return print;
  hasRequiredPrint = 1;
  Object.defineProperty(print, "__esModule", { value: true });
  print.PRINT_WARNING = print.PRINT_ERROR = void 0;
  function PRINT_ERROR(msg) {
    if (console && console.error) {
      console.error("Error: ".concat(msg));
    }
  }
  print.PRINT_ERROR = PRINT_ERROR;
  function PRINT_WARNING(msg) {
    if (console && console.warn) {
      console.warn("Warning: ".concat(msg));
    }
  }
  print.PRINT_WARNING = PRINT_WARNING;
  return print;
}
var timer = {};
var hasRequiredTimer;
function requireTimer() {
  if (hasRequiredTimer)
    return timer;
  hasRequiredTimer = 1;
  Object.defineProperty(timer, "__esModule", { value: true });
  timer.timer = void 0;
  function timer$1(func) {
    var start = (/* @__PURE__ */ new Date()).getTime();
    var val = func();
    var end = (/* @__PURE__ */ new Date()).getTime();
    var total = end - start;
    return { time: total, value: val };
  }
  timer.timer = timer$1;
  return timer;
}
var toFastProperties = {};
var hasRequiredToFastProperties;
function requireToFastProperties() {
  if (hasRequiredToFastProperties)
    return toFastProperties;
  hasRequiredToFastProperties = 1;
  Object.defineProperty(toFastProperties, "__esModule", { value: true });
  toFastProperties.toFastProperties = void 0;
  function toFastProperties$1(toBecomeFast) {
    function FakeConstructor() {
    }
    FakeConstructor.prototype = toBecomeFast;
    var fakeInstance = new FakeConstructor();
    function fakeAccess() {
      return typeof fakeInstance.bar;
    }
    fakeAccess();
    fakeAccess();
    return toBecomeFast;
  }
  toFastProperties.toFastProperties = toFastProperties$1;
  return toFastProperties;
}
var hasRequiredApi$3;
function requireApi$3() {
  if (hasRequiredApi$3)
    return api$3;
  hasRequiredApi$3 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toFastProperties = exports.timer = exports.PRINT_ERROR = exports.PRINT_WARNING = void 0;
    var print_1 = requirePrint();
    Object.defineProperty(exports, "PRINT_WARNING", { enumerable: true, get: function() {
      return print_1.PRINT_WARNING;
    } });
    Object.defineProperty(exports, "PRINT_ERROR", { enumerable: true, get: function() {
      return print_1.PRINT_ERROR;
    } });
    var timer_1 = requireTimer();
    Object.defineProperty(exports, "timer", { enumerable: true, get: function() {
      return timer_1.timer;
    } });
    var to_fast_properties_1 = requireToFastProperties();
    Object.defineProperty(exports, "toFastProperties", { enumerable: true, get: function() {
      return to_fast_properties_1.toFastProperties;
    } });
  })(api$3);
  return api$3;
}
var follow = {};
var rest = {};
var _baseSlice;
var hasRequired_baseSlice;
function require_baseSlice() {
  if (hasRequired_baseSlice)
    return _baseSlice;
  hasRequired_baseSlice = 1;
  function baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }
  _baseSlice = baseSlice;
  return _baseSlice;
}
var _trimmedEndIndex;
var hasRequired_trimmedEndIndex;
function require_trimmedEndIndex() {
  if (hasRequired_trimmedEndIndex)
    return _trimmedEndIndex;
  hasRequired_trimmedEndIndex = 1;
  var reWhitespace = /\s/;
  function trimmedEndIndex(string2) {
    var index = string2.length;
    while (index-- && reWhitespace.test(string2.charAt(index))) {
    }
    return index;
  }
  _trimmedEndIndex = trimmedEndIndex;
  return _trimmedEndIndex;
}
var _baseTrim;
var hasRequired_baseTrim;
function require_baseTrim() {
  if (hasRequired_baseTrim)
    return _baseTrim;
  hasRequired_baseTrim = 1;
  var trimmedEndIndex = require_trimmedEndIndex();
  var reTrimStart = /^\s+/;
  function baseTrim(string2) {
    return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
  }
  _baseTrim = baseTrim;
  return _baseTrim;
}
var toNumber_1;
var hasRequiredToNumber;
function requireToNumber() {
  if (hasRequiredToNumber)
    return toNumber_1;
  hasRequiredToNumber = 1;
  var baseTrim = require_baseTrim(), isObject = requireIsObject(), isSymbol = requireIsSymbol();
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  toNumber_1 = toNumber;
  return toNumber_1;
}
var toFinite_1;
var hasRequiredToFinite;
function requireToFinite() {
  if (hasRequiredToFinite)
    return toFinite_1;
  hasRequiredToFinite = 1;
  var toNumber = requireToNumber();
  var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  toFinite_1 = toFinite;
  return toFinite_1;
}
var toInteger_1;
var hasRequiredToInteger;
function requireToInteger() {
  if (hasRequiredToInteger)
    return toInteger_1;
  hasRequiredToInteger = 1;
  var toFinite = requireToFinite();
  function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  toInteger_1 = toInteger;
  return toInteger_1;
}
var drop_1;
var hasRequiredDrop;
function requireDrop() {
  if (hasRequiredDrop)
    return drop_1;
  hasRequiredDrop = 1;
  var baseSlice = require_baseSlice(), toInteger = requireToInteger();
  function drop(array, n2, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    n2 = guard || n2 === void 0 ? 1 : toInteger(n2);
    return baseSlice(array, n2 < 0 ? 0 : n2, length);
  }
  drop_1 = drop;
  return drop_1;
}
var api$2 = {};
var model$2 = {};
var isString_1;
var hasRequiredIsString;
function requireIsString() {
  if (hasRequiredIsString)
    return isString_1;
  hasRequiredIsString = 1;
  var baseGetTag = require_baseGetTag(), isArray = requireIsArray(), isObjectLike = requireIsObjectLike();
  var stringTag = "[object String]";
  function isString(value) {
    return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  }
  isString_1 = isString;
  return isString_1;
}
var _baseIsRegExp;
var hasRequired_baseIsRegExp;
function require_baseIsRegExp() {
  if (hasRequired_baseIsRegExp)
    return _baseIsRegExp;
  hasRequired_baseIsRegExp = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var regexpTag = "[object RegExp]";
  function baseIsRegExp(value) {
    return isObjectLike(value) && baseGetTag(value) == regexpTag;
  }
  _baseIsRegExp = baseIsRegExp;
  return _baseIsRegExp;
}
var isRegExp_1;
var hasRequiredIsRegExp;
function requireIsRegExp() {
  if (hasRequiredIsRegExp)
    return isRegExp_1;
  hasRequiredIsRegExp = 1;
  var baseIsRegExp = require_baseIsRegExp(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;
  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
  isRegExp_1 = isRegExp;
  return isRegExp_1;
}
var _baseSet;
var hasRequired_baseSet;
function require_baseSet() {
  if (hasRequired_baseSet)
    return _baseSet;
  hasRequired_baseSet = 1;
  var assignValue = require_assignValue(), castPath = require_castPath(), isIndex = require_isIndex(), isObject = requireIsObject(), toKey = require_toKey();
  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }
    path = castPath(path, object);
    var index = -1, length = path.length, lastIndex = length - 1, nested = object;
    while (nested != null && ++index < length) {
      var key = toKey(path[index]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }
  _baseSet = baseSet;
  return _baseSet;
}
var _basePickBy;
var hasRequired_basePickBy;
function require_basePickBy() {
  if (hasRequired_basePickBy)
    return _basePickBy;
  hasRequired_basePickBy = 1;
  var baseGet = require_baseGet(), baseSet = require_baseSet(), castPath = require_castPath();
  function basePickBy(object, paths, predicate) {
    var index = -1, length = paths.length, result = {};
    while (++index < length) {
      var path = paths[index], value = baseGet(object, path);
      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    return result;
  }
  _basePickBy = basePickBy;
  return _basePickBy;
}
var pickBy_1;
var hasRequiredPickBy;
function requirePickBy() {
  if (hasRequiredPickBy)
    return pickBy_1;
  hasRequiredPickBy = 1;
  var arrayMap = require_arrayMap(), baseIteratee = require_baseIteratee(), basePickBy = require_basePickBy(), getAllKeysIn = require_getAllKeysIn();
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap(getAllKeysIn(object), function(prop) {
      return [prop];
    });
    predicate = baseIteratee(predicate);
    return basePickBy(object, props, function(value, path) {
      return predicate(value, path[0]);
    });
  }
  pickBy_1 = pickBy;
  return pickBy_1;
}
var _apply;
var hasRequired_apply;
function require_apply() {
  if (hasRequired_apply)
    return _apply;
  hasRequired_apply = 1;
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  _apply = apply;
  return _apply;
}
var _overRest;
var hasRequired_overRest;
function require_overRest() {
  if (hasRequired_overRest)
    return _overRest;
  hasRequired_overRest = 1;
  var apply = require_apply();
  var nativeMax = Math.max;
  function overRest(func, start, transform) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }
  _overRest = overRest;
  return _overRest;
}
var constant_1;
var hasRequiredConstant;
function requireConstant() {
  if (hasRequiredConstant)
    return constant_1;
  hasRequiredConstant = 1;
  function constant(value) {
    return function() {
      return value;
    };
  }
  constant_1 = constant;
  return constant_1;
}
var _baseSetToString;
var hasRequired_baseSetToString;
function require_baseSetToString() {
  if (hasRequired_baseSetToString)
    return _baseSetToString;
  hasRequired_baseSetToString = 1;
  var constant = requireConstant(), defineProperty = require_defineProperty(), identity = requireIdentity();
  var baseSetToString = !defineProperty ? identity : function(func, string2) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string2),
      "writable": true
    });
  };
  _baseSetToString = baseSetToString;
  return _baseSetToString;
}
var _shortOut;
var hasRequired_shortOut;
function require_shortOut() {
  if (hasRequired_shortOut)
    return _shortOut;
  hasRequired_shortOut = 1;
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  _shortOut = shortOut;
  return _shortOut;
}
var _setToString;
var hasRequired_setToString;
function require_setToString() {
  if (hasRequired_setToString)
    return _setToString;
  hasRequired_setToString = 1;
  var baseSetToString = require_baseSetToString(), shortOut = require_shortOut();
  var setToString = shortOut(baseSetToString);
  _setToString = setToString;
  return _setToString;
}
var _baseRest;
var hasRequired_baseRest;
function require_baseRest() {
  if (hasRequired_baseRest)
    return _baseRest;
  hasRequired_baseRest = 1;
  var identity = requireIdentity(), overRest = require_overRest(), setToString = require_setToString();
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  _baseRest = baseRest;
  return _baseRest;
}
var _isIterateeCall;
var hasRequired_isIterateeCall;
function require_isIterateeCall() {
  if (hasRequired_isIterateeCall)
    return _isIterateeCall;
  hasRequired_isIterateeCall = 1;
  var eq = requireEq(), isArrayLike = requireIsArrayLike(), isIndex = require_isIndex(), isObject = requireIsObject();
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
      return eq(object[index], value);
    }
    return false;
  }
  _isIterateeCall = isIterateeCall;
  return _isIterateeCall;
}
var _createAssigner;
var hasRequired_createAssigner;
function require_createAssigner() {
  if (hasRequired_createAssigner)
    return _createAssigner;
  hasRequired_createAssigner = 1;
  var baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  _createAssigner = createAssigner;
  return _createAssigner;
}
var assign_1;
var hasRequiredAssign;
function requireAssign() {
  if (hasRequiredAssign)
    return assign_1;
  hasRequiredAssign = 1;
  var assignValue = require_assignValue(), copyObject = require_copyObject(), createAssigner = require_createAssigner(), isArrayLike = requireIsArrayLike(), isPrototype = require_isPrototype(), keys2 = requireKeys$1();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var assign = createAssigner(function(object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys2(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty2.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });
  assign_1 = assign;
  return assign_1;
}
var hasRequiredModel$1;
function requireModel$1() {
  if (hasRequiredModel$1)
    return model$2;
  hasRequiredModel$1 = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(model$2, "__esModule", { value: true });
  model$2.serializeProduction = model$2.serializeGrammar = model$2.Terminal = model$2.Alternation = model$2.RepetitionWithSeparator = model$2.Repetition = model$2.RepetitionMandatoryWithSeparator = model$2.RepetitionMandatory = model$2.Option = model$2.Alternative = model$2.Rule = model$2.NonTerminal = model$2.AbstractProduction = void 0;
  var map_12 = __importDefault(requireMap());
  var forEach_12 = __importDefault(requireForEach());
  var isString_12 = __importDefault(requireIsString());
  var isRegExp_12 = __importDefault(requireIsRegExp());
  var pickBy_12 = __importDefault(requirePickBy());
  var assign_12 = __importDefault(requireAssign());
  function tokenLabel(tokType) {
    if (hasTokenLabel(tokType)) {
      return tokType.LABEL;
    } else {
      return tokType.name;
    }
  }
  function hasTokenLabel(obj) {
    return (0, isString_12.default)(obj.LABEL) && obj.LABEL !== "";
  }
  var AbstractProduction = (
    /** @class */
    function() {
      function AbstractProduction2(_definition) {
        this._definition = _definition;
      }
      Object.defineProperty(AbstractProduction2.prototype, "definition", {
        get: function() {
          return this._definition;
        },
        set: function(value) {
          this._definition = value;
        },
        enumerable: false,
        configurable: true
      });
      AbstractProduction2.prototype.accept = function(visitor2) {
        visitor2.visit(this);
        (0, forEach_12.default)(this.definition, function(prod) {
          prod.accept(visitor2);
        });
      };
      return AbstractProduction2;
    }()
  );
  model$2.AbstractProduction = AbstractProduction;
  var NonTerminal = (
    /** @class */
    function(_super) {
      __extends2(NonTerminal2, _super);
      function NonTerminal2(options) {
        var _this = _super.call(this, []) || this;
        _this.idx = 1;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      Object.defineProperty(NonTerminal2.prototype, "definition", {
        get: function() {
          if (this.referencedRule !== void 0) {
            return this.referencedRule.definition;
          }
          return [];
        },
        set: function(definition) {
        },
        enumerable: false,
        configurable: true
      });
      NonTerminal2.prototype.accept = function(visitor2) {
        visitor2.visit(this);
      };
      return NonTerminal2;
    }(AbstractProduction)
  );
  model$2.NonTerminal = NonTerminal;
  var Rule2 = (
    /** @class */
    function(_super) {
      __extends2(Rule3, _super);
      function Rule3(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.orgText = "";
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return Rule3;
    }(AbstractProduction)
  );
  model$2.Rule = Rule2;
  var Alternative = (
    /** @class */
    function(_super) {
      __extends2(Alternative2, _super);
      function Alternative2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.ignoreAmbiguities = false;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return Alternative2;
    }(AbstractProduction)
  );
  model$2.Alternative = Alternative;
  var Option = (
    /** @class */
    function(_super) {
      __extends2(Option2, _super);
      function Option2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return Option2;
    }(AbstractProduction)
  );
  model$2.Option = Option;
  var RepetitionMandatory = (
    /** @class */
    function(_super) {
      __extends2(RepetitionMandatory2, _super);
      function RepetitionMandatory2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return RepetitionMandatory2;
    }(AbstractProduction)
  );
  model$2.RepetitionMandatory = RepetitionMandatory;
  var RepetitionMandatoryWithSeparator = (
    /** @class */
    function(_super) {
      __extends2(RepetitionMandatoryWithSeparator2, _super);
      function RepetitionMandatoryWithSeparator2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return RepetitionMandatoryWithSeparator2;
    }(AbstractProduction)
  );
  model$2.RepetitionMandatoryWithSeparator = RepetitionMandatoryWithSeparator;
  var Repetition = (
    /** @class */
    function(_super) {
      __extends2(Repetition2, _super);
      function Repetition2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return Repetition2;
    }(AbstractProduction)
  );
  model$2.Repetition = Repetition;
  var RepetitionWithSeparator = (
    /** @class */
    function(_super) {
      __extends2(RepetitionWithSeparator2, _super);
      function RepetitionWithSeparator2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      return RepetitionWithSeparator2;
    }(AbstractProduction)
  );
  model$2.RepetitionWithSeparator = RepetitionWithSeparator;
  var Alternation = (
    /** @class */
    function(_super) {
      __extends2(Alternation2, _super);
      function Alternation2(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        _this.ignoreAmbiguities = false;
        _this.hasPredicates = false;
        (0, assign_12.default)(_this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
        return _this;
      }
      Object.defineProperty(Alternation2.prototype, "definition", {
        get: function() {
          return this._definition;
        },
        set: function(value) {
          this._definition = value;
        },
        enumerable: false,
        configurable: true
      });
      return Alternation2;
    }(AbstractProduction)
  );
  model$2.Alternation = Alternation;
  var Terminal = (
    /** @class */
    function() {
      function Terminal2(options) {
        this.idx = 1;
        (0, assign_12.default)(this, (0, pickBy_12.default)(options, function(v2) {
          return v2 !== void 0;
        }));
      }
      Terminal2.prototype.accept = function(visitor2) {
        visitor2.visit(this);
      };
      return Terminal2;
    }()
  );
  model$2.Terminal = Terminal;
  function serializeGrammar(topRules) {
    return (0, map_12.default)(topRules, serializeProduction);
  }
  model$2.serializeGrammar = serializeGrammar;
  function serializeProduction(node) {
    function convertDefinition(definition) {
      return (0, map_12.default)(definition, serializeProduction);
    }
    if (node instanceof NonTerminal) {
      var serializedNonTerminal = {
        type: "NonTerminal",
        name: node.nonTerminalName,
        idx: node.idx
      };
      if ((0, isString_12.default)(node.label)) {
        serializedNonTerminal.label = node.label;
      }
      return serializedNonTerminal;
    } else if (node instanceof Alternative) {
      return {
        type: "Alternative",
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof Option) {
      return {
        type: "Option",
        idx: node.idx,
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof RepetitionMandatory) {
      return {
        type: "RepetitionMandatory",
        idx: node.idx,
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof RepetitionMandatoryWithSeparator) {
      return {
        type: "RepetitionMandatoryWithSeparator",
        idx: node.idx,
        separator: serializeProduction(new Terminal({ terminalType: node.separator })),
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof RepetitionWithSeparator) {
      return {
        type: "RepetitionWithSeparator",
        idx: node.idx,
        separator: serializeProduction(new Terminal({ terminalType: node.separator })),
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof Repetition) {
      return {
        type: "Repetition",
        idx: node.idx,
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof Alternation) {
      return {
        type: "Alternation",
        idx: node.idx,
        definition: convertDefinition(node.definition)
      };
    } else if (node instanceof Terminal) {
      var serializedTerminal = {
        type: "Terminal",
        name: node.terminalType.name,
        label: tokenLabel(node.terminalType),
        idx: node.idx
      };
      if ((0, isString_12.default)(node.label)) {
        serializedTerminal.terminalLabel = node.label;
      }
      var pattern = node.terminalType.PATTERN;
      if (node.terminalType.PATTERN) {
        serializedTerminal.pattern = (0, isRegExp_12.default)(pattern) ? pattern.source : pattern;
      }
      return serializedTerminal;
    } else if (node instanceof Rule2) {
      return {
        type: "Rule",
        name: node.name,
        orgText: node.orgText,
        definition: convertDefinition(node.definition)
      };
    } else {
      throw Error("non exhaustive match");
    }
  }
  model$2.serializeProduction = serializeProduction;
  return model$2;
}
var visitor = {};
var hasRequiredVisitor;
function requireVisitor() {
  if (hasRequiredVisitor)
    return visitor;
  hasRequiredVisitor = 1;
  Object.defineProperty(visitor, "__esModule", { value: true });
  visitor.GAstVisitor = void 0;
  var model_1 = requireModel$1();
  var GAstVisitor = (
    /** @class */
    function() {
      function GAstVisitor2() {
      }
      GAstVisitor2.prototype.visit = function(node) {
        var nodeAny = node;
        switch (nodeAny.constructor) {
          case model_1.NonTerminal:
            return this.visitNonTerminal(nodeAny);
          case model_1.Alternative:
            return this.visitAlternative(nodeAny);
          case model_1.Option:
            return this.visitOption(nodeAny);
          case model_1.RepetitionMandatory:
            return this.visitRepetitionMandatory(nodeAny);
          case model_1.RepetitionMandatoryWithSeparator:
            return this.visitRepetitionMandatoryWithSeparator(nodeAny);
          case model_1.RepetitionWithSeparator:
            return this.visitRepetitionWithSeparator(nodeAny);
          case model_1.Repetition:
            return this.visitRepetition(nodeAny);
          case model_1.Alternation:
            return this.visitAlternation(nodeAny);
          case model_1.Terminal:
            return this.visitTerminal(nodeAny);
          case model_1.Rule:
            return this.visitRule(nodeAny);
          default:
            throw Error("non exhaustive match");
        }
      };
      GAstVisitor2.prototype.visitNonTerminal = function(node) {
      };
      GAstVisitor2.prototype.visitAlternative = function(node) {
      };
      GAstVisitor2.prototype.visitOption = function(node) {
      };
      GAstVisitor2.prototype.visitRepetition = function(node) {
      };
      GAstVisitor2.prototype.visitRepetitionMandatory = function(node) {
      };
      GAstVisitor2.prototype.visitRepetitionMandatoryWithSeparator = function(node) {
      };
      GAstVisitor2.prototype.visitRepetitionWithSeparator = function(node) {
      };
      GAstVisitor2.prototype.visitAlternation = function(node) {
      };
      GAstVisitor2.prototype.visitTerminal = function(node) {
      };
      GAstVisitor2.prototype.visitRule = function(node) {
      };
      return GAstVisitor2;
    }()
  );
  visitor.GAstVisitor = GAstVisitor;
  return visitor;
}
var helpers = {};
var _baseSome;
var hasRequired_baseSome;
function require_baseSome() {
  if (hasRequired_baseSome)
    return _baseSome;
  hasRequired_baseSome = 1;
  var baseEach = require_baseEach();
  function baseSome(collection, predicate) {
    var result;
    baseEach(collection, function(value, index, collection2) {
      result = predicate(value, index, collection2);
      return !result;
    });
    return !!result;
  }
  _baseSome = baseSome;
  return _baseSome;
}
var some_1;
var hasRequiredSome;
function requireSome() {
  if (hasRequiredSome)
    return some_1;
  hasRequiredSome = 1;
  var arraySome = require_arraySome(), baseIteratee = require_baseIteratee(), baseSome = require_baseSome(), isArray = requireIsArray(), isIterateeCall = require_isIterateeCall();
  function some(collection, predicate, guard) {
    var func = isArray(collection) ? arraySome : baseSome;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = void 0;
    }
    return func(collection, baseIteratee(predicate, 3));
  }
  some_1 = some;
  return some_1;
}
var _arrayEvery;
var hasRequired_arrayEvery;
function require_arrayEvery() {
  if (hasRequired_arrayEvery)
    return _arrayEvery;
  hasRequired_arrayEvery = 1;
  function arrayEvery(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }
  _arrayEvery = arrayEvery;
  return _arrayEvery;
}
var _baseEvery;
var hasRequired_baseEvery;
function require_baseEvery() {
  if (hasRequired_baseEvery)
    return _baseEvery;
  hasRequired_baseEvery = 1;
  var baseEach = require_baseEach();
  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index, collection2) {
      result = !!predicate(value, index, collection2);
      return result;
    });
    return result;
  }
  _baseEvery = baseEvery;
  return _baseEvery;
}
var every_1;
var hasRequiredEvery;
function requireEvery() {
  if (hasRequiredEvery)
    return every_1;
  hasRequiredEvery = 1;
  var arrayEvery = require_arrayEvery(), baseEvery = require_baseEvery(), baseIteratee = require_baseIteratee(), isArray = requireIsArray(), isIterateeCall = require_isIterateeCall();
  function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = void 0;
    }
    return func(collection, baseIteratee(predicate, 3));
  }
  every_1 = every;
  return every_1;
}
var _baseFindIndex;
var hasRequired_baseFindIndex;
function require_baseFindIndex() {
  if (hasRequired_baseFindIndex)
    return _baseFindIndex;
  hasRequired_baseFindIndex = 1;
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  _baseFindIndex = baseFindIndex;
  return _baseFindIndex;
}
var _baseIsNaN;
var hasRequired_baseIsNaN;
function require_baseIsNaN() {
  if (hasRequired_baseIsNaN)
    return _baseIsNaN;
  hasRequired_baseIsNaN = 1;
  function baseIsNaN(value) {
    return value !== value;
  }
  _baseIsNaN = baseIsNaN;
  return _baseIsNaN;
}
var _strictIndexOf;
var hasRequired_strictIndexOf;
function require_strictIndexOf() {
  if (hasRequired_strictIndexOf)
    return _strictIndexOf;
  hasRequired_strictIndexOf = 1;
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  _strictIndexOf = strictIndexOf;
  return _strictIndexOf;
}
var _baseIndexOf;
var hasRequired_baseIndexOf;
function require_baseIndexOf() {
  if (hasRequired_baseIndexOf)
    return _baseIndexOf;
  hasRequired_baseIndexOf = 1;
  var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  _baseIndexOf = baseIndexOf;
  return _baseIndexOf;
}
var includes_1;
var hasRequiredIncludes;
function requireIncludes() {
  if (hasRequiredIncludes)
    return includes_1;
  hasRequiredIncludes = 1;
  var baseIndexOf = require_baseIndexOf(), isArrayLike = requireIsArrayLike(), isString = requireIsString(), toInteger = requireToInteger(), values2 = requireValues();
  var nativeMax = Math.max;
  function includes(collection, value, fromIndex, guard) {
    collection = isArrayLike(collection) ? collection : values2(collection);
    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
    var length = collection.length;
    if (fromIndex < 0) {
      fromIndex = nativeMax(length + fromIndex, 0);
    }
    return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
  }
  includes_1 = includes;
  return includes_1;
}
var hasRequiredHelpers;
function requireHelpers() {
  if (hasRequiredHelpers)
    return helpers;
  hasRequiredHelpers = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(helpers, "__esModule", { value: true });
  helpers.getProductionDslName = helpers.isBranchingProd = helpers.isOptionalProd = helpers.isSequenceProd = void 0;
  var some_12 = __importDefault(requireSome());
  var every_12 = __importDefault(requireEvery());
  var includes_12 = __importDefault(requireIncludes());
  var model_1 = requireModel$1();
  function isSequenceProd(prod) {
    return prod instanceof model_1.Alternative || prod instanceof model_1.Option || prod instanceof model_1.Repetition || prod instanceof model_1.RepetitionMandatory || prod instanceof model_1.RepetitionMandatoryWithSeparator || prod instanceof model_1.RepetitionWithSeparator || prod instanceof model_1.Terminal || prod instanceof model_1.Rule;
  }
  helpers.isSequenceProd = isSequenceProd;
  function isOptionalProd(prod, alreadyVisited) {
    if (alreadyVisited === void 0) {
      alreadyVisited = [];
    }
    var isDirectlyOptional = prod instanceof model_1.Option || prod instanceof model_1.Repetition || prod instanceof model_1.RepetitionWithSeparator;
    if (isDirectlyOptional) {
      return true;
    }
    if (prod instanceof model_1.Alternation) {
      return (0, some_12.default)(prod.definition, function(subProd) {
        return isOptionalProd(subProd, alreadyVisited);
      });
    } else if (prod instanceof model_1.NonTerminal && (0, includes_12.default)(alreadyVisited, prod)) {
      return false;
    } else if (prod instanceof model_1.AbstractProduction) {
      if (prod instanceof model_1.NonTerminal) {
        alreadyVisited.push(prod);
      }
      return (0, every_12.default)(prod.definition, function(subProd) {
        return isOptionalProd(subProd, alreadyVisited);
      });
    } else {
      return false;
    }
  }
  helpers.isOptionalProd = isOptionalProd;
  function isBranchingProd(prod) {
    return prod instanceof model_1.Alternation;
  }
  helpers.isBranchingProd = isBranchingProd;
  function getProductionDslName(prod) {
    if (prod instanceof model_1.NonTerminal) {
      return "SUBRULE";
    } else if (prod instanceof model_1.Option) {
      return "OPTION";
    } else if (prod instanceof model_1.Alternation) {
      return "OR";
    } else if (prod instanceof model_1.RepetitionMandatory) {
      return "AT_LEAST_ONE";
    } else if (prod instanceof model_1.RepetitionMandatoryWithSeparator) {
      return "AT_LEAST_ONE_SEP";
    } else if (prod instanceof model_1.RepetitionWithSeparator) {
      return "MANY_SEP";
    } else if (prod instanceof model_1.Repetition) {
      return "MANY";
    } else if (prod instanceof model_1.Terminal) {
      return "CONSUME";
    } else {
      throw Error("non exhaustive match");
    }
  }
  helpers.getProductionDslName = getProductionDslName;
  return helpers;
}
var hasRequiredApi$2;
function requireApi$2() {
  if (hasRequiredApi$2)
    return api$2;
  hasRequiredApi$2 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSequenceProd = exports.isBranchingProd = exports.isOptionalProd = exports.getProductionDslName = exports.GAstVisitor = exports.serializeProduction = exports.serializeGrammar = exports.Alternative = exports.Alternation = exports.RepetitionWithSeparator = exports.RepetitionMandatoryWithSeparator = exports.RepetitionMandatory = exports.Repetition = exports.Option = exports.NonTerminal = exports.Terminal = exports.Rule = void 0;
    var model_1 = requireModel$1();
    Object.defineProperty(exports, "Rule", { enumerable: true, get: function() {
      return model_1.Rule;
    } });
    Object.defineProperty(exports, "Terminal", { enumerable: true, get: function() {
      return model_1.Terminal;
    } });
    Object.defineProperty(exports, "NonTerminal", { enumerable: true, get: function() {
      return model_1.NonTerminal;
    } });
    Object.defineProperty(exports, "Option", { enumerable: true, get: function() {
      return model_1.Option;
    } });
    Object.defineProperty(exports, "Repetition", { enumerable: true, get: function() {
      return model_1.Repetition;
    } });
    Object.defineProperty(exports, "RepetitionMandatory", { enumerable: true, get: function() {
      return model_1.RepetitionMandatory;
    } });
    Object.defineProperty(exports, "RepetitionMandatoryWithSeparator", { enumerable: true, get: function() {
      return model_1.RepetitionMandatoryWithSeparator;
    } });
    Object.defineProperty(exports, "RepetitionWithSeparator", { enumerable: true, get: function() {
      return model_1.RepetitionWithSeparator;
    } });
    Object.defineProperty(exports, "Alternation", { enumerable: true, get: function() {
      return model_1.Alternation;
    } });
    Object.defineProperty(exports, "Alternative", { enumerable: true, get: function() {
      return model_1.Alternative;
    } });
    Object.defineProperty(exports, "serializeGrammar", { enumerable: true, get: function() {
      return model_1.serializeGrammar;
    } });
    Object.defineProperty(exports, "serializeProduction", { enumerable: true, get: function() {
      return model_1.serializeProduction;
    } });
    var visitor_1 = requireVisitor();
    Object.defineProperty(exports, "GAstVisitor", { enumerable: true, get: function() {
      return visitor_1.GAstVisitor;
    } });
    var helpers_1 = requireHelpers();
    Object.defineProperty(exports, "getProductionDslName", { enumerable: true, get: function() {
      return helpers_1.getProductionDslName;
    } });
    Object.defineProperty(exports, "isOptionalProd", { enumerable: true, get: function() {
      return helpers_1.isOptionalProd;
    } });
    Object.defineProperty(exports, "isBranchingProd", { enumerable: true, get: function() {
      return helpers_1.isBranchingProd;
    } });
    Object.defineProperty(exports, "isSequenceProd", { enumerable: true, get: function() {
      return helpers_1.isSequenceProd;
    } });
  })(api$2);
  return api$2;
}
var hasRequiredRest;
function requireRest() {
  if (hasRequiredRest)
    return rest;
  hasRequiredRest = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(rest, "__esModule", { value: true });
  rest.RestWalker = void 0;
  var drop_12 = __importDefault(requireDrop());
  var forEach_12 = __importDefault(requireForEach());
  var gast_1 = requireApi$2();
  var RestWalker = (
    /** @class */
    function() {
      function RestWalker2() {
      }
      RestWalker2.prototype.walk = function(prod, prevRest) {
        var _this = this;
        if (prevRest === void 0) {
          prevRest = [];
        }
        (0, forEach_12.default)(prod.definition, function(subProd, index) {
          var currRest = (0, drop_12.default)(prod.definition, index + 1);
          if (subProd instanceof gast_1.NonTerminal) {
            _this.walkProdRef(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.Terminal) {
            _this.walkTerminal(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.Alternative) {
            _this.walkFlat(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.Option) {
            _this.walkOption(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.RepetitionMandatory) {
            _this.walkAtLeastOne(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.RepetitionMandatoryWithSeparator) {
            _this.walkAtLeastOneSep(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.RepetitionWithSeparator) {
            _this.walkManySep(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.Repetition) {
            _this.walkMany(subProd, currRest, prevRest);
          } else if (subProd instanceof gast_1.Alternation) {
            _this.walkOr(subProd, currRest, prevRest);
          } else {
            throw Error("non exhaustive match");
          }
        });
      };
      RestWalker2.prototype.walkTerminal = function(terminal, currRest, prevRest) {
      };
      RestWalker2.prototype.walkProdRef = function(refProd, currRest, prevRest) {
      };
      RestWalker2.prototype.walkFlat = function(flatProd, currRest, prevRest) {
        var fullOrRest = currRest.concat(prevRest);
        this.walk(flatProd, fullOrRest);
      };
      RestWalker2.prototype.walkOption = function(optionProd, currRest, prevRest) {
        var fullOrRest = currRest.concat(prevRest);
        this.walk(optionProd, fullOrRest);
      };
      RestWalker2.prototype.walkAtLeastOne = function(atLeastOneProd, currRest, prevRest) {
        var fullAtLeastOneRest = [
          new gast_1.Option({ definition: atLeastOneProd.definition })
        ].concat(currRest, prevRest);
        this.walk(atLeastOneProd, fullAtLeastOneRest);
      };
      RestWalker2.prototype.walkAtLeastOneSep = function(atLeastOneSepProd, currRest, prevRest) {
        var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);
        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);
      };
      RestWalker2.prototype.walkMany = function(manyProd, currRest, prevRest) {
        var fullManyRest = [
          new gast_1.Option({ definition: manyProd.definition })
        ].concat(currRest, prevRest);
        this.walk(manyProd, fullManyRest);
      };
      RestWalker2.prototype.walkManySep = function(manySepProd, currRest, prevRest) {
        var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);
        this.walk(manySepProd, fullManySepRest);
      };
      RestWalker2.prototype.walkOr = function(orProd, currRest, prevRest) {
        var _this = this;
        var fullOrRest = currRest.concat(prevRest);
        (0, forEach_12.default)(orProd.definition, function(alt) {
          var prodWrapper = new gast_1.Alternative({ definition: [alt] });
          _this.walk(prodWrapper, fullOrRest);
        });
      };
      return RestWalker2;
    }()
  );
  rest.RestWalker = RestWalker;
  function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {
    var repSepRest = [
      new gast_1.Option({
        definition: [
          new gast_1.Terminal({ terminalType: repSepProd.separator })
        ].concat(repSepProd.definition)
      })
    ];
    var fullRepSepRest = repSepRest.concat(currRest, prevRest);
    return fullRepSepRest;
  }
  return rest;
}
var first$1 = {};
var _isFlattenable;
var hasRequired_isFlattenable;
function require_isFlattenable() {
  if (hasRequired_isFlattenable)
    return _isFlattenable;
  hasRequired_isFlattenable = 1;
  var Symbol2 = require_Symbol(), isArguments = requireIsArguments(), isArray = requireIsArray();
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  _isFlattenable = isFlattenable;
  return _isFlattenable;
}
var _baseFlatten;
var hasRequired_baseFlatten;
function require_baseFlatten() {
  if (hasRequired_baseFlatten)
    return _baseFlatten;
  hasRequired_baseFlatten = 1;
  var arrayPush = require_arrayPush(), isFlattenable = require_isFlattenable();
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  _baseFlatten = baseFlatten;
  return _baseFlatten;
}
var flatten_1;
var hasRequiredFlatten;
function requireFlatten() {
  if (hasRequiredFlatten)
    return flatten_1;
  hasRequiredFlatten = 1;
  var baseFlatten = require_baseFlatten();
  function flatten2(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }
  flatten_1 = flatten2;
  return flatten_1;
}
var _arrayIncludes;
var hasRequired_arrayIncludes;
function require_arrayIncludes() {
  if (hasRequired_arrayIncludes)
    return _arrayIncludes;
  hasRequired_arrayIncludes = 1;
  var baseIndexOf = require_baseIndexOf();
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  _arrayIncludes = arrayIncludes;
  return _arrayIncludes;
}
var _arrayIncludesWith;
var hasRequired_arrayIncludesWith;
function require_arrayIncludesWith() {
  if (hasRequired_arrayIncludesWith)
    return _arrayIncludesWith;
  hasRequired_arrayIncludesWith = 1;
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  _arrayIncludesWith = arrayIncludesWith;
  return _arrayIncludesWith;
}
var noop_1;
var hasRequiredNoop;
function requireNoop() {
  if (hasRequiredNoop)
    return noop_1;
  hasRequiredNoop = 1;
  function noop() {
  }
  noop_1 = noop;
  return noop_1;
}
var _createSet;
var hasRequired_createSet;
function require_createSet() {
  if (hasRequired_createSet)
    return _createSet;
  hasRequired_createSet = 1;
  var Set2 = require_Set(), noop = requireNoop(), setToArray = require_setToArray();
  var INFINITY = 1 / 0;
  var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
    return new Set2(values2);
  };
  _createSet = createSet;
  return _createSet;
}
var _baseUniq;
var hasRequired_baseUniq;
function require_baseUniq() {
  if (hasRequired_baseUniq)
    return _baseUniq;
  hasRequired_baseUniq = 1;
  var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), cacheHas = require_cacheHas(), createSet = require_createSet(), setToArray = require_setToArray();
  var LARGE_ARRAY_SIZE = 200;
  function baseUniq(array, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen2 = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen2 = new SetCache();
    } else {
      seen2 = iteratee ? [] : result;
    }
    outer:
      while (++index < length) {
        var value = array[index], computed2 = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed2 === computed2) {
          var seenIndex = seen2.length;
          while (seenIndex--) {
            if (seen2[seenIndex] === computed2) {
              continue outer;
            }
          }
          if (iteratee) {
            seen2.push(computed2);
          }
          result.push(value);
        } else if (!includes(seen2, computed2, comparator)) {
          if (seen2 !== result) {
            seen2.push(computed2);
          }
          result.push(value);
        }
      }
    return result;
  }
  _baseUniq = baseUniq;
  return _baseUniq;
}
var uniq_1;
var hasRequiredUniq;
function requireUniq() {
  if (hasRequiredUniq)
    return uniq_1;
  hasRequiredUniq = 1;
  var baseUniq = require_baseUniq();
  function uniq(array) {
    return array && array.length ? baseUniq(array) : [];
  }
  uniq_1 = uniq;
  return uniq_1;
}
var hasRequiredFirst$1;
function requireFirst$1() {
  if (hasRequiredFirst$1)
    return first$1;
  hasRequiredFirst$1 = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(first$1, "__esModule", { value: true });
  first$1.firstForTerminal = first$1.firstForBranching = first$1.firstForSequence = first$1.first = void 0;
  var flatten_12 = __importDefault(requireFlatten());
  var uniq_12 = __importDefault(requireUniq());
  var map_12 = __importDefault(requireMap());
  var gast_1 = requireApi$2();
  var gast_2 = requireApi$2();
  function first2(prod) {
    if (prod instanceof gast_1.NonTerminal) {
      return first2(prod.referencedRule);
    } else if (prod instanceof gast_1.Terminal) {
      return firstForTerminal(prod);
    } else if ((0, gast_2.isSequenceProd)(prod)) {
      return firstForSequence(prod);
    } else if ((0, gast_2.isBranchingProd)(prod)) {
      return firstForBranching(prod);
    } else {
      throw Error("non exhaustive match");
    }
  }
  first$1.first = first2;
  function firstForSequence(prod) {
    var firstSet = [];
    var seq = prod.definition;
    var nextSubProdIdx = 0;
    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    var currSubProd;
    var isLastInnerProdOptional = true;
    while (hasInnerProdsRemaining && isLastInnerProdOptional) {
      currSubProd = seq[nextSubProdIdx];
      isLastInnerProdOptional = (0, gast_2.isOptionalProd)(currSubProd);
      firstSet = firstSet.concat(first2(currSubProd));
      nextSubProdIdx = nextSubProdIdx + 1;
      hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    }
    return (0, uniq_12.default)(firstSet);
  }
  first$1.firstForSequence = firstForSequence;
  function firstForBranching(prod) {
    var allAlternativesFirsts = (0, map_12.default)(prod.definition, function(innerProd) {
      return first2(innerProd);
    });
    return (0, uniq_12.default)((0, flatten_12.default)(allAlternativesFirsts));
  }
  first$1.firstForBranching = firstForBranching;
  function firstForTerminal(terminal) {
    return [terminal.terminalType];
  }
  first$1.firstForTerminal = firstForTerminal;
  return first$1;
}
var constants = {};
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants)
    return constants;
  hasRequiredConstants = 1;
  Object.defineProperty(constants, "__esModule", { value: true });
  constants.IN = void 0;
  constants.IN = "_~IN~_";
  return constants;
}
var hasRequiredFollow;
function requireFollow() {
  if (hasRequiredFollow)
    return follow;
  hasRequiredFollow = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(follow, "__esModule", { value: true });
  follow.buildInProdFollowPrefix = follow.buildBetweenProdsFollowPrefix = follow.computeAllProdsFollows = follow.ResyncFollowsWalker = void 0;
  var rest_1 = requireRest();
  var first_1 = requireFirst$1();
  var forEach_12 = __importDefault(requireForEach());
  var assign_12 = __importDefault(requireAssign());
  var constants_1 = requireConstants();
  var gast_1 = requireApi$2();
  var ResyncFollowsWalker = (
    /** @class */
    function(_super) {
      __extends2(ResyncFollowsWalker2, _super);
      function ResyncFollowsWalker2(topProd) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.follows = {};
        return _this;
      }
      ResyncFollowsWalker2.prototype.startWalking = function() {
        this.walk(this.topProd);
        return this.follows;
      };
      ResyncFollowsWalker2.prototype.walkTerminal = function(terminal, currRest, prevRest) {
      };
      ResyncFollowsWalker2.prototype.walkProdRef = function(refProd, currRest, prevRest) {
        var followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) + this.topProd.name;
        var fullRest = currRest.concat(prevRest);
        var restProd = new gast_1.Alternative({ definition: fullRest });
        var t_in_topProd_follows = (0, first_1.first)(restProd);
        this.follows[followName] = t_in_topProd_follows;
      };
      return ResyncFollowsWalker2;
    }(rest_1.RestWalker)
  );
  follow.ResyncFollowsWalker = ResyncFollowsWalker;
  function computeAllProdsFollows(topProductions) {
    var reSyncFollows = {};
    (0, forEach_12.default)(topProductions, function(topProd) {
      var currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();
      (0, assign_12.default)(reSyncFollows, currRefsFollow);
    });
    return reSyncFollows;
  }
  follow.computeAllProdsFollows = computeAllProdsFollows;
  function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {
    return inner.name + occurenceInParent + constants_1.IN;
  }
  follow.buildBetweenProdsFollowPrefix = buildBetweenProdsFollowPrefix;
  function buildInProdFollowPrefix(terminal) {
    var terminalName = terminal.terminalType.name;
    return terminalName + terminal.idx + constants_1.IN;
  }
  follow.buildInProdFollowPrefix = buildInProdFollowPrefix;
  return follow;
}
var tokens_public = {};
var isUndefined_1;
var hasRequiredIsUndefined;
function requireIsUndefined() {
  if (hasRequiredIsUndefined)
    return isUndefined_1;
  hasRequiredIsUndefined = 1;
  function isUndefined(value) {
    return value === void 0;
  }
  isUndefined_1 = isUndefined;
  return isUndefined_1;
}
var lexer_public = {};
var lexer$1 = {};
var head_1;
var hasRequiredHead;
function requireHead() {
  if (hasRequiredHead)
    return head_1;
  hasRequiredHead = 1;
  function head(array) {
    return array && array.length ? array[0] : void 0;
  }
  head_1 = head;
  return head_1;
}
var first;
var hasRequiredFirst;
function requireFirst() {
  if (hasRequiredFirst)
    return first;
  hasRequiredFirst = 1;
  first = requireHead();
  return first;
}
var compact_1;
var hasRequiredCompact;
function requireCompact() {
  if (hasRequiredCompact)
    return compact_1;
  hasRequiredCompact = 1;
  function compact(array) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (value) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  compact_1 = compact;
  return compact_1;
}
var _baseFilter;
var hasRequired_baseFilter;
function require_baseFilter() {
  if (hasRequired_baseFilter)
    return _baseFilter;
  hasRequired_baseFilter = 1;
  var baseEach = require_baseEach();
  function baseFilter(collection, predicate) {
    var result = [];
    baseEach(collection, function(value, index, collection2) {
      if (predicate(value, index, collection2)) {
        result.push(value);
      }
    });
    return result;
  }
  _baseFilter = baseFilter;
  return _baseFilter;
}
var negate_1;
var hasRequiredNegate;
function requireNegate() {
  if (hasRequiredNegate)
    return negate_1;
  hasRequiredNegate = 1;
  var FUNC_ERROR_TEXT = "Expected a function";
  function negate(predicate) {
    if (typeof predicate != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function() {
      var args = arguments;
      switch (args.length) {
        case 0:
          return !predicate.call(this);
        case 1:
          return !predicate.call(this, args[0]);
        case 2:
          return !predicate.call(this, args[0], args[1]);
        case 3:
          return !predicate.call(this, args[0], args[1], args[2]);
      }
      return !predicate.apply(this, args);
    };
  }
  negate_1 = negate;
  return negate_1;
}
var reject_1;
var hasRequiredReject;
function requireReject() {
  if (hasRequiredReject)
    return reject_1;
  hasRequiredReject = 1;
  var arrayFilter = require_arrayFilter(), baseFilter = require_baseFilter(), baseIteratee = require_baseIteratee(), isArray = requireIsArray(), negate = requireNegate();
  function reject(collection, predicate) {
    var func = isArray(collection) ? arrayFilter : baseFilter;
    return func(collection, negate(baseIteratee(predicate, 3)));
  }
  reject_1 = reject;
  return reject_1;
}
var _baseDifference;
var hasRequired_baseDifference;
function require_baseDifference() {
  if (hasRequired_baseDifference)
    return _baseDifference;
  hasRequired_baseDifference = 1;
  var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), arrayMap = require_arrayMap(), baseUnary = require_baseUnary(), cacheHas = require_cacheHas();
  var LARGE_ARRAY_SIZE = 200;
  function baseDifference(array, values2, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values2.length;
    if (!length) {
      return result;
    }
    if (iteratee) {
      values2 = arrayMap(values2, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values2.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values2 = new SetCache(values2);
    }
    outer:
      while (++index < length) {
        var value = array[index], computed2 = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed2 === computed2) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values2[valuesIndex] === computed2) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values2, computed2, comparator)) {
          result.push(value);
        }
      }
    return result;
  }
  _baseDifference = baseDifference;
  return _baseDifference;
}
var isArrayLikeObject_1;
var hasRequiredIsArrayLikeObject;
function requireIsArrayLikeObject() {
  if (hasRequiredIsArrayLikeObject)
    return isArrayLikeObject_1;
  hasRequiredIsArrayLikeObject = 1;
  var isArrayLike = requireIsArrayLike(), isObjectLike = requireIsObjectLike();
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  isArrayLikeObject_1 = isArrayLikeObject;
  return isArrayLikeObject_1;
}
var difference_1;
var hasRequiredDifference;
function requireDifference() {
  if (hasRequiredDifference)
    return difference_1;
  hasRequiredDifference = 1;
  var baseDifference = require_baseDifference(), baseFlatten = require_baseFlatten(), baseRest = require_baseRest(), isArrayLikeObject = requireIsArrayLikeObject();
  var difference = baseRest(function(array, values2) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
  });
  difference_1 = difference;
  return difference_1;
}
var indexOf_1;
var hasRequiredIndexOf;
function requireIndexOf() {
  if (hasRequiredIndexOf)
    return indexOf_1;
  hasRequiredIndexOf = 1;
  var baseIndexOf = require_baseIndexOf(), toInteger = requireToInteger();
  var nativeMax = Math.max;
  function indexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return baseIndexOf(array, value, index);
  }
  indexOf_1 = indexOf;
  return indexOf_1;
}
var _createFind;
var hasRequired_createFind;
function require_createFind() {
  if (hasRequired_createFind)
    return _createFind;
  hasRequired_createFind = 1;
  var baseIteratee = require_baseIteratee(), isArrayLike = requireIsArrayLike(), keys2 = requireKeys$1();
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys2(collection);
        predicate = function(key) {
          return iteratee(iterable[key], key, iterable);
        };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
    };
  }
  _createFind = createFind;
  return _createFind;
}
var findIndex_1;
var hasRequiredFindIndex;
function requireFindIndex() {
  if (hasRequiredFindIndex)
    return findIndex_1;
  hasRequiredFindIndex = 1;
  var baseFindIndex = require_baseFindIndex(), baseIteratee = require_baseIteratee(), toInteger = requireToInteger();
  var nativeMax = Math.max;
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }
  findIndex_1 = findIndex;
  return findIndex_1;
}
var find_1;
var hasRequiredFind;
function requireFind() {
  if (hasRequiredFind)
    return find_1;
  hasRequiredFind = 1;
  var createFind = require_createFind(), findIndex = requireFindIndex();
  var find2 = createFind(findIndex);
  find_1 = find2;
  return find_1;
}
var filter_1;
var hasRequiredFilter;
function requireFilter() {
  if (hasRequiredFilter)
    return filter_1;
  hasRequiredFilter = 1;
  var arrayFilter = require_arrayFilter(), baseFilter = require_baseFilter(), baseIteratee = require_baseIteratee(), isArray = requireIsArray();
  function filter(collection, predicate) {
    var func = isArray(collection) ? arrayFilter : baseFilter;
    return func(collection, baseIteratee(predicate, 3));
  }
  filter_1 = filter;
  return filter_1;
}
var defaults_1;
var hasRequiredDefaults;
function requireDefaults() {
  if (hasRequiredDefaults)
    return defaults_1;
  hasRequiredDefaults = 1;
  var baseRest = require_baseRest(), eq = requireEq(), isIterateeCall = require_isIterateeCall(), keysIn = requireKeysIn();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var defaults2 = baseRest(function(object, sources) {
    object = Object(object);
    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : void 0;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      length = 1;
    }
    while (++index < length) {
      var source = sources[index];
      var props = keysIn(source);
      var propsIndex = -1;
      var propsLength = props.length;
      while (++propsIndex < propsLength) {
        var key = props[propsIndex];
        var value = object[key];
        if (value === void 0 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
          object[key] = source[key];
        }
      }
    }
    return object;
  });
  defaults_1 = defaults2;
  return defaults_1;
}
var _arrayReduce;
var hasRequired_arrayReduce;
function require_arrayReduce() {
  if (hasRequired_arrayReduce)
    return _arrayReduce;
  hasRequired_arrayReduce = 1;
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  _arrayReduce = arrayReduce;
  return _arrayReduce;
}
var _baseReduce;
var hasRequired_baseReduce;
function require_baseReduce() {
  if (hasRequired_baseReduce)
    return _baseReduce;
  hasRequired_baseReduce = 1;
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection2) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
    });
    return accumulator;
  }
  _baseReduce = baseReduce;
  return _baseReduce;
}
var reduce_1;
var hasRequiredReduce;
function requireReduce() {
  if (hasRequiredReduce)
    return reduce_1;
  hasRequiredReduce = 1;
  var arrayReduce = require_arrayReduce(), baseEach = require_baseEach(), baseIteratee = require_baseIteratee(), baseReduce = require_baseReduce(), isArray = requireIsArray();
  function reduce(collection, iteratee, accumulator) {
    var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
    return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
  }
  reduce_1 = reduce;
  return reduce_1;
}
var reg_exp = {};
var reg_exp_parser = {};
var hasRequiredReg_exp_parser;
function requireReg_exp_parser() {
  if (hasRequiredReg_exp_parser)
    return reg_exp_parser;
  hasRequiredReg_exp_parser = 1;
  Object.defineProperty(reg_exp_parser, "__esModule", { value: true });
  reg_exp_parser.clearRegExpParserCache = reg_exp_parser.getRegExpAst = void 0;
  var regexp_to_ast_1 = requireRegexpToAst();
  var regExpAstCache = {};
  var regExpParser = new regexp_to_ast_1.RegExpParser();
  function getRegExpAst(regExp) {
    var regExpStr = regExp.toString();
    if (regExpAstCache.hasOwnProperty(regExpStr)) {
      return regExpAstCache[regExpStr];
    } else {
      var regExpAst = regExpParser.pattern(regExpStr);
      regExpAstCache[regExpStr] = regExpAst;
      return regExpAst;
    }
  }
  reg_exp_parser.getRegExpAst = getRegExpAst;
  function clearRegExpParserCache() {
    regExpAstCache = {};
  }
  reg_exp_parser.clearRegExpParserCache = clearRegExpParserCache;
  return reg_exp_parser;
}
var hasRequiredReg_exp;
function requireReg_exp() {
  if (hasRequiredReg_exp)
    return reg_exp;
  hasRequiredReg_exp = 1;
  (function(exports) {
    var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
      var extendStatics2 = function(d2, b2) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics2(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics2(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;
    var regexp_to_ast_1 = requireRegexpToAst();
    var isArray_12 = __importDefault(requireIsArray());
    var every_12 = __importDefault(requireEvery());
    var forEach_12 = __importDefault(requireForEach());
    var find_12 = __importDefault(requireFind());
    var values_12 = __importDefault(requireValues());
    var includes_12 = __importDefault(requireIncludes());
    var utils_1 = requireApi$3();
    var reg_exp_parser_1 = requireReg_exp_parser();
    var lexer_1 = requireLexer$1();
    var complementErrorMessage = "Complement Sets are not supported for first char optimization";
    exports.failedOptimizationPrefixMsg = 'Unable to use "first char" lexer optimizations:\n';
    function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {
      if (ensureOptimizations === void 0) {
        ensureOptimizations = false;
      }
      try {
        var ast2 = (0, reg_exp_parser_1.getRegExpAst)(regExp);
        var firstChars = firstCharOptimizedIndices(ast2.value, {}, ast2.flags.ignoreCase);
        return firstChars;
      } catch (e) {
        if (e.message === complementErrorMessage) {
          if (ensureOptimizations) {
            (0, utils_1.PRINT_WARNING)("".concat(exports.failedOptimizationPrefixMsg) + "	Unable to optimize: < ".concat(regExp.toString(), " >\n") + "	Complement Sets cannot be automatically optimized.\n	This will disable the lexer's first char optimizations.\n	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.");
          }
        } else {
          var msgSuffix = "";
          if (ensureOptimizations) {
            msgSuffix = "\n	This will disable the lexer's first char optimizations.\n	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.";
          }
          (0, utils_1.PRINT_ERROR)("".concat(exports.failedOptimizationPrefixMsg, "\n") + "	Failed parsing: < ".concat(regExp.toString(), " >\n") + "	Using the regexp-to-ast library version: ".concat(regexp_to_ast_1.VERSION, "\n") + "	Please open an issue at: https://github.com/bd82/regexp-to-ast/issues" + msgSuffix);
        }
      }
      return [];
    }
    exports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;
    function firstCharOptimizedIndices(ast2, result, ignoreCase) {
      switch (ast2.type) {
        case "Disjunction":
          for (var i = 0; i < ast2.value.length; i++) {
            firstCharOptimizedIndices(ast2.value[i], result, ignoreCase);
          }
          break;
        case "Alternative":
          var terms = ast2.value;
          for (var i = 0; i < terms.length; i++) {
            var term = terms[i];
            switch (term.type) {
              case "EndAnchor":
              case "GroupBackReference":
              case "Lookahead":
              case "NegativeLookahead":
              case "StartAnchor":
              case "WordBoundary":
              case "NonWordBoundary":
                continue;
            }
            var atom2 = term;
            switch (atom2.type) {
              case "Character":
                addOptimizedIdxToResult(atom2.value, result, ignoreCase);
                break;
              case "Set":
                if (atom2.complement === true) {
                  throw Error(complementErrorMessage);
                }
                (0, forEach_12.default)(atom2.value, function(code2) {
                  if (typeof code2 === "number") {
                    addOptimizedIdxToResult(code2, result, ignoreCase);
                  } else {
                    var range2 = code2;
                    if (ignoreCase === true) {
                      for (var rangeCode = range2.from; rangeCode <= range2.to; rangeCode++) {
                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);
                      }
                    } else {
                      for (var rangeCode = range2.from; rangeCode <= range2.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {
                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);
                      }
                      if (range2.to >= lexer_1.minOptimizationVal) {
                        var minUnOptVal = range2.from >= lexer_1.minOptimizationVal ? range2.from : lexer_1.minOptimizationVal;
                        var maxUnOptVal = range2.to;
                        var minOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(minUnOptVal);
                        var maxOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(maxUnOptVal);
                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {
                          result[currOptIdx] = currOptIdx;
                        }
                      }
                    }
                  }
                });
                break;
              case "Group":
                firstCharOptimizedIndices(atom2.value, result, ignoreCase);
                break;
              default:
                throw Error("Non Exhaustive Match");
            }
            var isOptionalQuantifier = atom2.quantifier !== void 0 && atom2.quantifier.atLeast === 0;
            if (
              // A group may be optional due to empty contents /(?:)/
              // or if everything inside it is optional /((a)?)/
              atom2.type === "Group" && isWholeOptional(atom2) === false || // If this term is not a group it may only be optional if it has an optional quantifier
              atom2.type !== "Group" && isOptionalQuantifier === false
            ) {
              break;
            }
          }
          break;
        default:
          throw Error("non exhaustive match!");
      }
      return (0, values_12.default)(result);
    }
    exports.firstCharOptimizedIndices = firstCharOptimizedIndices;
    function addOptimizedIdxToResult(code2, result, ignoreCase) {
      var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(code2);
      result[optimizedCharIdx] = optimizedCharIdx;
      if (ignoreCase === true) {
        handleIgnoreCase(code2, result);
      }
    }
    function handleIgnoreCase(code2, result) {
      var char = String.fromCharCode(code2);
      var upperChar = char.toUpperCase();
      if (upperChar !== char) {
        var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));
        result[optimizedCharIdx] = optimizedCharIdx;
      } else {
        var lowerChar = char.toLowerCase();
        if (lowerChar !== char) {
          var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));
          result[optimizedCharIdx] = optimizedCharIdx;
        }
      }
    }
    function findCode(setNode, targetCharCodes) {
      return (0, find_12.default)(setNode.value, function(codeOrRange) {
        if (typeof codeOrRange === "number") {
          return (0, includes_12.default)(targetCharCodes, codeOrRange);
        } else {
          var range_1 = codeOrRange;
          return (0, find_12.default)(targetCharCodes, function(targetCode) {
            return range_1.from <= targetCode && targetCode <= range_1.to;
          }) !== void 0;
        }
      });
    }
    function isWholeOptional(ast2) {
      var quantifier = ast2.quantifier;
      if (quantifier && quantifier.atLeast === 0) {
        return true;
      }
      if (!ast2.value) {
        return false;
      }
      return (0, isArray_12.default)(ast2.value) ? (0, every_12.default)(ast2.value, isWholeOptional) : isWholeOptional(ast2.value);
    }
    var CharCodeFinder = (
      /** @class */
      function(_super) {
        __extends2(CharCodeFinder2, _super);
        function CharCodeFinder2(targetCharCodes) {
          var _this = _super.call(this) || this;
          _this.targetCharCodes = targetCharCodes;
          _this.found = false;
          return _this;
        }
        CharCodeFinder2.prototype.visitChildren = function(node) {
          if (this.found === true) {
            return;
          }
          switch (node.type) {
            case "Lookahead":
              this.visitLookahead(node);
              return;
            case "NegativeLookahead":
              this.visitNegativeLookahead(node);
              return;
          }
          _super.prototype.visitChildren.call(this, node);
        };
        CharCodeFinder2.prototype.visitCharacter = function(node) {
          if ((0, includes_12.default)(this.targetCharCodes, node.value)) {
            this.found = true;
          }
        };
        CharCodeFinder2.prototype.visitSet = function(node) {
          if (node.complement) {
            if (findCode(node, this.targetCharCodes) === void 0) {
              this.found = true;
            }
          } else {
            if (findCode(node, this.targetCharCodes) !== void 0) {
              this.found = true;
            }
          }
        };
        return CharCodeFinder2;
      }(regexp_to_ast_1.BaseRegExpVisitor)
    );
    function canMatchCharCode(charCodes, pattern) {
      if (pattern instanceof RegExp) {
        var ast2 = (0, reg_exp_parser_1.getRegExpAst)(pattern);
        var charCodeFinder = new CharCodeFinder(charCodes);
        charCodeFinder.visit(ast2);
        return charCodeFinder.found;
      } else {
        return (0, find_12.default)(pattern, function(char) {
          return (0, includes_12.default)(charCodes, char.charCodeAt(0));
        }) !== void 0;
      }
    }
    exports.canMatchCharCode = canMatchCharCode;
  })(reg_exp);
  return reg_exp;
}
var hasRequiredLexer$1;
function requireLexer$1() {
  if (hasRequiredLexer$1)
    return lexer$1;
  hasRequiredLexer$1 = 1;
  (function(exports) {
    var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
      var extendStatics2 = function(d2, b2) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics2(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics2(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.charCodeToOptimizedIndex = exports.minOptimizationVal = exports.buildLineBreakIssueMessage = exports.LineTerminatorOptimizedTester = exports.isShortPattern = exports.isCustomPattern = exports.cloneEmptyGroups = exports.performWarningRuntimeChecks = exports.performRuntimeChecks = exports.addStickyFlag = exports.addStartOfInput = exports.findUnreachablePatterns = exports.findModesThatDoNotExist = exports.findInvalidGroupType = exports.findDuplicatePatterns = exports.findUnsupportedFlags = exports.findStartOfInputAnchor = exports.findEmptyMatchRegExps = exports.findEndOfInputAnchor = exports.findInvalidPatterns = exports.findMissingPatterns = exports.validatePatterns = exports.analyzeTokenTypes = exports.enableSticky = exports.disableSticky = exports.SUPPORT_STICKY = exports.MODES = exports.DEFAULT_MODE = void 0;
    var regexp_to_ast_1 = requireRegexpToAst();
    var lexer_public_1 = requireLexer_public();
    var first_1 = __importDefault(requireFirst());
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var compact_12 = __importDefault(requireCompact());
    var isArray_12 = __importDefault(requireIsArray());
    var values_12 = __importDefault(requireValues());
    var flatten_12 = __importDefault(requireFlatten());
    var reject_12 = __importDefault(requireReject());
    var difference_12 = __importDefault(requireDifference());
    var indexOf_12 = __importDefault(requireIndexOf());
    var map_12 = __importDefault(requireMap());
    var forEach_12 = __importDefault(requireForEach());
    var isString_12 = __importDefault(requireIsString());
    var isFunction_12 = __importDefault(requireIsFunction());
    var isUndefined_12 = __importDefault(requireIsUndefined());
    var find_12 = __importDefault(requireFind());
    var has_12 = __importDefault(requireHas());
    var keys_12 = __importDefault(requireKeys$1());
    var isRegExp_12 = __importDefault(requireIsRegExp());
    var filter_12 = __importDefault(requireFilter());
    var defaults_12 = __importDefault(requireDefaults());
    var reduce_12 = __importDefault(requireReduce());
    var includes_12 = __importDefault(requireIncludes());
    var utils_1 = requireApi$3();
    var reg_exp_1 = requireReg_exp();
    var reg_exp_parser_1 = requireReg_exp_parser();
    var PATTERN = "PATTERN";
    exports.DEFAULT_MODE = "defaultMode";
    exports.MODES = "modes";
    exports.SUPPORT_STICKY = typeof new RegExp("(?:)").sticky === "boolean";
    function disableSticky() {
      exports.SUPPORT_STICKY = false;
    }
    exports.disableSticky = disableSticky;
    function enableSticky() {
      exports.SUPPORT_STICKY = true;
    }
    exports.enableSticky = enableSticky;
    function analyzeTokenTypes(tokenTypes, options) {
      options = (0, defaults_12.default)(options, {
        useSticky: exports.SUPPORT_STICKY,
        debug: false,
        safeMode: false,
        positionTracking: "full",
        lineTerminatorCharacters: ["\r", "\n"],
        tracer: function(msg, action) {
          return action();
        }
      });
      var tracer = options.tracer;
      tracer("initCharCodeToOptimizedIndexMap", function() {
        initCharCodeToOptimizedIndexMap();
      });
      var onlyRelevantTypes;
      tracer("Reject Lexer.NA", function() {
        onlyRelevantTypes = (0, reject_12.default)(tokenTypes, function(currType) {
          return currType[PATTERN] === lexer_public_1.Lexer.NA;
        });
      });
      var hasCustom = false;
      var allTransformedPatterns;
      tracer("Transform Patterns", function() {
        hasCustom = false;
        allTransformedPatterns = (0, map_12.default)(onlyRelevantTypes, function(currType) {
          var currPattern = currType[PATTERN];
          if ((0, isRegExp_12.default)(currPattern)) {
            var regExpSource = currPattern.source;
            if (regExpSource.length === 1 && // only these regExp meta characters which can appear in a length one regExp
            regExpSource !== "^" && regExpSource !== "$" && regExpSource !== "." && !currPattern.ignoreCase) {
              return regExpSource;
            } else if (regExpSource.length === 2 && regExpSource[0] === "\\" && // not a meta character
            !(0, includes_12.default)([
              "d",
              "D",
              "s",
              "S",
              "t",
              "r",
              "n",
              "t",
              "0",
              "c",
              "b",
              "B",
              "f",
              "v",
              "w",
              "W"
            ], regExpSource[1])) {
              return regExpSource[1];
            } else {
              return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern);
            }
          } else if ((0, isFunction_12.default)(currPattern)) {
            hasCustom = true;
            return { exec: currPattern };
          } else if (typeof currPattern === "object") {
            hasCustom = true;
            return currPattern;
          } else if (typeof currPattern === "string") {
            if (currPattern.length === 1) {
              return currPattern;
            } else {
              var escapedRegExpString = currPattern.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
              var wrappedRegExp = new RegExp(escapedRegExpString);
              return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp);
            }
          } else {
            throw Error("non exhaustive match");
          }
        });
      });
      var patternIdxToType;
      var patternIdxToGroup;
      var patternIdxToLongerAltIdxArr;
      var patternIdxToPushMode;
      var patternIdxToPopMode;
      tracer("misc mapping", function() {
        patternIdxToType = (0, map_12.default)(onlyRelevantTypes, function(currType) {
          return currType.tokenTypeIdx;
        });
        patternIdxToGroup = (0, map_12.default)(onlyRelevantTypes, function(clazz) {
          var groupName = clazz.GROUP;
          if (groupName === lexer_public_1.Lexer.SKIPPED) {
            return void 0;
          } else if ((0, isString_12.default)(groupName)) {
            return groupName;
          } else if ((0, isUndefined_12.default)(groupName)) {
            return false;
          } else {
            throw Error("non exhaustive match");
          }
        });
        patternIdxToLongerAltIdxArr = (0, map_12.default)(onlyRelevantTypes, function(clazz) {
          var longerAltType = clazz.LONGER_ALT;
          if (longerAltType) {
            var longerAltIdxArr = (0, isArray_12.default)(longerAltType) ? (0, map_12.default)(longerAltType, function(type) {
              return (0, indexOf_12.default)(onlyRelevantTypes, type);
            }) : [(0, indexOf_12.default)(onlyRelevantTypes, longerAltType)];
            return longerAltIdxArr;
          }
        });
        patternIdxToPushMode = (0, map_12.default)(onlyRelevantTypes, function(clazz) {
          return clazz.PUSH_MODE;
        });
        patternIdxToPopMode = (0, map_12.default)(onlyRelevantTypes, function(clazz) {
          return (0, has_12.default)(clazz, "POP_MODE");
        });
      });
      var patternIdxToCanLineTerminator;
      tracer("Line Terminator Handling", function() {
        var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);
        patternIdxToCanLineTerminator = (0, map_12.default)(onlyRelevantTypes, function(tokType) {
          return false;
        });
        if (options.positionTracking !== "onlyOffset") {
          patternIdxToCanLineTerminator = (0, map_12.default)(onlyRelevantTypes, function(tokType) {
            if ((0, has_12.default)(tokType, "LINE_BREAKS")) {
              return !!tokType.LINE_BREAKS;
            } else {
              return checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false && (0, reg_exp_1.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);
            }
          });
        }
      });
      var patternIdxToIsCustom;
      var patternIdxToShort;
      var emptyGroups;
      var patternIdxToConfig;
      tracer("Misc Mapping #2", function() {
        patternIdxToIsCustom = (0, map_12.default)(onlyRelevantTypes, isCustomPattern);
        patternIdxToShort = (0, map_12.default)(allTransformedPatterns, isShortPattern);
        emptyGroups = (0, reduce_12.default)(onlyRelevantTypes, function(acc, clazz) {
          var groupName = clazz.GROUP;
          if ((0, isString_12.default)(groupName) && !(groupName === lexer_public_1.Lexer.SKIPPED)) {
            acc[groupName] = [];
          }
          return acc;
        }, {});
        patternIdxToConfig = (0, map_12.default)(allTransformedPatterns, function(x2, idx) {
          return {
            pattern: allTransformedPatterns[idx],
            longerAlt: patternIdxToLongerAltIdxArr[idx],
            canLineTerminator: patternIdxToCanLineTerminator[idx],
            isCustom: patternIdxToIsCustom[idx],
            short: patternIdxToShort[idx],
            group: patternIdxToGroup[idx],
            push: patternIdxToPushMode[idx],
            pop: patternIdxToPopMode[idx],
            tokenTypeIdx: patternIdxToType[idx],
            tokenType: onlyRelevantTypes[idx]
          };
        });
      });
      var canBeOptimized = true;
      var charCodeToPatternIdxToConfig = [];
      if (!options.safeMode) {
        tracer("First Char Optimization", function() {
          charCodeToPatternIdxToConfig = (0, reduce_12.default)(onlyRelevantTypes, function(result, currTokType, idx) {
            if (typeof currTokType.PATTERN === "string") {
              var charCode = currTokType.PATTERN.charCodeAt(0);
              var optimizedIdx = charCodeToOptimizedIndex(charCode);
              addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);
            } else if ((0, isArray_12.default)(currTokType.START_CHARS_HINT)) {
              var lastOptimizedIdx_1;
              (0, forEach_12.default)(currTokType.START_CHARS_HINT, function(charOrInt) {
                var charCode2 = typeof charOrInt === "string" ? charOrInt.charCodeAt(0) : charOrInt;
                var currOptimizedIdx = charCodeToOptimizedIndex(charCode2);
                if (lastOptimizedIdx_1 !== currOptimizedIdx) {
                  lastOptimizedIdx_1 = currOptimizedIdx;
                  addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);
                }
              });
            } else if ((0, isRegExp_12.default)(currTokType.PATTERN)) {
              if (currTokType.PATTERN.unicode) {
                canBeOptimized = false;
                if (options.ensureOptimizations) {
                  (0, utils_1.PRINT_ERROR)("".concat(reg_exp_1.failedOptimizationPrefixMsg) + "	Unable to analyze < ".concat(currTokType.PATTERN.toString(), " > pattern.\n") + "	The regexp unicode flag is not currently supported by the regexp-to-ast library.\n	This will disable the lexer's first char optimizations.\n	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE");
                }
              } else {
                var optimizedCodes = (0, reg_exp_1.getOptimizedStartCodesIndices)(currTokType.PATTERN, options.ensureOptimizations);
                if ((0, isEmpty_12.default)(optimizedCodes)) {
                  canBeOptimized = false;
                }
                (0, forEach_12.default)(optimizedCodes, function(code2) {
                  addToMapOfArrays(result, code2, patternIdxToConfig[idx]);
                });
              }
            } else {
              if (options.ensureOptimizations) {
                (0, utils_1.PRINT_ERROR)("".concat(reg_exp_1.failedOptimizationPrefixMsg) + "	TokenType: <".concat(currTokType.name, "> is using a custom token pattern without providing <start_chars_hint> parameter.\n") + "	This will disable the lexer's first char optimizations.\n	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE");
              }
              canBeOptimized = false;
            }
            return result;
          }, []);
        });
      }
      return {
        emptyGroups,
        patternIdxToConfig,
        charCodeToPatternIdxToConfig,
        hasCustom,
        canBeOptimized
      };
    }
    exports.analyzeTokenTypes = analyzeTokenTypes;
    function validatePatterns(tokenTypes, validModesNames) {
      var errors2 = [];
      var missingResult = findMissingPatterns(tokenTypes);
      errors2 = errors2.concat(missingResult.errors);
      var invalidResult = findInvalidPatterns(missingResult.valid);
      var validTokenTypes = invalidResult.valid;
      errors2 = errors2.concat(invalidResult.errors);
      errors2 = errors2.concat(validateRegExpPattern(validTokenTypes));
      errors2 = errors2.concat(findInvalidGroupType(validTokenTypes));
      errors2 = errors2.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));
      errors2 = errors2.concat(findUnreachablePatterns(validTokenTypes));
      return errors2;
    }
    exports.validatePatterns = validatePatterns;
    function validateRegExpPattern(tokenTypes) {
      var errors2 = [];
      var withRegExpPatterns = (0, filter_12.default)(tokenTypes, function(currTokType) {
        return (0, isRegExp_12.default)(currTokType[PATTERN]);
      });
      errors2 = errors2.concat(findEndOfInputAnchor(withRegExpPatterns));
      errors2 = errors2.concat(findStartOfInputAnchor(withRegExpPatterns));
      errors2 = errors2.concat(findUnsupportedFlags(withRegExpPatterns));
      errors2 = errors2.concat(findDuplicatePatterns(withRegExpPatterns));
      errors2 = errors2.concat(findEmptyMatchRegExps(withRegExpPatterns));
      return errors2;
    }
    function findMissingPatterns(tokenTypes) {
      var tokenTypesWithMissingPattern = (0, filter_12.default)(tokenTypes, function(currType) {
        return !(0, has_12.default)(currType, PATTERN);
      });
      var errors2 = (0, map_12.default)(tokenTypesWithMissingPattern, function(currType) {
        return {
          message: "Token Type: ->" + currType.name + "<- missing static 'PATTERN' property",
          type: lexer_public_1.LexerDefinitionErrorType.MISSING_PATTERN,
          tokenTypes: [currType]
        };
      });
      var valid = (0, difference_12.default)(tokenTypes, tokenTypesWithMissingPattern);
      return { errors: errors2, valid };
    }
    exports.findMissingPatterns = findMissingPatterns;
    function findInvalidPatterns(tokenTypes) {
      var tokenTypesWithInvalidPattern = (0, filter_12.default)(tokenTypes, function(currType) {
        var pattern = currType[PATTERN];
        return !(0, isRegExp_12.default)(pattern) && !(0, isFunction_12.default)(pattern) && !(0, has_12.default)(pattern, "exec") && !(0, isString_12.default)(pattern);
      });
      var errors2 = (0, map_12.default)(tokenTypesWithInvalidPattern, function(currType) {
        return {
          message: "Token Type: ->" + currType.name + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
          type: lexer_public_1.LexerDefinitionErrorType.INVALID_PATTERN,
          tokenTypes: [currType]
        };
      });
      var valid = (0, difference_12.default)(tokenTypes, tokenTypesWithInvalidPattern);
      return { errors: errors2, valid };
    }
    exports.findInvalidPatterns = findInvalidPatterns;
    var end_of_input = /[^\\][$]/;
    function findEndOfInputAnchor(tokenTypes) {
      var EndAnchorFinder = (
        /** @class */
        function(_super) {
          __extends2(EndAnchorFinder2, _super);
          function EndAnchorFinder2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
          }
          EndAnchorFinder2.prototype.visitEndAnchor = function(node) {
            this.found = true;
          };
          return EndAnchorFinder2;
        }(regexp_to_ast_1.BaseRegExpVisitor)
      );
      var invalidRegex = (0, filter_12.default)(tokenTypes, function(currType) {
        var pattern = currType.PATTERN;
        try {
          var regexpAst = (0, reg_exp_parser_1.getRegExpAst)(pattern);
          var endAnchorVisitor = new EndAnchorFinder();
          endAnchorVisitor.visit(regexpAst);
          return endAnchorVisitor.found;
        } catch (e) {
          return end_of_input.test(pattern.source);
        }
      });
      var errors2 = (0, map_12.default)(invalidRegex, function(currType) {
        return {
          message: "Unexpected RegExp Anchor Error:\n	Token Type: ->" + currType.name + "<- static 'PATTERN' cannot contain end of input anchor '$'\n	See chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.",
          type: lexer_public_1.LexerDefinitionErrorType.EOI_ANCHOR_FOUND,
          tokenTypes: [currType]
        };
      });
      return errors2;
    }
    exports.findEndOfInputAnchor = findEndOfInputAnchor;
    function findEmptyMatchRegExps(tokenTypes) {
      var matchesEmptyString = (0, filter_12.default)(tokenTypes, function(currType) {
        var pattern = currType.PATTERN;
        return pattern.test("");
      });
      var errors2 = (0, map_12.default)(matchesEmptyString, function(currType) {
        return {
          message: "Token Type: ->" + currType.name + "<- static 'PATTERN' must not match an empty string",
          type: lexer_public_1.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,
          tokenTypes: [currType]
        };
      });
      return errors2;
    }
    exports.findEmptyMatchRegExps = findEmptyMatchRegExps;
    var start_of_input = /[^\\[][\^]|^\^/;
    function findStartOfInputAnchor(tokenTypes) {
      var StartAnchorFinder = (
        /** @class */
        function(_super) {
          __extends2(StartAnchorFinder2, _super);
          function StartAnchorFinder2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
          }
          StartAnchorFinder2.prototype.visitStartAnchor = function(node) {
            this.found = true;
          };
          return StartAnchorFinder2;
        }(regexp_to_ast_1.BaseRegExpVisitor)
      );
      var invalidRegex = (0, filter_12.default)(tokenTypes, function(currType) {
        var pattern = currType.PATTERN;
        try {
          var regexpAst = (0, reg_exp_parser_1.getRegExpAst)(pattern);
          var startAnchorVisitor = new StartAnchorFinder();
          startAnchorVisitor.visit(regexpAst);
          return startAnchorVisitor.found;
        } catch (e) {
          return start_of_input.test(pattern.source);
        }
      });
      var errors2 = (0, map_12.default)(invalidRegex, function(currType) {
        return {
          message: "Unexpected RegExp Anchor Error:\n	Token Type: ->" + currType.name + "<- static 'PATTERN' cannot contain start of input anchor '^'\n	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.",
          type: lexer_public_1.LexerDefinitionErrorType.SOI_ANCHOR_FOUND,
          tokenTypes: [currType]
        };
      });
      return errors2;
    }
    exports.findStartOfInputAnchor = findStartOfInputAnchor;
    function findUnsupportedFlags(tokenTypes) {
      var invalidFlags = (0, filter_12.default)(tokenTypes, function(currType) {
        var pattern = currType[PATTERN];
        return pattern instanceof RegExp && (pattern.multiline || pattern.global);
      });
      var errors2 = (0, map_12.default)(invalidFlags, function(currType) {
        return {
          message: "Token Type: ->" + currType.name + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
          type: lexer_public_1.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,
          tokenTypes: [currType]
        };
      });
      return errors2;
    }
    exports.findUnsupportedFlags = findUnsupportedFlags;
    function findDuplicatePatterns(tokenTypes) {
      var found = [];
      var identicalPatterns = (0, map_12.default)(tokenTypes, function(outerType) {
        return (0, reduce_12.default)(tokenTypes, function(result, innerType) {
          if (outerType.PATTERN.source === innerType.PATTERN.source && !(0, includes_12.default)(found, innerType) && innerType.PATTERN !== lexer_public_1.Lexer.NA) {
            found.push(innerType);
            result.push(innerType);
            return result;
          }
          return result;
        }, []);
      });
      identicalPatterns = (0, compact_12.default)(identicalPatterns);
      var duplicatePatterns = (0, filter_12.default)(identicalPatterns, function(currIdenticalSet) {
        return currIdenticalSet.length > 1;
      });
      var errors2 = (0, map_12.default)(duplicatePatterns, function(setOfIdentical) {
        var tokenTypeNames = (0, map_12.default)(setOfIdentical, function(currType) {
          return currType.name;
        });
        var dupPatternSrc = (0, first_1.default)(setOfIdentical).PATTERN;
        return {
          message: "The same RegExp pattern ->".concat(dupPatternSrc, "<-") + "has been used in all of the following Token Types: ".concat(tokenTypeNames.join(", "), " <-"),
          type: lexer_public_1.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,
          tokenTypes: setOfIdentical
        };
      });
      return errors2;
    }
    exports.findDuplicatePatterns = findDuplicatePatterns;
    function findInvalidGroupType(tokenTypes) {
      var invalidTypes = (0, filter_12.default)(tokenTypes, function(clazz) {
        if (!(0, has_12.default)(clazz, "GROUP")) {
          return false;
        }
        var group = clazz.GROUP;
        return group !== lexer_public_1.Lexer.SKIPPED && group !== lexer_public_1.Lexer.NA && !(0, isString_12.default)(group);
      });
      var errors2 = (0, map_12.default)(invalidTypes, function(currType) {
        return {
          message: "Token Type: ->" + currType.name + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
          type: lexer_public_1.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,
          tokenTypes: [currType]
        };
      });
      return errors2;
    }
    exports.findInvalidGroupType = findInvalidGroupType;
    function findModesThatDoNotExist(tokenTypes, validModes) {
      var invalidModes = (0, filter_12.default)(tokenTypes, function(clazz) {
        return clazz.PUSH_MODE !== void 0 && !(0, includes_12.default)(validModes, clazz.PUSH_MODE);
      });
      var errors2 = (0, map_12.default)(invalidModes, function(tokType) {
        var msg = "Token Type: ->".concat(tokType.name, "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->").concat(tokType.PUSH_MODE, "<-") + "which does not exist";
        return {
          message: msg,
          type: lexer_public_1.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,
          tokenTypes: [tokType]
        };
      });
      return errors2;
    }
    exports.findModesThatDoNotExist = findModesThatDoNotExist;
    function findUnreachablePatterns(tokenTypes) {
      var errors2 = [];
      var canBeTested = (0, reduce_12.default)(tokenTypes, function(result, tokType, idx) {
        var pattern = tokType.PATTERN;
        if (pattern === lexer_public_1.Lexer.NA) {
          return result;
        }
        if ((0, isString_12.default)(pattern)) {
          result.push({ str: pattern, idx, tokenType: tokType });
        } else if ((0, isRegExp_12.default)(pattern) && noMetaChar(pattern)) {
          result.push({ str: pattern.source, idx, tokenType: tokType });
        }
        return result;
      }, []);
      (0, forEach_12.default)(tokenTypes, function(tokType, testIdx) {
        (0, forEach_12.default)(canBeTested, function(_a2) {
          var str = _a2.str, idx = _a2.idx, tokenType = _a2.tokenType;
          if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {
            var msg = "Token: ->".concat(tokenType.name, "<- can never be matched.\n") + "Because it appears AFTER the Token Type ->".concat(tokType.name, "<-") + "in the lexer's definition.\nSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE";
            errors2.push({
              message: msg,
              type: lexer_public_1.LexerDefinitionErrorType.UNREACHABLE_PATTERN,
              tokenTypes: [tokType, tokenType]
            });
          }
        });
      });
      return errors2;
    }
    exports.findUnreachablePatterns = findUnreachablePatterns;
    function testTokenType(str, pattern) {
      if ((0, isRegExp_12.default)(pattern)) {
        var regExpArray = pattern.exec(str);
        return regExpArray !== null && regExpArray.index === 0;
      } else if ((0, isFunction_12.default)(pattern)) {
        return pattern(str, 0, [], {});
      } else if ((0, has_12.default)(pattern, "exec")) {
        return pattern.exec(str, 0, [], {});
      } else if (typeof pattern === "string") {
        return pattern === str;
      } else {
        throw Error("non exhaustive match");
      }
    }
    function noMetaChar(regExp) {
      var metaChars = [
        ".",
        "\\",
        "[",
        "]",
        "|",
        "^",
        "$",
        "(",
        ")",
        "?",
        "*",
        "+",
        "{"
      ];
      return (0, find_12.default)(metaChars, function(char) {
        return regExp.source.indexOf(char) !== -1;
      }) === void 0;
    }
    function addStartOfInput(pattern) {
      var flags = pattern.ignoreCase ? "i" : "";
      return new RegExp("^(?:".concat(pattern.source, ")"), flags);
    }
    exports.addStartOfInput = addStartOfInput;
    function addStickyFlag(pattern) {
      var flags = pattern.ignoreCase ? "iy" : "y";
      return new RegExp("".concat(pattern.source), flags);
    }
    exports.addStickyFlag = addStickyFlag;
    function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
      var errors2 = [];
      if (!(0, has_12.default)(lexerDefinition, exports.DEFAULT_MODE)) {
        errors2.push({
          message: "A MultiMode Lexer cannot be initialized without a <" + exports.DEFAULT_MODE + "> property in its definition\n",
          type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
        });
      }
      if (!(0, has_12.default)(lexerDefinition, exports.MODES)) {
        errors2.push({
          message: "A MultiMode Lexer cannot be initialized without a <" + exports.MODES + "> property in its definition\n",
          type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
        });
      }
      if ((0, has_12.default)(lexerDefinition, exports.MODES) && (0, has_12.default)(lexerDefinition, exports.DEFAULT_MODE) && !(0, has_12.default)(lexerDefinition.modes, lexerDefinition.defaultMode)) {
        errors2.push({
          message: "A MultiMode Lexer cannot be initialized with a ".concat(exports.DEFAULT_MODE, ": <").concat(lexerDefinition.defaultMode, ">") + "which does not exist\n",
          type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
        });
      }
      if ((0, has_12.default)(lexerDefinition, exports.MODES)) {
        (0, forEach_12.default)(lexerDefinition.modes, function(currModeValue, currModeName) {
          (0, forEach_12.default)(currModeValue, function(currTokType, currIdx) {
            if ((0, isUndefined_12.default)(currTokType)) {
              errors2.push({
                message: "A Lexer cannot be initialized using an undefined Token Type. Mode:" + "<".concat(currModeName, "> at index: <").concat(currIdx, ">\n"),
                type: lexer_public_1.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
              });
            } else if ((0, has_12.default)(currTokType, "LONGER_ALT")) {
              var longerAlt = (0, isArray_12.default)(currTokType.LONGER_ALT) ? currTokType.LONGER_ALT : [currTokType.LONGER_ALT];
              (0, forEach_12.default)(longerAlt, function(currLongerAlt) {
                if (!(0, isUndefined_12.default)(currLongerAlt) && !(0, includes_12.default)(currModeValue, currLongerAlt)) {
                  errors2.push({
                    message: "A MultiMode Lexer cannot be initialized with a longer_alt <".concat(currLongerAlt.name, "> on token <").concat(currTokType.name, "> outside of mode <").concat(currModeName, ">\n"),
                    type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE
                  });
                }
              });
            }
          });
        });
      }
      return errors2;
    }
    exports.performRuntimeChecks = performRuntimeChecks;
    function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
      var warnings = [];
      var hasAnyLineBreak = false;
      var allTokenTypes = (0, compact_12.default)((0, flatten_12.default)((0, values_12.default)(lexerDefinition.modes)));
      var concreteTokenTypes = (0, reject_12.default)(allTokenTypes, function(currType) {
        return currType[PATTERN] === lexer_public_1.Lexer.NA;
      });
      var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);
      if (trackLines) {
        (0, forEach_12.default)(concreteTokenTypes, function(tokType) {
          var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);
          if (currIssue !== false) {
            var message = buildLineBreakIssueMessage(tokType, currIssue);
            var warningDescriptor = {
              message,
              type: currIssue.issue,
              tokenType: tokType
            };
            warnings.push(warningDescriptor);
          } else {
            if ((0, has_12.default)(tokType, "LINE_BREAKS")) {
              if (tokType.LINE_BREAKS === true) {
                hasAnyLineBreak = true;
              }
            } else {
              if ((0, reg_exp_1.canMatchCharCode)(terminatorCharCodes, tokType.PATTERN)) {
                hasAnyLineBreak = true;
              }
            }
          }
        });
      }
      if (trackLines && !hasAnyLineBreak) {
        warnings.push({
          message: "Warning: No LINE_BREAKS Found.\n	This Lexer has been defined to track line and column information,\n	But none of the Token Types can be identified as matching a line terminator.\n	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n	for details.",
          type: lexer_public_1.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS
        });
      }
      return warnings;
    }
    exports.performWarningRuntimeChecks = performWarningRuntimeChecks;
    function cloneEmptyGroups(emptyGroups) {
      var clonedResult = {};
      var groupKeys = (0, keys_12.default)(emptyGroups);
      (0, forEach_12.default)(groupKeys, function(currKey) {
        var currGroupValue = emptyGroups[currKey];
        if ((0, isArray_12.default)(currGroupValue)) {
          clonedResult[currKey] = [];
        } else {
          throw Error("non exhaustive match");
        }
      });
      return clonedResult;
    }
    exports.cloneEmptyGroups = cloneEmptyGroups;
    function isCustomPattern(tokenType) {
      var pattern = tokenType.PATTERN;
      if ((0, isRegExp_12.default)(pattern)) {
        return false;
      } else if ((0, isFunction_12.default)(pattern)) {
        return true;
      } else if ((0, has_12.default)(pattern, "exec")) {
        return true;
      } else if ((0, isString_12.default)(pattern)) {
        return false;
      } else {
        throw Error("non exhaustive match");
      }
    }
    exports.isCustomPattern = isCustomPattern;
    function isShortPattern(pattern) {
      if ((0, isString_12.default)(pattern) && pattern.length === 1) {
        return pattern.charCodeAt(0);
      } else {
        return false;
      }
    }
    exports.isShortPattern = isShortPattern;
    exports.LineTerminatorOptimizedTester = {
      // implements /\n|\r\n?/g.test
      test: function(text) {
        var len = text.length;
        for (var i = this.lastIndex; i < len; i++) {
          var c2 = text.charCodeAt(i);
          if (c2 === 10) {
            this.lastIndex = i + 1;
            return true;
          } else if (c2 === 13) {
            if (text.charCodeAt(i + 1) === 10) {
              this.lastIndex = i + 2;
            } else {
              this.lastIndex = i + 1;
            }
            return true;
          }
        }
        return false;
      },
      lastIndex: 0
    };
    function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {
      if ((0, has_12.default)(tokType, "LINE_BREAKS")) {
        return false;
      } else {
        if ((0, isRegExp_12.default)(tokType.PATTERN)) {
          try {
            (0, reg_exp_1.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);
          } catch (e) {
            return {
              issue: lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,
              errMsg: e.message
            };
          }
          return false;
        } else if ((0, isString_12.default)(tokType.PATTERN)) {
          return false;
        } else if (isCustomPattern(tokType)) {
          return { issue: lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK };
        } else {
          throw Error("non exhaustive match");
        }
      }
    }
    function buildLineBreakIssueMessage(tokType, details) {
      if (details.issue === lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {
        return "Warning: unable to identify line terminator usage in pattern.\n" + "	The problem is in the <".concat(tokType.name, "> Token Type\n") + "	 Root cause: ".concat(details.errMsg, ".\n") + "	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR";
      } else if (details.issue === lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {
        return "Warning: A Custom Token Pattern should specify the <line_breaks> option.\n" + "	The problem is in the <".concat(tokType.name, "> Token Type\n") + "	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK";
      } else {
        throw Error("non exhaustive match");
      }
    }
    exports.buildLineBreakIssueMessage = buildLineBreakIssueMessage;
    function getCharCodes(charsOrCodes) {
      var charCodes = (0, map_12.default)(charsOrCodes, function(numOrString) {
        if ((0, isString_12.default)(numOrString)) {
          return numOrString.charCodeAt(0);
        } else {
          return numOrString;
        }
      });
      return charCodes;
    }
    function addToMapOfArrays(map2, key, value) {
      if (map2[key] === void 0) {
        map2[key] = [value];
      } else {
        map2[key].push(value);
      }
    }
    exports.minOptimizationVal = 256;
    var charCodeToOptimizedIdxMap = [];
    function charCodeToOptimizedIndex(charCode) {
      return charCode < exports.minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode];
    }
    exports.charCodeToOptimizedIndex = charCodeToOptimizedIndex;
    function initCharCodeToOptimizedIndexMap() {
      if ((0, isEmpty_12.default)(charCodeToOptimizedIdxMap)) {
        charCodeToOptimizedIdxMap = new Array(65536);
        for (var i = 0; i < 65536; i++) {
          charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;
        }
      }
    }
  })(lexer$1);
  return lexer$1;
}
var last_1;
var hasRequiredLast;
function requireLast() {
  if (hasRequiredLast)
    return last_1;
  hasRequiredLast = 1;
  function last2(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
  }
  last_1 = last2;
  return last_1;
}
var tokens = {};
var hasRequiredTokens;
function requireTokens() {
  if (hasRequiredTokens)
    return tokens;
  hasRequiredTokens = 1;
  (function(exports) {
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var compact_12 = __importDefault(requireCompact());
    var isArray_12 = __importDefault(requireIsArray());
    var flatten_12 = __importDefault(requireFlatten());
    var difference_12 = __importDefault(requireDifference());
    var map_12 = __importDefault(requireMap());
    var forEach_12 = __importDefault(requireForEach());
    var has_12 = __importDefault(requireHas());
    var includes_12 = __importDefault(requireIncludes());
    var clone_12 = __importDefault(requireClone());
    function tokenStructuredMatcher(tokInstance, tokConstructor) {
      var instanceType = tokInstance.tokenTypeIdx;
      if (instanceType === tokConstructor.tokenTypeIdx) {
        return true;
      } else {
        return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;
      }
    }
    exports.tokenStructuredMatcher = tokenStructuredMatcher;
    function tokenStructuredMatcherNoCategories(token, tokType) {
      return token.tokenTypeIdx === tokType.tokenTypeIdx;
    }
    exports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;
    exports.tokenShortNameIdx = 1;
    exports.tokenIdxToClass = {};
    function augmentTokenTypes(tokenTypes) {
      var tokenTypesAndParents = expandCategories(tokenTypes);
      assignTokenDefaultProps(tokenTypesAndParents);
      assignCategoriesMapProp(tokenTypesAndParents);
      assignCategoriesTokensProp(tokenTypesAndParents);
      (0, forEach_12.default)(tokenTypesAndParents, function(tokType) {
        tokType.isParent = tokType.categoryMatches.length > 0;
      });
    }
    exports.augmentTokenTypes = augmentTokenTypes;
    function expandCategories(tokenTypes) {
      var result = (0, clone_12.default)(tokenTypes);
      var categories = tokenTypes;
      var searching = true;
      while (searching) {
        categories = (0, compact_12.default)((0, flatten_12.default)((0, map_12.default)(categories, function(currTokType) {
          return currTokType.CATEGORIES;
        })));
        var newCategories = (0, difference_12.default)(categories, result);
        result = result.concat(newCategories);
        if ((0, isEmpty_12.default)(newCategories)) {
          searching = false;
        } else {
          categories = newCategories;
        }
      }
      return result;
    }
    exports.expandCategories = expandCategories;
    function assignTokenDefaultProps(tokenTypes) {
      (0, forEach_12.default)(tokenTypes, function(currTokType) {
        if (!hasShortKeyProperty(currTokType)) {
          exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;
          currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;
        }
        if (hasCategoriesProperty(currTokType) && !(0, isArray_12.default)(currTokType.CATEGORIES)) {
          currTokType.CATEGORIES = [currTokType.CATEGORIES];
        }
        if (!hasCategoriesProperty(currTokType)) {
          currTokType.CATEGORIES = [];
        }
        if (!hasExtendingTokensTypesProperty(currTokType)) {
          currTokType.categoryMatches = [];
        }
        if (!hasExtendingTokensTypesMapProperty(currTokType)) {
          currTokType.categoryMatchesMap = {};
        }
      });
    }
    exports.assignTokenDefaultProps = assignTokenDefaultProps;
    function assignCategoriesTokensProp(tokenTypes) {
      (0, forEach_12.default)(tokenTypes, function(currTokType) {
        currTokType.categoryMatches = [];
        (0, forEach_12.default)(currTokType.categoryMatchesMap, function(val, key) {
          currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);
        });
      });
    }
    exports.assignCategoriesTokensProp = assignCategoriesTokensProp;
    function assignCategoriesMapProp(tokenTypes) {
      (0, forEach_12.default)(tokenTypes, function(currTokType) {
        singleAssignCategoriesToksMap([], currTokType);
      });
    }
    exports.assignCategoriesMapProp = assignCategoriesMapProp;
    function singleAssignCategoriesToksMap(path, nextNode) {
      (0, forEach_12.default)(path, function(pathNode) {
        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;
      });
      (0, forEach_12.default)(nextNode.CATEGORIES, function(nextCategory) {
        var newPath = path.concat(nextNode);
        if (!(0, includes_12.default)(newPath, nextCategory)) {
          singleAssignCategoriesToksMap(newPath, nextCategory);
        }
      });
    }
    exports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;
    function hasShortKeyProperty(tokType) {
      return (0, has_12.default)(tokType, "tokenTypeIdx");
    }
    exports.hasShortKeyProperty = hasShortKeyProperty;
    function hasCategoriesProperty(tokType) {
      return (0, has_12.default)(tokType, "CATEGORIES");
    }
    exports.hasCategoriesProperty = hasCategoriesProperty;
    function hasExtendingTokensTypesProperty(tokType) {
      return (0, has_12.default)(tokType, "categoryMatches");
    }
    exports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;
    function hasExtendingTokensTypesMapProperty(tokType) {
      return (0, has_12.default)(tokType, "categoryMatchesMap");
    }
    exports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;
    function isTokenType(tokType) {
      return (0, has_12.default)(tokType, "tokenTypeIdx");
    }
    exports.isTokenType = isTokenType;
  })(tokens);
  return tokens;
}
var lexer_errors_public = {};
var hasRequiredLexer_errors_public;
function requireLexer_errors_public() {
  if (hasRequiredLexer_errors_public)
    return lexer_errors_public;
  hasRequiredLexer_errors_public = 1;
  Object.defineProperty(lexer_errors_public, "__esModule", { value: true });
  lexer_errors_public.defaultLexerErrorProvider = void 0;
  lexer_errors_public.defaultLexerErrorProvider = {
    buildUnableToPopLexerModeMessage: function(token) {
      return "Unable to pop Lexer Mode after encountering Token ->".concat(token.image, "<- The Mode Stack is empty");
    },
    buildUnexpectedCharactersMessage: function(fullText, startOffset, length, line, column) {
      return "unexpected character: ->".concat(fullText.charAt(startOffset), "<- at offset: ").concat(startOffset, ",") + " skipped ".concat(length, " characters.");
    }
  };
  return lexer_errors_public;
}
var hasRequiredLexer_public;
function requireLexer_public() {
  if (hasRequiredLexer_public)
    return lexer_public;
  hasRequiredLexer_public = 1;
  (function(exports) {
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lexer = exports.LexerDefinitionErrorType = void 0;
    var lexer_1 = requireLexer$1();
    var noop_12 = __importDefault(requireNoop());
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var isArray_12 = __importDefault(requireIsArray());
    var last_12 = __importDefault(requireLast());
    var reject_12 = __importDefault(requireReject());
    var map_12 = __importDefault(requireMap());
    var forEach_12 = __importDefault(requireForEach());
    var keys_12 = __importDefault(requireKeys$1());
    var isUndefined_12 = __importDefault(requireIsUndefined());
    var identity_12 = __importDefault(requireIdentity());
    var assign_12 = __importDefault(requireAssign());
    var reduce_12 = __importDefault(requireReduce());
    var clone_12 = __importDefault(requireClone());
    var utils_1 = requireApi$3();
    var tokens_1 = requireTokens();
    var lexer_errors_public_1 = requireLexer_errors_public();
    var reg_exp_parser_1 = requireReg_exp_parser();
    (function(LexerDefinitionErrorType) {
      LexerDefinitionErrorType[LexerDefinitionErrorType["MISSING_PATTERN"] = 0] = "MISSING_PATTERN";
      LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_PATTERN"] = 1] = "INVALID_PATTERN";
      LexerDefinitionErrorType[LexerDefinitionErrorType["EOI_ANCHOR_FOUND"] = 2] = "EOI_ANCHOR_FOUND";
      LexerDefinitionErrorType[LexerDefinitionErrorType["UNSUPPORTED_FLAGS_FOUND"] = 3] = "UNSUPPORTED_FLAGS_FOUND";
      LexerDefinitionErrorType[LexerDefinitionErrorType["DUPLICATE_PATTERNS_FOUND"] = 4] = "DUPLICATE_PATTERNS_FOUND";
      LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_GROUP_TYPE_FOUND"] = 5] = "INVALID_GROUP_TYPE_FOUND";
      LexerDefinitionErrorType[LexerDefinitionErrorType["PUSH_MODE_DOES_NOT_EXIST"] = 6] = "PUSH_MODE_DOES_NOT_EXIST";
      LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE"] = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
      LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY"] = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
      LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST"] = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
      LexerDefinitionErrorType[LexerDefinitionErrorType["LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED"] = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
      LexerDefinitionErrorType[LexerDefinitionErrorType["SOI_ANCHOR_FOUND"] = 11] = "SOI_ANCHOR_FOUND";
      LexerDefinitionErrorType[LexerDefinitionErrorType["EMPTY_MATCH_PATTERN"] = 12] = "EMPTY_MATCH_PATTERN";
      LexerDefinitionErrorType[LexerDefinitionErrorType["NO_LINE_BREAKS_FLAGS"] = 13] = "NO_LINE_BREAKS_FLAGS";
      LexerDefinitionErrorType[LexerDefinitionErrorType["UNREACHABLE_PATTERN"] = 14] = "UNREACHABLE_PATTERN";
      LexerDefinitionErrorType[LexerDefinitionErrorType["IDENTIFY_TERMINATOR"] = 15] = "IDENTIFY_TERMINATOR";
      LexerDefinitionErrorType[LexerDefinitionErrorType["CUSTOM_LINE_BREAK"] = 16] = "CUSTOM_LINE_BREAK";
      LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE"] = 17] = "MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE";
    })(exports.LexerDefinitionErrorType || (exports.LexerDefinitionErrorType = {}));
    var DEFAULT_LEXER_CONFIG = {
      deferDefinitionErrorsHandling: false,
      positionTracking: "full",
      lineTerminatorsPattern: /\n|\r\n?/g,
      lineTerminatorCharacters: ["\n", "\r"],
      ensureOptimizations: false,
      safeMode: false,
      errorMessageProvider: lexer_errors_public_1.defaultLexerErrorProvider,
      traceInitPerf: false,
      skipValidations: false,
      recoveryEnabled: true
    };
    Object.freeze(DEFAULT_LEXER_CONFIG);
    var Lexer = (
      /** @class */
      function() {
        function Lexer2(lexerDefinition, config2) {
          if (config2 === void 0) {
            config2 = DEFAULT_LEXER_CONFIG;
          }
          var _this = this;
          this.lexerDefinition = lexerDefinition;
          this.lexerDefinitionErrors = [];
          this.lexerDefinitionWarning = [];
          this.patternIdxToConfig = {};
          this.charCodeToPatternIdxToConfig = {};
          this.modes = [];
          this.emptyGroups = {};
          this.trackStartLines = true;
          this.trackEndLines = true;
          this.hasCustom = false;
          this.canModeBeOptimized = {};
          this.TRACE_INIT = function(phaseDesc, phaseImpl) {
            if (_this.traceInitPerf === true) {
              _this.traceInitIndent++;
              var indent = new Array(_this.traceInitIndent + 1).join("	");
              if (_this.traceInitIndent < _this.traceInitMaxIdent) {
                console.log("".concat(indent, "--> <").concat(phaseDesc, ">"));
              }
              var _a2 = (0, utils_1.timer)(phaseImpl), time = _a2.time, value = _a2.value;
              var traceMethod = time > 10 ? console.warn : console.log;
              if (_this.traceInitIndent < _this.traceInitMaxIdent) {
                traceMethod("".concat(indent, "<-- <").concat(phaseDesc, "> time: ").concat(time, "ms"));
              }
              _this.traceInitIndent--;
              return value;
            } else {
              return phaseImpl();
            }
          };
          if (typeof config2 === "boolean") {
            throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\na boolean 2nd argument is no longer supported");
          }
          this.config = (0, assign_12.default)({}, DEFAULT_LEXER_CONFIG, config2);
          var traceInitVal = this.config.traceInitPerf;
          if (traceInitVal === true) {
            this.traceInitMaxIdent = Infinity;
            this.traceInitPerf = true;
          } else if (typeof traceInitVal === "number") {
            this.traceInitMaxIdent = traceInitVal;
            this.traceInitPerf = true;
          }
          this.traceInitIndent = -1;
          this.TRACE_INIT("Lexer Constructor", function() {
            var actualDefinition;
            var hasOnlySingleMode = true;
            _this.TRACE_INIT("Lexer Config handling", function() {
              if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {
                _this.config.lineTerminatorsPattern = lexer_1.LineTerminatorOptimizedTester;
              } else {
                if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {
                  throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");
                }
              }
              if (config2.safeMode && config2.ensureOptimizations) {
                throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
              }
              _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);
              _this.trackEndLines = /full/i.test(_this.config.positionTracking);
              if ((0, isArray_12.default)(lexerDefinition)) {
                actualDefinition = {
                  modes: { defaultMode: (0, clone_12.default)(lexerDefinition) },
                  defaultMode: lexer_1.DEFAULT_MODE
                };
              } else {
                hasOnlySingleMode = false;
                actualDefinition = (0, clone_12.default)(lexerDefinition);
              }
            });
            if (_this.config.skipValidations === false) {
              _this.TRACE_INIT("performRuntimeChecks", function() {
                _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat((0, lexer_1.performRuntimeChecks)(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));
              });
              _this.TRACE_INIT("performWarningRuntimeChecks", function() {
                _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat((0, lexer_1.performWarningRuntimeChecks)(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));
              });
            }
            actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {};
            (0, forEach_12.default)(actualDefinition.modes, function(currModeValue, currModeName) {
              actualDefinition.modes[currModeName] = (0, reject_12.default)(currModeValue, function(currTokType) {
                return (0, isUndefined_12.default)(currTokType);
              });
            });
            var allModeNames = (0, keys_12.default)(actualDefinition.modes);
            (0, forEach_12.default)(actualDefinition.modes, function(currModDef, currModName) {
              _this.TRACE_INIT("Mode: <".concat(currModName, "> processing"), function() {
                _this.modes.push(currModName);
                if (_this.config.skipValidations === false) {
                  _this.TRACE_INIT("validatePatterns", function() {
                    _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat((0, lexer_1.validatePatterns)(currModDef, allModeNames));
                  });
                }
                if ((0, isEmpty_12.default)(_this.lexerDefinitionErrors)) {
                  (0, tokens_1.augmentTokenTypes)(currModDef);
                  var currAnalyzeResult_1;
                  _this.TRACE_INIT("analyzeTokenTypes", function() {
                    currAnalyzeResult_1 = (0, lexer_1.analyzeTokenTypes)(currModDef, {
                      lineTerminatorCharacters: _this.config.lineTerminatorCharacters,
                      positionTracking: config2.positionTracking,
                      ensureOptimizations: config2.ensureOptimizations,
                      safeMode: config2.safeMode,
                      tracer: _this.TRACE_INIT
                    });
                  });
                  _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;
                  _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;
                  _this.emptyGroups = (0, assign_12.default)({}, _this.emptyGroups, currAnalyzeResult_1.emptyGroups);
                  _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;
                  _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;
                }
              });
            });
            _this.defaultMode = actualDefinition.defaultMode;
            if (!(0, isEmpty_12.default)(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {
              var allErrMessages = (0, map_12.default)(_this.lexerDefinitionErrors, function(error) {
                return error.message;
              });
              var allErrMessagesString = allErrMessages.join("-----------------------\n");
              throw new Error("Errors detected in definition of Lexer:\n" + allErrMessagesString);
            }
            (0, forEach_12.default)(_this.lexerDefinitionWarning, function(warningDescriptor) {
              (0, utils_1.PRINT_WARNING)(warningDescriptor.message);
            });
            _this.TRACE_INIT("Choosing sub-methods implementations", function() {
              if (lexer_1.SUPPORT_STICKY) {
                _this.chopInput = identity_12.default;
                _this.match = _this.matchWithTest;
              } else {
                _this.updateLastIndex = noop_12.default;
                _this.match = _this.matchWithExec;
              }
              if (hasOnlySingleMode) {
                _this.handleModes = noop_12.default;
              }
              if (_this.trackStartLines === false) {
                _this.computeNewColumn = identity_12.default;
              }
              if (_this.trackEndLines === false) {
                _this.updateTokenEndLineColumnLocation = noop_12.default;
              }
              if (/full/i.test(_this.config.positionTracking)) {
                _this.createTokenInstance = _this.createFullToken;
              } else if (/onlyStart/i.test(_this.config.positionTracking)) {
                _this.createTokenInstance = _this.createStartOnlyToken;
              } else if (/onlyOffset/i.test(_this.config.positionTracking)) {
                _this.createTokenInstance = _this.createOffsetOnlyToken;
              } else {
                throw Error('Invalid <positionTracking> config option: "'.concat(_this.config.positionTracking, '"'));
              }
              if (_this.hasCustom) {
                _this.addToken = _this.addTokenUsingPush;
                _this.handlePayload = _this.handlePayloadWithCustom;
              } else {
                _this.addToken = _this.addTokenUsingMemberAccess;
                _this.handlePayload = _this.handlePayloadNoCustom;
              }
            });
            _this.TRACE_INIT("Failed Optimization Warnings", function() {
              var unOptimizedModes = (0, reduce_12.default)(_this.canModeBeOptimized, function(cannotBeOptimized, canBeOptimized, modeName) {
                if (canBeOptimized === false) {
                  cannotBeOptimized.push(modeName);
                }
                return cannotBeOptimized;
              }, []);
              if (config2.ensureOptimizations && !(0, isEmpty_12.default)(unOptimizedModes)) {
                throw Error("Lexer Modes: < ".concat(unOptimizedModes.join(", "), " > cannot be optimized.\n") + '	 Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n	 Or inspect the console log for details on how to resolve these issues.');
              }
            });
            _this.TRACE_INIT("clearRegExpParserCache", function() {
              (0, reg_exp_parser_1.clearRegExpParserCache)();
            });
            _this.TRACE_INIT("toFastProperties", function() {
              (0, utils_1.toFastProperties)(_this);
            });
          });
        }
        Lexer2.prototype.tokenize = function(text, initialMode) {
          if (initialMode === void 0) {
            initialMode = this.defaultMode;
          }
          if (!(0, isEmpty_12.default)(this.lexerDefinitionErrors)) {
            var allErrMessages = (0, map_12.default)(this.lexerDefinitionErrors, function(error) {
              return error.message;
            });
            var allErrMessagesString = allErrMessages.join("-----------------------\n");
            throw new Error("Unable to Tokenize because Errors detected in definition of Lexer:\n" + allErrMessagesString);
          }
          return this.tokenizeInternal(text, initialMode);
        };
        Lexer2.prototype.tokenizeInternal = function(text, initialMode) {
          var _this = this;
          var i, j2, k2, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, msg, match;
          var orgText = text;
          var orgLength = orgText.length;
          var offset = 0;
          var matchedTokensIndex = 0;
          var guessedNumberOfTokens = this.hasCustom ? 0 : Math.floor(text.length / 10);
          var matchedTokens = new Array(guessedNumberOfTokens);
          var errors2 = [];
          var line = this.trackStartLines ? 1 : void 0;
          var column = this.trackStartLines ? 1 : void 0;
          var groups = (0, lexer_1.cloneEmptyGroups)(this.emptyGroups);
          var trackLines = this.trackStartLines;
          var lineTerminatorPattern = this.config.lineTerminatorsPattern;
          var currModePatternsLength = 0;
          var patternIdxToConfig = [];
          var currCharCodeToPatternIdxToConfig = [];
          var modeStack = [];
          var emptyArray = [];
          Object.freeze(emptyArray);
          var getPossiblePatterns;
          function getPossiblePatternsSlow() {
            return patternIdxToConfig;
          }
          function getPossiblePatternsOptimized(charCode) {
            var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(charCode);
            var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];
            if (possiblePatterns === void 0) {
              return emptyArray;
            } else {
              return possiblePatterns;
            }
          }
          var pop_mode = function(popToken) {
            if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
            // So no error should occur.
            popToken.tokenType.PUSH_MODE === void 0) {
              var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);
              errors2.push({
                offset: popToken.startOffset,
                line: popToken.startLine,
                column: popToken.startColumn,
                length: popToken.image.length,
                message: msg_1
              });
            } else {
              modeStack.pop();
              var newMode = (0, last_12.default)(modeStack);
              patternIdxToConfig = _this.patternIdxToConfig[newMode];
              currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];
              currModePatternsLength = patternIdxToConfig.length;
              var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;
              if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                getPossiblePatterns = getPossiblePatternsOptimized;
              } else {
                getPossiblePatterns = getPossiblePatternsSlow;
              }
            }
          };
          function push_mode(newMode) {
            modeStack.push(newMode);
            currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];
            patternIdxToConfig = this.patternIdxToConfig[newMode];
            currModePatternsLength = patternIdxToConfig.length;
            currModePatternsLength = patternIdxToConfig.length;
            var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;
            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
              getPossiblePatterns = getPossiblePatternsOptimized;
            } else {
              getPossiblePatterns = getPossiblePatternsSlow;
            }
          }
          push_mode.call(this, initialMode);
          var currConfig;
          var recoveryEnabled = this.config.recoveryEnabled;
          while (offset < orgLength) {
            matchedImage = null;
            var nextCharCode = orgText.charCodeAt(offset);
            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);
            var chosenPatternsLength = chosenPatternIdxToConfig.length;
            for (i = 0; i < chosenPatternsLength; i++) {
              currConfig = chosenPatternIdxToConfig[i];
              var currPattern = currConfig.pattern;
              payload = null;
              var singleCharCode = currConfig.short;
              if (singleCharCode !== false) {
                if (nextCharCode === singleCharCode) {
                  matchedImage = currPattern;
                }
              } else if (currConfig.isCustom === true) {
                match = currPattern.exec(orgText, offset, matchedTokens, groups);
                if (match !== null) {
                  matchedImage = match[0];
                  if (match.payload !== void 0) {
                    payload = match.payload;
                  }
                } else {
                  matchedImage = null;
                }
              } else {
                this.updateLastIndex(currPattern, offset);
                matchedImage = this.match(currPattern, text, offset);
              }
              if (matchedImage !== null) {
                longerAlt = currConfig.longerAlt;
                if (longerAlt !== void 0) {
                  var longerAltLength = longerAlt.length;
                  for (k2 = 0; k2 < longerAltLength; k2++) {
                    var longerAltConfig = patternIdxToConfig[longerAlt[k2]];
                    var longerAltPattern = longerAltConfig.pattern;
                    altPayload = null;
                    if (longerAltConfig.isCustom === true) {
                      match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);
                      if (match !== null) {
                        matchAltImage = match[0];
                        if (match.payload !== void 0) {
                          altPayload = match.payload;
                        }
                      } else {
                        matchAltImage = null;
                      }
                    } else {
                      this.updateLastIndex(longerAltPattern, offset);
                      matchAltImage = this.match(longerAltPattern, text, offset);
                    }
                    if (matchAltImage && matchAltImage.length > matchedImage.length) {
                      matchedImage = matchAltImage;
                      payload = altPayload;
                      currConfig = longerAltConfig;
                      break;
                    }
                  }
                }
                break;
              }
            }
            if (matchedImage !== null) {
              imageLength = matchedImage.length;
              group = currConfig.group;
              if (group !== void 0) {
                tokType = currConfig.tokenTypeIdx;
                newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);
                this.handlePayload(newToken, payload);
                if (group === false) {
                  matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);
                } else {
                  groups[group].push(newToken);
                }
              }
              text = this.chopInput(text, imageLength);
              offset = offset + imageLength;
              column = this.computeNewColumn(column, imageLength);
              if (trackLines === true && currConfig.canLineTerminator === true) {
                var numOfLTsInMatch = 0;
                var foundTerminator = void 0;
                var lastLTEndOffset = void 0;
                lineTerminatorPattern.lastIndex = 0;
                do {
                  foundTerminator = lineTerminatorPattern.test(matchedImage);
                  if (foundTerminator === true) {
                    lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;
                    numOfLTsInMatch++;
                  }
                } while (foundTerminator === true);
                if (numOfLTsInMatch !== 0) {
                  line = line + numOfLTsInMatch;
                  column = imageLength - lastLTEndOffset;
                  this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);
                }
              }
              this.handleModes(currConfig, pop_mode, push_mode, newToken);
            } else {
              var errorStartOffset = offset;
              var errorLine = line;
              var errorColumn = column;
              var foundResyncPoint = recoveryEnabled === false;
              while (foundResyncPoint === false && offset < orgLength) {
                text = this.chopInput(text, 1);
                offset++;
                for (j2 = 0; j2 < currModePatternsLength; j2++) {
                  var currConfig_1 = patternIdxToConfig[j2];
                  var currPattern = currConfig_1.pattern;
                  var singleCharCode = currConfig_1.short;
                  if (singleCharCode !== false) {
                    if (orgText.charCodeAt(offset) === singleCharCode) {
                      foundResyncPoint = true;
                    }
                  } else if (currConfig_1.isCustom === true) {
                    foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;
                  } else {
                    this.updateLastIndex(currPattern, offset);
                    foundResyncPoint = currPattern.exec(text) !== null;
                  }
                  if (foundResyncPoint === true) {
                    break;
                  }
                }
              }
              errLength = offset - errorStartOffset;
              msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);
              errors2.push({
                offset: errorStartOffset,
                line: errorLine,
                column: errorColumn,
                length: errLength,
                message: msg
              });
              if (recoveryEnabled === false) {
                break;
              }
            }
          }
          if (!this.hasCustom) {
            matchedTokens.length = matchedTokensIndex;
          }
          return {
            tokens: matchedTokens,
            groups,
            errors: errors2
          };
        };
        Lexer2.prototype.handleModes = function(config2, pop_mode, push_mode, newToken) {
          if (config2.pop === true) {
            var pushMode = config2.push;
            pop_mode(newToken);
            if (pushMode !== void 0) {
              push_mode.call(this, pushMode);
            }
          } else if (config2.push !== void 0) {
            push_mode.call(this, config2.push);
          }
        };
        Lexer2.prototype.chopInput = function(text, length) {
          return text.substring(length);
        };
        Lexer2.prototype.updateLastIndex = function(regExp, newLastIndex) {
          regExp.lastIndex = newLastIndex;
        };
        Lexer2.prototype.updateTokenEndLineColumnLocation = function(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {
          var lastCharIsLT, fixForEndingInLT;
          if (group !== void 0) {
            lastCharIsLT = lastLTIdx === imageLength - 1;
            fixForEndingInLT = lastCharIsLT ? -1 : 0;
            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {
              newToken.endLine = line + fixForEndingInLT;
              newToken.endColumn = column - 1 + -fixForEndingInLT;
            }
          }
        };
        Lexer2.prototype.computeNewColumn = function(oldColumn, imageLength) {
          return oldColumn + imageLength;
        };
        Lexer2.prototype.createOffsetOnlyToken = function(image, startOffset, tokenTypeIdx, tokenType) {
          return {
            image,
            startOffset,
            tokenTypeIdx,
            tokenType
          };
        };
        Lexer2.prototype.createStartOnlyToken = function(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {
          return {
            image,
            startOffset,
            startLine,
            startColumn,
            tokenTypeIdx,
            tokenType
          };
        };
        Lexer2.prototype.createFullToken = function(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {
          return {
            image,
            startOffset,
            endOffset: startOffset + imageLength - 1,
            startLine,
            endLine: startLine,
            startColumn,
            endColumn: startColumn + imageLength - 1,
            tokenTypeIdx,
            tokenType
          };
        };
        Lexer2.prototype.addTokenUsingPush = function(tokenVector, index, tokenToAdd) {
          tokenVector.push(tokenToAdd);
          return index;
        };
        Lexer2.prototype.addTokenUsingMemberAccess = function(tokenVector, index, tokenToAdd) {
          tokenVector[index] = tokenToAdd;
          index++;
          return index;
        };
        Lexer2.prototype.handlePayloadNoCustom = function(token, payload) {
        };
        Lexer2.prototype.handlePayloadWithCustom = function(token, payload) {
          if (payload !== null) {
            token.payload = payload;
          }
        };
        Lexer2.prototype.matchWithTest = function(pattern, text, offset) {
          var found = pattern.test(text);
          if (found === true) {
            return text.substring(offset, pattern.lastIndex);
          }
          return null;
        };
        Lexer2.prototype.matchWithExec = function(pattern, text) {
          var regExpArray = pattern.exec(text);
          return regExpArray !== null ? regExpArray[0] : null;
        };
        Lexer2.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
        Lexer2.NA = /NOT_APPLICABLE/;
        return Lexer2;
      }()
    );
    exports.Lexer = Lexer;
  })(lexer_public);
  return lexer_public;
}
var hasRequiredTokens_public;
function requireTokens_public() {
  if (hasRequiredTokens_public)
    return tokens_public;
  hasRequiredTokens_public = 1;
  (function(exports) {
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenMatcher = exports.createTokenInstance = exports.EOF = exports.createToken = exports.hasTokenLabel = exports.tokenName = exports.tokenLabel = void 0;
    var isString_12 = __importDefault(requireIsString());
    var has_12 = __importDefault(requireHas());
    var isUndefined_12 = __importDefault(requireIsUndefined());
    var lexer_public_1 = requireLexer_public();
    var tokens_1 = requireTokens();
    function tokenLabel(tokType) {
      if (hasTokenLabel(tokType)) {
        return tokType.LABEL;
      } else {
        return tokType.name;
      }
    }
    exports.tokenLabel = tokenLabel;
    function tokenName(tokType) {
      return tokType.name;
    }
    exports.tokenName = tokenName;
    function hasTokenLabel(obj) {
      return (0, isString_12.default)(obj.LABEL) && obj.LABEL !== "";
    }
    exports.hasTokenLabel = hasTokenLabel;
    var PARENT = "parent";
    var CATEGORIES = "categories";
    var LABEL = "label";
    var GROUP = "group";
    var PUSH_MODE = "push_mode";
    var POP_MODE = "pop_mode";
    var LONGER_ALT = "longer_alt";
    var LINE_BREAKS = "line_breaks";
    var START_CHARS_HINT = "start_chars_hint";
    function createToken(config2) {
      return createTokenInternal(config2);
    }
    exports.createToken = createToken;
    function createTokenInternal(config2) {
      var pattern = config2.pattern;
      var tokenType = {};
      tokenType.name = config2.name;
      if (!(0, isUndefined_12.default)(pattern)) {
        tokenType.PATTERN = pattern;
      }
      if ((0, has_12.default)(config2, PARENT)) {
        throw "The parent property is no longer supported.\nSee: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.";
      }
      if ((0, has_12.default)(config2, CATEGORIES)) {
        tokenType.CATEGORIES = config2[CATEGORIES];
      }
      (0, tokens_1.augmentTokenTypes)([tokenType]);
      if ((0, has_12.default)(config2, LABEL)) {
        tokenType.LABEL = config2[LABEL];
      }
      if ((0, has_12.default)(config2, GROUP)) {
        tokenType.GROUP = config2[GROUP];
      }
      if ((0, has_12.default)(config2, POP_MODE)) {
        tokenType.POP_MODE = config2[POP_MODE];
      }
      if ((0, has_12.default)(config2, PUSH_MODE)) {
        tokenType.PUSH_MODE = config2[PUSH_MODE];
      }
      if ((0, has_12.default)(config2, LONGER_ALT)) {
        tokenType.LONGER_ALT = config2[LONGER_ALT];
      }
      if ((0, has_12.default)(config2, LINE_BREAKS)) {
        tokenType.LINE_BREAKS = config2[LINE_BREAKS];
      }
      if ((0, has_12.default)(config2, START_CHARS_HINT)) {
        tokenType.START_CHARS_HINT = config2[START_CHARS_HINT];
      }
      return tokenType;
    }
    exports.EOF = createToken({ name: "EOF", pattern: lexer_public_1.Lexer.NA });
    (0, tokens_1.augmentTokenTypes)([exports.EOF]);
    function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {
      return {
        image,
        startOffset,
        endOffset,
        startLine,
        endLine,
        startColumn,
        endColumn,
        tokenTypeIdx: tokType.tokenTypeIdx,
        tokenType: tokType
      };
    }
    exports.createTokenInstance = createTokenInstance;
    function tokenMatcher(token, tokType) {
      return (0, tokens_1.tokenStructuredMatcher)(token, tokType);
    }
    exports.tokenMatcher = tokenMatcher;
  })(tokens_public);
  return tokens_public;
}
var errors_public = {};
var hasRequiredErrors_public;
function requireErrors_public() {
  if (hasRequiredErrors_public)
    return errors_public;
  hasRequiredErrors_public = 1;
  (function(exports) {
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultGrammarValidatorErrorProvider = exports.defaultGrammarResolverErrorProvider = exports.defaultParserErrorProvider = void 0;
    var tokens_public_1 = requireTokens_public();
    var first_1 = __importDefault(requireFirst());
    var map_12 = __importDefault(requireMap());
    var reduce_12 = __importDefault(requireReduce());
    var gast_1 = requireApi$2();
    var gast_2 = requireApi$2();
    exports.defaultParserErrorProvider = {
      buildMismatchTokenMessage: function(_a2) {
        var expected = _a2.expected, actual = _a2.actual;
        _a2.previous;
        _a2.ruleName;
        var hasLabel = (0, tokens_public_1.hasTokenLabel)(expected);
        var expectedMsg = hasLabel ? "--> ".concat((0, tokens_public_1.tokenLabel)(expected), " <--") : "token of type --> ".concat(expected.name, " <--");
        var msg = "Expecting ".concat(expectedMsg, " but found --> '").concat(actual.image, "' <--");
        return msg;
      },
      buildNotAllInputParsedMessage: function(_a2) {
        var firstRedundant = _a2.firstRedundant;
        _a2.ruleName;
        return "Redundant input, expecting EOF but found: " + firstRedundant.image;
      },
      buildNoViableAltMessage: function(_a2) {
        var expectedPathsPerAlt = _a2.expectedPathsPerAlt, actual = _a2.actual;
        _a2.previous;
        var customUserDescription = _a2.customUserDescription;
        _a2.ruleName;
        var errPrefix = "Expecting: ";
        var actualText = (0, first_1.default)(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
          return errPrefix + customUserDescription + errSuffix;
        } else {
          var allLookAheadPaths = (0, reduce_12.default)(expectedPathsPerAlt, function(result, currAltPaths) {
            return result.concat(currAltPaths);
          }, []);
          var nextValidTokenSequences = (0, map_12.default)(allLookAheadPaths, function(currPath) {
            return "[".concat((0, map_12.default)(currPath, function(currTokenType) {
              return (0, tokens_public_1.tokenLabel)(currTokenType);
            }).join(", "), "]");
          });
          var nextValidSequenceItems = (0, map_12.default)(nextValidTokenSequences, function(itemMsg, idx) {
            return "  ".concat(idx + 1, ". ").concat(itemMsg);
          });
          var calculatedDescription = "one of these possible Token sequences:\n".concat(nextValidSequenceItems.join("\n"));
          return errPrefix + calculatedDescription + errSuffix;
        }
      },
      buildEarlyExitMessage: function(_a2) {
        var expectedIterationPaths = _a2.expectedIterationPaths, actual = _a2.actual, customUserDescription = _a2.customUserDescription;
        _a2.ruleName;
        var errPrefix = "Expecting: ";
        var actualText = (0, first_1.default)(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
          return errPrefix + customUserDescription + errSuffix;
        } else {
          var nextValidTokenSequences = (0, map_12.default)(expectedIterationPaths, function(currPath) {
            return "[".concat((0, map_12.default)(currPath, function(currTokenType) {
              return (0, tokens_public_1.tokenLabel)(currTokenType);
            }).join(","), "]");
          });
          var calculatedDescription = "expecting at least one iteration which starts with one of these possible Token sequences::\n  " + "<".concat(nextValidTokenSequences.join(" ,"), ">");
          return errPrefix + calculatedDescription + errSuffix;
        }
      }
    };
    Object.freeze(exports.defaultParserErrorProvider);
    exports.defaultGrammarResolverErrorProvider = {
      buildRuleNotFoundError: function(topLevelRule, undefinedRule) {
        var msg = "Invalid grammar, reference to a rule which is not defined: ->" + undefinedRule.nonTerminalName + "<-\ninside top level rule: ->" + topLevelRule.name + "<-";
        return msg;
      }
    };
    exports.defaultGrammarValidatorErrorProvider = {
      buildDuplicateFoundError: function(topLevelRule, duplicateProds) {
        function getExtraProductionArgument(prod) {
          if (prod instanceof gast_1.Terminal) {
            return prod.terminalType.name;
          } else if (prod instanceof gast_1.NonTerminal) {
            return prod.nonTerminalName;
          } else {
            return "";
          }
        }
        var topLevelName = topLevelRule.name;
        var duplicateProd = (0, first_1.default)(duplicateProds);
        var index = duplicateProd.idx;
        var dslName = (0, gast_2.getProductionDslName)(duplicateProd);
        var extraArgument = getExtraProductionArgument(duplicateProd);
        var hasExplicitIndex = index > 0;
        var msg = "->".concat(dslName).concat(hasExplicitIndex ? index : "", "<- ").concat(extraArgument ? "with argument: ->".concat(extraArgument, "<-") : "", "\n                  appears more than once (").concat(duplicateProds.length, " times) in the top level rule: ->").concat(topLevelName, "<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ");
        msg = msg.replace(/[ \t]+/g, " ");
        msg = msg.replace(/\s\s+/g, "\n");
        return msg;
      },
      buildNamespaceConflictError: function(rule) {
        var errMsg = "Namespace conflict found in grammar.\n" + "The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <".concat(rule.name, ">.\n") + "To resolve this make sure each Terminal and Non-Terminal names are unique\nThis is easy to accomplish by using the convention that Terminal names start with an uppercase letter\nand Non-Terminal names start with a lower case letter.";
        return errMsg;
      },
      buildAlternationPrefixAmbiguityError: function(options) {
        var pathMsg = (0, map_12.default)(options.prefixPath, function(currTok) {
          return (0, tokens_public_1.tokenLabel)(currTok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var errMsg = "Ambiguous alternatives: <".concat(options.ambiguityIndices.join(" ,"), "> due to common lookahead prefix\n") + "in <OR".concat(occurrence, "> inside <").concat(options.topLevelRule.name, "> Rule,\n") + "<".concat(pathMsg, "> may appears as a prefix path in all these alternatives.\n") + "See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\nFor Further details.";
        return errMsg;
      },
      buildAlternationAmbiguityError: function(options) {
        var pathMsg = (0, map_12.default)(options.prefixPath, function(currtok) {
          return (0, tokens_public_1.tokenLabel)(currtok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var currMessage = "Ambiguous Alternatives Detected: <".concat(options.ambiguityIndices.join(" ,"), "> in <OR").concat(occurrence, ">") + " inside <".concat(options.topLevelRule.name, "> Rule,\n") + "<".concat(pathMsg, "> may appears as a prefix path in all these alternatives.\n");
        currMessage = currMessage + "See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\nFor Further details.";
        return currMessage;
      },
      buildEmptyRepetitionError: function(options) {
        var dslName = (0, gast_2.getProductionDslName)(options.repetition);
        if (options.repetition.idx !== 0) {
          dslName += options.repetition.idx;
        }
        var errMsg = "The repetition <".concat(dslName, "> within Rule <").concat(options.topLevelRule.name, "> can never consume any tokens.\n") + "This could lead to an infinite loop.";
        return errMsg;
      },
      // TODO: remove - `errors_public` from nyc.config.js exclude
      //       once this method is fully removed from this file
      buildTokenNameError: function(options) {
        return "deprecated";
      },
      buildEmptyAlternationError: function(options) {
        var errMsg = "Ambiguous empty alternative: <".concat(options.emptyChoiceIdx + 1, ">") + " in <OR".concat(options.alternation.idx, "> inside <").concat(options.topLevelRule.name, "> Rule.\n") + "Only the last alternative may be an empty alternative.";
        return errMsg;
      },
      buildTooManyAlternativesError: function(options) {
        var errMsg = "An Alternation cannot have more than 256 alternatives:\n" + "<OR".concat(options.alternation.idx, "> inside <").concat(options.topLevelRule.name, "> Rule.\n has ").concat(options.alternation.definition.length + 1, " alternatives.");
        return errMsg;
      },
      buildLeftRecursionError: function(options) {
        var ruleName = options.topLevelRule.name;
        var pathNames = (0, map_12.default)(options.leftRecursionPath, function(currRule) {
          return currRule.name;
        });
        var leftRecursivePath = "".concat(ruleName, " --> ").concat(pathNames.concat([ruleName]).join(" --> "));
        var errMsg = "Left Recursion found in grammar.\n" + "rule: <".concat(ruleName, "> can be invoked from itself (directly or indirectly)\n") + "without consuming any Tokens. The grammar path that causes this is: \n ".concat(leftRecursivePath, "\n") + " To fix this refactor your grammar to remove the left recursion.\nsee: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.";
        return errMsg;
      },
      // TODO: remove - `errors_public` from nyc.config.js exclude
      //       once this method is fully removed from this file
      buildInvalidRuleNameError: function(options) {
        return "deprecated";
      },
      buildDuplicateRuleNameError: function(options) {
        var ruleName;
        if (options.topLevelRule instanceof gast_1.Rule) {
          ruleName = options.topLevelRule.name;
        } else {
          ruleName = options.topLevelRule;
        }
        var errMsg = "Duplicate definition, rule: ->".concat(ruleName, "<- is already defined in the grammar: ->").concat(options.grammarName, "<-");
        return errMsg;
      }
    };
  })(errors_public);
  return errors_public;
}
var gast_resolver_public = {};
var resolver = {};
var hasRequiredResolver;
function requireResolver() {
  if (hasRequiredResolver)
    return resolver;
  hasRequiredResolver = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(resolver, "__esModule", { value: true });
  resolver.GastRefResolverVisitor = resolver.resolveGrammar = void 0;
  var parser_1 = requireParser$1();
  var forEach_12 = __importDefault(requireForEach());
  var values_12 = __importDefault(requireValues());
  var gast_1 = requireApi$2();
  function resolveGrammar(topLevels, errMsgProvider) {
    var refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);
    refResolver.resolveRefs();
    return refResolver.errors;
  }
  resolver.resolveGrammar = resolveGrammar;
  var GastRefResolverVisitor = (
    /** @class */
    function(_super) {
      __extends2(GastRefResolverVisitor2, _super);
      function GastRefResolverVisitor2(nameToTopRule, errMsgProvider) {
        var _this = _super.call(this) || this;
        _this.nameToTopRule = nameToTopRule;
        _this.errMsgProvider = errMsgProvider;
        _this.errors = [];
        return _this;
      }
      GastRefResolverVisitor2.prototype.resolveRefs = function() {
        var _this = this;
        (0, forEach_12.default)((0, values_12.default)(this.nameToTopRule), function(prod) {
          _this.currTopLevel = prod;
          prod.accept(_this);
        });
      };
      GastRefResolverVisitor2.prototype.visitNonTerminal = function(node) {
        var ref = this.nameToTopRule[node.nonTerminalName];
        if (!ref) {
          var msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);
          this.errors.push({
            message: msg,
            type: parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,
            ruleName: this.currTopLevel.name,
            unresolvedRefName: node.nonTerminalName
          });
        } else {
          node.referencedRule = ref;
        }
      };
      return GastRefResolverVisitor2;
    }(gast_1.GAstVisitor)
  );
  resolver.GastRefResolverVisitor = GastRefResolverVisitor;
  return resolver;
}
var checks = {};
var _arrayAggregator;
var hasRequired_arrayAggregator;
function require_arrayAggregator() {
  if (hasRequired_arrayAggregator)
    return _arrayAggregator;
  hasRequired_arrayAggregator = 1;
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }
  _arrayAggregator = arrayAggregator;
  return _arrayAggregator;
}
var _baseAggregator;
var hasRequired_baseAggregator;
function require_baseAggregator() {
  if (hasRequired_baseAggregator)
    return _baseAggregator;
  hasRequired_baseAggregator = 1;
  var baseEach = require_baseEach();
  function baseAggregator(collection, setter, iteratee, accumulator) {
    baseEach(collection, function(value, key, collection2) {
      setter(accumulator, value, iteratee(value), collection2);
    });
    return accumulator;
  }
  _baseAggregator = baseAggregator;
  return _baseAggregator;
}
var _createAggregator;
var hasRequired_createAggregator;
function require_createAggregator() {
  if (hasRequired_createAggregator)
    return _createAggregator;
  hasRequired_createAggregator = 1;
  var arrayAggregator = require_arrayAggregator(), baseAggregator = require_baseAggregator(), baseIteratee = require_baseIteratee(), isArray = requireIsArray();
  function createAggregator(setter, initializer) {
    return function(collection, iteratee) {
      var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
      return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
    };
  }
  _createAggregator = createAggregator;
  return _createAggregator;
}
var groupBy_1;
var hasRequiredGroupBy;
function requireGroupBy() {
  if (hasRequiredGroupBy)
    return groupBy_1;
  hasRequiredGroupBy = 1;
  var baseAssignValue = require_baseAssignValue(), createAggregator = require_createAggregator();
  var objectProto = Object.prototype;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var groupBy = createAggregator(function(result, value, key) {
    if (hasOwnProperty2.call(result, key)) {
      result[key].push(value);
    } else {
      baseAssignValue(result, key, [value]);
    }
  });
  groupBy_1 = groupBy;
  return groupBy_1;
}
var flatMap_1;
var hasRequiredFlatMap;
function requireFlatMap() {
  if (hasRequiredFlatMap)
    return flatMap_1;
  hasRequiredFlatMap = 1;
  var baseFlatten = require_baseFlatten(), map2 = requireMap();
  function flatMap(collection, iteratee) {
    return baseFlatten(map2(collection, iteratee), 1);
  }
  flatMap_1 = flatMap;
  return flatMap_1;
}
var lookahead = {};
var interpreter = {};
var dropRight_1;
var hasRequiredDropRight;
function requireDropRight() {
  if (hasRequiredDropRight)
    return dropRight_1;
  hasRequiredDropRight = 1;
  var baseSlice = require_baseSlice(), toInteger = requireToInteger();
  function dropRight(array, n2, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    n2 = guard || n2 === void 0 ? 1 : toInteger(n2);
    n2 = length - n2;
    return baseSlice(array, 0, n2 < 0 ? 0 : n2);
  }
  dropRight_1 = dropRight;
  return dropRight_1;
}
var hasRequiredInterpreter;
function requireInterpreter() {
  if (hasRequiredInterpreter)
    return interpreter;
  hasRequiredInterpreter = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(interpreter, "__esModule", { value: true });
  interpreter.nextPossibleTokensAfter = interpreter.possiblePathsFrom = interpreter.NextTerminalAfterAtLeastOneSepWalker = interpreter.NextTerminalAfterAtLeastOneWalker = interpreter.NextTerminalAfterManySepWalker = interpreter.NextTerminalAfterManyWalker = interpreter.AbstractNextTerminalAfterProductionWalker = interpreter.NextAfterTokenWalker = interpreter.AbstractNextPossibleTokensWalker = void 0;
  var rest_1 = requireRest();
  var first_1 = __importDefault(requireFirst());
  var isEmpty_12 = __importDefault(requireIsEmpty());
  var dropRight_12 = __importDefault(requireDropRight());
  var drop_12 = __importDefault(requireDrop());
  var last_12 = __importDefault(requireLast());
  var forEach_12 = __importDefault(requireForEach());
  var clone_12 = __importDefault(requireClone());
  var first_2 = requireFirst$1();
  var gast_1 = requireApi$2();
  var AbstractNextPossibleTokensWalker = (
    /** @class */
    function(_super) {
      __extends2(AbstractNextPossibleTokensWalker2, _super);
      function AbstractNextPossibleTokensWalker2(topProd, path) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.path = path;
        _this.possibleTokTypes = [];
        _this.nextProductionName = "";
        _this.nextProductionOccurrence = 0;
        _this.found = false;
        _this.isAtEndOfPath = false;
        return _this;
      }
      AbstractNextPossibleTokensWalker2.prototype.startWalking = function() {
        this.found = false;
        if (this.path.ruleStack[0] !== this.topProd.name) {
          throw Error("The path does not start with the walker's top Rule!");
        }
        this.ruleStack = (0, clone_12.default)(this.path.ruleStack).reverse();
        this.occurrenceStack = (0, clone_12.default)(this.path.occurrenceStack).reverse();
        this.ruleStack.pop();
        this.occurrenceStack.pop();
        this.updateExpectedNext();
        this.walk(this.topProd);
        return this.possibleTokTypes;
      };
      AbstractNextPossibleTokensWalker2.prototype.walk = function(prod, prevRest) {
        if (prevRest === void 0) {
          prevRest = [];
        }
        if (!this.found) {
          _super.prototype.walk.call(this, prod, prevRest);
        }
      };
      AbstractNextPossibleTokensWalker2.prototype.walkProdRef = function(refProd, currRest, prevRest) {
        if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {
          var fullRest = currRest.concat(prevRest);
          this.updateExpectedNext();
          this.walk(refProd.referencedRule, fullRest);
        }
      };
      AbstractNextPossibleTokensWalker2.prototype.updateExpectedNext = function() {
        if ((0, isEmpty_12.default)(this.ruleStack)) {
          this.nextProductionName = "";
          this.nextProductionOccurrence = 0;
          this.isAtEndOfPath = true;
        } else {
          this.nextProductionName = this.ruleStack.pop();
          this.nextProductionOccurrence = this.occurrenceStack.pop();
        }
      };
      return AbstractNextPossibleTokensWalker2;
    }(rest_1.RestWalker)
  );
  interpreter.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;
  var NextAfterTokenWalker = (
    /** @class */
    function(_super) {
      __extends2(NextAfterTokenWalker2, _super);
      function NextAfterTokenWalker2(topProd, path) {
        var _this = _super.call(this, topProd, path) || this;
        _this.path = path;
        _this.nextTerminalName = "";
        _this.nextTerminalOccurrence = 0;
        _this.nextTerminalName = _this.path.lastTok.name;
        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;
        return _this;
      }
      NextAfterTokenWalker2.prototype.walkTerminal = function(terminal, currRest, prevRest) {
        if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {
          var fullRest = currRest.concat(prevRest);
          var restProd = new gast_1.Alternative({ definition: fullRest });
          this.possibleTokTypes = (0, first_2.first)(restProd);
          this.found = true;
        }
      };
      return NextAfterTokenWalker2;
    }(AbstractNextPossibleTokensWalker)
  );
  interpreter.NextAfterTokenWalker = NextAfterTokenWalker;
  var AbstractNextTerminalAfterProductionWalker = (
    /** @class */
    function(_super) {
      __extends2(AbstractNextTerminalAfterProductionWalker2, _super);
      function AbstractNextTerminalAfterProductionWalker2(topRule, occurrence) {
        var _this = _super.call(this) || this;
        _this.topRule = topRule;
        _this.occurrence = occurrence;
        _this.result = {
          token: void 0,
          occurrence: void 0,
          isEndOfRule: void 0
        };
        return _this;
      }
      AbstractNextTerminalAfterProductionWalker2.prototype.startWalking = function() {
        this.walk(this.topRule);
        return this.result;
      };
      return AbstractNextTerminalAfterProductionWalker2;
    }(rest_1.RestWalker)
  );
  interpreter.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;
  var NextTerminalAfterManyWalker = (
    /** @class */
    function(_super) {
      __extends2(NextTerminalAfterManyWalker2, _super);
      function NextTerminalAfterManyWalker2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NextTerminalAfterManyWalker2.prototype.walkMany = function(manyProd, currRest, prevRest) {
        if (manyProd.idx === this.occurrence) {
          var firstAfterMany = (0, first_1.default)(currRest.concat(prevRest));
          this.result.isEndOfRule = firstAfterMany === void 0;
          if (firstAfterMany instanceof gast_1.Terminal) {
            this.result.token = firstAfterMany.terminalType;
            this.result.occurrence = firstAfterMany.idx;
          }
        } else {
          _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);
        }
      };
      return NextTerminalAfterManyWalker2;
    }(AbstractNextTerminalAfterProductionWalker)
  );
  interpreter.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;
  var NextTerminalAfterManySepWalker = (
    /** @class */
    function(_super) {
      __extends2(NextTerminalAfterManySepWalker2, _super);
      function NextTerminalAfterManySepWalker2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NextTerminalAfterManySepWalker2.prototype.walkManySep = function(manySepProd, currRest, prevRest) {
        if (manySepProd.idx === this.occurrence) {
          var firstAfterManySep = (0, first_1.default)(currRest.concat(prevRest));
          this.result.isEndOfRule = firstAfterManySep === void 0;
          if (firstAfterManySep instanceof gast_1.Terminal) {
            this.result.token = firstAfterManySep.terminalType;
            this.result.occurrence = firstAfterManySep.idx;
          }
        } else {
          _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);
        }
      };
      return NextTerminalAfterManySepWalker2;
    }(AbstractNextTerminalAfterProductionWalker)
  );
  interpreter.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;
  var NextTerminalAfterAtLeastOneWalker = (
    /** @class */
    function(_super) {
      __extends2(NextTerminalAfterAtLeastOneWalker2, _super);
      function NextTerminalAfterAtLeastOneWalker2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NextTerminalAfterAtLeastOneWalker2.prototype.walkAtLeastOne = function(atLeastOneProd, currRest, prevRest) {
        if (atLeastOneProd.idx === this.occurrence) {
          var firstAfterAtLeastOne = (0, first_1.default)(currRest.concat(prevRest));
          this.result.isEndOfRule = firstAfterAtLeastOne === void 0;
          if (firstAfterAtLeastOne instanceof gast_1.Terminal) {
            this.result.token = firstAfterAtLeastOne.terminalType;
            this.result.occurrence = firstAfterAtLeastOne.idx;
          }
        } else {
          _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);
        }
      };
      return NextTerminalAfterAtLeastOneWalker2;
    }(AbstractNextTerminalAfterProductionWalker)
  );
  interpreter.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker;
  var NextTerminalAfterAtLeastOneSepWalker = (
    /** @class */
    function(_super) {
      __extends2(NextTerminalAfterAtLeastOneSepWalker2, _super);
      function NextTerminalAfterAtLeastOneSepWalker2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NextTerminalAfterAtLeastOneSepWalker2.prototype.walkAtLeastOneSep = function(atleastOneSepProd, currRest, prevRest) {
        if (atleastOneSepProd.idx === this.occurrence) {
          var firstAfterfirstAfterAtLeastOneSep = (0, first_1.default)(currRest.concat(prevRest));
          this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === void 0;
          if (firstAfterfirstAfterAtLeastOneSep instanceof gast_1.Terminal) {
            this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;
            this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;
          }
        } else {
          _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);
        }
      };
      return NextTerminalAfterAtLeastOneSepWalker2;
    }(AbstractNextTerminalAfterProductionWalker)
  );
  interpreter.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;
  function possiblePathsFrom(targetDef, maxLength, currPath) {
    if (currPath === void 0) {
      currPath = [];
    }
    currPath = (0, clone_12.default)(currPath);
    var result = [];
    var i = 0;
    function remainingPathWith(nextDef) {
      return nextDef.concat((0, drop_12.default)(targetDef, i + 1));
    }
    function getAlternativesForProd(definition) {
      var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);
      return result.concat(alternatives);
    }
    while (currPath.length < maxLength && i < targetDef.length) {
      var prod = targetDef[i];
      if (prod instanceof gast_1.Alternative) {
        return getAlternativesForProd(prod.definition);
      } else if (prod instanceof gast_1.NonTerminal) {
        return getAlternativesForProd(prod.definition);
      } else if (prod instanceof gast_1.Option) {
        result = getAlternativesForProd(prod.definition);
      } else if (prod instanceof gast_1.RepetitionMandatory) {
        var newDef = prod.definition.concat([
          new gast_1.Repetition({
            definition: prod.definition
          })
        ]);
        return getAlternativesForProd(newDef);
      } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {
        var newDef = [
          new gast_1.Alternative({ definition: prod.definition }),
          new gast_1.Repetition({
            definition: [new gast_1.Terminal({ terminalType: prod.separator })].concat(prod.definition)
          })
        ];
        return getAlternativesForProd(newDef);
      } else if (prod instanceof gast_1.RepetitionWithSeparator) {
        var newDef = prod.definition.concat([
          new gast_1.Repetition({
            definition: [new gast_1.Terminal({ terminalType: prod.separator })].concat(prod.definition)
          })
        ]);
        result = getAlternativesForProd(newDef);
      } else if (prod instanceof gast_1.Repetition) {
        var newDef = prod.definition.concat([
          new gast_1.Repetition({
            definition: prod.definition
          })
        ]);
        result = getAlternativesForProd(newDef);
      } else if (prod instanceof gast_1.Alternation) {
        (0, forEach_12.default)(prod.definition, function(currAlt) {
          if ((0, isEmpty_12.default)(currAlt.definition) === false) {
            result = getAlternativesForProd(currAlt.definition);
          }
        });
        return result;
      } else if (prod instanceof gast_1.Terminal) {
        currPath.push(prod.terminalType);
      } else {
        throw Error("non exhaustive match");
      }
      i++;
    }
    result.push({
      partialPath: currPath,
      suffixDef: (0, drop_12.default)(targetDef, i)
    });
    return result;
  }
  interpreter.possiblePathsFrom = possiblePathsFrom;
  function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {
    var EXIT_NON_TERMINAL = "EXIT_NONE_TERMINAL";
    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];
    var EXIT_ALTERNATIVE = "EXIT_ALTERNATIVE";
    var foundCompletePath = false;
    var tokenVectorLength = tokenVector.length;
    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;
    var result = [];
    var possiblePaths = [];
    possiblePaths.push({
      idx: -1,
      def: initialDef,
      ruleStack: [],
      occurrenceStack: []
    });
    while (!(0, isEmpty_12.default)(possiblePaths)) {
      var currPath = possiblePaths.pop();
      if (currPath === EXIT_ALTERNATIVE) {
        if (foundCompletePath && (0, last_12.default)(possiblePaths).idx <= minimalAlternativesIndex) {
          possiblePaths.pop();
        }
        continue;
      }
      var currDef = currPath.def;
      var currIdx = currPath.idx;
      var currRuleStack = currPath.ruleStack;
      var currOccurrenceStack = currPath.occurrenceStack;
      if ((0, isEmpty_12.default)(currDef)) {
        continue;
      }
      var prod = currDef[0];
      if (prod === EXIT_NON_TERMINAL) {
        var nextPath = {
          idx: currIdx,
          def: (0, drop_12.default)(currDef),
          ruleStack: (0, dropRight_12.default)(currRuleStack),
          occurrenceStack: (0, dropRight_12.default)(currOccurrenceStack)
        };
        possiblePaths.push(nextPath);
      } else if (prod instanceof gast_1.Terminal) {
        if (currIdx < tokenVectorLength - 1) {
          var nextIdx = currIdx + 1;
          var actualToken = tokenVector[nextIdx];
          if (tokMatcher(actualToken, prod.terminalType)) {
            var nextPath = {
              idx: nextIdx,
              def: (0, drop_12.default)(currDef),
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
          }
        } else if (currIdx === tokenVectorLength - 1) {
          result.push({
            nextTokenType: prod.terminalType,
            nextTokenOccurrence: prod.idx,
            ruleStack: currRuleStack,
            occurrenceStack: currOccurrenceStack
          });
          foundCompletePath = true;
        } else {
          throw Error("non exhaustive match");
        }
      } else if (prod instanceof gast_1.NonTerminal) {
        var newRuleStack = (0, clone_12.default)(currRuleStack);
        newRuleStack.push(prod.nonTerminalName);
        var newOccurrenceStack = (0, clone_12.default)(currOccurrenceStack);
        newOccurrenceStack.push(prod.idx);
        var nextPath = {
          idx: currIdx,
          def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0, drop_12.default)(currDef)),
          ruleStack: newRuleStack,
          occurrenceStack: newOccurrenceStack
        };
        possiblePaths.push(nextPath);
      } else if (prod instanceof gast_1.Option) {
        var nextPathWithout = {
          idx: currIdx,
          def: (0, drop_12.default)(currDef),
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPathWithout);
        possiblePaths.push(EXIT_ALTERNATIVE);
        var nextPathWith = {
          idx: currIdx,
          def: prod.definition.concat((0, drop_12.default)(currDef)),
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPathWith);
      } else if (prod instanceof gast_1.RepetitionMandatory) {
        var secondIteration = new gast_1.Repetition({
          definition: prod.definition,
          idx: prod.idx
        });
        var nextDef = prod.definition.concat([secondIteration], (0, drop_12.default)(currDef));
        var nextPath = {
          idx: currIdx,
          def: nextDef,
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPath);
      } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {
        var separatorGast = new gast_1.Terminal({
          terminalType: prod.separator
        });
        var secondIteration = new gast_1.Repetition({
          definition: [separatorGast].concat(prod.definition),
          idx: prod.idx
        });
        var nextDef = prod.definition.concat([secondIteration], (0, drop_12.default)(currDef));
        var nextPath = {
          idx: currIdx,
          def: nextDef,
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPath);
      } else if (prod instanceof gast_1.RepetitionWithSeparator) {
        var nextPathWithout = {
          idx: currIdx,
          def: (0, drop_12.default)(currDef),
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPathWithout);
        possiblePaths.push(EXIT_ALTERNATIVE);
        var separatorGast = new gast_1.Terminal({
          terminalType: prod.separator
        });
        var nthRepetition = new gast_1.Repetition({
          definition: [separatorGast].concat(prod.definition),
          idx: prod.idx
        });
        var nextDef = prod.definition.concat([nthRepetition], (0, drop_12.default)(currDef));
        var nextPathWith = {
          idx: currIdx,
          def: nextDef,
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPathWith);
      } else if (prod instanceof gast_1.Repetition) {
        var nextPathWithout = {
          idx: currIdx,
          def: (0, drop_12.default)(currDef),
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPathWithout);
        possiblePaths.push(EXIT_ALTERNATIVE);
        var nthRepetition = new gast_1.Repetition({
          definition: prod.definition,
          idx: prod.idx
        });
        var nextDef = prod.definition.concat([nthRepetition], (0, drop_12.default)(currDef));
        var nextPathWith = {
          idx: currIdx,
          def: nextDef,
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        };
        possiblePaths.push(nextPathWith);
      } else if (prod instanceof gast_1.Alternation) {
        for (var i = prod.definition.length - 1; i >= 0; i--) {
          var currAlt = prod.definition[i];
          var currAltPath = {
            idx: currIdx,
            def: currAlt.definition.concat((0, drop_12.default)(currDef)),
            ruleStack: currRuleStack,
            occurrenceStack: currOccurrenceStack
          };
          possiblePaths.push(currAltPath);
          possiblePaths.push(EXIT_ALTERNATIVE);
        }
      } else if (prod instanceof gast_1.Alternative) {
        possiblePaths.push({
          idx: currIdx,
          def: prod.definition.concat((0, drop_12.default)(currDef)),
          ruleStack: currRuleStack,
          occurrenceStack: currOccurrenceStack
        });
      } else if (prod instanceof gast_1.Rule) {
        possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));
      } else {
        throw Error("non exhaustive match");
      }
    }
    return result;
  }
  interpreter.nextPossibleTokensAfter = nextPossibleTokensAfter;
  function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {
    var newRuleStack = (0, clone_12.default)(currRuleStack);
    newRuleStack.push(topRule.name);
    var newCurrOccurrenceStack = (0, clone_12.default)(currOccurrenceStack);
    newCurrOccurrenceStack.push(1);
    return {
      idx: currIdx,
      def: topRule.definition,
      ruleStack: newRuleStack,
      occurrenceStack: newCurrOccurrenceStack
    };
  }
  return interpreter;
}
var hasRequiredLookahead;
function requireLookahead() {
  if (hasRequiredLookahead)
    return lookahead;
  hasRequiredLookahead = 1;
  (function(exports) {
    var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
      var extendStatics2 = function(d2, b2) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics2(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics2(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getLookaheadPaths = exports.getProdType = exports.PROD_TYPE = void 0;
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var flatten_12 = __importDefault(requireFlatten());
    var every_12 = __importDefault(requireEvery());
    var map_12 = __importDefault(requireMap());
    var forEach_12 = __importDefault(requireForEach());
    var has_12 = __importDefault(requireHas());
    var reduce_12 = __importDefault(requireReduce());
    var interpreter_1 = requireInterpreter();
    var rest_1 = requireRest();
    var tokens_1 = requireTokens();
    var gast_1 = requireApi$2();
    var gast_2 = requireApi$2();
    var PROD_TYPE;
    (function(PROD_TYPE2) {
      PROD_TYPE2[PROD_TYPE2["OPTION"] = 0] = "OPTION";
      PROD_TYPE2[PROD_TYPE2["REPETITION"] = 1] = "REPETITION";
      PROD_TYPE2[PROD_TYPE2["REPETITION_MANDATORY"] = 2] = "REPETITION_MANDATORY";
      PROD_TYPE2[PROD_TYPE2["REPETITION_MANDATORY_WITH_SEPARATOR"] = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR";
      PROD_TYPE2[PROD_TYPE2["REPETITION_WITH_SEPARATOR"] = 4] = "REPETITION_WITH_SEPARATOR";
      PROD_TYPE2[PROD_TYPE2["ALTERNATION"] = 5] = "ALTERNATION";
    })(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));
    function getProdType(prod) {
      if (prod instanceof gast_1.Option || prod === "Option") {
        return PROD_TYPE.OPTION;
      } else if (prod instanceof gast_1.Repetition || prod === "Repetition") {
        return PROD_TYPE.REPETITION;
      } else if (prod instanceof gast_1.RepetitionMandatory || prod === "RepetitionMandatory") {
        return PROD_TYPE.REPETITION_MANDATORY;
      } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator || prod === "RepetitionMandatoryWithSeparator") {
        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;
      } else if (prod instanceof gast_1.RepetitionWithSeparator || prod === "RepetitionWithSeparator") {
        return PROD_TYPE.REPETITION_WITH_SEPARATOR;
      } else if (prod instanceof gast_1.Alternation || prod === "Alternation") {
        return PROD_TYPE.ALTERNATION;
      } else {
        throw Error("non exhaustive match");
      }
    }
    exports.getProdType = getProdType;
    function getLookaheadPaths(options) {
      var occurrence = options.occurrence, rule = options.rule, prodType = options.prodType, maxLookahead = options.maxLookahead;
      var type = getProdType(prodType);
      if (type === PROD_TYPE.ALTERNATION) {
        return getLookaheadPathsForOr(occurrence, rule, maxLookahead);
      } else {
        return getLookaheadPathsForOptionalProd(occurrence, rule, type, maxLookahead);
      }
    }
    exports.getLookaheadPaths = getLookaheadPaths;
    function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {
      var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);
      var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;
      return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);
    }
    exports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;
    function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k2, dynamicTokensEnabled, prodType, lookaheadBuilder) {
      var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k2);
      var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;
      return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);
    }
    exports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;
    function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
      var numOfAlts = alts.length;
      var areAllOneTokenLookahead = (0, every_12.default)(alts, function(currAlt) {
        return (0, every_12.default)(currAlt, function(currPath) {
          return currPath.length === 1;
        });
      });
      if (hasPredicates) {
        return function(orAlts) {
          var predicates = (0, map_12.default)(orAlts, function(currAlt2) {
            return currAlt2.GATE;
          });
          for (var t2 = 0; t2 < numOfAlts; t2++) {
            var currAlt = alts[t2];
            var currNumOfPaths = currAlt.length;
            var currPredicate = predicates[t2];
            if (currPredicate !== void 0 && currPredicate.call(this) === false) {
              continue;
            }
            nextPath:
              for (var j2 = 0; j2 < currNumOfPaths; j2++) {
                var currPath = currAlt[j2];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                  var nextToken = this.LA(i + 1);
                  if (tokenMatcher(nextToken, currPath[i]) === false) {
                    continue nextPath;
                  }
                }
                return t2;
              }
          }
          return void 0;
        };
      } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        var singleTokenAlts = (0, map_12.default)(alts, function(currAlt) {
          return (0, flatten_12.default)(currAlt);
        });
        var choiceToAlt_1 = (0, reduce_12.default)(singleTokenAlts, function(result, currAlt, idx) {
          (0, forEach_12.default)(currAlt, function(currTokType) {
            if (!(0, has_12.default)(result, currTokType.tokenTypeIdx)) {
              result[currTokType.tokenTypeIdx] = idx;
            }
            (0, forEach_12.default)(currTokType.categoryMatches, function(currExtendingType) {
              if (!(0, has_12.default)(result, currExtendingType)) {
                result[currExtendingType] = idx;
              }
            });
          });
          return result;
        }, {});
        return function() {
          var nextToken = this.LA(1);
          return choiceToAlt_1[nextToken.tokenTypeIdx];
        };
      } else {
        return function() {
          for (var t2 = 0; t2 < numOfAlts; t2++) {
            var currAlt = alts[t2];
            var currNumOfPaths = currAlt.length;
            nextPath:
              for (var j2 = 0; j2 < currNumOfPaths; j2++) {
                var currPath = currAlt[j2];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                  var nextToken = this.LA(i + 1);
                  if (tokenMatcher(nextToken, currPath[i]) === false) {
                    continue nextPath;
                  }
                }
                return t2;
              }
          }
          return void 0;
        };
      }
    }
    exports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;
    function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {
      var areAllOneTokenLookahead = (0, every_12.default)(alt, function(currPath) {
        return currPath.length === 1;
      });
      var numOfPaths = alt.length;
      if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        var singleTokensTypes = (0, flatten_12.default)(alt);
        if (singleTokensTypes.length === 1 && (0, isEmpty_12.default)(singleTokensTypes[0].categoryMatches)) {
          var expectedTokenType = singleTokensTypes[0];
          var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;
          return function() {
            return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;
          };
        } else {
          var choiceToAlt_2 = (0, reduce_12.default)(singleTokensTypes, function(result, currTokType, idx) {
            result[currTokType.tokenTypeIdx] = true;
            (0, forEach_12.default)(currTokType.categoryMatches, function(currExtendingType) {
              result[currExtendingType] = true;
            });
            return result;
          }, []);
          return function() {
            var nextToken = this.LA(1);
            return choiceToAlt_2[nextToken.tokenTypeIdx] === true;
          };
        }
      } else {
        return function() {
          nextPath:
            for (var j2 = 0; j2 < numOfPaths; j2++) {
              var currPath = alt[j2];
              var currPathLength = currPath.length;
              for (var i = 0; i < currPathLength; i++) {
                var nextToken = this.LA(i + 1);
                if (tokenMatcher(nextToken, currPath[i]) === false) {
                  continue nextPath;
                }
              }
              return true;
            }
          return false;
        };
      }
    }
    exports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;
    var RestDefinitionFinderWalker = (
      /** @class */
      function(_super) {
        __extends2(RestDefinitionFinderWalker2, _super);
        function RestDefinitionFinderWalker2(topProd, targetOccurrence, targetProdType) {
          var _this = _super.call(this) || this;
          _this.topProd = topProd;
          _this.targetOccurrence = targetOccurrence;
          _this.targetProdType = targetProdType;
          return _this;
        }
        RestDefinitionFinderWalker2.prototype.startWalking = function() {
          this.walk(this.topProd);
          return this.restDef;
        };
        RestDefinitionFinderWalker2.prototype.checkIsTarget = function(node, expectedProdType, currRest, prevRest) {
          if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {
            this.restDef = currRest.concat(prevRest);
            return true;
          }
          return false;
        };
        RestDefinitionFinderWalker2.prototype.walkOption = function(optionProd, currRest, prevRest) {
          if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);
          }
        };
        RestDefinitionFinderWalker2.prototype.walkAtLeastOne = function(atLeastOneProd, currRest, prevRest) {
          if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);
          }
        };
        RestDefinitionFinderWalker2.prototype.walkAtLeastOneSep = function(atLeastOneSepProd, currRest, prevRest) {
          if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);
          }
        };
        RestDefinitionFinderWalker2.prototype.walkMany = function(manyProd, currRest, prevRest) {
          if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);
          }
        };
        RestDefinitionFinderWalker2.prototype.walkManySep = function(manySepProd, currRest, prevRest) {
          if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);
          }
        };
        return RestDefinitionFinderWalker2;
      }(rest_1.RestWalker)
    );
    var InsideDefinitionFinderVisitor = (
      /** @class */
      function(_super) {
        __extends2(InsideDefinitionFinderVisitor2, _super);
        function InsideDefinitionFinderVisitor2(targetOccurrence, targetProdType, targetRef) {
          var _this = _super.call(this) || this;
          _this.targetOccurrence = targetOccurrence;
          _this.targetProdType = targetProdType;
          _this.targetRef = targetRef;
          _this.result = [];
          return _this;
        }
        InsideDefinitionFinderVisitor2.prototype.checkIsTarget = function(node, expectedProdName) {
          if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === void 0 || node === this.targetRef)) {
            this.result = node.definition;
          }
        };
        InsideDefinitionFinderVisitor2.prototype.visitOption = function(node) {
          this.checkIsTarget(node, PROD_TYPE.OPTION);
        };
        InsideDefinitionFinderVisitor2.prototype.visitRepetition = function(node) {
          this.checkIsTarget(node, PROD_TYPE.REPETITION);
        };
        InsideDefinitionFinderVisitor2.prototype.visitRepetitionMandatory = function(node) {
          this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);
        };
        InsideDefinitionFinderVisitor2.prototype.visitRepetitionMandatoryWithSeparator = function(node) {
          this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
        };
        InsideDefinitionFinderVisitor2.prototype.visitRepetitionWithSeparator = function(node) {
          this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);
        };
        InsideDefinitionFinderVisitor2.prototype.visitAlternation = function(node) {
          this.checkIsTarget(node, PROD_TYPE.ALTERNATION);
        };
        return InsideDefinitionFinderVisitor2;
      }(gast_2.GAstVisitor)
    );
    function initializeArrayOfArrays(size) {
      var result = new Array(size);
      for (var i = 0; i < size; i++) {
        result[i] = [];
      }
      return result;
    }
    function pathToHashKeys(path) {
      var keys2 = [""];
      for (var i = 0; i < path.length; i++) {
        var tokType = path[i];
        var longerKeys = [];
        for (var j2 = 0; j2 < keys2.length; j2++) {
          var currShorterKey = keys2[j2];
          longerKeys.push(currShorterKey + "_" + tokType.tokenTypeIdx);
          for (var t2 = 0; t2 < tokType.categoryMatches.length; t2++) {
            var categoriesKeySuffix = "_" + tokType.categoryMatches[t2];
            longerKeys.push(currShorterKey + categoriesKeySuffix);
          }
        }
        keys2 = longerKeys;
      }
      return keys2;
    }
    function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {
      for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {
        if (currAltIdx === idx) {
          continue;
        }
        var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];
        for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {
          var searchKey = searchPathKeys[searchIdx];
          if (otherAltKnownPathsKeys[searchKey] === true) {
            return false;
          }
        }
      }
      return true;
    }
    function lookAheadSequenceFromAlternatives(altsDefs, k2) {
      var partialAlts = (0, map_12.default)(altsDefs, function(currAlt) {
        return (0, interpreter_1.possiblePathsFrom)([currAlt], 1);
      });
      var finalResult = initializeArrayOfArrays(partialAlts.length);
      var altsHashes = (0, map_12.default)(partialAlts, function(currAltPaths) {
        var dict = {};
        (0, forEach_12.default)(currAltPaths, function(item) {
          var keys2 = pathToHashKeys(item.partialPath);
          (0, forEach_12.default)(keys2, function(currKey) {
            dict[currKey] = true;
          });
        });
        return dict;
      });
      var newData = partialAlts;
      for (var pathLength = 1; pathLength <= k2; pathLength++) {
        var currDataset = newData;
        newData = initializeArrayOfArrays(currDataset.length);
        var _loop_1 = function(altIdx2) {
          var currAltPathsAndSuffixes = currDataset[altIdx2];
          for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {
            var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;
            var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;
            var prefixKeys = pathToHashKeys(currPathPrefix);
            var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx2);
            if (isUnique || (0, isEmpty_12.default)(suffixDef) || currPathPrefix.length === k2) {
              var currAltResult = finalResult[altIdx2];
              if (containsPath(currAltResult, currPathPrefix) === false) {
                currAltResult.push(currPathPrefix);
                for (var j2 = 0; j2 < prefixKeys.length; j2++) {
                  var currKey = prefixKeys[j2];
                  altsHashes[altIdx2][currKey] = true;
                }
              }
            } else {
              var newPartialPathsAndSuffixes = (0, interpreter_1.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);
              newData[altIdx2] = newData[altIdx2].concat(newPartialPathsAndSuffixes);
              (0, forEach_12.default)(newPartialPathsAndSuffixes, function(item) {
                var prefixKeys2 = pathToHashKeys(item.partialPath);
                (0, forEach_12.default)(prefixKeys2, function(key) {
                  altsHashes[altIdx2][key] = true;
                });
              });
            }
          }
        };
        for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {
          _loop_1(altIdx);
        }
      }
      return finalResult;
    }
    exports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;
    function getLookaheadPathsForOr(occurrence, ruleGrammar, k2, orProd) {
      var visitor2 = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);
      ruleGrammar.accept(visitor2);
      return lookAheadSequenceFromAlternatives(visitor2.result, k2);
    }
    exports.getLookaheadPathsForOr = getLookaheadPathsForOr;
    function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k2) {
      var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);
      ruleGrammar.accept(insideDefVisitor);
      var insideDef = insideDefVisitor.result;
      var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);
      var afterDef = afterDefWalker.startWalking();
      var insideFlat = new gast_1.Alternative({ definition: insideDef });
      var afterFlat = new gast_1.Alternative({ definition: afterDef });
      return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k2);
    }
    exports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;
    function containsPath(alternative, searchPath) {
      compareOtherPath:
        for (var i = 0; i < alternative.length; i++) {
          var otherPath = alternative[i];
          if (otherPath.length !== searchPath.length) {
            continue;
          }
          for (var j2 = 0; j2 < otherPath.length; j2++) {
            var searchTok = searchPath[j2];
            var otherTok = otherPath[j2];
            var matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== void 0;
            if (matchingTokens === false) {
              continue compareOtherPath;
            }
          }
          return true;
        }
      return false;
    }
    exports.containsPath = containsPath;
    function isStrictPrefixOfPath(prefix, other) {
      return prefix.length < other.length && (0, every_12.default)(prefix, function(tokType, idx) {
        var otherTokType = other[idx];
        return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];
      });
    }
    exports.isStrictPrefixOfPath = isStrictPrefixOfPath;
    function areTokenCategoriesNotUsed(lookAheadPaths) {
      return (0, every_12.default)(lookAheadPaths, function(singleAltPaths) {
        return (0, every_12.default)(singleAltPaths, function(singlePath) {
          return (0, every_12.default)(singlePath, function(token) {
            return (0, isEmpty_12.default)(token.categoryMatches);
          });
        });
      });
    }
    exports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;
  })(lookahead);
  return lookahead;
}
var hasRequiredChecks;
function requireChecks() {
  if (hasRequiredChecks)
    return checks;
  hasRequiredChecks = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __assign2 = commonjsGlobal && commonjsGlobal.__assign || function() {
    __assign2 = Object.assign || function(t2) {
      for (var s2, i = 1, n2 = arguments.length; i < n2; i++) {
        s2 = arguments[i];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign2.apply(this, arguments);
  };
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(checks, "__esModule", { value: true });
  checks.checkPrefixAlternativesAmbiguities = checks.validateSomeNonEmptyLookaheadPath = checks.validateTooManyAlts = checks.RepetitionCollector = checks.validateAmbiguousAlternationAlternatives = checks.validateEmptyOrAlternative = checks.getFirstNoneTerminal = checks.validateNoLeftRecursion = checks.validateRuleIsOverridden = checks.validateRuleDoesNotAlreadyExist = checks.OccurrenceValidationCollector = checks.identifyProductionForDuplicates = checks.validateGrammar = checks.validateLookahead = void 0;
  var first_1 = __importDefault(requireFirst());
  var isEmpty_12 = __importDefault(requireIsEmpty());
  var drop_12 = __importDefault(requireDrop());
  var flatten_12 = __importDefault(requireFlatten());
  var filter_12 = __importDefault(requireFilter());
  var reject_12 = __importDefault(requireReject());
  var difference_12 = __importDefault(requireDifference());
  var map_12 = __importDefault(requireMap());
  var forEach_12 = __importDefault(requireForEach());
  var groupBy_12 = __importDefault(requireGroupBy());
  var reduce_12 = __importDefault(requireReduce());
  var pickBy_12 = __importDefault(requirePickBy());
  var values_12 = __importDefault(requireValues());
  var includes_12 = __importDefault(requireIncludes());
  var flatMap_12 = __importDefault(requireFlatMap());
  var clone_12 = __importDefault(requireClone());
  var parser_1 = requireParser$1();
  var gast_1 = requireApi$2();
  var lookahead_1 = requireLookahead();
  var interpreter_1 = requireInterpreter();
  var gast_2 = requireApi$2();
  var gast_3 = requireApi$2();
  var dropRight_12 = __importDefault(requireDropRight());
  var compact_12 = __importDefault(requireCompact());
  var tokens_1 = requireTokens();
  function validateLookahead(options) {
    var lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({
      rules: options.rules,
      tokenTypes: options.tokenTypes,
      grammarName: options.grammarName
    });
    return (0, map_12.default)(lookaheadValidationErrorMessages, function(errorMessage) {
      return __assign2({ type: parser_1.ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage);
    });
  }
  checks.validateLookahead = validateLookahead;
  function validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {
    var duplicateErrors = (0, flatMap_12.default)(topLevels, function(currTopLevel) {
      return validateDuplicateProductions(currTopLevel, errMsgProvider);
    });
    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);
    var tooManyAltsErrors = (0, flatMap_12.default)(topLevels, function(curRule) {
      return validateTooManyAlts(curRule, errMsgProvider);
    });
    var duplicateRulesError = (0, flatMap_12.default)(topLevels, function(curRule) {
      return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);
    });
    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);
  }
  checks.validateGrammar = validateGrammar;
  function validateDuplicateProductions(topLevelRule, errMsgProvider) {
    var collectorVisitor = new OccurrenceValidationCollector();
    topLevelRule.accept(collectorVisitor);
    var allRuleProductions = collectorVisitor.allProductions;
    var productionGroups = (0, groupBy_12.default)(allRuleProductions, identifyProductionForDuplicates);
    var duplicates = (0, pickBy_12.default)(productionGroups, function(currGroup) {
      return currGroup.length > 1;
    });
    var errors2 = (0, map_12.default)((0, values_12.default)(duplicates), function(currDuplicates) {
      var firstProd = (0, first_1.default)(currDuplicates);
      var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);
      var dslName = (0, gast_1.getProductionDslName)(firstProd);
      var defError = {
        message: msg,
        type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
        ruleName: topLevelRule.name,
        dslName,
        occurrence: firstProd.idx
      };
      var param = getExtraProductionArgument(firstProd);
      if (param) {
        defError.parameter = param;
      }
      return defError;
    });
    return errors2;
  }
  function identifyProductionForDuplicates(prod) {
    return "".concat((0, gast_1.getProductionDslName)(prod), "_#_").concat(prod.idx, "_#_").concat(getExtraProductionArgument(prod));
  }
  checks.identifyProductionForDuplicates = identifyProductionForDuplicates;
  function getExtraProductionArgument(prod) {
    if (prod instanceof gast_2.Terminal) {
      return prod.terminalType.name;
    } else if (prod instanceof gast_2.NonTerminal) {
      return prod.nonTerminalName;
    } else {
      return "";
    }
  }
  var OccurrenceValidationCollector = (
    /** @class */
    function(_super) {
      __extends2(OccurrenceValidationCollector2, _super);
      function OccurrenceValidationCollector2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
      }
      OccurrenceValidationCollector2.prototype.visitNonTerminal = function(subrule) {
        this.allProductions.push(subrule);
      };
      OccurrenceValidationCollector2.prototype.visitOption = function(option) {
        this.allProductions.push(option);
      };
      OccurrenceValidationCollector2.prototype.visitRepetitionWithSeparator = function(manySep) {
        this.allProductions.push(manySep);
      };
      OccurrenceValidationCollector2.prototype.visitRepetitionMandatory = function(atLeastOne) {
        this.allProductions.push(atLeastOne);
      };
      OccurrenceValidationCollector2.prototype.visitRepetitionMandatoryWithSeparator = function(atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
      };
      OccurrenceValidationCollector2.prototype.visitRepetition = function(many) {
        this.allProductions.push(many);
      };
      OccurrenceValidationCollector2.prototype.visitAlternation = function(or) {
        this.allProductions.push(or);
      };
      OccurrenceValidationCollector2.prototype.visitTerminal = function(terminal) {
        this.allProductions.push(terminal);
      };
      return OccurrenceValidationCollector2;
    }(gast_3.GAstVisitor)
  );
  checks.OccurrenceValidationCollector = OccurrenceValidationCollector;
  function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {
    var errors2 = [];
    var occurrences = (0, reduce_12.default)(allRules, function(result, curRule) {
      if (curRule.name === rule.name) {
        return result + 1;
      }
      return result;
    }, 0);
    if (occurrences > 1) {
      var errMsg = errMsgProvider.buildDuplicateRuleNameError({
        topLevelRule: rule,
        grammarName: className
      });
      errors2.push({
        message: errMsg,
        type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
        ruleName: rule.name
      });
    }
    return errors2;
  }
  checks.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist;
  function validateRuleIsOverridden(ruleName, definedRulesNames, className) {
    var errors2 = [];
    var errMsg;
    if (!(0, includes_12.default)(definedRulesNames, ruleName)) {
      errMsg = "Invalid rule override, rule: ->".concat(ruleName, "<- cannot be overridden in the grammar: ->").concat(className, "<-") + "as it is not defined in any of the super grammars ";
      errors2.push({
        message: errMsg,
        type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,
        ruleName
      });
    }
    return errors2;
  }
  checks.validateRuleIsOverridden = validateRuleIsOverridden;
  function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {
    if (path === void 0) {
      path = [];
    }
    var errors2 = [];
    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);
    if ((0, isEmpty_12.default)(nextNonTerminals)) {
      return [];
    } else {
      var ruleName = topRule.name;
      var foundLeftRecursion = (0, includes_12.default)(nextNonTerminals, topRule);
      if (foundLeftRecursion) {
        errors2.push({
          message: errMsgProvider.buildLeftRecursionError({
            topLevelRule: topRule,
            leftRecursionPath: path
          }),
          type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,
          ruleName
        });
      }
      var validNextSteps = (0, difference_12.default)(nextNonTerminals, path.concat([topRule]));
      var errorsFromNextSteps = (0, flatMap_12.default)(validNextSteps, function(currRefRule) {
        var newPath = (0, clone_12.default)(path);
        newPath.push(currRefRule);
        return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);
      });
      return errors2.concat(errorsFromNextSteps);
    }
  }
  checks.validateNoLeftRecursion = validateNoLeftRecursion;
  function getFirstNoneTerminal(definition) {
    var result = [];
    if ((0, isEmpty_12.default)(definition)) {
      return result;
    }
    var firstProd = (0, first_1.default)(definition);
    if (firstProd instanceof gast_2.NonTerminal) {
      result.push(firstProd.referencedRule);
    } else if (firstProd instanceof gast_2.Alternative || firstProd instanceof gast_2.Option || firstProd instanceof gast_2.RepetitionMandatory || firstProd instanceof gast_2.RepetitionMandatoryWithSeparator || firstProd instanceof gast_2.RepetitionWithSeparator || firstProd instanceof gast_2.Repetition) {
      result = result.concat(getFirstNoneTerminal(firstProd.definition));
    } else if (firstProd instanceof gast_2.Alternation) {
      result = (0, flatten_12.default)((0, map_12.default)(firstProd.definition, function(currSubDef) {
        return getFirstNoneTerminal(currSubDef.definition);
      }));
    } else if (firstProd instanceof gast_2.Terminal)
      ;
    else {
      throw Error("non exhaustive match");
    }
    var isFirstOptional = (0, gast_1.isOptionalProd)(firstProd);
    var hasMore = definition.length > 1;
    if (isFirstOptional && hasMore) {
      var rest2 = (0, drop_12.default)(definition);
      return result.concat(getFirstNoneTerminal(rest2));
    } else {
      return result;
    }
  }
  checks.getFirstNoneTerminal = getFirstNoneTerminal;
  var OrCollector = (
    /** @class */
    function(_super) {
      __extends2(OrCollector2, _super);
      function OrCollector2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.alternations = [];
        return _this;
      }
      OrCollector2.prototype.visitAlternation = function(node) {
        this.alternations.push(node);
      };
      return OrCollector2;
    }(gast_3.GAstVisitor)
  );
  function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors2 = (0, flatMap_12.default)(ors, function(currOr) {
      var exceptLast = (0, dropRight_12.default)(currOr.definition);
      return (0, flatMap_12.default)(exceptLast, function(currAlternative, currAltIdx) {
        var possibleFirstInAlt = (0, interpreter_1.nextPossibleTokensAfter)([currAlternative], [], tokens_1.tokenStructuredMatcher, 1);
        if ((0, isEmpty_12.default)(possibleFirstInAlt)) {
          return [
            {
              message: errMsgProvider.buildEmptyAlternationError({
                topLevelRule,
                alternation: currOr,
                emptyChoiceIdx: currAltIdx
              }),
              type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,
              ruleName: topLevelRule.name,
              occurrence: currOr.idx,
              alternative: currAltIdx + 1
            }
          ];
        } else {
          return [];
        }
      });
    });
    return errors2;
  }
  checks.validateEmptyOrAlternative = validateEmptyOrAlternative;
  function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    ors = (0, reject_12.default)(ors, function(currOr) {
      return currOr.ignoreAmbiguities === true;
    });
    var errors2 = (0, flatMap_12.default)(ors, function(currOr) {
      var currOccurrence = currOr.idx;
      var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;
      var alternatives = (0, lookahead_1.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);
      var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
      var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
      return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);
    });
    return errors2;
  }
  checks.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;
  var RepetitionCollector = (
    /** @class */
    function(_super) {
      __extends2(RepetitionCollector2, _super);
      function RepetitionCollector2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
      }
      RepetitionCollector2.prototype.visitRepetitionWithSeparator = function(manySep) {
        this.allProductions.push(manySep);
      };
      RepetitionCollector2.prototype.visitRepetitionMandatory = function(atLeastOne) {
        this.allProductions.push(atLeastOne);
      };
      RepetitionCollector2.prototype.visitRepetitionMandatoryWithSeparator = function(atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
      };
      RepetitionCollector2.prototype.visitRepetition = function(many) {
        this.allProductions.push(many);
      };
      return RepetitionCollector2;
    }(gast_3.GAstVisitor)
  );
  checks.RepetitionCollector = RepetitionCollector;
  function validateTooManyAlts(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors2 = (0, flatMap_12.default)(ors, function(currOr) {
      if (currOr.definition.length > 255) {
        return [
          {
            message: errMsgProvider.buildTooManyAlternativesError({
              topLevelRule,
              alternation: currOr
            }),
            type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,
            ruleName: topLevelRule.name,
            occurrence: currOr.idx
          }
        ];
      } else {
        return [];
      }
    });
    return errors2;
  }
  checks.validateTooManyAlts = validateTooManyAlts;
  function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {
    var errors2 = [];
    (0, forEach_12.default)(topLevelRules, function(currTopRule) {
      var collectorVisitor = new RepetitionCollector();
      currTopRule.accept(collectorVisitor);
      var allRuleProductions = collectorVisitor.allProductions;
      (0, forEach_12.default)(allRuleProductions, function(currProd) {
        var prodType = (0, lookahead_1.getProdType)(currProd);
        var actualMaxLookahead = currProd.maxLookahead || maxLookahead;
        var currOccurrence = currProd.idx;
        var paths = (0, lookahead_1.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);
        var pathsInsideProduction = paths[0];
        if ((0, isEmpty_12.default)((0, flatten_12.default)(pathsInsideProduction))) {
          var errMsg = errMsgProvider.buildEmptyRepetitionError({
            topLevelRule: currTopRule,
            repetition: currProd
          });
          errors2.push({
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,
            ruleName: currTopRule.name
          });
        }
      });
    });
    return errors2;
  }
  checks.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;
  function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var foundAmbiguousPaths = [];
    var identicalAmbiguities = (0, reduce_12.default)(alternatives, function(result, currAlt, currAltIdx) {
      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {
        return result;
      }
      (0, forEach_12.default)(currAlt, function(currPath) {
        var altsCurrPathAppearsIn = [currAltIdx];
        (0, forEach_12.default)(alternatives, function(currOtherAlt, currOtherAltIdx) {
          if (currAltIdx !== currOtherAltIdx && (0, lookahead_1.containsPath)(currOtherAlt, currPath) && // ignore (skip) ambiguities with this "other" alternative
          alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {
            altsCurrPathAppearsIn.push(currOtherAltIdx);
          }
        });
        if (altsCurrPathAppearsIn.length > 1 && !(0, lookahead_1.containsPath)(foundAmbiguousPaths, currPath)) {
          foundAmbiguousPaths.push(currPath);
          result.push({
            alts: altsCurrPathAppearsIn,
            path: currPath
          });
        }
      });
      return result;
    }, []);
    var currErrors = (0, map_12.default)(identicalAmbiguities, function(currAmbDescriptor) {
      var ambgIndices = (0, map_12.default)(currAmbDescriptor.alts, function(currAltIdx) {
        return currAltIdx + 1;
      });
      var currMessage = errMsgProvider.buildAlternationAmbiguityError({
        topLevelRule: rule,
        alternation,
        ambiguityIndices: ambgIndices,
        prefixPath: currAmbDescriptor.path
      });
      return {
        message: currMessage,
        type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,
        ruleName: rule.name,
        occurrence: alternation.idx,
        alternatives: currAmbDescriptor.alts
      };
    });
    return currErrors;
  }
  function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var pathsAndIndices = (0, reduce_12.default)(alternatives, function(result, currAlt, idx) {
      var currPathsAndIdx = (0, map_12.default)(currAlt, function(currPath) {
        return { idx, path: currPath };
      });
      return result.concat(currPathsAndIdx);
    }, []);
    var errors2 = (0, compact_12.default)((0, flatMap_12.default)(pathsAndIndices, function(currPathAndIdx) {
      var alternativeGast = alternation.definition[currPathAndIdx.idx];
      if (alternativeGast.ignoreAmbiguities === true) {
        return [];
      }
      var targetIdx = currPathAndIdx.idx;
      var targetPath = currPathAndIdx.path;
      var prefixAmbiguitiesPathsAndIndices = (0, filter_12.default)(pathsAndIndices, function(searchPathAndIdx) {
        return (
          // ignore (skip) ambiguities with this "other" alternative
          alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx && // checking for strict prefix because identical lookaheads
          // will be be detected using a different validation.
          (0, lookahead_1.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath)
        );
      });
      var currPathPrefixErrors = (0, map_12.default)(prefixAmbiguitiesPathsAndIndices, function(currAmbPathAndIdx) {
        var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];
        var occurrence = alternation.idx === 0 ? "" : alternation.idx;
        var message = errMsgProvider.buildAlternationPrefixAmbiguityError({
          topLevelRule: rule,
          alternation,
          ambiguityIndices: ambgIndices,
          prefixPath: currAmbPathAndIdx.path
        });
        return {
          message,
          type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,
          ruleName: rule.name,
          occurrence,
          alternatives: ambgIndices
        };
      });
      return currPathPrefixErrors;
    }));
    return errors2;
  }
  checks.checkPrefixAlternativesAmbiguities = checkPrefixAlternativesAmbiguities;
  function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {
    var errors2 = [];
    var tokenNames = (0, map_12.default)(tokenTypes, function(currToken) {
      return currToken.name;
    });
    (0, forEach_12.default)(topLevels, function(currRule) {
      var currRuleName = currRule.name;
      if ((0, includes_12.default)(tokenNames, currRuleName)) {
        var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);
        errors2.push({
          message: errMsg,
          type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,
          ruleName: currRuleName
        });
      }
    });
    return errors2;
  }
  return checks;
}
var hasRequiredGast_resolver_public;
function requireGast_resolver_public() {
  if (hasRequiredGast_resolver_public)
    return gast_resolver_public;
  hasRequiredGast_resolver_public = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(gast_resolver_public, "__esModule", { value: true });
  gast_resolver_public.validateGrammar = gast_resolver_public.resolveGrammar = void 0;
  var forEach_12 = __importDefault(requireForEach());
  var defaults_12 = __importDefault(requireDefaults());
  var resolver_1 = requireResolver();
  var checks_1 = requireChecks();
  var errors_public_1 = requireErrors_public();
  function resolveGrammar(options) {
    var actualOptions = (0, defaults_12.default)(options, {
      errMsgProvider: errors_public_1.defaultGrammarResolverErrorProvider
    });
    var topRulesTable = {};
    (0, forEach_12.default)(options.rules, function(rule) {
      topRulesTable[rule.name] = rule;
    });
    return (0, resolver_1.resolveGrammar)(topRulesTable, actualOptions.errMsgProvider);
  }
  gast_resolver_public.resolveGrammar = resolveGrammar;
  function validateGrammar(options) {
    options = (0, defaults_12.default)(options, {
      errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider
    });
    return (0, checks_1.validateGrammar)(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);
  }
  gast_resolver_public.validateGrammar = validateGrammar;
  return gast_resolver_public;
}
var recoverable = {};
var exceptions_public = {};
var hasRequiredExceptions_public;
function requireExceptions_public() {
  if (hasRequiredExceptions_public)
    return exceptions_public;
  hasRequiredExceptions_public = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exceptions_public, "__esModule", { value: true });
  exceptions_public.EarlyExitException = exceptions_public.NotAllInputParsedException = exceptions_public.NoViableAltException = exceptions_public.MismatchedTokenException = exceptions_public.isRecognitionException = void 0;
  var includes_12 = __importDefault(requireIncludes());
  var MISMATCHED_TOKEN_EXCEPTION = "MismatchedTokenException";
  var NO_VIABLE_ALT_EXCEPTION = "NoViableAltException";
  var EARLY_EXIT_EXCEPTION = "EarlyExitException";
  var NOT_ALL_INPUT_PARSED_EXCEPTION = "NotAllInputParsedException";
  var RECOGNITION_EXCEPTION_NAMES = [
    MISMATCHED_TOKEN_EXCEPTION,
    NO_VIABLE_ALT_EXCEPTION,
    EARLY_EXIT_EXCEPTION,
    NOT_ALL_INPUT_PARSED_EXCEPTION
  ];
  Object.freeze(RECOGNITION_EXCEPTION_NAMES);
  function isRecognitionException(error) {
    return (0, includes_12.default)(RECOGNITION_EXCEPTION_NAMES, error.name);
  }
  exceptions_public.isRecognitionException = isRecognitionException;
  var RecognitionException = (
    /** @class */
    function(_super) {
      __extends2(RecognitionException2, _super);
      function RecognitionException2(message, token) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        _this.token = token;
        _this.resyncedTokens = [];
        Object.setPrototypeOf(_this, _newTarget.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_this, _this.constructor);
        }
        return _this;
      }
      return RecognitionException2;
    }(Error)
  );
  var MismatchedTokenException = (
    /** @class */
    function(_super) {
      __extends2(MismatchedTokenException2, _super);
      function MismatchedTokenException2(message, token, previousToken) {
        var _this = _super.call(this, message, token) || this;
        _this.previousToken = previousToken;
        _this.name = MISMATCHED_TOKEN_EXCEPTION;
        return _this;
      }
      return MismatchedTokenException2;
    }(RecognitionException)
  );
  exceptions_public.MismatchedTokenException = MismatchedTokenException;
  var NoViableAltException = (
    /** @class */
    function(_super) {
      __extends2(NoViableAltException2, _super);
      function NoViableAltException2(message, token, previousToken) {
        var _this = _super.call(this, message, token) || this;
        _this.previousToken = previousToken;
        _this.name = NO_VIABLE_ALT_EXCEPTION;
        return _this;
      }
      return NoViableAltException2;
    }(RecognitionException)
  );
  exceptions_public.NoViableAltException = NoViableAltException;
  var NotAllInputParsedException = (
    /** @class */
    function(_super) {
      __extends2(NotAllInputParsedException2, _super);
      function NotAllInputParsedException2(message, token) {
        var _this = _super.call(this, message, token) || this;
        _this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;
        return _this;
      }
      return NotAllInputParsedException2;
    }(RecognitionException)
  );
  exceptions_public.NotAllInputParsedException = NotAllInputParsedException;
  var EarlyExitException = (
    /** @class */
    function(_super) {
      __extends2(EarlyExitException2, _super);
      function EarlyExitException2(message, token, previousToken) {
        var _this = _super.call(this, message, token) || this;
        _this.previousToken = previousToken;
        _this.name = EARLY_EXIT_EXCEPTION;
        return _this;
      }
      return EarlyExitException2;
    }(RecognitionException)
  );
  exceptions_public.EarlyExitException = EarlyExitException;
  return exceptions_public;
}
var hasRequiredRecoverable;
function requireRecoverable() {
  if (hasRequiredRecoverable)
    return recoverable;
  hasRequiredRecoverable = 1;
  (function(exports) {
    var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
      var extendStatics2 = function(d2, b2) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics2(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics2(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.attemptInRepetitionRecovery = exports.Recoverable = exports.InRuleRecoveryException = exports.IN_RULE_RECOVERY_EXCEPTION = exports.EOF_FOLLOW_KEY = void 0;
    var tokens_public_1 = requireTokens_public();
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var dropRight_12 = __importDefault(requireDropRight());
    var flatten_12 = __importDefault(requireFlatten());
    var map_12 = __importDefault(requireMap());
    var find_12 = __importDefault(requireFind());
    var has_12 = __importDefault(requireHas());
    var includes_12 = __importDefault(requireIncludes());
    var clone_12 = __importDefault(requireClone());
    var exceptions_public_1 = requireExceptions_public();
    var constants_1 = requireConstants();
    var parser_1 = requireParser$1();
    exports.EOF_FOLLOW_KEY = {};
    exports.IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
    var InRuleRecoveryException = (
      /** @class */
      function(_super) {
        __extends2(InRuleRecoveryException2, _super);
        function InRuleRecoveryException2(message) {
          var _this = _super.call(this, message) || this;
          _this.name = exports.IN_RULE_RECOVERY_EXCEPTION;
          return _this;
        }
        return InRuleRecoveryException2;
      }(Error)
    );
    exports.InRuleRecoveryException = InRuleRecoveryException;
    var Recoverable = (
      /** @class */
      function() {
        function Recoverable2() {
        }
        Recoverable2.prototype.initRecoverable = function(config2) {
          this.firstAfterRepMap = {};
          this.resyncFollows = {};
          this.recoveryEnabled = (0, has_12.default)(config2, "recoveryEnabled") ? config2.recoveryEnabled : parser_1.DEFAULT_PARSER_CONFIG.recoveryEnabled;
          if (this.recoveryEnabled) {
            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
          }
        };
        Recoverable2.prototype.getTokenToInsert = function(tokType) {
          var tokToInsert = (0, tokens_public_1.createTokenInstance)(tokType, "", NaN, NaN, NaN, NaN, NaN, NaN);
          tokToInsert.isInsertedInRecovery = true;
          return tokToInsert;
        };
        Recoverable2.prototype.canTokenTypeBeInsertedInRecovery = function(tokType) {
          return true;
        };
        Recoverable2.prototype.canTokenTypeBeDeletedInRecovery = function(tokType) {
          return true;
        };
        Recoverable2.prototype.tryInRepetitionRecovery = function(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {
          var _this = this;
          var reSyncTokType = this.findReSyncTokenType();
          var savedLexerState = this.exportLexerState();
          var resyncedTokens = [];
          var passedResyncPoint = false;
          var nextTokenWithoutResync = this.LA(1);
          var currToken = this.LA(1);
          var generateErrorMessage = function() {
            var previousToken = _this.LA(0);
            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({
              expected: expectedTokType,
              actual: nextTokenWithoutResync,
              previous: previousToken,
              ruleName: _this.getCurrRuleFullName()
            });
            var error = new exceptions_public_1.MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));
            error.resyncedTokens = (0, dropRight_12.default)(resyncedTokens);
            _this.SAVE_ERROR(error);
          };
          while (!passedResyncPoint) {
            if (this.tokenMatcher(currToken, expectedTokType)) {
              generateErrorMessage();
              return;
            } else if (lookAheadFunc.call(this)) {
              generateErrorMessage();
              grammarRule.apply(this, grammarRuleArgs);
              return;
            } else if (this.tokenMatcher(currToken, reSyncTokType)) {
              passedResyncPoint = true;
            } else {
              currToken = this.SKIP_TOKEN();
              this.addToResyncTokens(currToken, resyncedTokens);
            }
          }
          this.importLexerState(savedLexerState);
        };
        Recoverable2.prototype.shouldInRepetitionRecoveryBeTried = function(expectTokAfterLastMatch, nextTokIdx, notStuck) {
          if (notStuck === false) {
            return false;
          }
          if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {
            return false;
          }
          if (this.isBackTracking()) {
            return false;
          }
          if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {
            return false;
          }
          return true;
        };
        Recoverable2.prototype.getFollowsForInRuleRecovery = function(tokType, tokIdxInRule) {
          var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);
          var follows = this.getNextPossibleTokenTypes(grammarPath);
          return follows;
        };
        Recoverable2.prototype.tryInRuleRecovery = function(expectedTokType, follows) {
          if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {
            var tokToInsert = this.getTokenToInsert(expectedTokType);
            return tokToInsert;
          }
          if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {
            var nextTok = this.SKIP_TOKEN();
            this.consumeToken();
            return nextTok;
          }
          throw new InRuleRecoveryException("sad sad panda");
        };
        Recoverable2.prototype.canPerformInRuleRecovery = function(expectedToken, follows) {
          return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);
        };
        Recoverable2.prototype.canRecoverWithSingleTokenInsertion = function(expectedTokType, follows) {
          var _this = this;
          if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {
            return false;
          }
          if ((0, isEmpty_12.default)(follows)) {
            return false;
          }
          var mismatchedTok = this.LA(1);
          var isMisMatchedTokInFollows = (0, find_12.default)(follows, function(possibleFollowsTokType) {
            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);
          }) !== void 0;
          return isMisMatchedTokInFollows;
        };
        Recoverable2.prototype.canRecoverWithSingleTokenDeletion = function(expectedTokType) {
          if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {
            return false;
          }
          var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);
          return isNextTokenWhatIsExpected;
        };
        Recoverable2.prototype.isInCurrentRuleReSyncSet = function(tokenTypeIdx) {
          var followKey = this.getCurrFollowKey();
          var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);
          return (0, includes_12.default)(currentRuleReSyncSet, tokenTypeIdx);
        };
        Recoverable2.prototype.findReSyncTokenType = function() {
          var allPossibleReSyncTokTypes = this.flattenFollowSet();
          var nextToken = this.LA(1);
          var k2 = 2;
          while (true) {
            var foundMatch = (0, find_12.default)(allPossibleReSyncTokTypes, function(resyncTokType) {
              var canMatch = (0, tokens_public_1.tokenMatcher)(nextToken, resyncTokType);
              return canMatch;
            });
            if (foundMatch !== void 0) {
              return foundMatch;
            }
            nextToken = this.LA(k2);
            k2++;
          }
        };
        Recoverable2.prototype.getCurrFollowKey = function() {
          if (this.RULE_STACK.length === 1) {
            return exports.EOF_FOLLOW_KEY;
          }
          var currRuleShortName = this.getLastExplicitRuleShortName();
          var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();
          var prevRuleShortName = this.getPreviousExplicitRuleShortName();
          return {
            ruleName: this.shortRuleNameToFullName(currRuleShortName),
            idxInCallingRule: currRuleIdx,
            inRule: this.shortRuleNameToFullName(prevRuleShortName)
          };
        };
        Recoverable2.prototype.buildFullFollowKeyStack = function() {
          var _this = this;
          var explicitRuleStack = this.RULE_STACK;
          var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;
          return (0, map_12.default)(explicitRuleStack, function(ruleName, idx) {
            if (idx === 0) {
              return exports.EOF_FOLLOW_KEY;
            }
            return {
              ruleName: _this.shortRuleNameToFullName(ruleName),
              idxInCallingRule: explicitOccurrenceStack[idx],
              inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])
            };
          });
        };
        Recoverable2.prototype.flattenFollowSet = function() {
          var _this = this;
          var followStack = (0, map_12.default)(this.buildFullFollowKeyStack(), function(currKey) {
            return _this.getFollowSetFromFollowKey(currKey);
          });
          return (0, flatten_12.default)(followStack);
        };
        Recoverable2.prototype.getFollowSetFromFollowKey = function(followKey) {
          if (followKey === exports.EOF_FOLLOW_KEY) {
            return [tokens_public_1.EOF];
          }
          var followName = followKey.ruleName + followKey.idxInCallingRule + constants_1.IN + followKey.inRule;
          return this.resyncFollows[followName];
        };
        Recoverable2.prototype.addToResyncTokens = function(token, resyncTokens) {
          if (!this.tokenMatcher(token, tokens_public_1.EOF)) {
            resyncTokens.push(token);
          }
          return resyncTokens;
        };
        Recoverable2.prototype.reSyncTo = function(tokType) {
          var resyncedTokens = [];
          var nextTok = this.LA(1);
          while (this.tokenMatcher(nextTok, tokType) === false) {
            nextTok = this.SKIP_TOKEN();
            this.addToResyncTokens(nextTok, resyncedTokens);
          }
          return (0, dropRight_12.default)(resyncedTokens);
        };
        Recoverable2.prototype.attemptInRepetitionRecovery = function(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {
        };
        Recoverable2.prototype.getCurrentGrammarPath = function(tokType, tokIdxInRule) {
          var pathRuleStack = this.getHumanReadableRuleStack();
          var pathOccurrenceStack = (0, clone_12.default)(this.RULE_OCCURRENCE_STACK);
          var grammarPath = {
            ruleStack: pathRuleStack,
            occurrenceStack: pathOccurrenceStack,
            lastTok: tokType,
            lastTokOccurrence: tokIdxInRule
          };
          return grammarPath;
        };
        Recoverable2.prototype.getHumanReadableRuleStack = function() {
          var _this = this;
          return (0, map_12.default)(this.RULE_STACK, function(currShortName) {
            return _this.shortRuleNameToFullName(currShortName);
          });
        };
        return Recoverable2;
      }()
    );
    exports.Recoverable = Recoverable;
    function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {
      var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);
      var firstAfterRepInfo = this.firstAfterRepMap[key];
      if (firstAfterRepInfo === void 0) {
        var currRuleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[currRuleName];
        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);
        firstAfterRepInfo = walker.startWalking();
        this.firstAfterRepMap[key] = firstAfterRepInfo;
      }
      var expectTokAfterLastMatch = firstAfterRepInfo.token;
      var nextTokIdx = firstAfterRepInfo.occurrence;
      var isEndOfRule = firstAfterRepInfo.isEndOfRule;
      if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === void 0) {
        expectTokAfterLastMatch = tokens_public_1.EOF;
        nextTokIdx = 1;
      }
      if (expectTokAfterLastMatch === void 0 || nextTokIdx === void 0) {
        return;
      }
      if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {
        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);
      }
    }
    exports.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
  })(recoverable);
  return recoverable;
}
var looksahead = {};
var keys = {};
var hasRequiredKeys;
function requireKeys() {
  if (hasRequiredKeys)
    return keys;
  hasRequiredKeys = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getKeyForAutomaticLookahead = exports.AT_LEAST_ONE_SEP_IDX = exports.MANY_SEP_IDX = exports.AT_LEAST_ONE_IDX = exports.MANY_IDX = exports.OPTION_IDX = exports.OR_IDX = exports.BITS_FOR_ALT_IDX = exports.BITS_FOR_RULE_IDX = exports.BITS_FOR_OCCURRENCE_IDX = exports.BITS_FOR_METHOD_TYPE = void 0;
    exports.BITS_FOR_METHOD_TYPE = 4;
    exports.BITS_FOR_OCCURRENCE_IDX = 8;
    exports.BITS_FOR_RULE_IDX = 12;
    exports.BITS_FOR_ALT_IDX = 8;
    exports.OR_IDX = 1 << exports.BITS_FOR_OCCURRENCE_IDX;
    exports.OPTION_IDX = 2 << exports.BITS_FOR_OCCURRENCE_IDX;
    exports.MANY_IDX = 3 << exports.BITS_FOR_OCCURRENCE_IDX;
    exports.AT_LEAST_ONE_IDX = 4 << exports.BITS_FOR_OCCURRENCE_IDX;
    exports.MANY_SEP_IDX = 5 << exports.BITS_FOR_OCCURRENCE_IDX;
    exports.AT_LEAST_ONE_SEP_IDX = 6 << exports.BITS_FOR_OCCURRENCE_IDX;
    function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {
      return occurrence | dslMethodIdx | ruleIdx;
    }
    exports.getKeyForAutomaticLookahead = getKeyForAutomaticLookahead;
    32 - exports.BITS_FOR_ALT_IDX;
  })(keys);
  return keys;
}
var llk_lookahead = {};
var hasRequiredLlk_lookahead;
function requireLlk_lookahead() {
  if (hasRequiredLlk_lookahead)
    return llk_lookahead;
  hasRequiredLlk_lookahead = 1;
  var __spreadArray2 = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l2 = from.length, ar; i < l2; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(llk_lookahead, "__esModule", { value: true });
  llk_lookahead.LLkLookaheadStrategy = void 0;
  var flatMap_12 = __importDefault(requireFlatMap());
  var isEmpty_12 = __importDefault(requireIsEmpty());
  var errors_public_1 = requireErrors_public();
  var parser_1 = requireParser$1();
  var checks_1 = requireChecks();
  var lookahead_1 = requireLookahead();
  var LLkLookaheadStrategy = (
    /** @class */
    function() {
      function LLkLookaheadStrategy2(options) {
        var _a2;
        this.maxLookahead = (_a2 = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a2 !== void 0 ? _a2 : parser_1.DEFAULT_PARSER_CONFIG.maxLookahead;
      }
      LLkLookaheadStrategy2.prototype.validate = function(options) {
        var leftRecursionErrors = this.validateNoLeftRecursion(options.rules);
        if ((0, isEmpty_12.default)(leftRecursionErrors)) {
          var emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);
          var ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);
          var emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);
          var allErrors = __spreadArray2(__spreadArray2(__spreadArray2(__spreadArray2([], leftRecursionErrors, true), emptyAltErrors, true), ambiguousAltsErrors, true), emptyRepetitionErrors, true);
          return allErrors;
        }
        return leftRecursionErrors;
      };
      LLkLookaheadStrategy2.prototype.validateNoLeftRecursion = function(rules) {
        return (0, flatMap_12.default)(rules, function(currTopRule) {
          return (0, checks_1.validateNoLeftRecursion)(currTopRule, currTopRule, errors_public_1.defaultGrammarValidatorErrorProvider);
        });
      };
      LLkLookaheadStrategy2.prototype.validateEmptyOrAlternatives = function(rules) {
        return (0, flatMap_12.default)(rules, function(currTopRule) {
          return (0, checks_1.validateEmptyOrAlternative)(currTopRule, errors_public_1.defaultGrammarValidatorErrorProvider);
        });
      };
      LLkLookaheadStrategy2.prototype.validateAmbiguousAlternationAlternatives = function(rules, maxLookahead) {
        return (0, flatMap_12.default)(rules, function(currTopRule) {
          return (0, checks_1.validateAmbiguousAlternationAlternatives)(currTopRule, maxLookahead, errors_public_1.defaultGrammarValidatorErrorProvider);
        });
      };
      LLkLookaheadStrategy2.prototype.validateSomeNonEmptyLookaheadPath = function(rules, maxLookahead) {
        return (0, checks_1.validateSomeNonEmptyLookaheadPath)(rules, maxLookahead, errors_public_1.defaultGrammarValidatorErrorProvider);
      };
      LLkLookaheadStrategy2.prototype.buildLookaheadForAlternation = function(options) {
        return (0, lookahead_1.buildLookaheadFuncForOr)(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, lookahead_1.buildAlternativesLookAheadFunc);
      };
      LLkLookaheadStrategy2.prototype.buildLookaheadForOptional = function(options) {
        return (0, lookahead_1.buildLookaheadFuncForOptionalProd)(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, (0, lookahead_1.getProdType)(options.prodType), lookahead_1.buildSingleAlternativeLookaheadFunction);
      };
      return LLkLookaheadStrategy2;
    }()
  );
  llk_lookahead.LLkLookaheadStrategy = LLkLookaheadStrategy;
  return llk_lookahead;
}
var hasRequiredLooksahead;
function requireLooksahead() {
  if (hasRequiredLooksahead)
    return looksahead;
  hasRequiredLooksahead = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(looksahead, "__esModule", { value: true });
  looksahead.collectMethods = looksahead.LooksAhead = void 0;
  var forEach_12 = __importDefault(requireForEach());
  var has_12 = __importDefault(requireHas());
  var parser_1 = requireParser$1();
  var keys_12 = requireKeys();
  var gast_1 = requireApi$2();
  var gast_2 = requireApi$2();
  var llk_lookahead_1 = requireLlk_lookahead();
  var LooksAhead = (
    /** @class */
    function() {
      function LooksAhead2() {
      }
      LooksAhead2.prototype.initLooksAhead = function(config2) {
        this.dynamicTokensEnabled = (0, has_12.default)(config2, "dynamicTokensEnabled") ? config2.dynamicTokensEnabled : parser_1.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;
        this.maxLookahead = (0, has_12.default)(config2, "maxLookahead") ? config2.maxLookahead : parser_1.DEFAULT_PARSER_CONFIG.maxLookahead;
        this.lookaheadStrategy = (0, has_12.default)(config2, "lookaheadStrategy") ? config2.lookaheadStrategy : new llk_lookahead_1.LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });
        this.lookAheadFuncsCache = /* @__PURE__ */ new Map();
      };
      LooksAhead2.prototype.preComputeLookaheadFunctions = function(rules) {
        var _this = this;
        (0, forEach_12.default)(rules, function(currRule) {
          _this.TRACE_INIT("".concat(currRule.name, " Rule Lookahead"), function() {
            var _a2 = collectMethods(currRule), alternation = _a2.alternation, repetition = _a2.repetition, option = _a2.option, repetitionMandatory = _a2.repetitionMandatory, repetitionMandatoryWithSeparator = _a2.repetitionMandatoryWithSeparator, repetitionWithSeparator = _a2.repetitionWithSeparator;
            (0, forEach_12.default)(alternation, function(currProd) {
              var prodIdx = currProd.idx === 0 ? "" : currProd.idx;
              _this.TRACE_INIT("".concat((0, gast_2.getProductionDslName)(currProd)).concat(prodIdx), function() {
                var laFunc = _this.lookaheadStrategy.buildLookaheadForAlternation({
                  prodOccurrence: currProd.idx,
                  rule: currRule,
                  maxLookahead: currProd.maxLookahead || _this.maxLookahead,
                  hasPredicates: currProd.hasPredicates,
                  dynamicTokensEnabled: _this.dynamicTokensEnabled
                });
                var key = (0, keys_12.getKeyForAutomaticLookahead)(_this.fullRuleNameToShort[currRule.name], keys_12.OR_IDX, currProd.idx);
                _this.setLaFuncCache(key, laFunc);
              });
            });
            (0, forEach_12.default)(repetition, function(currProd) {
              _this.computeLookaheadFunc(currRule, currProd.idx, keys_12.MANY_IDX, "Repetition", currProd.maxLookahead, (0, gast_2.getProductionDslName)(currProd));
            });
            (0, forEach_12.default)(option, function(currProd) {
              _this.computeLookaheadFunc(currRule, currProd.idx, keys_12.OPTION_IDX, "Option", currProd.maxLookahead, (0, gast_2.getProductionDslName)(currProd));
            });
            (0, forEach_12.default)(repetitionMandatory, function(currProd) {
              _this.computeLookaheadFunc(currRule, currProd.idx, keys_12.AT_LEAST_ONE_IDX, "RepetitionMandatory", currProd.maxLookahead, (0, gast_2.getProductionDslName)(currProd));
            });
            (0, forEach_12.default)(repetitionMandatoryWithSeparator, function(currProd) {
              _this.computeLookaheadFunc(currRule, currProd.idx, keys_12.AT_LEAST_ONE_SEP_IDX, "RepetitionMandatoryWithSeparator", currProd.maxLookahead, (0, gast_2.getProductionDslName)(currProd));
            });
            (0, forEach_12.default)(repetitionWithSeparator, function(currProd) {
              _this.computeLookaheadFunc(currRule, currProd.idx, keys_12.MANY_SEP_IDX, "RepetitionWithSeparator", currProd.maxLookahead, (0, gast_2.getProductionDslName)(currProd));
            });
          });
        });
      };
      LooksAhead2.prototype.computeLookaheadFunc = function(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {
        var _this = this;
        this.TRACE_INIT("".concat(dslMethodName).concat(prodOccurrence === 0 ? "" : prodOccurrence), function() {
          var laFunc = _this.lookaheadStrategy.buildLookaheadForOptional({
            prodOccurrence,
            rule,
            maxLookahead: prodMaxLookahead || _this.maxLookahead,
            dynamicTokensEnabled: _this.dynamicTokensEnabled,
            prodType
          });
          var key = (0, keys_12.getKeyForAutomaticLookahead)(_this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);
          _this.setLaFuncCache(key, laFunc);
        });
      };
      LooksAhead2.prototype.getKeyForAutomaticLookahead = function(dslMethodIdx, occurrence) {
        var currRuleShortName = this.getLastExplicitRuleShortName();
        return (0, keys_12.getKeyForAutomaticLookahead)(currRuleShortName, dslMethodIdx, occurrence);
      };
      LooksAhead2.prototype.getLaFuncFromCache = function(key) {
        return this.lookAheadFuncsCache.get(key);
      };
      LooksAhead2.prototype.setLaFuncCache = function(key, value) {
        this.lookAheadFuncsCache.set(key, value);
      };
      return LooksAhead2;
    }()
  );
  looksahead.LooksAhead = LooksAhead;
  var DslMethodsCollectorVisitor = (
    /** @class */
    function(_super) {
      __extends2(DslMethodsCollectorVisitor2, _super);
      function DslMethodsCollectorVisitor2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dslMethods = {
          option: [],
          alternation: [],
          repetition: [],
          repetitionWithSeparator: [],
          repetitionMandatory: [],
          repetitionMandatoryWithSeparator: []
        };
        return _this;
      }
      DslMethodsCollectorVisitor2.prototype.reset = function() {
        this.dslMethods = {
          option: [],
          alternation: [],
          repetition: [],
          repetitionWithSeparator: [],
          repetitionMandatory: [],
          repetitionMandatoryWithSeparator: []
        };
      };
      DslMethodsCollectorVisitor2.prototype.visitOption = function(option) {
        this.dslMethods.option.push(option);
      };
      DslMethodsCollectorVisitor2.prototype.visitRepetitionWithSeparator = function(manySep) {
        this.dslMethods.repetitionWithSeparator.push(manySep);
      };
      DslMethodsCollectorVisitor2.prototype.visitRepetitionMandatory = function(atLeastOne) {
        this.dslMethods.repetitionMandatory.push(atLeastOne);
      };
      DslMethodsCollectorVisitor2.prototype.visitRepetitionMandatoryWithSeparator = function(atLeastOneSep) {
        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);
      };
      DslMethodsCollectorVisitor2.prototype.visitRepetition = function(many) {
        this.dslMethods.repetition.push(many);
      };
      DslMethodsCollectorVisitor2.prototype.visitAlternation = function(or) {
        this.dslMethods.alternation.push(or);
      };
      return DslMethodsCollectorVisitor2;
    }(gast_1.GAstVisitor)
  );
  var collectorVisitor = new DslMethodsCollectorVisitor();
  function collectMethods(rule) {
    collectorVisitor.reset();
    rule.accept(collectorVisitor);
    var dslMethods = collectorVisitor.dslMethods;
    collectorVisitor.reset();
    return dslMethods;
  }
  looksahead.collectMethods = collectMethods;
  return looksahead;
}
var tree_builder = {};
var cst = {};
var hasRequiredCst;
function requireCst() {
  if (hasRequiredCst)
    return cst;
  hasRequiredCst = 1;
  Object.defineProperty(cst, "__esModule", { value: true });
  cst.addNoneTerminalToCst = cst.addTerminalToCst = cst.setNodeLocationFull = cst.setNodeLocationOnlyOffset = void 0;
  function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {
    if (isNaN(currNodeLocation.startOffset) === true) {
      currNodeLocation.startOffset = newLocationInfo.startOffset;
      currNodeLocation.endOffset = newLocationInfo.endOffset;
    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {
      currNodeLocation.endOffset = newLocationInfo.endOffset;
    }
  }
  cst.setNodeLocationOnlyOffset = setNodeLocationOnlyOffset;
  function setNodeLocationFull(currNodeLocation, newLocationInfo) {
    if (isNaN(currNodeLocation.startOffset) === true) {
      currNodeLocation.startOffset = newLocationInfo.startOffset;
      currNodeLocation.startColumn = newLocationInfo.startColumn;
      currNodeLocation.startLine = newLocationInfo.startLine;
      currNodeLocation.endOffset = newLocationInfo.endOffset;
      currNodeLocation.endColumn = newLocationInfo.endColumn;
      currNodeLocation.endLine = newLocationInfo.endLine;
    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {
      currNodeLocation.endOffset = newLocationInfo.endOffset;
      currNodeLocation.endColumn = newLocationInfo.endColumn;
      currNodeLocation.endLine = newLocationInfo.endLine;
    }
  }
  cst.setNodeLocationFull = setNodeLocationFull;
  function addTerminalToCst(node, token, tokenTypeName) {
    if (node.children[tokenTypeName] === void 0) {
      node.children[tokenTypeName] = [token];
    } else {
      node.children[tokenTypeName].push(token);
    }
  }
  cst.addTerminalToCst = addTerminalToCst;
  function addNoneTerminalToCst(node, ruleName, ruleResult) {
    if (node.children[ruleName] === void 0) {
      node.children[ruleName] = [ruleResult];
    } else {
      node.children[ruleName].push(ruleResult);
    }
  }
  cst.addNoneTerminalToCst = addNoneTerminalToCst;
  return cst;
}
var cst_visitor = {};
var lang_extensions = {};
var hasRequiredLang_extensions;
function requireLang_extensions() {
  if (hasRequiredLang_extensions)
    return lang_extensions;
  hasRequiredLang_extensions = 1;
  Object.defineProperty(lang_extensions, "__esModule", { value: true });
  lang_extensions.defineNameProp = void 0;
  var NAME = "name";
  function defineNameProp(obj, nameValue) {
    Object.defineProperty(obj, NAME, {
      enumerable: false,
      configurable: true,
      writable: false,
      value: nameValue
    });
  }
  lang_extensions.defineNameProp = defineNameProp;
  return lang_extensions;
}
var hasRequiredCst_visitor;
function requireCst_visitor() {
  if (hasRequiredCst_visitor)
    return cst_visitor;
  hasRequiredCst_visitor = 1;
  (function(exports) {
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var compact_12 = __importDefault(requireCompact());
    var isArray_12 = __importDefault(requireIsArray());
    var map_12 = __importDefault(requireMap());
    var forEach_12 = __importDefault(requireForEach());
    var filter_12 = __importDefault(requireFilter());
    var keys_12 = __importDefault(requireKeys$1());
    var isFunction_12 = __importDefault(requireIsFunction());
    var isUndefined_12 = __importDefault(requireIsUndefined());
    var lang_extensions_1 = requireLang_extensions();
    function defaultVisit(ctx, param) {
      var childrenNames = (0, keys_12.default)(ctx);
      var childrenNamesLength = childrenNames.length;
      for (var i = 0; i < childrenNamesLength; i++) {
        var currChildName = childrenNames[i];
        var currChildArray = ctx[currChildName];
        var currChildArrayLength = currChildArray.length;
        for (var j2 = 0; j2 < currChildArrayLength; j2++) {
          var currChild = currChildArray[j2];
          if (currChild.tokenTypeIdx === void 0) {
            this[currChild.name](currChild.children, param);
          }
        }
      }
    }
    exports.defaultVisit = defaultVisit;
    function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {
      var derivedConstructor = function() {
      };
      (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + "BaseSemantics");
      var semanticProto = {
        visit: function(cstNode, param) {
          if ((0, isArray_12.default)(cstNode)) {
            cstNode = cstNode[0];
          }
          if ((0, isUndefined_12.default)(cstNode)) {
            return void 0;
          }
          return this[cstNode.name](cstNode.children, param);
        },
        validateVisitor: function() {
          var semanticDefinitionErrors = validateVisitor(this, ruleNames);
          if (!(0, isEmpty_12.default)(semanticDefinitionErrors)) {
            var errorMessages = (0, map_12.default)(semanticDefinitionErrors, function(currDefError) {
              return currDefError.msg;
            });
            throw Error("Errors Detected in CST Visitor <".concat(this.constructor.name, ">:\n	") + "".concat(errorMessages.join("\n\n").replace(/\n/g, "\n	")));
          }
        }
      };
      derivedConstructor.prototype = semanticProto;
      derivedConstructor.prototype.constructor = derivedConstructor;
      derivedConstructor._RULE_NAMES = ruleNames;
      return derivedConstructor;
    }
    exports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;
    function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {
      var derivedConstructor = function() {
      };
      (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + "BaseSemanticsWithDefaults");
      var withDefaultsProto = Object.create(baseConstructor.prototype);
      (0, forEach_12.default)(ruleNames, function(ruleName) {
        withDefaultsProto[ruleName] = defaultVisit;
      });
      derivedConstructor.prototype = withDefaultsProto;
      derivedConstructor.prototype.constructor = derivedConstructor;
      return derivedConstructor;
    }
    exports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;
    var CstVisitorDefinitionError;
    (function(CstVisitorDefinitionError2) {
      CstVisitorDefinitionError2[CstVisitorDefinitionError2["REDUNDANT_METHOD"] = 0] = "REDUNDANT_METHOD";
      CstVisitorDefinitionError2[CstVisitorDefinitionError2["MISSING_METHOD"] = 1] = "MISSING_METHOD";
    })(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));
    function validateVisitor(visitorInstance, ruleNames) {
      var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);
      return missingErrors;
    }
    exports.validateVisitor = validateVisitor;
    function validateMissingCstMethods(visitorInstance, ruleNames) {
      var missingRuleNames = (0, filter_12.default)(ruleNames, function(currRuleName) {
        return (0, isFunction_12.default)(visitorInstance[currRuleName]) === false;
      });
      var errors2 = (0, map_12.default)(missingRuleNames, function(currRuleName) {
        return {
          msg: "Missing visitor method: <".concat(currRuleName, "> on ").concat(visitorInstance.constructor.name, " CST Visitor."),
          type: CstVisitorDefinitionError.MISSING_METHOD,
          methodName: currRuleName
        };
      });
      return (0, compact_12.default)(errors2);
    }
    exports.validateMissingCstMethods = validateMissingCstMethods;
  })(cst_visitor);
  return cst_visitor;
}
var hasRequiredTree_builder;
function requireTree_builder() {
  if (hasRequiredTree_builder)
    return tree_builder;
  hasRequiredTree_builder = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(tree_builder, "__esModule", { value: true });
  tree_builder.TreeBuilder = void 0;
  var cst_1 = requireCst();
  var noop_12 = __importDefault(requireNoop());
  var has_12 = __importDefault(requireHas());
  var keys_12 = __importDefault(requireKeys$1());
  var isUndefined_12 = __importDefault(requireIsUndefined());
  var cst_visitor_1 = requireCst_visitor();
  var parser_1 = requireParser$1();
  var TreeBuilder = (
    /** @class */
    function() {
      function TreeBuilder2() {
      }
      TreeBuilder2.prototype.initTreeBuilder = function(config2) {
        this.CST_STACK = [];
        this.outputCst = config2.outputCst;
        this.nodeLocationTracking = (0, has_12.default)(config2, "nodeLocationTracking") ? config2.nodeLocationTracking : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;
        if (!this.outputCst) {
          this.cstInvocationStateUpdate = noop_12.default;
          this.cstFinallyStateUpdate = noop_12.default;
          this.cstPostTerminal = noop_12.default;
          this.cstPostNonTerminal = noop_12.default;
          this.cstPostRule = noop_12.default;
        } else {
          if (/full/i.test(this.nodeLocationTracking)) {
            if (this.recoveryEnabled) {
              this.setNodeLocationFromToken = cst_1.setNodeLocationFull;
              this.setNodeLocationFromNode = cst_1.setNodeLocationFull;
              this.cstPostRule = noop_12.default;
              this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;
            } else {
              this.setNodeLocationFromToken = noop_12.default;
              this.setNodeLocationFromNode = noop_12.default;
              this.cstPostRule = this.cstPostRuleFull;
              this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;
            }
          } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {
            if (this.recoveryEnabled) {
              this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;
              this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;
              this.cstPostRule = noop_12.default;
              this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;
            } else {
              this.setNodeLocationFromToken = noop_12.default;
              this.setNodeLocationFromNode = noop_12.default;
              this.cstPostRule = this.cstPostRuleOnlyOffset;
              this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;
            }
          } else if (/none/i.test(this.nodeLocationTracking)) {
            this.setNodeLocationFromToken = noop_12.default;
            this.setNodeLocationFromNode = noop_12.default;
            this.cstPostRule = noop_12.default;
            this.setInitialNodeLocation = noop_12.default;
          } else {
            throw Error('Invalid <nodeLocationTracking> config option: "'.concat(config2.nodeLocationTracking, '"'));
          }
        }
      };
      TreeBuilder2.prototype.setInitialNodeLocationOnlyOffsetRecovery = function(cstNode) {
        cstNode.location = {
          startOffset: NaN,
          endOffset: NaN
        };
      };
      TreeBuilder2.prototype.setInitialNodeLocationOnlyOffsetRegular = function(cstNode) {
        cstNode.location = {
          // without error recovery the starting Location of a new CstNode is guaranteed
          // To be the next Token's startOffset (for valid inputs).
          // For invalid inputs there won't be any CSTOutput so this potential
          // inaccuracy does not matter
          startOffset: this.LA(1).startOffset,
          endOffset: NaN
        };
      };
      TreeBuilder2.prototype.setInitialNodeLocationFullRecovery = function(cstNode) {
        cstNode.location = {
          startOffset: NaN,
          startLine: NaN,
          startColumn: NaN,
          endOffset: NaN,
          endLine: NaN,
          endColumn: NaN
        };
      };
      TreeBuilder2.prototype.setInitialNodeLocationFullRegular = function(cstNode) {
        var nextToken = this.LA(1);
        cstNode.location = {
          startOffset: nextToken.startOffset,
          startLine: nextToken.startLine,
          startColumn: nextToken.startColumn,
          endOffset: NaN,
          endLine: NaN,
          endColumn: NaN
        };
      };
      TreeBuilder2.prototype.cstInvocationStateUpdate = function(fullRuleName) {
        var cstNode = {
          name: fullRuleName,
          children: /* @__PURE__ */ Object.create(null)
        };
        this.setInitialNodeLocation(cstNode);
        this.CST_STACK.push(cstNode);
      };
      TreeBuilder2.prototype.cstFinallyStateUpdate = function() {
        this.CST_STACK.pop();
      };
      TreeBuilder2.prototype.cstPostRuleFull = function(ruleCstNode) {
        var prevToken = this.LA(0);
        var loc = ruleCstNode.location;
        if (loc.startOffset <= prevToken.startOffset === true) {
          loc.endOffset = prevToken.endOffset;
          loc.endLine = prevToken.endLine;
          loc.endColumn = prevToken.endColumn;
        } else {
          loc.startOffset = NaN;
          loc.startLine = NaN;
          loc.startColumn = NaN;
        }
      };
      TreeBuilder2.prototype.cstPostRuleOnlyOffset = function(ruleCstNode) {
        var prevToken = this.LA(0);
        var loc = ruleCstNode.location;
        if (loc.startOffset <= prevToken.startOffset === true) {
          loc.endOffset = prevToken.endOffset;
        } else {
          loc.startOffset = NaN;
        }
      };
      TreeBuilder2.prototype.cstPostTerminal = function(key, consumedToken) {
        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];
        (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key);
        this.setNodeLocationFromToken(rootCst.location, consumedToken);
      };
      TreeBuilder2.prototype.cstPostNonTerminal = function(ruleCstResult, ruleName) {
        var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];
        (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);
        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);
      };
      TreeBuilder2.prototype.getBaseCstVisitorConstructor = function() {
        if ((0, isUndefined_12.default)(this.baseCstVisitorConstructor)) {
          var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_12.default)(this.gastProductionsCache));
          this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;
          return newBaseCstVisitorConstructor;
        }
        return this.baseCstVisitorConstructor;
      };
      TreeBuilder2.prototype.getBaseCstVisitorConstructorWithDefaults = function() {
        if ((0, isUndefined_12.default)(this.baseCstVisitorWithDefaultsConstructor)) {
          var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_12.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());
          this.baseCstVisitorWithDefaultsConstructor = newConstructor;
          return newConstructor;
        }
        return this.baseCstVisitorWithDefaultsConstructor;
      };
      TreeBuilder2.prototype.getLastExplicitRuleShortName = function() {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 1];
      };
      TreeBuilder2.prototype.getPreviousExplicitRuleShortName = function() {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 2];
      };
      TreeBuilder2.prototype.getLastExplicitRuleOccurrenceIndex = function() {
        var occurrenceStack = this.RULE_OCCURRENCE_STACK;
        return occurrenceStack[occurrenceStack.length - 1];
      };
      return TreeBuilder2;
    }()
  );
  tree_builder.TreeBuilder = TreeBuilder;
  return tree_builder;
}
var lexer_adapter = {};
var hasRequiredLexer_adapter;
function requireLexer_adapter() {
  if (hasRequiredLexer_adapter)
    return lexer_adapter;
  hasRequiredLexer_adapter = 1;
  Object.defineProperty(lexer_adapter, "__esModule", { value: true });
  lexer_adapter.LexerAdapter = void 0;
  var parser_1 = requireParser$1();
  var LexerAdapter = (
    /** @class */
    function() {
      function LexerAdapter2() {
      }
      LexerAdapter2.prototype.initLexerAdapter = function() {
        this.tokVector = [];
        this.tokVectorLength = 0;
        this.currIdx = -1;
      };
      Object.defineProperty(LexerAdapter2.prototype, "input", {
        get: function() {
          return this.tokVector;
        },
        set: function(newInput) {
          if (this.selfAnalysisDone !== true) {
            throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
          }
          this.reset();
          this.tokVector = newInput;
          this.tokVectorLength = newInput.length;
        },
        enumerable: false,
        configurable: true
      });
      LexerAdapter2.prototype.SKIP_TOKEN = function() {
        if (this.currIdx <= this.tokVector.length - 2) {
          this.consumeToken();
          return this.LA(1);
        } else {
          return parser_1.END_OF_FILE;
        }
      };
      LexerAdapter2.prototype.LA = function(howMuch) {
        var soughtIdx = this.currIdx + howMuch;
        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {
          return parser_1.END_OF_FILE;
        } else {
          return this.tokVector[soughtIdx];
        }
      };
      LexerAdapter2.prototype.consumeToken = function() {
        this.currIdx++;
      };
      LexerAdapter2.prototype.exportLexerState = function() {
        return this.currIdx;
      };
      LexerAdapter2.prototype.importLexerState = function(newState) {
        this.currIdx = newState;
      };
      LexerAdapter2.prototype.resetLexerState = function() {
        this.currIdx = -1;
      };
      LexerAdapter2.prototype.moveToTerminatedState = function() {
        this.currIdx = this.tokVector.length - 1;
      };
      LexerAdapter2.prototype.getLexerPosition = function() {
        return this.exportLexerState();
      };
      return LexerAdapter2;
    }()
  );
  lexer_adapter.LexerAdapter = LexerAdapter;
  return lexer_adapter;
}
var recognizer_api = {};
var hasRequiredRecognizer_api;
function requireRecognizer_api() {
  if (hasRequiredRecognizer_api)
    return recognizer_api;
  hasRequiredRecognizer_api = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(recognizer_api, "__esModule", { value: true });
  recognizer_api.RecognizerApi = void 0;
  var values_12 = __importDefault(requireValues());
  var includes_12 = __importDefault(requireIncludes());
  var exceptions_public_1 = requireExceptions_public();
  var parser_1 = requireParser$1();
  var errors_public_1 = requireErrors_public();
  var checks_1 = requireChecks();
  var gast_1 = requireApi$2();
  var RecognizerApi = (
    /** @class */
    function() {
      function RecognizerApi2() {
      }
      RecognizerApi2.prototype.ACTION = function(impl) {
        return impl.call(this);
      };
      RecognizerApi2.prototype.consume = function(idx, tokType, options) {
        return this.consumeInternal(tokType, idx, options);
      };
      RecognizerApi2.prototype.subrule = function(idx, ruleToCall, options) {
        return this.subruleInternal(ruleToCall, idx, options);
      };
      RecognizerApi2.prototype.option = function(idx, actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, idx);
      };
      RecognizerApi2.prototype.or = function(idx, altsOrOpts) {
        return this.orInternal(altsOrOpts, idx);
      };
      RecognizerApi2.prototype.many = function(idx, actionORMethodDef) {
        return this.manyInternal(idx, actionORMethodDef);
      };
      RecognizerApi2.prototype.atLeastOne = function(idx, actionORMethodDef) {
        return this.atLeastOneInternal(idx, actionORMethodDef);
      };
      RecognizerApi2.prototype.CONSUME = function(tokType, options) {
        return this.consumeInternal(tokType, 0, options);
      };
      RecognizerApi2.prototype.CONSUME1 = function(tokType, options) {
        return this.consumeInternal(tokType, 1, options);
      };
      RecognizerApi2.prototype.CONSUME2 = function(tokType, options) {
        return this.consumeInternal(tokType, 2, options);
      };
      RecognizerApi2.prototype.CONSUME3 = function(tokType, options) {
        return this.consumeInternal(tokType, 3, options);
      };
      RecognizerApi2.prototype.CONSUME4 = function(tokType, options) {
        return this.consumeInternal(tokType, 4, options);
      };
      RecognizerApi2.prototype.CONSUME5 = function(tokType, options) {
        return this.consumeInternal(tokType, 5, options);
      };
      RecognizerApi2.prototype.CONSUME6 = function(tokType, options) {
        return this.consumeInternal(tokType, 6, options);
      };
      RecognizerApi2.prototype.CONSUME7 = function(tokType, options) {
        return this.consumeInternal(tokType, 7, options);
      };
      RecognizerApi2.prototype.CONSUME8 = function(tokType, options) {
        return this.consumeInternal(tokType, 8, options);
      };
      RecognizerApi2.prototype.CONSUME9 = function(tokType, options) {
        return this.consumeInternal(tokType, 9, options);
      };
      RecognizerApi2.prototype.SUBRULE = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 0, options);
      };
      RecognizerApi2.prototype.SUBRULE1 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 1, options);
      };
      RecognizerApi2.prototype.SUBRULE2 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 2, options);
      };
      RecognizerApi2.prototype.SUBRULE3 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 3, options);
      };
      RecognizerApi2.prototype.SUBRULE4 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 4, options);
      };
      RecognizerApi2.prototype.SUBRULE5 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 5, options);
      };
      RecognizerApi2.prototype.SUBRULE6 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 6, options);
      };
      RecognizerApi2.prototype.SUBRULE7 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 7, options);
      };
      RecognizerApi2.prototype.SUBRULE8 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 8, options);
      };
      RecognizerApi2.prototype.SUBRULE9 = function(ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 9, options);
      };
      RecognizerApi2.prototype.OPTION = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 0);
      };
      RecognizerApi2.prototype.OPTION1 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 1);
      };
      RecognizerApi2.prototype.OPTION2 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 2);
      };
      RecognizerApi2.prototype.OPTION3 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 3);
      };
      RecognizerApi2.prototype.OPTION4 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 4);
      };
      RecognizerApi2.prototype.OPTION5 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 5);
      };
      RecognizerApi2.prototype.OPTION6 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 6);
      };
      RecognizerApi2.prototype.OPTION7 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 7);
      };
      RecognizerApi2.prototype.OPTION8 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 8);
      };
      RecognizerApi2.prototype.OPTION9 = function(actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 9);
      };
      RecognizerApi2.prototype.OR = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 0);
      };
      RecognizerApi2.prototype.OR1 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 1);
      };
      RecognizerApi2.prototype.OR2 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 2);
      };
      RecognizerApi2.prototype.OR3 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 3);
      };
      RecognizerApi2.prototype.OR4 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 4);
      };
      RecognizerApi2.prototype.OR5 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 5);
      };
      RecognizerApi2.prototype.OR6 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 6);
      };
      RecognizerApi2.prototype.OR7 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 7);
      };
      RecognizerApi2.prototype.OR8 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 8);
      };
      RecognizerApi2.prototype.OR9 = function(altsOrOpts) {
        return this.orInternal(altsOrOpts, 9);
      };
      RecognizerApi2.prototype.MANY = function(actionORMethodDef) {
        this.manyInternal(0, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY1 = function(actionORMethodDef) {
        this.manyInternal(1, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY2 = function(actionORMethodDef) {
        this.manyInternal(2, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY3 = function(actionORMethodDef) {
        this.manyInternal(3, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY4 = function(actionORMethodDef) {
        this.manyInternal(4, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY5 = function(actionORMethodDef) {
        this.manyInternal(5, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY6 = function(actionORMethodDef) {
        this.manyInternal(6, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY7 = function(actionORMethodDef) {
        this.manyInternal(7, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY8 = function(actionORMethodDef) {
        this.manyInternal(8, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY9 = function(actionORMethodDef) {
        this.manyInternal(9, actionORMethodDef);
      };
      RecognizerApi2.prototype.MANY_SEP = function(options) {
        this.manySepFirstInternal(0, options);
      };
      RecognizerApi2.prototype.MANY_SEP1 = function(options) {
        this.manySepFirstInternal(1, options);
      };
      RecognizerApi2.prototype.MANY_SEP2 = function(options) {
        this.manySepFirstInternal(2, options);
      };
      RecognizerApi2.prototype.MANY_SEP3 = function(options) {
        this.manySepFirstInternal(3, options);
      };
      RecognizerApi2.prototype.MANY_SEP4 = function(options) {
        this.manySepFirstInternal(4, options);
      };
      RecognizerApi2.prototype.MANY_SEP5 = function(options) {
        this.manySepFirstInternal(5, options);
      };
      RecognizerApi2.prototype.MANY_SEP6 = function(options) {
        this.manySepFirstInternal(6, options);
      };
      RecognizerApi2.prototype.MANY_SEP7 = function(options) {
        this.manySepFirstInternal(7, options);
      };
      RecognizerApi2.prototype.MANY_SEP8 = function(options) {
        this.manySepFirstInternal(8, options);
      };
      RecognizerApi2.prototype.MANY_SEP9 = function(options) {
        this.manySepFirstInternal(9, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE = function(actionORMethodDef) {
        this.atLeastOneInternal(0, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE1 = function(actionORMethodDef) {
        return this.atLeastOneInternal(1, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE2 = function(actionORMethodDef) {
        this.atLeastOneInternal(2, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE3 = function(actionORMethodDef) {
        this.atLeastOneInternal(3, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE4 = function(actionORMethodDef) {
        this.atLeastOneInternal(4, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE5 = function(actionORMethodDef) {
        this.atLeastOneInternal(5, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE6 = function(actionORMethodDef) {
        this.atLeastOneInternal(6, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE7 = function(actionORMethodDef) {
        this.atLeastOneInternal(7, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE8 = function(actionORMethodDef) {
        this.atLeastOneInternal(8, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE9 = function(actionORMethodDef) {
        this.atLeastOneInternal(9, actionORMethodDef);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP = function(options) {
        this.atLeastOneSepFirstInternal(0, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP1 = function(options) {
        this.atLeastOneSepFirstInternal(1, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP2 = function(options) {
        this.atLeastOneSepFirstInternal(2, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP3 = function(options) {
        this.atLeastOneSepFirstInternal(3, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP4 = function(options) {
        this.atLeastOneSepFirstInternal(4, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP5 = function(options) {
        this.atLeastOneSepFirstInternal(5, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP6 = function(options) {
        this.atLeastOneSepFirstInternal(6, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP7 = function(options) {
        this.atLeastOneSepFirstInternal(7, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP8 = function(options) {
        this.atLeastOneSepFirstInternal(8, options);
      };
      RecognizerApi2.prototype.AT_LEAST_ONE_SEP9 = function(options) {
        this.atLeastOneSepFirstInternal(9, options);
      };
      RecognizerApi2.prototype.RULE = function(name2, implementation, config2) {
        if (config2 === void 0) {
          config2 = parser_1.DEFAULT_RULE_CONFIG;
        }
        if ((0, includes_12.default)(this.definedRulesNames, name2)) {
          var errMsg = errors_public_1.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({
            topLevelRule: name2,
            grammarName: this.className
          });
          var error = {
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
            ruleName: name2
          };
          this.definitionErrors.push(error);
        }
        this.definedRulesNames.push(name2);
        var ruleImplementation = this.defineRule(name2, implementation, config2);
        this[name2] = ruleImplementation;
        return ruleImplementation;
      };
      RecognizerApi2.prototype.OVERRIDE_RULE = function(name2, impl, config2) {
        if (config2 === void 0) {
          config2 = parser_1.DEFAULT_RULE_CONFIG;
        }
        var ruleErrors = (0, checks_1.validateRuleIsOverridden)(name2, this.definedRulesNames, this.className);
        this.definitionErrors = this.definitionErrors.concat(ruleErrors);
        var ruleImplementation = this.defineRule(name2, impl, config2);
        this[name2] = ruleImplementation;
        return ruleImplementation;
      };
      RecognizerApi2.prototype.BACKTRACK = function(grammarRule, args) {
        return function() {
          this.isBackTrackingStack.push(1);
          var orgState = this.saveRecogState();
          try {
            grammarRule.apply(this, args);
            return true;
          } catch (e) {
            if ((0, exceptions_public_1.isRecognitionException)(e)) {
              return false;
            } else {
              throw e;
            }
          } finally {
            this.reloadRecogState(orgState);
            this.isBackTrackingStack.pop();
          }
        };
      };
      RecognizerApi2.prototype.getGAstProductions = function() {
        return this.gastProductionsCache;
      };
      RecognizerApi2.prototype.getSerializedGastProductions = function() {
        return (0, gast_1.serializeGrammar)((0, values_12.default)(this.gastProductionsCache));
      };
      return RecognizerApi2;
    }()
  );
  recognizer_api.RecognizerApi = RecognizerApi;
  return recognizer_api;
}
var recognizer_engine = {};
var hasRequiredRecognizer_engine;
function requireRecognizer_engine() {
  if (hasRequiredRecognizer_engine)
    return recognizer_engine;
  hasRequiredRecognizer_engine = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(recognizer_engine, "__esModule", { value: true });
  recognizer_engine.RecognizerEngine = void 0;
  var isEmpty_12 = __importDefault(requireIsEmpty());
  var isArray_12 = __importDefault(requireIsArray());
  var flatten_12 = __importDefault(requireFlatten());
  var every_12 = __importDefault(requireEvery());
  var uniq_12 = __importDefault(requireUniq());
  var isObject_12 = __importDefault(requireIsObject());
  var has_12 = __importDefault(requireHas());
  var values_12 = __importDefault(requireValues());
  var reduce_12 = __importDefault(requireReduce());
  var clone_12 = __importDefault(requireClone());
  var keys_12 = requireKeys();
  var exceptions_public_1 = requireExceptions_public();
  var lookahead_1 = requireLookahead();
  var interpreter_1 = requireInterpreter();
  var parser_1 = requireParser$1();
  var recoverable_1 = requireRecoverable();
  var tokens_public_1 = requireTokens_public();
  var tokens_1 = requireTokens();
  var RecognizerEngine = (
    /** @class */
    function() {
      function RecognizerEngine2() {
      }
      RecognizerEngine2.prototype.initRecognizerEngine = function(tokenVocabulary, config2) {
        this.className = this.constructor.name;
        this.shortRuleNameToFull = {};
        this.fullRuleNameToShort = {};
        this.ruleShortNameIdx = 256;
        this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;
        this.subruleIdx = 0;
        this.definedRulesNames = [];
        this.tokensMap = {};
        this.isBackTrackingStack = [];
        this.RULE_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
        this.gastProductionsCache = {};
        if ((0, has_12.default)(config2, "serializedGrammar")) {
          throw Error("The Parser's configuration can no longer contain a <serializedGrammar> property.\n	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\n	For Further details.");
        }
        if ((0, isArray_12.default)(tokenVocabulary)) {
          if ((0, isEmpty_12.default)(tokenVocabulary)) {
            throw Error("A Token Vocabulary cannot be empty.\n	Note that the first argument for the parser constructor\n	is no longer a Token vector (since v4.0).");
          }
          if (typeof tokenVocabulary[0].startOffset === "number") {
            throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\n	For Further details.");
          }
        }
        if ((0, isArray_12.default)(tokenVocabulary)) {
          this.tokensMap = (0, reduce_12.default)(tokenVocabulary, function(acc, tokType) {
            acc[tokType.name] = tokType;
            return acc;
          }, {});
        } else if ((0, has_12.default)(tokenVocabulary, "modes") && (0, every_12.default)((0, flatten_12.default)((0, values_12.default)(tokenVocabulary.modes)), tokens_1.isTokenType)) {
          var allTokenTypes_1 = (0, flatten_12.default)((0, values_12.default)(tokenVocabulary.modes));
          var uniqueTokens = (0, uniq_12.default)(allTokenTypes_1);
          this.tokensMap = (0, reduce_12.default)(uniqueTokens, function(acc, tokType) {
            acc[tokType.name] = tokType;
            return acc;
          }, {});
        } else if ((0, isObject_12.default)(tokenVocabulary)) {
          this.tokensMap = (0, clone_12.default)(tokenVocabulary);
        } else {
          throw new Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
        }
        this.tokensMap["EOF"] = tokens_public_1.EOF;
        var allTokenTypes = (0, has_12.default)(tokenVocabulary, "modes") ? (0, flatten_12.default)((0, values_12.default)(tokenVocabulary.modes)) : (0, values_12.default)(tokenVocabulary);
        var noTokenCategoriesUsed = (0, every_12.default)(allTokenTypes, function(tokenConstructor) {
          return (0, isEmpty_12.default)(tokenConstructor.categoryMatches);
        });
        this.tokenMatcher = noTokenCategoriesUsed ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;
        (0, tokens_1.augmentTokenTypes)((0, values_12.default)(this.tokensMap));
      };
      RecognizerEngine2.prototype.defineRule = function(ruleName, impl, config2) {
        if (this.selfAnalysisDone) {
          throw Error("Grammar rule <".concat(ruleName, "> may not be defined after the 'performSelfAnalysis' method has been called'\n") + "Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");
        }
        var resyncEnabled = (0, has_12.default)(config2, "resyncEnabled") ? config2.resyncEnabled : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;
        var recoveryValueFunc = (0, has_12.default)(config2, "recoveryValueFunc") ? config2.recoveryValueFunc : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc;
        var shortName = this.ruleShortNameIdx << keys_12.BITS_FOR_METHOD_TYPE + keys_12.BITS_FOR_OCCURRENCE_IDX;
        this.ruleShortNameIdx++;
        this.shortRuleNameToFull[shortName] = ruleName;
        this.fullRuleNameToShort[ruleName] = shortName;
        var invokeRuleWithTry;
        if (this.outputCst === true) {
          invokeRuleWithTry = function invokeRuleWithTry2() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            try {
              this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);
              impl.apply(this, args);
              var cst2 = this.CST_STACK[this.CST_STACK.length - 1];
              this.cstPostRule(cst2);
              return cst2;
            } catch (e) {
              return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);
            } finally {
              this.ruleFinallyStateUpdate();
            }
          };
        } else {
          invokeRuleWithTry = function invokeRuleWithTryCst() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            try {
              this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);
              return impl.apply(this, args);
            } catch (e) {
              return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);
            } finally {
              this.ruleFinallyStateUpdate();
            }
          };
        }
        var wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName, originalGrammarAction: impl });
        return wrappedGrammarRule;
      };
      RecognizerEngine2.prototype.invokeRuleCatch = function(e, resyncEnabledConfig, recoveryValueFunc) {
        var isFirstInvokedRule = this.RULE_STACK.length === 1;
        var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;
        if ((0, exceptions_public_1.isRecognitionException)(e)) {
          var recogError = e;
          if (reSyncEnabled) {
            var reSyncTokType = this.findReSyncTokenType();
            if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {
              recogError.resyncedTokens = this.reSyncTo(reSyncTokType);
              if (this.outputCst) {
                var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                partialCstResult.recoveredNode = true;
                return partialCstResult;
              } else {
                return recoveryValueFunc();
              }
            } else {
              if (this.outputCst) {
                var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                partialCstResult.recoveredNode = true;
                recogError.partialCstResult = partialCstResult;
              }
              throw recogError;
            }
          } else if (isFirstInvokedRule) {
            this.moveToTerminatedState();
            return recoveryValueFunc();
          } else {
            throw recogError;
          }
        } else {
          throw e;
        }
      };
      RecognizerEngine2.prototype.optionInternal = function(actionORMethodDef, occurrence) {
        var key = this.getKeyForAutomaticLookahead(keys_12.OPTION_IDX, occurrence);
        return this.optionInternalLogic(actionORMethodDef, occurrence, key);
      };
      RecognizerEngine2.prototype.optionInternalLogic = function(actionORMethodDef, occurrence, key) {
        var _this = this;
        var lookAheadFunc = this.getLaFuncFromCache(key);
        var action;
        if (typeof actionORMethodDef !== "function") {
          action = actionORMethodDef.DEF;
          var predicate_1 = actionORMethodDef.GATE;
          if (predicate_1 !== void 0) {
            var orgLookaheadFunction_1 = lookAheadFunc;
            lookAheadFunc = function() {
              return predicate_1.call(_this) && orgLookaheadFunction_1.call(_this);
            };
          }
        } else {
          action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
          return action.call(this);
        }
        return void 0;
      };
      RecognizerEngine2.prototype.atLeastOneInternal = function(prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_12.AT_LEAST_ONE_IDX, prodOccurrence);
        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);
      };
      RecognizerEngine2.prototype.atLeastOneInternalLogic = function(prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookAheadFunc = this.getLaFuncFromCache(key);
        var action;
        if (typeof actionORMethodDef !== "function") {
          action = actionORMethodDef.DEF;
          var predicate_2 = actionORMethodDef.GATE;
          if (predicate_2 !== void 0) {
            var orgLookaheadFunction_2 = lookAheadFunc;
            lookAheadFunc = function() {
              return predicate_2.call(_this) && orgLookaheadFunction_2.call(_this);
            };
          }
        } else {
          action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
          var notStuck = this.doSingleRepetition(action);
          while (lookAheadFunc.call(this) === true && notStuck === true) {
            notStuck = this.doSingleRepetition(action);
          }
        } else {
          throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);
        }
        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_12.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);
      };
      RecognizerEngine2.prototype.atLeastOneSepFirstInternal = function(prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_12.AT_LEAST_ONE_SEP_IDX, prodOccurrence);
        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
      };
      RecognizerEngine2.prototype.atLeastOneSepFirstInternalLogic = function(prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);
        if (firstIterationLookaheadFunc.call(this) === true) {
          action.call(this);
          var separatorLookAheadFunc = function() {
            return _this.tokenMatcher(_this.LA(1), separator);
          };
          while (this.tokenMatcher(this.LA(1), separator) === true) {
            this.CONSUME(separator);
            action.call(this);
          }
          this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
            prodOccurrence,
            separator,
            separatorLookAheadFunc,
            action,
            interpreter_1.NextTerminalAfterAtLeastOneSepWalker
          ], separatorLookAheadFunc, keys_12.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);
        } else {
          throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);
        }
      };
      RecognizerEngine2.prototype.manyInternal = function(prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_12.MANY_IDX, prodOccurrence);
        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);
      };
      RecognizerEngine2.prototype.manyInternalLogic = function(prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookaheadFunction = this.getLaFuncFromCache(key);
        var action;
        if (typeof actionORMethodDef !== "function") {
          action = actionORMethodDef.DEF;
          var predicate_3 = actionORMethodDef.GATE;
          if (predicate_3 !== void 0) {
            var orgLookaheadFunction_3 = lookaheadFunction;
            lookaheadFunction = function() {
              return predicate_3.call(_this) && orgLookaheadFunction_3.call(_this);
            };
          }
        } else {
          action = actionORMethodDef;
        }
        var notStuck = true;
        while (lookaheadFunction.call(this) === true && notStuck === true) {
          notStuck = this.doSingleRepetition(action);
        }
        this.attemptInRepetitionRecovery(
          this.manyInternal,
          [prodOccurrence, actionORMethodDef],
          lookaheadFunction,
          keys_12.MANY_IDX,
          prodOccurrence,
          interpreter_1.NextTerminalAfterManyWalker,
          // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
          // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
          // An infinite loop cannot occur as:
          // - Either the lookahead is guaranteed to consume something (Single Token Separator)
          // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
          notStuck
        );
      };
      RecognizerEngine2.prototype.manySepFirstInternal = function(prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_12.MANY_SEP_IDX, prodOccurrence);
        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
      };
      RecognizerEngine2.prototype.manySepFirstInternalLogic = function(prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLaFunc = this.getLaFuncFromCache(key);
        if (firstIterationLaFunc.call(this) === true) {
          action.call(this);
          var separatorLookAheadFunc = function() {
            return _this.tokenMatcher(_this.LA(1), separator);
          };
          while (this.tokenMatcher(this.LA(1), separator) === true) {
            this.CONSUME(separator);
            action.call(this);
          }
          this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
            prodOccurrence,
            separator,
            separatorLookAheadFunc,
            action,
            interpreter_1.NextTerminalAfterManySepWalker
          ], separatorLookAheadFunc, keys_12.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);
        }
      };
      RecognizerEngine2.prototype.repetitionSepSecondInternal = function(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {
        while (separatorLookAheadFunc()) {
          this.CONSUME(separator);
          action.call(this);
        }
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
          prodOccurrence,
          separator,
          separatorLookAheadFunc,
          action,
          nextTerminalAfterWalker
        ], separatorLookAheadFunc, keys_12.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);
      };
      RecognizerEngine2.prototype.doSingleRepetition = function(action) {
        var beforeIteration = this.getLexerPosition();
        action.call(this);
        var afterIteration = this.getLexerPosition();
        return afterIteration > beforeIteration;
      };
      RecognizerEngine2.prototype.orInternal = function(altsOrOpts, occurrence) {
        var laKey = this.getKeyForAutomaticLookahead(keys_12.OR_IDX, occurrence);
        var alts = (0, isArray_12.default)(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;
        var laFunc = this.getLaFuncFromCache(laKey);
        var altIdxToTake = laFunc.call(this, alts);
        if (altIdxToTake !== void 0) {
          var chosenAlternative = alts[altIdxToTake];
          return chosenAlternative.ALT.call(this);
        }
        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
      };
      RecognizerEngine2.prototype.ruleFinallyStateUpdate = function() {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        this.cstFinallyStateUpdate();
        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {
          var firstRedundantTok = this.LA(1);
          var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({
            firstRedundant: firstRedundantTok,
            ruleName: this.getCurrRuleFullName()
          });
          this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));
        }
      };
      RecognizerEngine2.prototype.subruleInternal = function(ruleToCall, idx, options) {
        var ruleResult;
        try {
          var args = options !== void 0 ? options.ARGS : void 0;
          this.subruleIdx = idx;
          ruleResult = ruleToCall.apply(this, args);
          this.cstPostNonTerminal(ruleResult, options !== void 0 && options.LABEL !== void 0 ? options.LABEL : ruleToCall.ruleName);
          return ruleResult;
        } catch (e) {
          throw this.subruleInternalError(e, options, ruleToCall.ruleName);
        }
      };
      RecognizerEngine2.prototype.subruleInternalError = function(e, options, ruleName) {
        if ((0, exceptions_public_1.isRecognitionException)(e) && e.partialCstResult !== void 0) {
          this.cstPostNonTerminal(e.partialCstResult, options !== void 0 && options.LABEL !== void 0 ? options.LABEL : ruleName);
          delete e.partialCstResult;
        }
        throw e;
      };
      RecognizerEngine2.prototype.consumeInternal = function(tokType, idx, options) {
        var consumedToken;
        try {
          var nextToken = this.LA(1);
          if (this.tokenMatcher(nextToken, tokType) === true) {
            this.consumeToken();
            consumedToken = nextToken;
          } else {
            this.consumeInternalError(tokType, nextToken, options);
          }
        } catch (eFromConsumption) {
          consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);
        }
        this.cstPostTerminal(options !== void 0 && options.LABEL !== void 0 ? options.LABEL : tokType.name, consumedToken);
        return consumedToken;
      };
      RecognizerEngine2.prototype.consumeInternalError = function(tokType, nextToken, options) {
        var msg;
        var previousToken = this.LA(0);
        if (options !== void 0 && options.ERR_MSG) {
          msg = options.ERR_MSG;
        } else {
          msg = this.errorMessageProvider.buildMismatchTokenMessage({
            expected: tokType,
            actual: nextToken,
            previous: previousToken,
            ruleName: this.getCurrRuleFullName()
          });
        }
        throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));
      };
      RecognizerEngine2.prototype.consumeInternalRecovery = function(tokType, idx, eFromConsumption) {
        if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
        eFromConsumption.name === "MismatchedTokenException" && !this.isBackTracking()) {
          var follows = this.getFollowsForInRuleRecovery(tokType, idx);
          try {
            return this.tryInRuleRecovery(tokType, follows);
          } catch (eFromInRuleRecovery) {
            if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {
              throw eFromConsumption;
            } else {
              throw eFromInRuleRecovery;
            }
          }
        } else {
          throw eFromConsumption;
        }
      };
      RecognizerEngine2.prototype.saveRecogState = function() {
        var savedErrors = this.errors;
        var savedRuleStack = (0, clone_12.default)(this.RULE_STACK);
        return {
          errors: savedErrors,
          lexerState: this.exportLexerState(),
          RULE_STACK: savedRuleStack,
          CST_STACK: this.CST_STACK
        };
      };
      RecognizerEngine2.prototype.reloadRecogState = function(newState) {
        this.errors = newState.errors;
        this.importLexerState(newState.lexerState);
        this.RULE_STACK = newState.RULE_STACK;
      };
      RecognizerEngine2.prototype.ruleInvocationStateUpdate = function(shortName, fullName, idxInCallingRule) {
        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);
        this.RULE_STACK.push(shortName);
        this.cstInvocationStateUpdate(fullName);
      };
      RecognizerEngine2.prototype.isBackTracking = function() {
        return this.isBackTrackingStack.length !== 0;
      };
      RecognizerEngine2.prototype.getCurrRuleFullName = function() {
        var shortName = this.getLastExplicitRuleShortName();
        return this.shortRuleNameToFull[shortName];
      };
      RecognizerEngine2.prototype.shortRuleNameToFullName = function(shortName) {
        return this.shortRuleNameToFull[shortName];
      };
      RecognizerEngine2.prototype.isAtEndOfInput = function() {
        return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);
      };
      RecognizerEngine2.prototype.reset = function() {
        this.resetLexerState();
        this.subruleIdx = 0;
        this.isBackTrackingStack = [];
        this.errors = [];
        this.RULE_STACK = [];
        this.CST_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
      };
      return RecognizerEngine2;
    }()
  );
  recognizer_engine.RecognizerEngine = RecognizerEngine;
  return recognizer_engine;
}
var error_handler = {};
var hasRequiredError_handler;
function requireError_handler() {
  if (hasRequiredError_handler)
    return error_handler;
  hasRequiredError_handler = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(error_handler, "__esModule", { value: true });
  error_handler.ErrorHandler = void 0;
  var exceptions_public_1 = requireExceptions_public();
  var has_12 = __importDefault(requireHas());
  var clone_12 = __importDefault(requireClone());
  var lookahead_1 = requireLookahead();
  var parser_1 = requireParser$1();
  var ErrorHandler = (
    /** @class */
    function() {
      function ErrorHandler2() {
      }
      ErrorHandler2.prototype.initErrorHandler = function(config2) {
        this._errors = [];
        this.errorMessageProvider = (0, has_12.default)(config2, "errorMessageProvider") ? config2.errorMessageProvider : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;
      };
      ErrorHandler2.prototype.SAVE_ERROR = function(error) {
        if ((0, exceptions_public_1.isRecognitionException)(error)) {
          error.context = {
            ruleStack: this.getHumanReadableRuleStack(),
            ruleOccurrenceStack: (0, clone_12.default)(this.RULE_OCCURRENCE_STACK)
          };
          this._errors.push(error);
          return error;
        } else {
          throw Error("Trying to save an Error which is not a RecognitionException");
        }
      };
      Object.defineProperty(ErrorHandler2.prototype, "errors", {
        get: function() {
          return (0, clone_12.default)(this._errors);
        },
        set: function(newErrors) {
          this._errors = newErrors;
        },
        enumerable: false,
        configurable: true
      });
      ErrorHandler2.prototype.raiseEarlyExitException = function(occurrence, prodType, userDefinedErrMsg) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[ruleName];
        var lookAheadPathsPerAlternative = (0, lookahead_1.getLookaheadPathsForOptionalProd)(occurrence, ruleGrammar, prodType, this.maxLookahead);
        var insideProdPaths = lookAheadPathsPerAlternative[0];
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
          actualTokens.push(this.LA(i));
        }
        var msg = this.errorMessageProvider.buildEarlyExitMessage({
          expectedIterationPaths: insideProdPaths,
          actual: actualTokens,
          previous: this.LA(0),
          customUserDescription: userDefinedErrMsg,
          ruleName
        });
        throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));
      };
      ErrorHandler2.prototype.raiseNoAltException = function(occurrence, errMsgTypes) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[ruleName];
        var lookAheadPathsPerAlternative = (0, lookahead_1.getLookaheadPathsForOr)(occurrence, ruleGrammar, this.maxLookahead);
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
          actualTokens.push(this.LA(i));
        }
        var previousToken = this.LA(0);
        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({
          expectedPathsPerAlt: lookAheadPathsPerAlternative,
          actual: actualTokens,
          previous: previousToken,
          customUserDescription: errMsgTypes,
          ruleName: this.getCurrRuleFullName()
        });
        throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));
      };
      return ErrorHandler2;
    }()
  );
  error_handler.ErrorHandler = ErrorHandler;
  return error_handler;
}
var context_assist = {};
var hasRequiredContext_assist;
function requireContext_assist() {
  if (hasRequiredContext_assist)
    return context_assist;
  hasRequiredContext_assist = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(context_assist, "__esModule", { value: true });
  context_assist.ContentAssist = void 0;
  var interpreter_1 = requireInterpreter();
  var first_1 = __importDefault(requireFirst());
  var isUndefined_12 = __importDefault(requireIsUndefined());
  var ContentAssist = (
    /** @class */
    function() {
      function ContentAssist2() {
      }
      ContentAssist2.prototype.initContentAssist = function() {
      };
      ContentAssist2.prototype.computeContentAssist = function(startRuleName, precedingInput) {
        var startRuleGast = this.gastProductionsCache[startRuleName];
        if ((0, isUndefined_12.default)(startRuleGast)) {
          throw Error("Rule ->".concat(startRuleName, "<- does not exist in this grammar."));
        }
        return (0, interpreter_1.nextPossibleTokensAfter)([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);
      };
      ContentAssist2.prototype.getNextPossibleTokenTypes = function(grammarPath) {
        var topRuleName = (0, first_1.default)(grammarPath.ruleStack);
        var gastProductions = this.getGAstProductions();
        var topProduction = gastProductions[topRuleName];
        var nextPossibleTokenTypes = new interpreter_1.NextAfterTokenWalker(topProduction, grammarPath).startWalking();
        return nextPossibleTokenTypes;
      };
      return ContentAssist2;
    }()
  );
  context_assist.ContentAssist = ContentAssist;
  return context_assist;
}
var gast_recorder = {};
var hasRequiredGast_recorder;
function requireGast_recorder() {
  if (hasRequiredGast_recorder)
    return gast_recorder;
  hasRequiredGast_recorder = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(gast_recorder, "__esModule", { value: true });
  gast_recorder.GastRecorder = void 0;
  var last_12 = __importDefault(requireLast());
  var isArray_12 = __importDefault(requireIsArray());
  var some_12 = __importDefault(requireSome());
  var forEach_12 = __importDefault(requireForEach());
  var isFunction_12 = __importDefault(requireIsFunction());
  var has_12 = __importDefault(requireHas());
  var gast_1 = requireApi$2();
  var lexer_public_1 = requireLexer_public();
  var tokens_1 = requireTokens();
  var tokens_public_1 = requireTokens_public();
  var parser_1 = requireParser$1();
  var keys_12 = requireKeys();
  var RECORDING_NULL_OBJECT = {
    description: "This Object indicates the Parser is during Recording Phase"
  };
  Object.freeze(RECORDING_NULL_OBJECT);
  var HANDLE_SEPARATOR = true;
  var MAX_METHOD_IDX = Math.pow(2, keys_12.BITS_FOR_OCCURRENCE_IDX) - 1;
  var RFT = (0, tokens_public_1.createToken)({ name: "RECORDING_PHASE_TOKEN", pattern: lexer_public_1.Lexer.NA });
  (0, tokens_1.augmentTokenTypes)([RFT]);
  var RECORDING_PHASE_TOKEN = (0, tokens_public_1.createTokenInstance)(
    RFT,
    "This IToken indicates the Parser is in Recording Phase\n	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details",
    // Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
    // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
    -1,
    -1,
    -1,
    -1,
    -1,
    -1
  );
  Object.freeze(RECORDING_PHASE_TOKEN);
  var RECORDING_PHASE_CSTNODE = {
    name: "This CSTNode indicates the Parser is in Recording Phase\n	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details",
    children: {}
  };
  var GastRecorder = (
    /** @class */
    function() {
      function GastRecorder2() {
      }
      GastRecorder2.prototype.initGastRecorder = function(config2) {
        this.recordingProdStack = [];
        this.RECORDING_PHASE = false;
      };
      GastRecorder2.prototype.enableRecording = function() {
        var _this = this;
        this.RECORDING_PHASE = true;
        this.TRACE_INIT("Enable Recording", function() {
          var _loop_1 = function(i2) {
            var idx = i2 > 0 ? i2 : "";
            _this["CONSUME".concat(idx)] = function(arg1, arg2) {
              return this.consumeInternalRecord(arg1, i2, arg2);
            };
            _this["SUBRULE".concat(idx)] = function(arg1, arg2) {
              return this.subruleInternalRecord(arg1, i2, arg2);
            };
            _this["OPTION".concat(idx)] = function(arg1) {
              return this.optionInternalRecord(arg1, i2);
            };
            _this["OR".concat(idx)] = function(arg1) {
              return this.orInternalRecord(arg1, i2);
            };
            _this["MANY".concat(idx)] = function(arg1) {
              this.manyInternalRecord(i2, arg1);
            };
            _this["MANY_SEP".concat(idx)] = function(arg1) {
              this.manySepFirstInternalRecord(i2, arg1);
            };
            _this["AT_LEAST_ONE".concat(idx)] = function(arg1) {
              this.atLeastOneInternalRecord(i2, arg1);
            };
            _this["AT_LEAST_ONE_SEP".concat(idx)] = function(arg1) {
              this.atLeastOneSepFirstInternalRecord(i2, arg1);
            };
          };
          for (var i = 0; i < 10; i++) {
            _loop_1(i);
          }
          _this["consume"] = function(idx, arg1, arg2) {
            return this.consumeInternalRecord(arg1, idx, arg2);
          };
          _this["subrule"] = function(idx, arg1, arg2) {
            return this.subruleInternalRecord(arg1, idx, arg2);
          };
          _this["option"] = function(idx, arg1) {
            return this.optionInternalRecord(arg1, idx);
          };
          _this["or"] = function(idx, arg1) {
            return this.orInternalRecord(arg1, idx);
          };
          _this["many"] = function(idx, arg1) {
            this.manyInternalRecord(idx, arg1);
          };
          _this["atLeastOne"] = function(idx, arg1) {
            this.atLeastOneInternalRecord(idx, arg1);
          };
          _this.ACTION = _this.ACTION_RECORD;
          _this.BACKTRACK = _this.BACKTRACK_RECORD;
          _this.LA = _this.LA_RECORD;
        });
      };
      GastRecorder2.prototype.disableRecording = function() {
        var _this = this;
        this.RECORDING_PHASE = false;
        this.TRACE_INIT("Deleting Recording methods", function() {
          var that = _this;
          for (var i = 0; i < 10; i++) {
            var idx = i > 0 ? i : "";
            delete that["CONSUME".concat(idx)];
            delete that["SUBRULE".concat(idx)];
            delete that["OPTION".concat(idx)];
            delete that["OR".concat(idx)];
            delete that["MANY".concat(idx)];
            delete that["MANY_SEP".concat(idx)];
            delete that["AT_LEAST_ONE".concat(idx)];
            delete that["AT_LEAST_ONE_SEP".concat(idx)];
          }
          delete that["consume"];
          delete that["subrule"];
          delete that["option"];
          delete that["or"];
          delete that["many"];
          delete that["atLeastOne"];
          delete that.ACTION;
          delete that.BACKTRACK;
          delete that.LA;
        });
      };
      GastRecorder2.prototype.ACTION_RECORD = function(impl) {
      };
      GastRecorder2.prototype.BACKTRACK_RECORD = function(grammarRule, args) {
        return function() {
          return true;
        };
      };
      GastRecorder2.prototype.LA_RECORD = function(howMuch) {
        return parser_1.END_OF_FILE;
      };
      GastRecorder2.prototype.topLevelRuleRecord = function(name2, def) {
        try {
          var newTopLevelRule = new gast_1.Rule({ definition: [], name: name2 });
          newTopLevelRule.name = name2;
          this.recordingProdStack.push(newTopLevelRule);
          def.call(this);
          this.recordingProdStack.pop();
          return newTopLevelRule;
        } catch (originalError) {
          if (originalError.KNOWN_RECORDER_ERROR !== true) {
            try {
              originalError.message = originalError.message + '\n	 This error was thrown during the "grammar recording phase" For more info see:\n	https://chevrotain.io/docs/guide/internals.html#grammar-recording';
            } catch (mutabilityError) {
              throw originalError;
            }
          }
          throw originalError;
        }
      };
      GastRecorder2.prototype.optionInternalRecord = function(actionORMethodDef, occurrence) {
        return recordProd.call(this, gast_1.Option, actionORMethodDef, occurrence);
      };
      GastRecorder2.prototype.atLeastOneInternalRecord = function(occurrence, actionORMethodDef) {
        recordProd.call(this, gast_1.RepetitionMandatory, actionORMethodDef, occurrence);
      };
      GastRecorder2.prototype.atLeastOneSepFirstInternalRecord = function(occurrence, options) {
        recordProd.call(this, gast_1.RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);
      };
      GastRecorder2.prototype.manyInternalRecord = function(occurrence, actionORMethodDef) {
        recordProd.call(this, gast_1.Repetition, actionORMethodDef, occurrence);
      };
      GastRecorder2.prototype.manySepFirstInternalRecord = function(occurrence, options) {
        recordProd.call(this, gast_1.RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);
      };
      GastRecorder2.prototype.orInternalRecord = function(altsOrOpts, occurrence) {
        return recordOrProd.call(this, altsOrOpts, occurrence);
      };
      GastRecorder2.prototype.subruleInternalRecord = function(ruleToCall, occurrence, options) {
        assertMethodIdxIsValid(occurrence);
        if (!ruleToCall || (0, has_12.default)(ruleToCall, "ruleName") === false) {
          var error = new Error("<SUBRULE".concat(getIdxSuffix(occurrence), "> argument is invalid") + " expecting a Parser method reference but got: <".concat(JSON.stringify(ruleToCall), ">") + "\n inside top level rule: <".concat(this.recordingProdStack[0].name, ">"));
          error.KNOWN_RECORDER_ERROR = true;
          throw error;
        }
        var prevProd = (0, last_12.default)(this.recordingProdStack);
        var ruleName = ruleToCall.ruleName;
        var newNoneTerminal = new gast_1.NonTerminal({
          idx: occurrence,
          nonTerminalName: ruleName,
          label: options === null || options === void 0 ? void 0 : options.LABEL,
          // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
          referencedRule: void 0
        });
        prevProd.definition.push(newNoneTerminal);
        return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;
      };
      GastRecorder2.prototype.consumeInternalRecord = function(tokType, occurrence, options) {
        assertMethodIdxIsValid(occurrence);
        if (!(0, tokens_1.hasShortKeyProperty)(tokType)) {
          var error = new Error("<CONSUME".concat(getIdxSuffix(occurrence), "> argument is invalid") + " expecting a TokenType reference but got: <".concat(JSON.stringify(tokType), ">") + "\n inside top level rule: <".concat(this.recordingProdStack[0].name, ">"));
          error.KNOWN_RECORDER_ERROR = true;
          throw error;
        }
        var prevProd = (0, last_12.default)(this.recordingProdStack);
        var newNoneTerminal = new gast_1.Terminal({
          idx: occurrence,
          terminalType: tokType,
          label: options === null || options === void 0 ? void 0 : options.LABEL
        });
        prevProd.definition.push(newNoneTerminal);
        return RECORDING_PHASE_TOKEN;
      };
      return GastRecorder2;
    }()
  );
  gast_recorder.GastRecorder = GastRecorder;
  function recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {
    if (handleSep === void 0) {
      handleSep = false;
    }
    assertMethodIdxIsValid(occurrence);
    var prevProd = (0, last_12.default)(this.recordingProdStack);
    var grammarAction = (0, isFunction_12.default)(mainProdArg) ? mainProdArg : mainProdArg.DEF;
    var newProd = new prodConstructor({ definition: [], idx: occurrence });
    if (handleSep) {
      newProd.separator = mainProdArg.SEP;
    }
    if ((0, has_12.default)(mainProdArg, "MAX_LOOKAHEAD")) {
      newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
    }
    this.recordingProdStack.push(newProd);
    grammarAction.call(this);
    prevProd.definition.push(newProd);
    this.recordingProdStack.pop();
    return RECORDING_NULL_OBJECT;
  }
  function recordOrProd(mainProdArg, occurrence) {
    var _this = this;
    assertMethodIdxIsValid(occurrence);
    var prevProd = (0, last_12.default)(this.recordingProdStack);
    var hasOptions = (0, isArray_12.default)(mainProdArg) === false;
    var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;
    var newOrProd = new gast_1.Alternation({
      definition: [],
      idx: occurrence,
      ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true
    });
    if ((0, has_12.default)(mainProdArg, "MAX_LOOKAHEAD")) {
      newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
    }
    var hasPredicates = (0, some_12.default)(alts, function(currAlt) {
      return (0, isFunction_12.default)(currAlt.GATE);
    });
    newOrProd.hasPredicates = hasPredicates;
    prevProd.definition.push(newOrProd);
    (0, forEach_12.default)(alts, function(currAlt) {
      var currAltFlat = new gast_1.Alternative({ definition: [] });
      newOrProd.definition.push(currAltFlat);
      if ((0, has_12.default)(currAlt, "IGNORE_AMBIGUITIES")) {
        currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;
      } else if ((0, has_12.default)(currAlt, "GATE")) {
        currAltFlat.ignoreAmbiguities = true;
      }
      _this.recordingProdStack.push(currAltFlat);
      currAlt.ALT.call(_this);
      _this.recordingProdStack.pop();
    });
    return RECORDING_NULL_OBJECT;
  }
  function getIdxSuffix(idx) {
    return idx === 0 ? "" : "".concat(idx);
  }
  function assertMethodIdxIsValid(idx) {
    if (idx < 0 || idx > MAX_METHOD_IDX) {
      var error = new Error(
        // The stack trace will contain all the needed details
        "Invalid DSL Method idx value: <".concat(idx, ">\n	") + "Idx value must be a none negative value smaller than ".concat(MAX_METHOD_IDX + 1)
      );
      error.KNOWN_RECORDER_ERROR = true;
      throw error;
    }
  }
  return gast_recorder;
}
var perf_tracer = {};
var hasRequiredPerf_tracer;
function requirePerf_tracer() {
  if (hasRequiredPerf_tracer)
    return perf_tracer;
  hasRequiredPerf_tracer = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(perf_tracer, "__esModule", { value: true });
  perf_tracer.PerformanceTracer = void 0;
  var has_12 = __importDefault(requireHas());
  var utils_1 = requireApi$3();
  var parser_1 = requireParser$1();
  var PerformanceTracer = (
    /** @class */
    function() {
      function PerformanceTracer2() {
      }
      PerformanceTracer2.prototype.initPerformanceTracer = function(config2) {
        if ((0, has_12.default)(config2, "traceInitPerf")) {
          var userTraceInitPerf = config2.traceInitPerf;
          var traceIsNumber = typeof userTraceInitPerf === "number";
          this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;
          this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;
        } else {
          this.traceInitMaxIdent = 0;
          this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;
        }
        this.traceInitIndent = -1;
      };
      PerformanceTracer2.prototype.TRACE_INIT = function(phaseDesc, phaseImpl) {
        if (this.traceInitPerf === true) {
          this.traceInitIndent++;
          var indent = new Array(this.traceInitIndent + 1).join("	");
          if (this.traceInitIndent < this.traceInitMaxIdent) {
            console.log("".concat(indent, "--> <").concat(phaseDesc, ">"));
          }
          var _a2 = (0, utils_1.timer)(phaseImpl), time = _a2.time, value = _a2.value;
          var traceMethod = time > 10 ? console.warn : console.log;
          if (this.traceInitIndent < this.traceInitMaxIdent) {
            traceMethod("".concat(indent, "<-- <").concat(phaseDesc, "> time: ").concat(time, "ms"));
          }
          this.traceInitIndent--;
          return value;
        } else {
          return phaseImpl();
        }
      };
      return PerformanceTracer2;
    }()
  );
  perf_tracer.PerformanceTracer = PerformanceTracer;
  return perf_tracer;
}
var apply_mixins = {};
var hasRequiredApply_mixins;
function requireApply_mixins() {
  if (hasRequiredApply_mixins)
    return apply_mixins;
  hasRequiredApply_mixins = 1;
  Object.defineProperty(apply_mixins, "__esModule", { value: true });
  apply_mixins.applyMixins = void 0;
  function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function(baseCtor) {
      var baseProto = baseCtor.prototype;
      Object.getOwnPropertyNames(baseProto).forEach(function(propName) {
        if (propName === "constructor") {
          return;
        }
        var basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);
        if (basePropDescriptor && (basePropDescriptor.get || basePropDescriptor.set)) {
          Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);
        } else {
          derivedCtor.prototype[propName] = baseCtor.prototype[propName];
        }
      });
    });
  }
  apply_mixins.applyMixins = applyMixins;
  return apply_mixins;
}
var hasRequiredParser$1;
function requireParser$1() {
  if (hasRequiredParser$1)
    return parser$1;
  hasRequiredParser$1 = 1;
  (function(exports) {
    var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
      var extendStatics2 = function(d2, b2) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics2(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics2(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddedActionsParser = exports.CstParser = exports.Parser = exports.EMPTY_ALT = exports.ParserDefinitionErrorType = exports.DEFAULT_RULE_CONFIG = exports.DEFAULT_PARSER_CONFIG = exports.END_OF_FILE = void 0;
    var isEmpty_12 = __importDefault(requireIsEmpty());
    var map_12 = __importDefault(requireMap());
    var forEach_12 = __importDefault(requireForEach());
    var values_12 = __importDefault(requireValues());
    var has_12 = __importDefault(requireHas());
    var clone_12 = __importDefault(requireClone());
    var utils_1 = requireApi$3();
    var follow_1 = requireFollow();
    var tokens_public_1 = requireTokens_public();
    var errors_public_1 = requireErrors_public();
    var gast_resolver_public_1 = requireGast_resolver_public();
    var recoverable_1 = requireRecoverable();
    var looksahead_1 = requireLooksahead();
    var tree_builder_1 = requireTree_builder();
    var lexer_adapter_1 = requireLexer_adapter();
    var recognizer_api_1 = requireRecognizer_api();
    var recognizer_engine_1 = requireRecognizer_engine();
    var error_handler_1 = requireError_handler();
    var context_assist_1 = requireContext_assist();
    var gast_recorder_1 = requireGast_recorder();
    var perf_tracer_1 = requirePerf_tracer();
    var apply_mixins_1 = requireApply_mixins();
    var checks_1 = requireChecks();
    exports.END_OF_FILE = (0, tokens_public_1.createTokenInstance)(tokens_public_1.EOF, "", NaN, NaN, NaN, NaN, NaN, NaN);
    Object.freeze(exports.END_OF_FILE);
    exports.DEFAULT_PARSER_CONFIG = Object.freeze({
      recoveryEnabled: false,
      maxLookahead: 3,
      dynamicTokensEnabled: false,
      outputCst: true,
      errorMessageProvider: errors_public_1.defaultParserErrorProvider,
      nodeLocationTracking: "none",
      traceInitPerf: false,
      skipValidations: false
    });
    exports.DEFAULT_RULE_CONFIG = Object.freeze({
      recoveryValueFunc: function() {
        return void 0;
      },
      resyncEnabled: true
    });
    (function(ParserDefinitionErrorType) {
      ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_NAME"] = 0] = "INVALID_RULE_NAME";
      ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_RULE_NAME"] = 1] = "DUPLICATE_RULE_NAME";
      ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_OVERRIDE"] = 2] = "INVALID_RULE_OVERRIDE";
      ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_PRODUCTIONS"] = 3] = "DUPLICATE_PRODUCTIONS";
      ParserDefinitionErrorType[ParserDefinitionErrorType["UNRESOLVED_SUBRULE_REF"] = 4] = "UNRESOLVED_SUBRULE_REF";
      ParserDefinitionErrorType[ParserDefinitionErrorType["LEFT_RECURSION"] = 5] = "LEFT_RECURSION";
      ParserDefinitionErrorType[ParserDefinitionErrorType["NONE_LAST_EMPTY_ALT"] = 6] = "NONE_LAST_EMPTY_ALT";
      ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_ALTS"] = 7] = "AMBIGUOUS_ALTS";
      ParserDefinitionErrorType[ParserDefinitionErrorType["CONFLICT_TOKENS_RULES_NAMESPACE"] = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE";
      ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_TOKEN_NAME"] = 9] = "INVALID_TOKEN_NAME";
      ParserDefinitionErrorType[ParserDefinitionErrorType["NO_NON_EMPTY_LOOKAHEAD"] = 10] = "NO_NON_EMPTY_LOOKAHEAD";
      ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_PREFIX_ALTS"] = 11] = "AMBIGUOUS_PREFIX_ALTS";
      ParserDefinitionErrorType[ParserDefinitionErrorType["TOO_MANY_ALTS"] = 12] = "TOO_MANY_ALTS";
      ParserDefinitionErrorType[ParserDefinitionErrorType["CUSTOM_LOOKAHEAD_VALIDATION"] = 13] = "CUSTOM_LOOKAHEAD_VALIDATION";
    })(exports.ParserDefinitionErrorType || (exports.ParserDefinitionErrorType = {}));
    function EMPTY_ALT(value) {
      if (value === void 0) {
        value = void 0;
      }
      return function() {
        return value;
      };
    }
    exports.EMPTY_ALT = EMPTY_ALT;
    var Parser2 = (
      /** @class */
      function() {
        function Parser3(tokenVocabulary, config2) {
          this.definitionErrors = [];
          this.selfAnalysisDone = false;
          var that = this;
          that.initErrorHandler(config2);
          that.initLexerAdapter();
          that.initLooksAhead(config2);
          that.initRecognizerEngine(tokenVocabulary, config2);
          that.initRecoverable(config2);
          that.initTreeBuilder(config2);
          that.initContentAssist();
          that.initGastRecorder(config2);
          that.initPerformanceTracer(config2);
          if ((0, has_12.default)(config2, "ignoredIssues")) {
            throw new Error("The <ignoredIssues> IParserConfig property has been deprecated.\n	Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\n	See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\n	For further details.");
          }
          this.skipValidations = (0, has_12.default)(config2, "skipValidations") ? config2.skipValidations : exports.DEFAULT_PARSER_CONFIG.skipValidations;
        }
        Parser3.performSelfAnalysis = function(parserInstance) {
          throw Error("The **static** `performSelfAnalysis` method has been deprecated.	\nUse the **instance** method with the same name instead.");
        };
        Parser3.prototype.performSelfAnalysis = function() {
          var _this = this;
          this.TRACE_INIT("performSelfAnalysis", function() {
            var defErrorsMsgs;
            _this.selfAnalysisDone = true;
            var className = _this.className;
            _this.TRACE_INIT("toFastProps", function() {
              (0, utils_1.toFastProperties)(_this);
            });
            _this.TRACE_INIT("Grammar Recording", function() {
              try {
                _this.enableRecording();
                (0, forEach_12.default)(_this.definedRulesNames, function(currRuleName) {
                  var wrappedRule = _this[currRuleName];
                  var originalGrammarAction = wrappedRule["originalGrammarAction"];
                  var recordedRuleGast;
                  _this.TRACE_INIT("".concat(currRuleName, " Rule"), function() {
                    recordedRuleGast = _this.topLevelRuleRecord(currRuleName, originalGrammarAction);
                  });
                  _this.gastProductionsCache[currRuleName] = recordedRuleGast;
                });
              } finally {
                _this.disableRecording();
              }
            });
            var resolverErrors = [];
            _this.TRACE_INIT("Grammar Resolving", function() {
              resolverErrors = (0, gast_resolver_public_1.resolveGrammar)({
                rules: (0, values_12.default)(_this.gastProductionsCache)
              });
              _this.definitionErrors = _this.definitionErrors.concat(resolverErrors);
            });
            _this.TRACE_INIT("Grammar Validations", function() {
              if ((0, isEmpty_12.default)(resolverErrors) && _this.skipValidations === false) {
                var validationErrors = (0, gast_resolver_public_1.validateGrammar)({
                  rules: (0, values_12.default)(_this.gastProductionsCache),
                  tokenTypes: (0, values_12.default)(_this.tokensMap),
                  errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider,
                  grammarName: className
                });
                var lookaheadValidationErrors = (0, checks_1.validateLookahead)({
                  lookaheadStrategy: _this.lookaheadStrategy,
                  rules: (0, values_12.default)(_this.gastProductionsCache),
                  tokenTypes: (0, values_12.default)(_this.tokensMap),
                  grammarName: className
                });
                _this.definitionErrors = _this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);
              }
            });
            if ((0, isEmpty_12.default)(_this.definitionErrors)) {
              if (_this.recoveryEnabled) {
                _this.TRACE_INIT("computeAllProdsFollows", function() {
                  var allFollows = (0, follow_1.computeAllProdsFollows)((0, values_12.default)(_this.gastProductionsCache));
                  _this.resyncFollows = allFollows;
                });
              }
              _this.TRACE_INIT("ComputeLookaheadFunctions", function() {
                var _a2, _b2;
                (_b2 = (_a2 = _this.lookaheadStrategy).initialize) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, {
                  rules: (0, values_12.default)(_this.gastProductionsCache)
                });
                _this.preComputeLookaheadFunctions((0, values_12.default)(_this.gastProductionsCache));
              });
            }
            if (!Parser3.DEFER_DEFINITION_ERRORS_HANDLING && !(0, isEmpty_12.default)(_this.definitionErrors)) {
              defErrorsMsgs = (0, map_12.default)(_this.definitionErrors, function(defError) {
                return defError.message;
              });
              throw new Error("Parser Definition Errors detected:\n ".concat(defErrorsMsgs.join("\n-------------------------------\n")));
            }
          });
        };
        Parser3.DEFER_DEFINITION_ERRORS_HANDLING = false;
        return Parser3;
      }()
    );
    exports.Parser = Parser2;
    (0, apply_mixins_1.applyMixins)(Parser2, [
      recoverable_1.Recoverable,
      looksahead_1.LooksAhead,
      tree_builder_1.TreeBuilder,
      lexer_adapter_1.LexerAdapter,
      recognizer_engine_1.RecognizerEngine,
      recognizer_api_1.RecognizerApi,
      error_handler_1.ErrorHandler,
      context_assist_1.ContentAssist,
      gast_recorder_1.GastRecorder,
      perf_tracer_1.PerformanceTracer
    ]);
    var CstParser = (
      /** @class */
      function(_super) {
        __extends2(CstParser2, _super);
        function CstParser2(tokenVocabulary, config2) {
          if (config2 === void 0) {
            config2 = exports.DEFAULT_PARSER_CONFIG;
          }
          var configClone = (0, clone_12.default)(config2);
          configClone.outputCst = true;
          return _super.call(this, tokenVocabulary, configClone) || this;
        }
        return CstParser2;
      }(Parser2)
    );
    exports.CstParser = CstParser;
    var EmbeddedActionsParser = (
      /** @class */
      function(_super) {
        __extends2(EmbeddedActionsParser2, _super);
        function EmbeddedActionsParser2(tokenVocabulary, config2) {
          if (config2 === void 0) {
            config2 = exports.DEFAULT_PARSER_CONFIG;
          }
          var configClone = (0, clone_12.default)(config2);
          configClone.outputCst = false;
          return _super.call(this, tokenVocabulary, configClone) || this;
        }
        return EmbeddedActionsParser2;
      }(Parser2)
    );
    exports.EmbeddedActionsParser = EmbeddedActionsParser;
  })(parser$1);
  return parser$1;
}
var api$1 = {};
var model$1 = {};
var hasRequiredModel;
function requireModel() {
  if (hasRequiredModel)
    return model$1;
  hasRequiredModel = 1;
  var __extends2 = commonjsGlobal && commonjsGlobal.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(model$1, "__esModule", { value: true });
  model$1.buildModel = void 0;
  var gast_1 = requireApi$2();
  var map_12 = __importDefault(requireMap());
  var flatten_12 = __importDefault(requireFlatten());
  var values_12 = __importDefault(requireValues());
  var some_12 = __importDefault(requireSome());
  var groupBy_12 = __importDefault(requireGroupBy());
  var assign_12 = __importDefault(requireAssign());
  function buildModel(productions) {
    var generator2 = new CstNodeDefinitionGenerator();
    var allRules = (0, values_12.default)(productions);
    return (0, map_12.default)(allRules, function(rule) {
      return generator2.visitRule(rule);
    });
  }
  model$1.buildModel = buildModel;
  var CstNodeDefinitionGenerator = (
    /** @class */
    function(_super) {
      __extends2(CstNodeDefinitionGenerator2, _super);
      function CstNodeDefinitionGenerator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CstNodeDefinitionGenerator2.prototype.visitRule = function(node) {
        var rawElements = this.visitEach(node.definition);
        var grouped = (0, groupBy_12.default)(rawElements, function(el) {
          return el.propertyName;
        });
        var properties2 = (0, map_12.default)(grouped, function(group, propertyName2) {
          var allNullable = !(0, some_12.default)(group, function(el) {
            return !el.canBeNull;
          });
          var propertyType = group[0].type;
          if (group.length > 1) {
            propertyType = (0, map_12.default)(group, function(g2) {
              return g2.type;
            });
          }
          return {
            name: propertyName2,
            type: propertyType,
            optional: allNullable
          };
        });
        return {
          name: node.name,
          properties: properties2
        };
      };
      CstNodeDefinitionGenerator2.prototype.visitAlternative = function(node) {
        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });
      };
      CstNodeDefinitionGenerator2.prototype.visitOption = function(node) {
        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });
      };
      CstNodeDefinitionGenerator2.prototype.visitRepetition = function(node) {
        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });
      };
      CstNodeDefinitionGenerator2.prototype.visitRepetitionMandatory = function(node) {
        return this.visitEach(node.definition);
      };
      CstNodeDefinitionGenerator2.prototype.visitRepetitionMandatoryWithSeparator = function(node) {
        return this.visitEach(node.definition).concat({
          propertyName: node.separator.name,
          canBeNull: true,
          type: getType2(node.separator)
        });
      };
      CstNodeDefinitionGenerator2.prototype.visitRepetitionWithSeparator = function(node) {
        return this.visitEachAndOverrideWith(node.definition, {
          canBeNull: true
        }).concat({
          propertyName: node.separator.name,
          canBeNull: true,
          type: getType2(node.separator)
        });
      };
      CstNodeDefinitionGenerator2.prototype.visitAlternation = function(node) {
        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });
      };
      CstNodeDefinitionGenerator2.prototype.visitTerminal = function(node) {
        return [
          {
            propertyName: node.label || node.terminalType.name,
            canBeNull: false,
            type: getType2(node)
          }
        ];
      };
      CstNodeDefinitionGenerator2.prototype.visitNonTerminal = function(node) {
        return [
          {
            propertyName: node.label || node.nonTerminalName,
            canBeNull: false,
            type: getType2(node)
          }
        ];
      };
      CstNodeDefinitionGenerator2.prototype.visitEachAndOverrideWith = function(definition, override) {
        return (0, map_12.default)(this.visitEach(definition), function(definition2) {
          return (0, assign_12.default)({}, definition2, override);
        });
      };
      CstNodeDefinitionGenerator2.prototype.visitEach = function(definition) {
        var _this = this;
        return (0, flatten_12.default)((0, map_12.default)(definition, function(definition2) {
          return _this.visit(definition2);
        }));
      };
      return CstNodeDefinitionGenerator2;
    }(gast_1.GAstVisitor)
  );
  function getType2(production) {
    if (production instanceof gast_1.NonTerminal) {
      return {
        kind: "rule",
        name: production.referencedRule.name
      };
    }
    return { kind: "token" };
  }
  return model$1;
}
var generate = {};
var _castSlice;
var hasRequired_castSlice;
function require_castSlice() {
  if (hasRequired_castSlice)
    return _castSlice;
  hasRequired_castSlice = 1;
  var baseSlice = require_baseSlice();
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === void 0 ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
  }
  _castSlice = castSlice;
  return _castSlice;
}
var _hasUnicode;
var hasRequired_hasUnicode;
function require_hasUnicode() {
  if (hasRequired_hasUnicode)
    return _hasUnicode;
  hasRequired_hasUnicode = 1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsZWJ = "\\u200d";
  var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
  function hasUnicode(string2) {
    return reHasUnicode.test(string2);
  }
  _hasUnicode = hasUnicode;
  return _hasUnicode;
}
var _asciiToArray;
var hasRequired_asciiToArray;
function require_asciiToArray() {
  if (hasRequired_asciiToArray)
    return _asciiToArray;
  hasRequired_asciiToArray = 1;
  function asciiToArray(string2) {
    return string2.split("");
  }
  _asciiToArray = asciiToArray;
  return _asciiToArray;
}
var _unicodeToArray;
var hasRequired_unicodeToArray;
function require_unicodeToArray() {
  if (hasRequired_unicodeToArray)
    return _unicodeToArray;
  hasRequired_unicodeToArray = 1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
  var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
  var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
  function unicodeToArray(string2) {
    return string2.match(reUnicode) || [];
  }
  _unicodeToArray = unicodeToArray;
  return _unicodeToArray;
}
var _stringToArray;
var hasRequired_stringToArray;
function require_stringToArray() {
  if (hasRequired_stringToArray)
    return _stringToArray;
  hasRequired_stringToArray = 1;
  var asciiToArray = require_asciiToArray(), hasUnicode = require_hasUnicode(), unicodeToArray = require_unicodeToArray();
  function stringToArray(string2) {
    return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
  }
  _stringToArray = stringToArray;
  return _stringToArray;
}
var _createCaseFirst;
var hasRequired_createCaseFirst;
function require_createCaseFirst() {
  if (hasRequired_createCaseFirst)
    return _createCaseFirst;
  hasRequired_createCaseFirst = 1;
  var castSlice = require_castSlice(), hasUnicode = require_hasUnicode(), stringToArray = require_stringToArray(), toString = requireToString();
  function createCaseFirst(methodName) {
    return function(string2) {
      string2 = toString(string2);
      var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0;
      var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
      var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
      return chr[methodName]() + trailing;
    };
  }
  _createCaseFirst = createCaseFirst;
  return _createCaseFirst;
}
var upperFirst_1;
var hasRequiredUpperFirst;
function requireUpperFirst() {
  if (hasRequiredUpperFirst)
    return upperFirst_1;
  hasRequiredUpperFirst = 1;
  var createCaseFirst = require_createCaseFirst();
  var upperFirst = createCaseFirst("toUpperCase");
  upperFirst_1 = upperFirst;
  return upperFirst_1;
}
var hasRequiredGenerate;
function requireGenerate() {
  if (hasRequiredGenerate)
    return generate;
  hasRequiredGenerate = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(generate, "__esModule", { value: true });
  generate.genDts = void 0;
  var flatten_12 = __importDefault(requireFlatten());
  var isArray_12 = __importDefault(requireIsArray());
  var map_12 = __importDefault(requireMap());
  var reduce_12 = __importDefault(requireReduce());
  var uniq_12 = __importDefault(requireUniq());
  var upperFirst_12 = __importDefault(requireUpperFirst());
  function genDts(model2, options) {
    var contentParts = [];
    contentParts = contentParts.concat('import type { CstNode, ICstVisitor, IToken } from "chevrotain";');
    contentParts = contentParts.concat((0, flatten_12.default)((0, map_12.default)(model2, function(node) {
      return genCstNodeTypes(node);
    })));
    if (options.includeVisitorInterface) {
      contentParts = contentParts.concat(genVisitor(options.visitorInterfaceName, model2));
    }
    return contentParts.join("\n\n") + "\n";
  }
  generate.genDts = genDts;
  function genCstNodeTypes(node) {
    var nodeCstInterface = genNodeInterface(node);
    var nodeChildrenInterface = genNodeChildrenType(node);
    return [nodeCstInterface, nodeChildrenInterface];
  }
  function genNodeInterface(node) {
    var nodeInterfaceName = getNodeInterfaceName(node.name);
    var childrenTypeName = getNodeChildrenTypeName(node.name);
    return "export interface ".concat(nodeInterfaceName, ' extends CstNode {\n  name: "').concat(node.name, '";\n  children: ').concat(childrenTypeName, ";\n}");
  }
  function genNodeChildrenType(node) {
    var typeName2 = getNodeChildrenTypeName(node.name);
    return "export type ".concat(typeName2, " = {\n  ").concat((0, map_12.default)(node.properties, function(property) {
      return genChildProperty(property);
    }).join("\n  "), "\n};");
  }
  function genChildProperty(prop) {
    var typeName2 = buildTypeString(prop.type);
    return "".concat(prop.name).concat(prop.optional ? "?" : "", ": ").concat(typeName2, "[];");
  }
  function genVisitor(name2, nodes) {
    return "export interface ".concat(name2, "<IN, OUT> extends ICstVisitor<IN, OUT> {\n  ").concat((0, map_12.default)(nodes, function(node) {
      return genVisitorFunction(node);
    }).join("\n  "), "\n}");
  }
  function genVisitorFunction(node) {
    var childrenTypeName = getNodeChildrenTypeName(node.name);
    return "".concat(node.name, "(children: ").concat(childrenTypeName, ", param?: IN): OUT;");
  }
  function buildTypeString(type) {
    if ((0, isArray_12.default)(type)) {
      var typeNames = (0, uniq_12.default)((0, map_12.default)(type, function(t2) {
        return getTypeString(t2);
      }));
      var typeString = (0, reduce_12.default)(typeNames, function(sum, t2) {
        return sum + " | " + t2;
      });
      return "(" + typeString + ")";
    } else {
      return getTypeString(type);
    }
  }
  function getTypeString(type) {
    if (type.kind === "token") {
      return "IToken";
    }
    return getNodeInterfaceName(type.name);
  }
  function getNodeInterfaceName(ruleName) {
    return (0, upperFirst_12.default)(ruleName) + "CstNode";
  }
  function getNodeChildrenTypeName(ruleName) {
    return (0, upperFirst_12.default)(ruleName) + "CstChildren";
  }
  return generate;
}
var hasRequiredApi$1;
function requireApi$1() {
  if (hasRequiredApi$1)
    return api$1;
  hasRequiredApi$1 = 1;
  var __assign2 = commonjsGlobal && commonjsGlobal.__assign || function() {
    __assign2 = Object.assign || function(t2) {
      for (var s2, i = 1, n2 = arguments.length; i < n2; i++) {
        s2 = arguments[i];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign2.apply(this, arguments);
  };
  Object.defineProperty(api$1, "__esModule", { value: true });
  api$1.generateCstDts = void 0;
  var model_1 = requireModel();
  var generate_1 = requireGenerate();
  var defaultOptions = {
    includeVisitorInterface: true,
    visitorInterfaceName: "ICstNodeVisitor"
  };
  function generateCstDts(productions, options) {
    var effectiveOptions = __assign2(__assign2({}, defaultOptions), options);
    var model2 = (0, model_1.buildModel)(productions);
    return (0, generate_1.genDts)(model2, effectiveOptions);
  }
  api$1.generateCstDts = generateCstDts;
  return api$1;
}
var render_public = {};
var hasRequiredRender_public;
function requireRender_public() {
  if (hasRequiredRender_public)
    return render_public;
  hasRequiredRender_public = 1;
  Object.defineProperty(render_public, "__esModule", { value: true });
  render_public.createSyntaxDiagramsCode = void 0;
  var version_1 = requireVersion();
  function createSyntaxDiagramsCode(grammar2, _a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, _c2 = _b2.resourceBase, resourceBase = _c2 === void 0 ? "https://unpkg.com/chevrotain@".concat(version_1.VERSION, "/diagrams/") : _c2, _d = _b2.css, css2 = _d === void 0 ? "https://unpkg.com/chevrotain@".concat(version_1.VERSION, "/diagrams/diagrams.css") : _d;
    var header = '\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset="utf-8">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n';
    var cssHtml = "\n<link rel='stylesheet' href='".concat(css2, "'>\n");
    var scripts = "\n<script src='".concat(resourceBase, "vendor/railroad-diagrams.js'><\/script>\n<script src='").concat(resourceBase, "src/diagrams_builder.js'><\/script>\n<script src='").concat(resourceBase, "src/diagrams_behavior.js'><\/script>\n<script src='").concat(resourceBase, "src/main.js'><\/script>\n");
    var diagramsDiv = '\n<div id="diagrams" align="center"></div>    \n';
    var serializedGrammar = "\n<script>\n    window.serializedGrammar = ".concat(JSON.stringify(grammar2, null, "  "), ";\n<\/script>\n");
    var initLogic = '\n<script>\n    var diagramsDiv = document.getElementById("diagrams");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n<\/script>\n';
    return header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic;
  }
  render_public.createSyntaxDiagramsCode = createSyntaxDiagramsCode;
  return render_public;
}
var hasRequiredApi;
function requireApi() {
  if (hasRequiredApi)
    return api$4;
  hasRequiredApi = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = exports.createSyntaxDiagramsCode = exports.clearCache = exports.generateCstDts = exports.GAstVisitor = exports.serializeProduction = exports.serializeGrammar = exports.Terminal = exports.Rule = exports.RepetitionWithSeparator = exports.RepetitionMandatoryWithSeparator = exports.RepetitionMandatory = exports.Repetition = exports.Option = exports.NonTerminal = exports.Alternative = exports.Alternation = exports.defaultLexerErrorProvider = exports.NoViableAltException = exports.NotAllInputParsedException = exports.MismatchedTokenException = exports.isRecognitionException = exports.EarlyExitException = exports.defaultParserErrorProvider = exports.LLkLookaheadStrategy = exports.getLookaheadPaths = exports.tokenName = exports.tokenMatcher = exports.tokenLabel = exports.EOF = exports.createTokenInstance = exports.createToken = exports.LexerDefinitionErrorType = exports.Lexer = exports.EMPTY_ALT = exports.ParserDefinitionErrorType = exports.EmbeddedActionsParser = exports.CstParser = exports.VERSION = void 0;
    var version_1 = requireVersion();
    Object.defineProperty(exports, "VERSION", { enumerable: true, get: function() {
      return version_1.VERSION;
    } });
    var parser_1 = requireParser$1();
    Object.defineProperty(exports, "CstParser", { enumerable: true, get: function() {
      return parser_1.CstParser;
    } });
    Object.defineProperty(exports, "EmbeddedActionsParser", { enumerable: true, get: function() {
      return parser_1.EmbeddedActionsParser;
    } });
    Object.defineProperty(exports, "ParserDefinitionErrorType", { enumerable: true, get: function() {
      return parser_1.ParserDefinitionErrorType;
    } });
    Object.defineProperty(exports, "EMPTY_ALT", { enumerable: true, get: function() {
      return parser_1.EMPTY_ALT;
    } });
    var lexer_public_1 = requireLexer_public();
    Object.defineProperty(exports, "Lexer", { enumerable: true, get: function() {
      return lexer_public_1.Lexer;
    } });
    Object.defineProperty(exports, "LexerDefinitionErrorType", { enumerable: true, get: function() {
      return lexer_public_1.LexerDefinitionErrorType;
    } });
    var tokens_public_1 = requireTokens_public();
    Object.defineProperty(exports, "createToken", { enumerable: true, get: function() {
      return tokens_public_1.createToken;
    } });
    Object.defineProperty(exports, "createTokenInstance", { enumerable: true, get: function() {
      return tokens_public_1.createTokenInstance;
    } });
    Object.defineProperty(exports, "EOF", { enumerable: true, get: function() {
      return tokens_public_1.EOF;
    } });
    Object.defineProperty(exports, "tokenLabel", { enumerable: true, get: function() {
      return tokens_public_1.tokenLabel;
    } });
    Object.defineProperty(exports, "tokenMatcher", { enumerable: true, get: function() {
      return tokens_public_1.tokenMatcher;
    } });
    Object.defineProperty(exports, "tokenName", { enumerable: true, get: function() {
      return tokens_public_1.tokenName;
    } });
    var lookahead_1 = requireLookahead();
    Object.defineProperty(exports, "getLookaheadPaths", { enumerable: true, get: function() {
      return lookahead_1.getLookaheadPaths;
    } });
    var llk_lookahead_1 = requireLlk_lookahead();
    Object.defineProperty(exports, "LLkLookaheadStrategy", { enumerable: true, get: function() {
      return llk_lookahead_1.LLkLookaheadStrategy;
    } });
    var errors_public_1 = requireErrors_public();
    Object.defineProperty(exports, "defaultParserErrorProvider", { enumerable: true, get: function() {
      return errors_public_1.defaultParserErrorProvider;
    } });
    var exceptions_public_1 = requireExceptions_public();
    Object.defineProperty(exports, "EarlyExitException", { enumerable: true, get: function() {
      return exceptions_public_1.EarlyExitException;
    } });
    Object.defineProperty(exports, "isRecognitionException", { enumerable: true, get: function() {
      return exceptions_public_1.isRecognitionException;
    } });
    Object.defineProperty(exports, "MismatchedTokenException", { enumerable: true, get: function() {
      return exceptions_public_1.MismatchedTokenException;
    } });
    Object.defineProperty(exports, "NotAllInputParsedException", { enumerable: true, get: function() {
      return exceptions_public_1.NotAllInputParsedException;
    } });
    Object.defineProperty(exports, "NoViableAltException", { enumerable: true, get: function() {
      return exceptions_public_1.NoViableAltException;
    } });
    var lexer_errors_public_1 = requireLexer_errors_public();
    Object.defineProperty(exports, "defaultLexerErrorProvider", { enumerable: true, get: function() {
      return lexer_errors_public_1.defaultLexerErrorProvider;
    } });
    var gast_1 = requireApi$2();
    Object.defineProperty(exports, "Alternation", { enumerable: true, get: function() {
      return gast_1.Alternation;
    } });
    Object.defineProperty(exports, "Alternative", { enumerable: true, get: function() {
      return gast_1.Alternative;
    } });
    Object.defineProperty(exports, "NonTerminal", { enumerable: true, get: function() {
      return gast_1.NonTerminal;
    } });
    Object.defineProperty(exports, "Option", { enumerable: true, get: function() {
      return gast_1.Option;
    } });
    Object.defineProperty(exports, "Repetition", { enumerable: true, get: function() {
      return gast_1.Repetition;
    } });
    Object.defineProperty(exports, "RepetitionMandatory", { enumerable: true, get: function() {
      return gast_1.RepetitionMandatory;
    } });
    Object.defineProperty(exports, "RepetitionMandatoryWithSeparator", { enumerable: true, get: function() {
      return gast_1.RepetitionMandatoryWithSeparator;
    } });
    Object.defineProperty(exports, "RepetitionWithSeparator", { enumerable: true, get: function() {
      return gast_1.RepetitionWithSeparator;
    } });
    Object.defineProperty(exports, "Rule", { enumerable: true, get: function() {
      return gast_1.Rule;
    } });
    Object.defineProperty(exports, "Terminal", { enumerable: true, get: function() {
      return gast_1.Terminal;
    } });
    var gast_2 = requireApi$2();
    Object.defineProperty(exports, "serializeGrammar", { enumerable: true, get: function() {
      return gast_2.serializeGrammar;
    } });
    Object.defineProperty(exports, "serializeProduction", { enumerable: true, get: function() {
      return gast_2.serializeProduction;
    } });
    Object.defineProperty(exports, "GAstVisitor", { enumerable: true, get: function() {
      return gast_2.GAstVisitor;
    } });
    var cst_dts_gen_1 = requireApi$1();
    Object.defineProperty(exports, "generateCstDts", { enumerable: true, get: function() {
      return cst_dts_gen_1.generateCstDts;
    } });
    function clearCache() {
      console.warn("The clearCache function was 'soft' removed from the Chevrotain API.\n	 It performs no action other than printing this message.\n	 Please avoid using it as it will be completely removed in the future");
    }
    exports.clearCache = clearCache;
    var render_public_1 = requireRender_public();
    Object.defineProperty(exports, "createSyntaxDiagramsCode", { enumerable: true, get: function() {
      return render_public_1.createSyntaxDiagramsCode;
    } });
    var Parser2 = (
      /** @class */
      function() {
        function Parser3() {
          throw new Error("The Parser class has been deprecated, use CstParser or EmbeddedActionsParser instead.	\nSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_7-0-0");
        }
        return Parser3;
      }()
    );
    exports.Parser = Parser2;
  })(api$4);
  return api$4;
}
var lib = {};
var allStarLookahead = {};
var atn = {};
var hasRequiredAtn;
function requireAtn() {
  if (hasRequiredAtn)
    return atn;
  hasRequiredAtn = 1;
  (function(exports) {
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createATN = exports.RuleTransition = exports.EpsilonTransition = exports.AtomTransition = exports.AbstractTransition = exports.ATN_LOOP_END = exports.ATN_PLUS_LOOP_BACK = exports.ATN_STAR_LOOP_ENTRY = exports.ATN_STAR_LOOP_BACK = exports.ATN_BLOCK_END = exports.ATN_RULE_STOP = exports.ATN_TOKEN_START = exports.ATN_STAR_BLOCK_START = exports.ATN_PLUS_BLOCK_START = exports.ATN_RULE_START = exports.ATN_BASIC = exports.ATN_INVALID_TYPE = exports.buildATNKey = void 0;
    const map_12 = __importDefault(requireMap());
    const filter_12 = __importDefault(requireFilter());
    const chevrotain_1 = requireApi();
    function buildATNKey(rule, type, occurrence) {
      return `${rule.name}_${type}_${occurrence}`;
    }
    exports.buildATNKey = buildATNKey;
    exports.ATN_INVALID_TYPE = 0;
    exports.ATN_BASIC = 1;
    exports.ATN_RULE_START = 2;
    exports.ATN_PLUS_BLOCK_START = 4;
    exports.ATN_STAR_BLOCK_START = 5;
    exports.ATN_TOKEN_START = 6;
    exports.ATN_RULE_STOP = 7;
    exports.ATN_BLOCK_END = 8;
    exports.ATN_STAR_LOOP_BACK = 9;
    exports.ATN_STAR_LOOP_ENTRY = 10;
    exports.ATN_PLUS_LOOP_BACK = 11;
    exports.ATN_LOOP_END = 12;
    class AbstractTransition {
      constructor(target) {
        this.target = target;
      }
      isEpsilon() {
        return false;
      }
    }
    exports.AbstractTransition = AbstractTransition;
    class AtomTransition extends AbstractTransition {
      constructor(target, tokenType) {
        super(target);
        this.tokenType = tokenType;
      }
    }
    exports.AtomTransition = AtomTransition;
    class EpsilonTransition extends AbstractTransition {
      constructor(target) {
        super(target);
      }
      isEpsilon() {
        return true;
      }
    }
    exports.EpsilonTransition = EpsilonTransition;
    class RuleTransition extends AbstractTransition {
      constructor(ruleStart, rule, followState) {
        super(ruleStart);
        this.rule = rule;
        this.followState = followState;
      }
      isEpsilon() {
        return true;
      }
    }
    exports.RuleTransition = RuleTransition;
    function createATN(rules) {
      const atn2 = {
        decisionMap: {},
        decisionStates: [],
        ruleToStartState: /* @__PURE__ */ new Map(),
        ruleToStopState: /* @__PURE__ */ new Map(),
        states: []
      };
      createRuleStartAndStopATNStates(atn2, rules);
      const ruleLength = rules.length;
      for (let i = 0; i < ruleLength; i++) {
        const rule = rules[i];
        const ruleBlock = block(atn2, rule, rule);
        if (ruleBlock === void 0) {
          continue;
        }
        buildRuleHandle(atn2, rule, ruleBlock);
      }
      return atn2;
    }
    exports.createATN = createATN;
    function createRuleStartAndStopATNStates(atn2, rules) {
      const ruleLength = rules.length;
      for (let i = 0; i < ruleLength; i++) {
        const rule = rules[i];
        const start = newState(atn2, rule, void 0, {
          type: exports.ATN_RULE_START
        });
        const stop = newState(atn2, rule, void 0, {
          type: exports.ATN_RULE_STOP
        });
        start.stop = stop;
        atn2.ruleToStartState.set(rule, start);
        atn2.ruleToStopState.set(rule, stop);
      }
    }
    function atom2(atn2, rule, production) {
      if (production instanceof chevrotain_1.Terminal) {
        return tokenRef(atn2, rule, production.terminalType, production);
      } else if (production instanceof chevrotain_1.NonTerminal) {
        return ruleRef(atn2, rule, production);
      } else if (production instanceof chevrotain_1.Alternation) {
        return alternation(atn2, rule, production);
      } else if (production instanceof chevrotain_1.Option) {
        return option(atn2, rule, production);
      } else if (production instanceof chevrotain_1.Repetition) {
        return repetition(atn2, rule, production);
      } else if (production instanceof chevrotain_1.RepetitionWithSeparator) {
        return repetitionSep(atn2, rule, production);
      } else if (production instanceof chevrotain_1.RepetitionMandatory) {
        return repetitionMandatory(atn2, rule, production);
      } else if (production instanceof chevrotain_1.RepetitionMandatoryWithSeparator) {
        return repetitionMandatorySep(atn2, rule, production);
      } else {
        return block(atn2, rule, production);
      }
    }
    function repetition(atn2, rule, repetition2) {
      const starState = newState(atn2, rule, repetition2, {
        type: exports.ATN_STAR_BLOCK_START
      });
      defineDecisionState(atn2, starState);
      const handle = makeAlts(atn2, rule, starState, repetition2, block(atn2, rule, repetition2));
      return star2(atn2, rule, repetition2, handle);
    }
    function repetitionSep(atn2, rule, repetition2) {
      const starState = newState(atn2, rule, repetition2, {
        type: exports.ATN_STAR_BLOCK_START
      });
      defineDecisionState(atn2, starState);
      const handle = makeAlts(atn2, rule, starState, repetition2, block(atn2, rule, repetition2));
      const sep = tokenRef(atn2, rule, repetition2.separator, repetition2);
      return star2(atn2, rule, repetition2, handle, sep);
    }
    function repetitionMandatory(atn2, rule, repetition2) {
      const plusState = newState(atn2, rule, repetition2, {
        type: exports.ATN_PLUS_BLOCK_START
      });
      defineDecisionState(atn2, plusState);
      const handle = makeAlts(atn2, rule, plusState, repetition2, block(atn2, rule, repetition2));
      return plus2(atn2, rule, repetition2, handle);
    }
    function repetitionMandatorySep(atn2, rule, repetition2) {
      const plusState = newState(atn2, rule, repetition2, {
        type: exports.ATN_PLUS_BLOCK_START
      });
      defineDecisionState(atn2, plusState);
      const handle = makeAlts(atn2, rule, plusState, repetition2, block(atn2, rule, repetition2));
      const sep = tokenRef(atn2, rule, repetition2.separator, repetition2);
      return plus2(atn2, rule, repetition2, handle, sep);
    }
    function alternation(atn2, rule, alternation2) {
      const start = newState(atn2, rule, alternation2, {
        type: exports.ATN_BASIC
      });
      defineDecisionState(atn2, start);
      const alts = (0, map_12.default)(alternation2.definition, (e) => atom2(atn2, rule, e));
      const handle = makeAlts(atn2, rule, start, alternation2, ...alts);
      return handle;
    }
    function option(atn2, rule, option2) {
      const start = newState(atn2, rule, option2, {
        type: exports.ATN_BASIC
      });
      defineDecisionState(atn2, start);
      const handle = makeAlts(atn2, rule, start, option2, block(atn2, rule, option2));
      return optional(atn2, rule, option2, handle);
    }
    function block(atn2, rule, block2) {
      const handles = (0, filter_12.default)((0, map_12.default)(block2.definition, (e) => atom2(atn2, rule, e)), (e) => e !== void 0);
      if (handles.length === 1) {
        return handles[0];
      } else if (handles.length === 0) {
        return void 0;
      } else {
        return makeBlock(atn2, handles);
      }
    }
    function plus2(atn2, rule, plus3, handle, sep) {
      const blkStart = handle.left;
      const blkEnd = handle.right;
      const loop = newState(atn2, rule, plus3, {
        type: exports.ATN_PLUS_LOOP_BACK
      });
      defineDecisionState(atn2, loop);
      const end = newState(atn2, rule, plus3, {
        type: exports.ATN_LOOP_END
      });
      blkStart.loopback = loop;
      end.loopback = loop;
      atn2.decisionMap[buildATNKey(rule, sep ? "RepetitionMandatoryWithSeparator" : "RepetitionMandatory", plus3.idx)] = loop;
      epsilon(blkEnd, loop);
      if (sep === void 0) {
        epsilon(loop, blkStart);
        epsilon(loop, end);
      } else {
        epsilon(loop, end);
        epsilon(loop, sep.left);
        epsilon(sep.right, blkStart);
      }
      return {
        left: blkStart,
        right: end
      };
    }
    function star2(atn2, rule, star3, handle, sep) {
      const start = handle.left;
      const end = handle.right;
      const entry = newState(atn2, rule, star3, {
        type: exports.ATN_STAR_LOOP_ENTRY
      });
      defineDecisionState(atn2, entry);
      const loopEnd = newState(atn2, rule, star3, {
        type: exports.ATN_LOOP_END
      });
      const loop = newState(atn2, rule, star3, {
        type: exports.ATN_STAR_LOOP_BACK
      });
      entry.loopback = loop;
      loopEnd.loopback = loop;
      epsilon(entry, start);
      epsilon(entry, loopEnd);
      epsilon(end, loop);
      if (sep !== void 0) {
        epsilon(loop, loopEnd);
        epsilon(loop, sep.left);
        epsilon(sep.right, start);
      } else {
        epsilon(loop, entry);
      }
      atn2.decisionMap[buildATNKey(rule, sep ? "RepetitionWithSeparator" : "Repetition", star3.idx)] = entry;
      return {
        left: entry,
        right: loopEnd
      };
    }
    function optional(atn2, rule, optional2, handle) {
      const start = handle.left;
      const end = handle.right;
      epsilon(start, end);
      atn2.decisionMap[buildATNKey(rule, "Option", optional2.idx)] = start;
      return handle;
    }
    function defineDecisionState(atn2, state) {
      atn2.decisionStates.push(state);
      state.decision = atn2.decisionStates.length - 1;
      return state.decision;
    }
    function makeAlts(atn2, rule, start, production, ...alts) {
      const end = newState(atn2, rule, production, {
        type: exports.ATN_BLOCK_END,
        start
      });
      start.end = end;
      for (const alt of alts) {
        if (alt !== void 0) {
          epsilon(start, alt.left);
          epsilon(alt.right, end);
        } else {
          epsilon(start, end);
        }
      }
      const handle = {
        left: start,
        right: end
      };
      atn2.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start;
      return handle;
    }
    function getProdType(production) {
      if (production instanceof chevrotain_1.Alternation) {
        return "Alternation";
      } else if (production instanceof chevrotain_1.Option) {
        return "Option";
      } else if (production instanceof chevrotain_1.Repetition) {
        return "Repetition";
      } else if (production instanceof chevrotain_1.RepetitionWithSeparator) {
        return "RepetitionWithSeparator";
      } else if (production instanceof chevrotain_1.RepetitionMandatory) {
        return "RepetitionMandatory";
      } else if (production instanceof chevrotain_1.RepetitionMandatoryWithSeparator) {
        return "RepetitionMandatoryWithSeparator";
      } else {
        throw new Error("Invalid production type encountered");
      }
    }
    function makeBlock(atn2, alts) {
      const altsLength = alts.length;
      for (let i = 0; i < altsLength - 1; i++) {
        const handle = alts[i];
        let transition;
        if (handle.left.transitions.length === 1) {
          transition = handle.left.transitions[0];
        }
        const isRuleTransition = transition instanceof RuleTransition;
        const ruleTransition = transition;
        const next = alts[i + 1].left;
        if (handle.left.type === exports.ATN_BASIC && handle.right.type === exports.ATN_BASIC && transition !== void 0 && (isRuleTransition && ruleTransition.followState === handle.right || transition.target === handle.right)) {
          if (isRuleTransition) {
            ruleTransition.followState = next;
          } else {
            transition.target = next;
          }
          removeState(atn2, handle.right);
        } else {
          epsilon(handle.right, next);
        }
      }
      const first2 = alts[0];
      const last2 = alts[altsLength - 1];
      return {
        left: first2.left,
        right: last2.right
      };
    }
    function tokenRef(atn2, rule, tokenType, production) {
      const left = newState(atn2, rule, production, {
        type: exports.ATN_BASIC
      });
      const right = newState(atn2, rule, production, {
        type: exports.ATN_BASIC
      });
      addTransition(left, new AtomTransition(right, tokenType));
      return {
        left,
        right
      };
    }
    function ruleRef(atn2, currentRule, nonTerminal) {
      const rule = nonTerminal.referencedRule;
      const start = atn2.ruleToStartState.get(rule);
      const left = newState(atn2, currentRule, nonTerminal, {
        type: exports.ATN_BASIC
      });
      const right = newState(atn2, currentRule, nonTerminal, {
        type: exports.ATN_BASIC
      });
      const call = new RuleTransition(start, rule, right);
      addTransition(left, call);
      return {
        left,
        right
      };
    }
    function buildRuleHandle(atn2, rule, block2) {
      const start = atn2.ruleToStartState.get(rule);
      epsilon(start, block2.left);
      const stop = atn2.ruleToStopState.get(rule);
      epsilon(block2.right, stop);
      const handle = {
        left: start,
        right: stop
      };
      return handle;
    }
    function epsilon(a2, b2) {
      const transition = new EpsilonTransition(b2);
      addTransition(a2, transition);
    }
    function newState(atn2, rule, production, partial) {
      const t2 = Object.assign({
        atn: atn2,
        production,
        epsilonOnlyTransitions: false,
        rule,
        transitions: [],
        nextTokenWithinRule: [],
        stateNumber: atn2.states.length
      }, partial);
      atn2.states.push(t2);
      return t2;
    }
    function addTransition(state, transition) {
      if (state.transitions.length === 0) {
        state.epsilonOnlyTransitions = transition.isEpsilon();
      }
      state.transitions.push(transition);
    }
    function removeState(atn2, state) {
      atn2.states.splice(atn2.states.indexOf(state), 1);
    }
  })(atn);
  return atn;
}
var dfa = {};
var hasRequiredDfa;
function requireDfa() {
  if (hasRequiredDfa)
    return dfa;
  hasRequiredDfa = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(dfa, "__esModule", { value: true });
  dfa.getATNConfigKey = dfa.ATNConfigSet = dfa.DFA_ERROR = void 0;
  const map_12 = __importDefault(requireMap());
  dfa.DFA_ERROR = {};
  class ATNConfigSet {
    constructor() {
      this.map = {};
      this.configs = [];
    }
    get size() {
      return this.configs.length;
    }
    finalize() {
      this.map = {};
    }
    add(config2) {
      const key = getATNConfigKey(config2);
      if (!(key in this.map)) {
        this.map[key] = this.configs.length;
        this.configs.push(config2);
      }
    }
    get elements() {
      return this.configs;
    }
    get alts() {
      return (0, map_12.default)(this.configs, (e) => e.alt);
    }
    get key() {
      let value = "";
      for (const k2 in this.map) {
        value += k2 + ":";
      }
      return value;
    }
  }
  dfa.ATNConfigSet = ATNConfigSet;
  function getATNConfigKey(config2, alt = true) {
    return `${alt ? `a${config2.alt}` : ""}s${config2.state.stateNumber}:${config2.stack.map((e) => e.stateNumber.toString()).join("_")}`;
  }
  dfa.getATNConfigKey = getATNConfigKey;
  return dfa;
}
var _baseExtremum;
var hasRequired_baseExtremum;
function require_baseExtremum() {
  if (hasRequired_baseExtremum)
    return _baseExtremum;
  hasRequired_baseExtremum = 1;
  var isSymbol = requireIsSymbol();
  function baseExtremum(array, iteratee, comparator) {
    var index = -1, length = array.length;
    while (++index < length) {
      var value = array[index], current = iteratee(value);
      if (current != null && (computed2 === void 0 ? current === current && !isSymbol(current) : comparator(current, computed2))) {
        var computed2 = current, result = value;
      }
    }
    return result;
  }
  _baseExtremum = baseExtremum;
  return _baseExtremum;
}
var _baseLt;
var hasRequired_baseLt;
function require_baseLt() {
  if (hasRequired_baseLt)
    return _baseLt;
  hasRequired_baseLt = 1;
  function baseLt(value, other) {
    return value < other;
  }
  _baseLt = baseLt;
  return _baseLt;
}
var min_1;
var hasRequiredMin;
function requireMin() {
  if (hasRequiredMin)
    return min_1;
  hasRequiredMin = 1;
  var baseExtremum = require_baseExtremum(), baseLt = require_baseLt(), identity = requireIdentity();
  function min(array) {
    return array && array.length ? baseExtremum(array, identity, baseLt) : void 0;
  }
  min_1 = min;
  return min_1;
}
var uniqBy_1;
var hasRequiredUniqBy;
function requireUniqBy() {
  if (hasRequiredUniqBy)
    return uniqBy_1;
  hasRequiredUniqBy = 1;
  var baseIteratee = require_baseIteratee(), baseUniq = require_baseUniq();
  function uniqBy(array, iteratee) {
    return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
  }
  uniqBy_1 = uniqBy;
  return uniqBy_1;
}
var hasRequiredAllStarLookahead;
function requireAllStarLookahead() {
  if (hasRequiredAllStarLookahead)
    return allStarLookahead;
  hasRequiredAllStarLookahead = 1;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(allStarLookahead, "__esModule", { value: true });
  allStarLookahead.LLStarLookaheadStrategy = void 0;
  const chevrotain_1 = requireApi();
  const atn_1 = requireAtn();
  const dfa_1 = requireDfa();
  const min_12 = __importDefault(requireMin());
  const flatMap_12 = __importDefault(requireFlatMap());
  const uniqBy_12 = __importDefault(requireUniqBy());
  const map_12 = __importDefault(requireMap());
  const flatten_12 = __importDefault(requireFlatten());
  const forEach_12 = __importDefault(requireForEach());
  const isEmpty_12 = __importDefault(requireIsEmpty());
  const reduce_12 = __importDefault(requireReduce());
  function createDFACache(startState, decision) {
    const map2 = {};
    return (predicateSet) => {
      const key = predicateSet.toString();
      let existing = map2[key];
      if (existing !== void 0) {
        return existing;
      } else {
        existing = {
          atnStartState: startState,
          decision,
          states: {}
        };
        map2[key] = existing;
        return existing;
      }
    };
  }
  class PredicateSet {
    constructor() {
      this.predicates = [];
    }
    is(index) {
      return index >= this.predicates.length || this.predicates[index];
    }
    set(index, value) {
      this.predicates[index] = value;
    }
    toString() {
      let value = "";
      const size = this.predicates.length;
      for (let i = 0; i < size; i++) {
        value += this.predicates[i] === true ? "1" : "0";
      }
      return value;
    }
  }
  const EMPTY_PREDICATES = new PredicateSet();
  class LLStarLookaheadStrategy extends chevrotain_1.LLkLookaheadStrategy {
    constructor(options) {
      var _a2;
      super();
      this.logging = (_a2 = options === null || options === void 0 ? void 0 : options.logging) !== null && _a2 !== void 0 ? _a2 : (message) => console.log(message);
    }
    initialize(options) {
      this.atn = (0, atn_1.createATN)(options.rules);
      this.dfas = initATNSimulator(this.atn);
    }
    validateAmbiguousAlternationAlternatives() {
      return [];
    }
    validateEmptyOrAlternatives() {
      return [];
    }
    buildLookaheadForAlternation(options) {
      const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;
      const dfas = this.dfas;
      const logging = this.logging;
      const key = (0, atn_1.buildATNKey)(rule, "Alternation", prodOccurrence);
      const decisionState = this.atn.decisionMap[key];
      const decisionIndex = decisionState.decision;
      const partialAlts = (0, map_12.default)((0, chevrotain_1.getLookaheadPaths)({
        maxLookahead: 1,
        occurrence: prodOccurrence,
        prodType: "Alternation",
        rule
      }), (currAlt) => (0, map_12.default)(currAlt, (path) => path[0]));
      if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {
        const choiceToAlt = (0, reduce_12.default)(partialAlts, (result, currAlt, idx) => {
          (0, forEach_12.default)(currAlt, (currTokType) => {
            if (currTokType) {
              result[currTokType.tokenTypeIdx] = idx;
              (0, forEach_12.default)(currTokType.categoryMatches, (currExtendingType) => {
                result[currExtendingType] = idx;
              });
            }
          });
          return result;
        }, {});
        if (hasPredicates) {
          return function(orAlts) {
            var _a2;
            const nextToken = this.LA(1);
            const prediction = choiceToAlt[nextToken.tokenTypeIdx];
            if (orAlts !== void 0 && prediction !== void 0) {
              const gate = (_a2 = orAlts[prediction]) === null || _a2 === void 0 ? void 0 : _a2.GATE;
              if (gate !== void 0 && gate.call(this) === false) {
                return void 0;
              }
            }
            return prediction;
          };
        } else {
          return function() {
            const nextToken = this.LA(1);
            return choiceToAlt[nextToken.tokenTypeIdx];
          };
        }
      } else if (hasPredicates) {
        return function(orAlts) {
          const predicates = new PredicateSet();
          const length = orAlts === void 0 ? 0 : orAlts.length;
          for (let i = 0; i < length; i++) {
            const gate = orAlts === null || orAlts === void 0 ? void 0 : orAlts[i].GATE;
            predicates.set(i, gate === void 0 || gate.call(this));
          }
          const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);
          return typeof result === "number" ? result : void 0;
        };
      } else {
        return function() {
          const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);
          return typeof result === "number" ? result : void 0;
        };
      }
    }
    buildLookaheadForOptional(options) {
      const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;
      const dfas = this.dfas;
      const logging = this.logging;
      const key = (0, atn_1.buildATNKey)(rule, prodType, prodOccurrence);
      const decisionState = this.atn.decisionMap[key];
      const decisionIndex = decisionState.decision;
      const alts = (0, map_12.default)((0, chevrotain_1.getLookaheadPaths)({
        maxLookahead: 1,
        occurrence: prodOccurrence,
        prodType,
        rule
      }), (e) => {
        return (0, map_12.default)(e, (g2) => g2[0]);
      });
      if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {
        const alt = alts[0];
        const singleTokensTypes = (0, flatten_12.default)(alt);
        if (singleTokensTypes.length === 1 && (0, isEmpty_12.default)(singleTokensTypes[0].categoryMatches)) {
          const expectedTokenType = singleTokensTypes[0];
          const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;
          return function() {
            return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;
          };
        } else {
          const choiceToAlt = (0, reduce_12.default)(singleTokensTypes, (result, currTokType) => {
            if (currTokType !== void 0) {
              result[currTokType.tokenTypeIdx] = true;
              (0, forEach_12.default)(currTokType.categoryMatches, (currExtendingType) => {
                result[currExtendingType] = true;
              });
            }
            return result;
          }, {});
          return function() {
            const nextToken = this.LA(1);
            return choiceToAlt[nextToken.tokenTypeIdx] === true;
          };
        }
      }
      return function() {
        const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);
        return typeof result === "object" ? false : result === 0;
      };
    }
  }
  allStarLookahead.LLStarLookaheadStrategy = LLStarLookaheadStrategy;
  function isLL1Sequence(sequences, allowEmpty = true) {
    const fullSet = /* @__PURE__ */ new Set();
    for (const alt of sequences) {
      const altSet = /* @__PURE__ */ new Set();
      for (const tokType of alt) {
        if (tokType === void 0) {
          if (allowEmpty) {
            break;
          } else {
            return false;
          }
        }
        const indices = [tokType.tokenTypeIdx].concat(tokType.categoryMatches);
        for (const index of indices) {
          if (fullSet.has(index)) {
            if (!altSet.has(index)) {
              return false;
            }
          } else {
            fullSet.add(index);
            altSet.add(index);
          }
        }
      }
    }
    return true;
  }
  function initATNSimulator(atn2) {
    const decisionLength = atn2.decisionStates.length;
    const decisionToDFA = Array(decisionLength);
    for (let i = 0; i < decisionLength; i++) {
      decisionToDFA[i] = createDFACache(atn2.decisionStates[i], i);
    }
    return decisionToDFA;
  }
  function adaptivePredict(dfaCaches, decision, predicateSet, logging) {
    const dfa2 = dfaCaches[decision](predicateSet);
    let start = dfa2.start;
    if (start === void 0) {
      const closure2 = computeStartState(dfa2.atnStartState);
      start = addDFAState(dfa2, newDFAState(closure2));
      dfa2.start = start;
    }
    const alt = performLookahead.apply(this, [dfa2, start, predicateSet, logging]);
    return alt;
  }
  function performLookahead(dfa2, s0, predicateSet, logging) {
    let previousD = s0;
    let i = 1;
    const path = [];
    let t2 = this.LA(i++);
    while (true) {
      let d2 = getExistingTargetState(previousD, t2);
      if (d2 === void 0) {
        d2 = computeLookaheadTarget.apply(this, [dfa2, previousD, t2, i, predicateSet, logging]);
      }
      if (d2 === dfa_1.DFA_ERROR) {
        return buildAdaptivePredictError(path, previousD, t2);
      }
      if (d2.isAcceptState === true) {
        return d2.prediction;
      }
      previousD = d2;
      path.push(t2);
      t2 = this.LA(i++);
    }
  }
  function computeLookaheadTarget(dfa2, previousD, token, lookahead2, predicateSet, logging) {
    const reach = computeReachSet(previousD.configs, token, predicateSet);
    if (reach.size === 0) {
      addDFAEdge(dfa2, previousD, token, dfa_1.DFA_ERROR);
      return dfa_1.DFA_ERROR;
    }
    let newState = newDFAState(reach);
    const predictedAlt = getUniqueAlt(reach, predicateSet);
    if (predictedAlt !== void 0) {
      newState.isAcceptState = true;
      newState.prediction = predictedAlt;
      newState.configs.uniqueAlt = predictedAlt;
    } else if (hasConflictTerminatingPrediction(reach)) {
      const prediction = (0, min_12.default)(reach.alts);
      newState.isAcceptState = true;
      newState.prediction = prediction;
      newState.configs.uniqueAlt = prediction;
      reportLookaheadAmbiguity.apply(this, [dfa2, lookahead2, reach.alts, logging]);
    }
    newState = addDFAEdge(dfa2, previousD, token, newState);
    return newState;
  }
  function reportLookaheadAmbiguity(dfa2, lookahead2, ambiguityIndices, logging) {
    const prefixPath = [];
    for (let i = 1; i <= lookahead2; i++) {
      prefixPath.push(this.LA(i).tokenType);
    }
    const atnState = dfa2.atnStartState;
    const topLevelRule = atnState.rule;
    const production = atnState.production;
    const message = buildAmbiguityError({
      topLevelRule,
      ambiguityIndices,
      production,
      prefixPath
    });
    logging(message);
  }
  function buildAmbiguityError(options) {
    const pathMsg = (0, map_12.default)(options.prefixPath, (currtok) => (0, chevrotain_1.tokenLabel)(currtok)).join(", ");
    const occurrence = options.production.idx === 0 ? "" : options.production.idx;
    let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(", ")}> in <${getProductionDslName(options.production)}${occurrence}> inside <${options.topLevelRule.name}> Rule,
<${pathMsg}> may appears as a prefix path in all these alternatives.
`;
    currMessage = currMessage + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES
For Further details.`;
    return currMessage;
  }
  function getProductionDslName(prod) {
    if (prod instanceof chevrotain_1.NonTerminal) {
      return "SUBRULE";
    } else if (prod instanceof chevrotain_1.Option) {
      return "OPTION";
    } else if (prod instanceof chevrotain_1.Alternation) {
      return "OR";
    } else if (prod instanceof chevrotain_1.RepetitionMandatory) {
      return "AT_LEAST_ONE";
    } else if (prod instanceof chevrotain_1.RepetitionMandatoryWithSeparator) {
      return "AT_LEAST_ONE_SEP";
    } else if (prod instanceof chevrotain_1.RepetitionWithSeparator) {
      return "MANY_SEP";
    } else if (prod instanceof chevrotain_1.Repetition) {
      return "MANY";
    } else if (prod instanceof chevrotain_1.Terminal) {
      return "CONSUME";
    } else {
      throw Error("non exhaustive match");
    }
  }
  function buildAdaptivePredictError(path, previous, current) {
    const nextTransitions = (0, flatMap_12.default)(previous.configs.elements, (e) => e.state.transitions);
    const nextTokenTypes = (0, uniqBy_12.default)(nextTransitions.filter((e) => e instanceof atn_1.AtomTransition).map((e) => e.tokenType), (e) => e.tokenTypeIdx);
    return {
      actualToken: current,
      possibleTokenTypes: nextTokenTypes,
      tokenPath: path
    };
  }
  function getExistingTargetState(state, token) {
    return state.edges[token.tokenTypeIdx];
  }
  function computeReachSet(configs, token, predicateSet) {
    const intermediate = new dfa_1.ATNConfigSet();
    const skippedStopStates = [];
    for (const c2 of configs.elements) {
      if (predicateSet.is(c2.alt) === false) {
        continue;
      }
      if (c2.state.type === atn_1.ATN_RULE_STOP) {
        skippedStopStates.push(c2);
        continue;
      }
      const transitionLength = c2.state.transitions.length;
      for (let i = 0; i < transitionLength; i++) {
        const transition = c2.state.transitions[i];
        const target = getReachableTarget(transition, token);
        if (target !== void 0) {
          intermediate.add({
            state: target,
            alt: c2.alt,
            stack: c2.stack
          });
        }
      }
    }
    let reach;
    if (skippedStopStates.length === 0 && intermediate.size === 1) {
      reach = intermediate;
    }
    if (reach === void 0) {
      reach = new dfa_1.ATNConfigSet();
      for (const c2 of intermediate.elements) {
        closure(c2, reach);
      }
    }
    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {
      for (const c2 of skippedStopStates) {
        reach.add(c2);
      }
    }
    return reach;
  }
  function getReachableTarget(transition, token) {
    if (transition instanceof atn_1.AtomTransition && (0, chevrotain_1.tokenMatcher)(token, transition.tokenType)) {
      return transition.target;
    }
    return void 0;
  }
  function getUniqueAlt(configs, predicateSet) {
    let alt;
    for (const c2 of configs.elements) {
      if (predicateSet.is(c2.alt) === true) {
        if (alt === void 0) {
          alt = c2.alt;
        } else if (alt !== c2.alt) {
          return void 0;
        }
      }
    }
    return alt;
  }
  function newDFAState(closure2) {
    return {
      configs: closure2,
      edges: {},
      isAcceptState: false,
      prediction: -1
    };
  }
  function addDFAEdge(dfa2, from, token, to) {
    to = addDFAState(dfa2, to);
    from.edges[token.tokenTypeIdx] = to;
    return to;
  }
  function addDFAState(dfa2, state) {
    if (state === dfa_1.DFA_ERROR) {
      return state;
    }
    const mapKey = state.configs.key;
    const existing = dfa2.states[mapKey];
    if (existing !== void 0) {
      return existing;
    }
    state.configs.finalize();
    dfa2.states[mapKey] = state;
    return state;
  }
  function computeStartState(atnState) {
    const configs = new dfa_1.ATNConfigSet();
    const numberOfTransitions = atnState.transitions.length;
    for (let i = 0; i < numberOfTransitions; i++) {
      const target = atnState.transitions[i].target;
      const config2 = {
        state: target,
        alt: i,
        stack: []
      };
      closure(config2, configs);
    }
    return configs;
  }
  function closure(config2, configs) {
    const p2 = config2.state;
    if (p2.type === atn_1.ATN_RULE_STOP) {
      if (config2.stack.length > 0) {
        const atnStack = [...config2.stack];
        const followState = atnStack.pop();
        const followConfig = {
          state: followState,
          alt: config2.alt,
          stack: atnStack
        };
        closure(followConfig, configs);
      } else {
        configs.add(config2);
      }
      return;
    }
    if (!p2.epsilonOnlyTransitions) {
      configs.add(config2);
    }
    const transitionLength = p2.transitions.length;
    for (let i = 0; i < transitionLength; i++) {
      const transition = p2.transitions[i];
      const c2 = getEpsilonTarget(config2, transition);
      if (c2 !== void 0) {
        closure(c2, configs);
      }
    }
  }
  function getEpsilonTarget(config2, transition) {
    if (transition instanceof atn_1.EpsilonTransition) {
      return {
        state: transition.target,
        alt: config2.alt,
        stack: config2.stack
      };
    } else if (transition instanceof atn_1.RuleTransition) {
      const stack = [...config2.stack, transition.followState];
      return {
        state: transition.target,
        alt: config2.alt,
        stack
      };
    }
    return void 0;
  }
  function hasConfigInRuleStopState(configs) {
    for (const c2 of configs.elements) {
      if (c2.state.type === atn_1.ATN_RULE_STOP) {
        return true;
      }
    }
    return false;
  }
  function allConfigsInRuleStopStates(configs) {
    for (const c2 of configs.elements) {
      if (c2.state.type !== atn_1.ATN_RULE_STOP) {
        return false;
      }
    }
    return true;
  }
  function hasConflictTerminatingPrediction(configs) {
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    const altSets = getConflictingAltSets(configs.elements);
    const heuristic = hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets);
    return heuristic;
  }
  function getConflictingAltSets(configs) {
    const configToAlts = /* @__PURE__ */ new Map();
    for (const c2 of configs) {
      const key = (0, dfa_1.getATNConfigKey)(c2, false);
      let alts = configToAlts.get(key);
      if (alts === void 0) {
        alts = {};
        configToAlts.set(key, alts);
      }
      alts[c2.alt] = true;
    }
    return configToAlts;
  }
  function hasConflictingAltSet(altSets) {
    for (const value of Array.from(altSets.values())) {
      if (Object.keys(value).length > 1) {
        return true;
      }
    }
    return false;
  }
  function hasStateAssociatedWithOneAlt(altSets) {
    for (const value of Array.from(altSets.values())) {
      if (Object.keys(value).length === 1) {
        return true;
      }
    }
    return false;
  }
  return allStarLookahead;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1)
    return lib;
  hasRequiredLib$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LLStarLookaheadStrategy = void 0;
    var all_star_lookahead_1 = requireAllStarLookahead();
    Object.defineProperty(exports, "LLStarLookaheadStrategy", { enumerable: true, get: function() {
      return all_star_lookahead_1.LLStarLookaheadStrategy;
    } });
  })(lib);
  return lib;
}
var cstNodeBuilder = {};
var hasRequiredCstNodeBuilder;
function requireCstNodeBuilder() {
  if (hasRequiredCstNodeBuilder)
    return cstNodeBuilder;
  hasRequiredCstNodeBuilder = 1;
  Object.defineProperty(cstNodeBuilder, "__esModule", { value: true });
  cstNodeBuilder.RootCstNodeImpl = cstNodeBuilder.CompositeCstNodeImpl = cstNodeBuilder.LeafCstNodeImpl = cstNodeBuilder.AbstractCstNode = cstNodeBuilder.CstNodeBuilder = void 0;
  const vscode_languageserver_types_1 = require$$0;
  const syntax_tree_1 = requireSyntaxTree();
  const cst_util_1 = requireCstUtil();
  class CstNodeBuilder {
    constructor() {
      this.nodeStack = [];
    }
    get current() {
      return this.nodeStack[this.nodeStack.length - 1];
    }
    buildRootNode(input) {
      this.rootNode = new RootCstNodeImpl(input);
      this.nodeStack = [this.rootNode];
      return this.rootNode;
    }
    buildCompositeNode(feature) {
      const compositeNode = new CompositeCstNodeImpl();
      compositeNode.feature = feature;
      compositeNode.root = this.rootNode;
      this.current.children.push(compositeNode);
      this.nodeStack.push(compositeNode);
      return compositeNode;
    }
    buildLeafNode(token, feature) {
      const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0, cst_util_1.tokenToRange)(token), token.tokenType, false);
      leafNode.feature = feature;
      leafNode.root = this.rootNode;
      this.current.children.push(leafNode);
      return leafNode;
    }
    removeNode(node) {
      const parent = node.parent;
      if (parent) {
        const index = parent.children.indexOf(node);
        if (index >= 0) {
          parent.children.splice(index, 1);
        }
      }
    }
    construct(item) {
      const current = this.current;
      if (typeof item.$type === "string") {
        this.current.element = item;
      }
      item.$cstNode = current;
      const node = this.nodeStack.pop();
      if ((node === null || node === void 0 ? void 0 : node.children.length) === 0) {
        this.removeNode(node);
      }
    }
    addHiddenTokens(hiddenTokens) {
      for (const token of hiddenTokens) {
        const hiddenNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0, cst_util_1.tokenToRange)(token), token.tokenType, true);
        hiddenNode.root = this.rootNode;
        this.addHiddenToken(this.rootNode, hiddenNode);
      }
    }
    addHiddenToken(node, token) {
      const { offset: tokenStart, end: tokenEnd } = token;
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        const { offset: childStart, end: childEnd } = child;
        if ((0, syntax_tree_1.isCompositeCstNode)(child) && tokenStart > childStart && tokenEnd < childEnd) {
          this.addHiddenToken(child, token);
          return;
        } else if (tokenEnd <= childStart) {
          node.children.splice(i, 0, token);
          return;
        }
      }
      node.children.push(token);
    }
  }
  cstNodeBuilder.CstNodeBuilder = CstNodeBuilder;
  class AbstractCstNode {
    get hidden() {
      return false;
    }
    get element() {
      var _a2, _b2;
      const node = typeof ((_a2 = this._element) === null || _a2 === void 0 ? void 0 : _a2.$type) === "string" ? this._element : (_b2 = this.parent) === null || _b2 === void 0 ? void 0 : _b2.element;
      if (!node) {
        throw new Error("This node has no associated AST element");
      }
      return node;
    }
    set element(value) {
      this._element = value;
    }
    get text() {
      return this.root.fullText.substring(this.offset, this.end);
    }
  }
  cstNodeBuilder.AbstractCstNode = AbstractCstNode;
  class LeafCstNodeImpl extends AbstractCstNode {
    get offset() {
      return this._offset;
    }
    get length() {
      return this._length;
    }
    get end() {
      return this._offset + this._length;
    }
    get hidden() {
      return this._hidden;
    }
    get tokenType() {
      return this._tokenType;
    }
    get range() {
      return this._range;
    }
    constructor(offset, length, range2, tokenType, hidden = false) {
      super();
      this._hidden = hidden;
      this._offset = offset;
      this._tokenType = tokenType;
      this._length = length;
      this._range = range2;
    }
  }
  cstNodeBuilder.LeafCstNodeImpl = LeafCstNodeImpl;
  class CompositeCstNodeImpl extends AbstractCstNode {
    constructor() {
      super(...arguments);
      this.children = new CstNodeContainer(this);
    }
    get offset() {
      var _a2, _b2;
      return (_b2 = (_a2 = this.firstNonHiddenNode) === null || _a2 === void 0 ? void 0 : _a2.offset) !== null && _b2 !== void 0 ? _b2 : 0;
    }
    get length() {
      return this.end - this.offset;
    }
    get end() {
      var _a2, _b2;
      return (_b2 = (_a2 = this.lastNonHiddenNode) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b2 !== void 0 ? _b2 : 0;
    }
    get range() {
      const firstNode = this.firstNonHiddenNode;
      const lastNode = this.lastNonHiddenNode;
      if (firstNode && lastNode) {
        if (this._rangeCache === void 0) {
          const { range: firstRange } = firstNode;
          const { range: lastRange } = lastNode;
          this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };
        }
        return this._rangeCache;
      } else {
        return { start: vscode_languageserver_types_1.Position.create(0, 0), end: vscode_languageserver_types_1.Position.create(0, 0) };
      }
    }
    get firstNonHiddenNode() {
      for (const child of this.children) {
        if (!child.hidden) {
          return child;
        }
      }
      return this.children[0];
    }
    get lastNonHiddenNode() {
      for (let i = this.children.length - 1; i >= 0; i--) {
        const child = this.children[i];
        if (!child.hidden) {
          return child;
        }
      }
      return this.children[this.children.length - 1];
    }
  }
  cstNodeBuilder.CompositeCstNodeImpl = CompositeCstNodeImpl;
  class CstNodeContainer extends Array {
    constructor(parent) {
      super();
      this.parent = parent;
      Object.setPrototypeOf(this, CstNodeContainer.prototype);
    }
    push(...items) {
      this.addParents(items);
      return super.push(...items);
    }
    unshift(...items) {
      this.addParents(items);
      return super.unshift(...items);
    }
    splice(start, count, ...items) {
      this.addParents(items);
      return super.splice(start, count, ...items);
    }
    addParents(items) {
      for (const item of items) {
        item.parent = this.parent;
      }
    }
  }
  class RootCstNodeImpl extends CompositeCstNodeImpl {
    get text() {
      return this._text.substring(this.offset, this.end);
    }
    get fullText() {
      return this._text;
    }
    constructor(input) {
      super();
      this._text = "";
      this._text = input !== null && input !== void 0 ? input : "";
    }
  }
  cstNodeBuilder.RootCstNodeImpl = RootCstNodeImpl;
  return cstNodeBuilder;
}
var hasRequiredLangiumParser;
function requireLangiumParser() {
  if (hasRequiredLangiumParser)
    return langiumParser;
  hasRequiredLangiumParser = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangiumCompletionParser = exports.LangiumParserErrorMessageProvider = exports.LangiumParser = exports.AbstractLangiumParser = exports.DatatypeSymbol = void 0;
    const chevrotain_1 = requireApi();
    const chevrotain_allstar_1 = requireLib$1();
    const ast_1 = requireAst();
    const internal_grammar_util_1 = requireInternalGrammarUtil();
    const ast_util_1 = requireAstUtil();
    const cst_node_builder_1 = requireCstNodeBuilder();
    exports.DatatypeSymbol = Symbol("Datatype");
    function isDataTypeNode(node) {
      return node.$type === exports.DatatypeSymbol;
    }
    const ruleSuffix = "​";
    const withRuleSuffix = (name2) => name2.endsWith(ruleSuffix) ? name2 : name2 + ruleSuffix;
    class AbstractLangiumParser {
      constructor(services2) {
        this._unorderedGroups = /* @__PURE__ */ new Map();
        this.lexer = services2.parser.Lexer;
        const tokens2 = this.lexer.definition;
        this.wrapper = new ChevrotainWrapper(tokens2, services2.parser.ParserConfig);
      }
      alternatives(idx, choices) {
        this.wrapper.wrapOr(idx, choices);
      }
      optional(idx, callback) {
        this.wrapper.wrapOption(idx, callback);
      }
      many(idx, callback) {
        this.wrapper.wrapMany(idx, callback);
      }
      atLeastOne(idx, callback) {
        this.wrapper.wrapAtLeastOne(idx, callback);
      }
      isRecording() {
        return this.wrapper.IS_RECORDING;
      }
      get unorderedGroups() {
        return this._unorderedGroups;
      }
      getRuleStack() {
        return this.wrapper.RULE_STACK;
      }
      finalize() {
        this.wrapper.wrapSelfAnalysis();
      }
    }
    exports.AbstractLangiumParser = AbstractLangiumParser;
    class LangiumParser extends AbstractLangiumParser {
      get current() {
        return this.stack[this.stack.length - 1];
      }
      constructor(services2) {
        super(services2);
        this.nodeBuilder = new cst_node_builder_1.CstNodeBuilder();
        this.stack = [];
        this.assignmentMap = /* @__PURE__ */ new Map();
        this.linker = services2.references.Linker;
        this.converter = services2.parser.ValueConverter;
        this.astReflection = services2.shared.AstReflection;
      }
      rule(rule, impl) {
        const type = rule.fragment ? void 0 : (0, internal_grammar_util_1.isDataTypeRule)(rule) ? exports.DatatypeSymbol : (0, internal_grammar_util_1.getTypeName)(rule);
        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));
        if (rule.entry) {
          this.mainRule = ruleMethod;
        }
        return ruleMethod;
      }
      parse(input) {
        this.nodeBuilder.buildRootNode(input);
        const lexerResult = this.lexer.tokenize(input);
        this.wrapper.input = lexerResult.tokens;
        const result = this.mainRule.call(this.wrapper, {});
        this.nodeBuilder.addHiddenTokens(lexerResult.hidden);
        this.unorderedGroups.clear();
        return {
          value: result,
          lexerErrors: lexerResult.errors,
          parserErrors: this.wrapper.errors
        };
      }
      startImplementation($type, implementation) {
        return (args) => {
          if (!this.isRecording()) {
            const node = { $type };
            this.stack.push(node);
            if ($type === exports.DatatypeSymbol) {
              node.value = "";
            }
          }
          let result;
          try {
            result = implementation(args);
          } catch (err) {
            result = void 0;
          }
          if (!this.isRecording() && result === void 0) {
            result = this.construct();
          }
          return result;
        };
      }
      consume(idx, tokenType, feature) {
        const token = this.wrapper.wrapConsume(idx, tokenType);
        if (!this.isRecording() && !token.isInsertedInRecovery) {
          const leafNode = this.nodeBuilder.buildLeafNode(token, feature);
          const { assignment, isCrossRef } = this.getAssignment(feature);
          const current = this.current;
          if (assignment) {
            const convertedValue = (0, ast_1.isKeyword)(feature) ? token.image : this.converter.convert(token.image, leafNode);
            this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);
          } else if (isDataTypeNode(current)) {
            let text = token.image;
            if (!(0, ast_1.isKeyword)(feature)) {
              text = this.converter.convert(text, leafNode).toString();
            }
            current.value += text;
          }
        }
      }
      subrule(idx, rule, feature, args) {
        let cstNode;
        if (!this.isRecording()) {
          cstNode = this.nodeBuilder.buildCompositeNode(feature);
        }
        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args);
        if (!this.isRecording() && cstNode && cstNode.length > 0) {
          this.performSubruleAssignment(subruleResult, feature, cstNode);
        }
      }
      performSubruleAssignment(result, feature, cstNode) {
        const { assignment, isCrossRef } = this.getAssignment(feature);
        if (assignment) {
          this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);
        } else if (!assignment) {
          const current = this.current;
          if (isDataTypeNode(current)) {
            current.value += result.toString();
          } else {
            const resultKind = result.$type;
            const object = this.assignWithoutOverride(result, current);
            if (resultKind) {
              object.$type = resultKind;
            }
            const newItem = object;
            this.stack.pop();
            this.stack.push(newItem);
          }
        }
      }
      action($type, action) {
        if (!this.isRecording()) {
          let last2 = this.current;
          if (!last2.$cstNode && action.feature && action.operator) {
            last2 = this.construct(false);
            const feature = last2.$cstNode.feature;
            this.nodeBuilder.buildCompositeNode(feature);
          }
          const newItem = { $type };
          this.stack.pop();
          this.stack.push(newItem);
          if (action.feature && action.operator) {
            this.assign(action.operator, action.feature, last2, last2.$cstNode, false);
          }
        }
      }
      construct(pop = true) {
        if (this.isRecording()) {
          return void 0;
        }
        const obj = this.current;
        (0, ast_util_1.linkContentToContainer)(obj);
        this.nodeBuilder.construct(obj);
        if (pop) {
          this.stack.pop();
        }
        if (isDataTypeNode(obj)) {
          return this.converter.convert(obj.value, obj.$cstNode);
        } else {
          this.assignMandatoryProperties(obj);
        }
        return obj;
      }
      assignMandatoryProperties(obj) {
        const typeMetaData = this.astReflection.getTypeMetaData(obj.$type);
        for (const mandatoryProperty of typeMetaData.mandatory) {
          const value = obj[mandatoryProperty.name];
          if (mandatoryProperty.type === "array" && !Array.isArray(value)) {
            obj[mandatoryProperty.name] = [];
          } else if (mandatoryProperty.type === "boolean" && value === void 0) {
            obj[mandatoryProperty.name] = false;
          }
        }
      }
      getAssignment(feature) {
        if (!this.assignmentMap.has(feature)) {
          const assignment = (0, ast_util_1.getContainerOfType)(feature, ast_1.isAssignment);
          this.assignmentMap.set(feature, {
            assignment,
            isCrossRef: assignment ? (0, ast_1.isCrossReference)(assignment.terminal) : false
          });
        }
        return this.assignmentMap.get(feature);
      }
      assign(operator2, feature, value, cstNode, isCrossRef) {
        const obj = this.current;
        let item;
        if (isCrossRef && typeof value === "string") {
          item = this.linker.buildReference(obj, feature, cstNode, value);
        } else {
          item = value;
        }
        switch (operator2) {
          case "=": {
            obj[feature] = item;
            break;
          }
          case "?=": {
            obj[feature] = true;
            break;
          }
          case "+=": {
            if (!Array.isArray(obj[feature])) {
              obj[feature] = [];
            }
            obj[feature].push(item);
          }
        }
      }
      assignWithoutOverride(target, source) {
        for (const [name2, existingValue] of Object.entries(source)) {
          const newValue = target[name2];
          if (newValue === void 0) {
            target[name2] = existingValue;
          } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {
            existingValue.push(...newValue);
            target[name2] = existingValue;
          }
        }
        return target;
      }
      get definitionErrors() {
        return this.wrapper.definitionErrors;
      }
    }
    exports.LangiumParser = LangiumParser;
    class LangiumParserErrorMessageProvider {
      buildMismatchTokenMessage({ expected, actual }) {
        const expectedMsg = expected.LABEL ? "`" + expected.LABEL + "`" : expected.name.endsWith(":KW") ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'` : `token of type '${expected.name}'`;
        return `Expecting ${expectedMsg} but found \`${actual.image}\`.`;
      }
      buildNotAllInputParsedMessage({ firstRedundant }) {
        return `Expecting end of file but found \`${firstRedundant.image}\`.`;
      }
      buildNoViableAltMessage(options) {
        return chevrotain_1.defaultParserErrorProvider.buildNoViableAltMessage(options);
      }
      buildEarlyExitMessage(options) {
        return chevrotain_1.defaultParserErrorProvider.buildEarlyExitMessage(options);
      }
    }
    exports.LangiumParserErrorMessageProvider = LangiumParserErrorMessageProvider;
    class LangiumCompletionParser extends AbstractLangiumParser {
      constructor() {
        super(...arguments);
        this.tokens = [];
        this.elementStack = [];
        this.lastElementStack = [];
        this.nextTokenIndex = 0;
        this.stackSize = 0;
      }
      action() {
      }
      construct() {
        return void 0;
      }
      parse(input) {
        this.resetState();
        const tokens2 = this.lexer.tokenize(input);
        this.tokens = tokens2.tokens;
        this.wrapper.input = [...this.tokens];
        this.mainRule.call(this.wrapper, {});
        this.unorderedGroups.clear();
        return {
          tokens: this.tokens,
          elementStack: [...this.lastElementStack],
          tokenIndex: this.nextTokenIndex
        };
      }
      rule(rule, impl) {
        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));
        if (rule.entry) {
          this.mainRule = ruleMethod;
        }
        return ruleMethod;
      }
      resetState() {
        this.elementStack = [];
        this.lastElementStack = [];
        this.nextTokenIndex = 0;
        this.stackSize = 0;
      }
      startImplementation(implementation) {
        return (args) => {
          const size = this.keepStackSize();
          try {
            implementation(args);
          } finally {
            this.resetStackSize(size);
          }
        };
      }
      removeUnexpectedElements() {
        this.elementStack.splice(this.stackSize);
      }
      keepStackSize() {
        const size = this.elementStack.length;
        this.stackSize = size;
        return size;
      }
      resetStackSize(size) {
        this.removeUnexpectedElements();
        this.stackSize = size;
      }
      consume(idx, tokenType, feature) {
        this.wrapper.wrapConsume(idx, tokenType);
        if (!this.isRecording()) {
          this.lastElementStack = [...this.elementStack, feature];
          this.nextTokenIndex = this.currIdx + 1;
        }
      }
      subrule(idx, rule, feature, args) {
        this.before(feature);
        this.wrapper.wrapSubrule(idx, rule, args);
        this.after(feature);
      }
      before(element) {
        if (!this.isRecording()) {
          this.elementStack.push(element);
        }
      }
      after(element) {
        if (!this.isRecording()) {
          const index = this.elementStack.lastIndexOf(element);
          if (index >= 0) {
            this.elementStack.splice(index);
          }
        }
      }
      get currIdx() {
        return this.wrapper.currIdx;
      }
    }
    exports.LangiumCompletionParser = LangiumCompletionParser;
    const defaultConfig = {
      recoveryEnabled: true,
      nodeLocationTracking: "full",
      skipValidations: true,
      errorMessageProvider: new LangiumParserErrorMessageProvider()
    };
    class ChevrotainWrapper extends chevrotain_1.EmbeddedActionsParser {
      constructor(tokens2, config2) {
        const useDefaultLookahead = config2 && "maxLookahead" in config2;
        super(tokens2, Object.assign(Object.assign(Object.assign({}, defaultConfig), { lookaheadStrategy: useDefaultLookahead ? new chevrotain_1.LLkLookaheadStrategy({ maxLookahead: config2.maxLookahead }) : new chevrotain_allstar_1.LLStarLookaheadStrategy() }), config2));
      }
      get IS_RECORDING() {
        return this.RECORDING_PHASE;
      }
      DEFINE_RULE(name2, impl) {
        return this.RULE(name2, impl);
      }
      wrapSelfAnalysis() {
        this.performSelfAnalysis();
      }
      wrapConsume(idx, tokenType) {
        return this.consume(idx, tokenType);
      }
      wrapSubrule(idx, rule, args) {
        return this.subrule(idx, rule, {
          ARGS: [args]
        });
      }
      wrapOr(idx, choices) {
        this.or(idx, choices);
      }
      wrapOption(idx, callback) {
        this.option(idx, callback);
      }
      wrapMany(idx, callback) {
        this.many(idx, callback);
      }
      wrapAtLeastOne(idx, callback) {
        this.atLeastOne(idx, callback);
      }
    }
  })(langiumParser);
  return langiumParser;
}
var parserBuilderBase = {};
var errors = {};
var hasRequiredErrors;
function requireErrors() {
  if (hasRequiredErrors)
    return errors;
  hasRequiredErrors = 1;
  Object.defineProperty(errors, "__esModule", { value: true });
  errors.assertUnreachable = errors.ErrorWithLocation = void 0;
  class ErrorWithLocation extends Error {
    constructor(node, message) {
      super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);
    }
  }
  errors.ErrorWithLocation = ErrorWithLocation;
  function assertUnreachable(_) {
    throw new Error("Error! The input value was not handled.");
  }
  errors.assertUnreachable = assertUnreachable;
  return errors;
}
var hasRequiredParserBuilderBase;
function requireParserBuilderBase() {
  if (hasRequiredParserBuilderBase)
    return parserBuilderBase;
  hasRequiredParserBuilderBase = 1;
  Object.defineProperty(parserBuilderBase, "__esModule", { value: true });
  parserBuilderBase.createParser = void 0;
  const chevrotain_1 = requireApi();
  const ast_1 = requireAst();
  const errors_1 = requireErrors();
  const stream_1 = requireStream();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const grammar_util_1 = requireGrammarUtil();
  function createParser(grammar2, parser2, tokens2) {
    const rules = /* @__PURE__ */ new Map();
    const parserContext = {
      parser: parser2,
      tokens: tokens2,
      rules,
      ruleNames: /* @__PURE__ */ new Map()
    };
    buildRules(parserContext, grammar2);
    return parser2;
  }
  parserBuilderBase.createParser = createParser;
  function buildRules(parserContext, grammar2) {
    const reachable = (0, grammar_util_1.getAllReachableRules)(grammar2, false);
    const parserRules = (0, stream_1.stream)(grammar2.rules).filter(ast_1.isParserRule).filter((rule) => reachable.has(rule));
    for (const rule of parserRules) {
      const ctx = Object.assign(Object.assign({}, parserContext), { consume: 1, optional: 1, subrule: 1, many: 1, or: 1 });
      ctx.rules.set(rule.name, parserContext.parser.rule(rule, buildElement(ctx, rule.definition)));
    }
  }
  function buildElement(ctx, element, ignoreGuard = false) {
    let method;
    if ((0, ast_1.isKeyword)(element)) {
      method = buildKeyword(ctx, element);
    } else if ((0, ast_1.isAction)(element)) {
      method = buildAction(ctx, element);
    } else if ((0, ast_1.isAssignment)(element)) {
      method = buildElement(ctx, element.terminal);
    } else if ((0, ast_1.isCrossReference)(element)) {
      method = buildCrossReference(ctx, element);
    } else if ((0, ast_1.isRuleCall)(element)) {
      method = buildRuleCall(ctx, element);
    } else if ((0, ast_1.isAlternatives)(element)) {
      method = buildAlternatives(ctx, element);
    } else if ((0, ast_1.isUnorderedGroup)(element)) {
      method = buildUnorderedGroup(ctx, element);
    } else if ((0, ast_1.isGroup)(element)) {
      method = buildGroup(ctx, element);
    } else {
      throw new errors_1.ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);
    }
    return wrap(ctx, ignoreGuard ? void 0 : getGuardCondition(element), method, element.cardinality);
  }
  function buildAction(ctx, action) {
    const actionType = (0, internal_grammar_util_1.getTypeName)(action);
    return () => ctx.parser.action(actionType, action);
  }
  function buildRuleCall(ctx, ruleCall) {
    const rule = ruleCall.rule.ref;
    if ((0, ast_1.isParserRule)(rule)) {
      const idx = ctx.subrule++;
      const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});
      return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), ruleCall, predicate(args));
    } else if ((0, ast_1.isTerminalRule)(rule)) {
      const idx = ctx.consume++;
      const method = getToken(ctx, rule.name);
      return () => ctx.parser.consume(idx, method, ruleCall);
    } else if (!rule) {
      throw new errors_1.ErrorWithLocation(ruleCall.$cstNode, `Undefined rule type: ${ruleCall.$type}`);
    } else {
      (0, errors_1.assertUnreachable)(rule);
    }
  }
  function buildRuleCallPredicate(rule, namedArgs) {
    const predicates = namedArgs.map((e) => buildPredicate(e.value));
    return (args) => {
      const ruleArgs = {};
      for (let i = 0; i < predicates.length; i++) {
        const ruleTarget = rule.parameters[i];
        const predicate = predicates[i];
        ruleArgs[ruleTarget.name] = predicate(args);
      }
      return ruleArgs;
    };
  }
  function buildPredicate(condition) {
    if ((0, ast_1.isDisjunction)(condition)) {
      const left = buildPredicate(condition.left);
      const right = buildPredicate(condition.right);
      return (args) => left(args) || right(args);
    } else if ((0, ast_1.isConjunction)(condition)) {
      const left = buildPredicate(condition.left);
      const right = buildPredicate(condition.right);
      return (args) => left(args) && right(args);
    } else if ((0, ast_1.isNegation)(condition)) {
      const value = buildPredicate(condition.value);
      return (args) => !value(args);
    } else if ((0, ast_1.isParameterReference)(condition)) {
      const name2 = condition.parameter.ref.name;
      return (args) => args !== void 0 && args[name2] === true;
    } else if ((0, ast_1.isLiteralCondition)(condition)) {
      const value = Boolean(condition.true);
      return () => value;
    }
    (0, errors_1.assertUnreachable)(condition);
  }
  function buildAlternatives(ctx, alternatives) {
    if (alternatives.elements.length === 1) {
      return buildElement(ctx, alternatives.elements[0]);
    } else {
      const methods = [];
      for (const element of alternatives.elements) {
        const predicatedMethod = {
          // Since we handle the guard condition in the alternative already
          // We can ignore the group guard condition inside
          ALT: buildElement(ctx, element, true)
        };
        const guard = getGuardCondition(element);
        if (guard) {
          predicatedMethod.GATE = buildPredicate(guard);
        }
        methods.push(predicatedMethod);
      }
      const idx = ctx.or++;
      return (args) => ctx.parser.alternatives(idx, methods.map((method) => {
        const alt = {
          ALT: () => method.ALT(args)
        };
        const gate = method.GATE;
        if (gate) {
          alt.GATE = () => gate(args);
        }
        return alt;
      }));
    }
  }
  function buildUnorderedGroup(ctx, group) {
    if (group.elements.length === 1) {
      return buildElement(ctx, group.elements[0]);
    }
    const methods = [];
    for (const element of group.elements) {
      const predicatedMethod = {
        // Since we handle the guard condition in the alternative already
        // We can ignore the group guard condition inside
        ALT: buildElement(ctx, element, true)
      };
      const guard = getGuardCondition(element);
      if (guard) {
        predicatedMethod.GATE = buildPredicate(guard);
      }
      methods.push(predicatedMethod);
    }
    const orIdx = ctx.or++;
    const idFunc = (groupIdx, lParser) => {
      const stackId = lParser.getRuleStack().join("-");
      return `uGroup_${groupIdx}_${stackId}`;
    };
    const alternatives = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {
      const alt = { ALT: () => true };
      const parser2 = ctx.parser;
      alt.ALT = () => {
        method.ALT(args);
        if (!parser2.isRecording()) {
          const key = idFunc(orIdx, parser2);
          if (!parser2.unorderedGroups.get(key)) {
            parser2.unorderedGroups.set(key, []);
          }
          const groupState = parser2.unorderedGroups.get(key);
          if (typeof (groupState === null || groupState === void 0 ? void 0 : groupState[idx]) === "undefined") {
            groupState[idx] = true;
          }
        }
      };
      const gate = method.GATE;
      if (gate) {
        alt.GATE = () => gate(args);
      } else {
        alt.GATE = () => {
          const trackedAlternatives = parser2.unorderedGroups.get(idFunc(orIdx, parser2));
          const allow = !(trackedAlternatives === null || trackedAlternatives === void 0 ? void 0 : trackedAlternatives[idx]);
          return allow;
        };
      }
      return alt;
    }));
    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, "*");
    return (args) => {
      wrapped(args);
      if (!ctx.parser.isRecording()) {
        ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));
      }
    };
  }
  function buildGroup(ctx, group) {
    const methods = group.elements.map((e) => buildElement(ctx, e));
    return (args) => methods.forEach((method) => method(args));
  }
  function getGuardCondition(element) {
    if ((0, ast_1.isGroup)(element)) {
      return element.guardCondition;
    }
    return void 0;
  }
  function buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {
    if (!terminal) {
      if (!crossRef.type.ref) {
        throw new Error("Could not resolve reference to type: " + crossRef.type.$refText);
      }
      const assignment = (0, grammar_util_1.findNameAssignment)(crossRef.type.ref);
      const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;
      if (!assignTerminal) {
        throw new Error("Could not find name assignment for type: " + (0, internal_grammar_util_1.getTypeName)(crossRef.type.ref));
      }
      return buildCrossReference(ctx, crossRef, assignTerminal);
    } else if ((0, ast_1.isRuleCall)(terminal) && (0, ast_1.isParserRule)(terminal.rule.ref)) {
      const idx = ctx.subrule++;
      return (args) => ctx.parser.subrule(idx, getRule(ctx, terminal.rule.ref), crossRef, args);
    } else if ((0, ast_1.isRuleCall)(terminal) && (0, ast_1.isTerminalRule)(terminal.rule.ref)) {
      const idx = ctx.consume++;
      const terminalRule = getToken(ctx, terminal.rule.ref.name);
      return () => ctx.parser.consume(idx, terminalRule, crossRef);
    } else if ((0, ast_1.isKeyword)(terminal)) {
      const idx = ctx.consume++;
      const keyword2 = getToken(ctx, terminal.value);
      return () => ctx.parser.consume(idx, keyword2, crossRef);
    } else {
      throw new Error("Could not build cross reference parser");
    }
  }
  function buildKeyword(ctx, keyword2) {
    const idx = ctx.consume++;
    const token = ctx.tokens[keyword2.value];
    if (!token) {
      throw new Error("Could not find token for keyword: " + keyword2.value);
    }
    return () => ctx.parser.consume(idx, token, keyword2);
  }
  function wrap(ctx, guard, method, cardinality) {
    const gate = guard && buildPredicate(guard);
    if (!cardinality) {
      if (gate) {
        const idx = ctx.or++;
        return (args) => ctx.parser.alternatives(idx, [
          {
            ALT: () => method(args),
            GATE: () => gate(args)
          },
          {
            ALT: (0, chevrotain_1.EMPTY_ALT)(),
            GATE: () => !gate(args)
          }
        ]);
      } else {
        return method;
      }
    }
    if (cardinality === "*") {
      const idx = ctx.many++;
      return (args) => ctx.parser.many(idx, {
        DEF: () => method(args),
        GATE: gate ? () => gate(args) : void 0
      });
    } else if (cardinality === "+") {
      const idx = ctx.many++;
      if (gate) {
        const orIdx = ctx.or++;
        return (args) => ctx.parser.alternatives(orIdx, [
          {
            ALT: () => ctx.parser.atLeastOne(idx, {
              DEF: () => method(args)
            }),
            GATE: () => gate(args)
          },
          {
            ALT: (0, chevrotain_1.EMPTY_ALT)(),
            GATE: () => !gate(args)
          }
        ]);
      } else {
        return (args) => ctx.parser.atLeastOne(idx, {
          DEF: () => method(args)
        });
      }
    } else if (cardinality === "?") {
      const idx = ctx.optional++;
      return (args) => ctx.parser.optional(idx, {
        DEF: () => method(args),
        GATE: gate ? () => gate(args) : void 0
      });
    } else {
      (0, errors_1.assertUnreachable)(cardinality);
    }
  }
  function getRule(ctx, element) {
    const name2 = getRuleName(ctx, element);
    const rule = ctx.rules.get(name2);
    if (!rule)
      throw new Error(`Rule "${name2}" not found."`);
    return rule;
  }
  function getRuleName(ctx, element) {
    if ((0, ast_1.isParserRule)(element)) {
      return element.name;
    } else if (ctx.ruleNames.has(element)) {
      return ctx.ruleNames.get(element);
    } else {
      let item = element;
      let parent = item.$container;
      let ruleName = element.$type;
      while (!(0, ast_1.isParserRule)(parent)) {
        if ((0, ast_1.isGroup)(parent) || (0, ast_1.isAlternatives)(parent) || (0, ast_1.isUnorderedGroup)(parent)) {
          const index = parent.elements.indexOf(item);
          ruleName = index.toString() + ":" + ruleName;
        }
        item = parent;
        parent = parent.$container;
      }
      const rule = parent;
      ruleName = rule.name + ":" + ruleName;
      ctx.ruleNames.set(element, ruleName);
      return ruleName;
    }
  }
  function getToken(ctx, name2) {
    const token = ctx.tokens[name2];
    if (!token)
      throw new Error(`Token "${name2}" not found."`);
    return token;
  }
  return parserBuilderBase;
}
var hasRequiredCompletionParserBuilder;
function requireCompletionParserBuilder() {
  if (hasRequiredCompletionParserBuilder)
    return completionParserBuilder;
  hasRequiredCompletionParserBuilder = 1;
  Object.defineProperty(completionParserBuilder, "__esModule", { value: true });
  completionParserBuilder.createCompletionParser = void 0;
  const langium_parser_1 = requireLangiumParser();
  const parser_builder_base_1 = requireParserBuilderBase();
  function createCompletionParser(services2) {
    const grammar2 = services2.Grammar;
    const lexer2 = services2.parser.Lexer;
    const parser2 = new langium_parser_1.LangiumCompletionParser(services2);
    (0, parser_builder_base_1.createParser)(grammar2, parser2, lexer2.definition);
    parser2.finalize();
    return parser2;
  }
  completionParserBuilder.createCompletionParser = createCompletionParser;
  return completionParserBuilder;
}
var langiumParserBuilder = {};
var hasRequiredLangiumParserBuilder;
function requireLangiumParserBuilder() {
  if (hasRequiredLangiumParserBuilder)
    return langiumParserBuilder;
  hasRequiredLangiumParserBuilder = 1;
  Object.defineProperty(langiumParserBuilder, "__esModule", { value: true });
  langiumParserBuilder.prepareLangiumParser = langiumParserBuilder.createLangiumParser = void 0;
  const langium_parser_1 = requireLangiumParser();
  const parser_builder_base_1 = requireParserBuilderBase();
  function createLangiumParser(services2) {
    const parser2 = prepareLangiumParser(services2);
    parser2.finalize();
    return parser2;
  }
  langiumParserBuilder.createLangiumParser = createLangiumParser;
  function prepareLangiumParser(services2) {
    const grammar2 = services2.Grammar;
    const lexer2 = services2.parser.Lexer;
    const parser2 = new langium_parser_1.LangiumParser(services2);
    return (0, parser_builder_base_1.createParser)(grammar2, parser2, lexer2.definition);
  }
  langiumParserBuilder.prepareLangiumParser = prepareLangiumParser;
  return langiumParserBuilder;
}
var tokenBuilder = {};
var hasRequiredTokenBuilder;
function requireTokenBuilder() {
  if (hasRequiredTokenBuilder)
    return tokenBuilder;
  hasRequiredTokenBuilder = 1;
  Object.defineProperty(tokenBuilder, "__esModule", { value: true });
  tokenBuilder.DefaultTokenBuilder = void 0;
  const chevrotain_1 = requireApi();
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const ast_util_1 = requireAstUtil();
  const grammar_util_1 = requireGrammarUtil();
  const regex_util_1 = requireRegexUtil();
  const stream_1 = requireStream();
  class DefaultTokenBuilder {
    buildTokens(grammar2, options) {
      const reachableRules = (0, stream_1.stream)((0, grammar_util_1.getAllReachableRules)(grammar2, false));
      const terminalTokens = this.buildTerminalTokens(reachableRules);
      const tokens2 = this.buildKeywordTokens(reachableRules, terminalTokens, options);
      terminalTokens.forEach((terminalToken) => {
        const pattern = terminalToken.PATTERN;
        if (typeof pattern === "object" && pattern && "test" in pattern && (0, regex_util_1.isWhitespaceRegExp)(pattern)) {
          tokens2.unshift(terminalToken);
        } else {
          tokens2.push(terminalToken);
        }
      });
      return tokens2;
    }
    buildTerminalTokens(rules) {
      return rules.filter(ast_1.isTerminalRule).filter((e) => !e.fragment).map((terminal) => this.buildTerminalToken(terminal)).toArray();
    }
    buildTerminalToken(terminal) {
      const regex = (0, internal_grammar_util_1.terminalRegex)(terminal);
      const token = { name: terminal.name, PATTERN: new RegExp(regex) };
      if (terminal.hidden) {
        token.GROUP = (0, regex_util_1.isWhitespaceRegExp)(regex) ? chevrotain_1.Lexer.SKIPPED : "hidden";
      }
      return token;
    }
    buildKeywordTokens(rules, terminalTokens, options) {
      return rules.filter(ast_1.isParserRule).flatMap((rule) => (0, ast_util_1.streamAllContents)(rule).filter(ast_1.isKeyword)).distinct((e) => e.value).toArray().sort((a2, b2) => b2.value.length - a2.value.length).map((keyword2) => this.buildKeywordToken(keyword2, terminalTokens, Boolean(options === null || options === void 0 ? void 0 : options.caseInsensitive)));
    }
    buildKeywordToken(keyword2, terminalTokens, caseInsensitive) {
      return {
        name: keyword2.value,
        PATTERN: this.buildKeywordPattern(keyword2, caseInsensitive),
        LONGER_ALT: this.findLongerAlt(keyword2, terminalTokens)
      };
    }
    buildKeywordPattern(keyword2, caseInsensitive) {
      return caseInsensitive ? new RegExp((0, regex_util_1.getCaseInsensitivePattern)(keyword2.value)) : keyword2.value;
    }
    findLongerAlt(keyword2, terminalTokens) {
      return terminalTokens.reduce((longerAlts, token) => {
        const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;
        if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && (0, regex_util_1.partialMatches)("^" + pattern.source + "$", keyword2.value)) {
          longerAlts.push(token);
        }
        return longerAlts;
      }, []);
    }
  }
  tokenBuilder.DefaultTokenBuilder = DefaultTokenBuilder;
  return tokenBuilder;
}
var valueConverter = {};
var hasRequiredValueConverter;
function requireValueConverter() {
  if (hasRequiredValueConverter)
    return valueConverter;
  hasRequiredValueConverter = 1;
  Object.defineProperty(valueConverter, "__esModule", { value: true });
  valueConverter.convertBoolean = valueConverter.convertNumber = valueConverter.convertDate = valueConverter.convertBigint = valueConverter.convertInt = valueConverter.convertID = valueConverter.convertRegexLiteral = valueConverter.convertString = valueConverter.DefaultValueConverter = void 0;
  const ast_1 = requireAst();
  const internal_grammar_util_1 = requireInternalGrammarUtil();
  const grammar_util_1 = requireGrammarUtil();
  class DefaultValueConverter {
    convert(input, cstNode) {
      let feature = cstNode.feature;
      if ((0, ast_1.isCrossReference)(feature)) {
        feature = (0, grammar_util_1.getCrossReferenceTerminal)(feature);
      }
      if ((0, ast_1.isRuleCall)(feature)) {
        const rule = feature.rule.ref;
        if (!rule) {
          throw new Error("This cst node was not parsed by a rule.");
        }
        return this.runConverter(rule, input, cstNode);
      }
      return input;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    runConverter(rule, input, cstNode) {
      var _a2;
      switch (rule.name.toUpperCase()) {
        case "INT":
          return convertInt(input);
        case "STRING":
          return convertString(input);
        case "ID":
          return convertID(input);
        case "REGEXLITERAL":
          return convertRegexLiteral(input);
      }
      switch ((_a2 = (0, internal_grammar_util_1.getRuleType)(rule)) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase()) {
        case "number":
          return convertNumber(input);
        case "boolean":
          return convertBoolean(input);
        case "bigint":
          return convertBigint(input);
        case "date":
          return convertDate(input);
        default:
          return input;
      }
    }
  }
  valueConverter.DefaultValueConverter = DefaultValueConverter;
  function convertString(input) {
    let result = "";
    for (let i = 1; i < input.length - 1; i++) {
      const c2 = input.charAt(i);
      if (c2 === "\\") {
        const c1 = input.charAt(++i);
        result += convertEscapeCharacter(c1);
      } else {
        result += c2;
      }
    }
    return result;
  }
  valueConverter.convertString = convertString;
  function convertEscapeCharacter(char) {
    switch (char) {
      case "b":
        return "\b";
      case "f":
        return "\f";
      case "n":
        return "\n";
      case "r":
        return "\r";
      case "t":
        return "	";
      case "v":
        return "\v";
      case "0":
        return "\0";
      default:
        return char;
    }
  }
  function convertRegexLiteral(input) {
    return input.substring(1, input.length - 1);
  }
  valueConverter.convertRegexLiteral = convertRegexLiteral;
  function convertID(input) {
    if (input.charAt(0) === "^") {
      return input.substring(1);
    } else {
      return input;
    }
  }
  valueConverter.convertID = convertID;
  function convertInt(input) {
    return parseInt(input);
  }
  valueConverter.convertInt = convertInt;
  function convertBigint(input) {
    return BigInt(input);
  }
  valueConverter.convertBigint = convertBigint;
  function convertDate(input) {
    return new Date(input);
  }
  valueConverter.convertDate = convertDate;
  function convertNumber(input) {
    return Number(input);
  }
  valueConverter.convertNumber = convertNumber;
  function convertBoolean(input) {
    return input.toLowerCase() === "true";
  }
  valueConverter.convertBoolean = convertBoolean;
  return valueConverter;
}
var linker = {};
var hasRequiredLinker;
function requireLinker() {
  if (hasRequiredLinker)
    return linker;
  hasRequiredLinker = 1;
  Object.defineProperty(linker, "__esModule", { value: true });
  linker.DefaultLinker = void 0;
  const vscode_languageserver_1 = requireMain();
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const promise_util_1 = requirePromiseUtil();
  const documents_1 = requireDocuments$1();
  class DefaultLinker {
    constructor(services2) {
      this.reflection = services2.shared.AstReflection;
      this.langiumDocuments = () => services2.shared.workspace.LangiumDocuments;
      this.scopeProvider = services2.references.ScopeProvider;
      this.astNodeLocator = services2.workspace.AstNodeLocator;
    }
    async link(document2, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      for (const node of (0, ast_util_1.streamAst)(document2.parseResult.value)) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        (0, ast_util_1.streamReferences)(node).forEach((ref) => this.doLink(ref, document2));
      }
      document2.state = documents_1.DocumentState.Linked;
    }
    doLink(refInfo, document2) {
      const ref = refInfo.reference;
      if (ref._ref === void 0) {
        try {
          const description = this.getCandidate(refInfo);
          if ((0, syntax_tree_1.isLinkingError)(description)) {
            ref._ref = description;
          } else {
            ref._nodeDescription = description;
            if (this.langiumDocuments().hasDocument(description.documentUri)) {
              const linkedNode = this.loadAstNode(description);
              ref._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : this.createLinkingError(refInfo, description);
            }
          }
        } catch (err) {
          ref._ref = Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${ref.$refText}': ${err}` });
        }
      }
      document2.references.push(ref);
    }
    unlink(document2) {
      for (const ref of document2.references) {
        delete ref._ref;
        delete ref._nodeDescription;
      }
      document2.references = [];
    }
    getCandidate(refInfo) {
      const scope = this.scopeProvider.getScope(refInfo);
      const description = scope.getElement(refInfo.reference.$refText);
      return description !== null && description !== void 0 ? description : this.createLinkingError(refInfo);
    }
    buildReference(node, property, refNode, refText) {
      const linker2 = this;
      const reference = {
        $refNode: refNode,
        $refText: refText,
        get ref() {
          var _a2;
          if ((0, syntax_tree_1.isAstNode)(this._ref)) {
            return this._ref;
          } else if ((0, syntax_tree_1.isAstNodeDescription)(this._nodeDescription)) {
            const linkedNode = linker2.loadAstNode(this._nodeDescription);
            this._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : linker2.createLinkingError({ reference, container: node, property }, this._nodeDescription);
          } else if (this._ref === void 0) {
            const refData = linker2.getLinkedNode({ reference, container: node, property });
            if (refData.error && (0, ast_util_1.getDocument)(node).state < documents_1.DocumentState.ComputedScopes) {
              return void 0;
            }
            this._ref = (_a2 = refData.node) !== null && _a2 !== void 0 ? _a2 : refData.error;
            this._nodeDescription = refData.descr;
          }
          return (0, syntax_tree_1.isAstNode)(this._ref) ? this._ref : void 0;
        },
        get $nodeDescription() {
          return this._nodeDescription;
        },
        get error() {
          return (0, syntax_tree_1.isLinkingError)(this._ref) ? this._ref : void 0;
        }
      };
      return reference;
    }
    getLinkedNode(refInfo) {
      try {
        const description = this.getCandidate(refInfo);
        if ((0, syntax_tree_1.isLinkingError)(description)) {
          return { error: description };
        }
        const linkedNode = this.loadAstNode(description);
        if (linkedNode) {
          return { node: linkedNode, descr: description };
        } else {
          return {
            descr: description,
            error: this.createLinkingError(refInfo, description)
          };
        }
      } catch (err) {
        return {
          error: Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${err}` })
        };
      }
    }
    loadAstNode(nodeDescription) {
      if (nodeDescription.node) {
        return nodeDescription.node;
      }
      const doc2 = this.langiumDocuments().getOrCreateDocument(nodeDescription.documentUri);
      return this.astNodeLocator.getAstNode(doc2.parseResult.value, nodeDescription.path);
    }
    createLinkingError(refInfo, targetDescription) {
      const document2 = (0, ast_util_1.getDocument)(refInfo.container);
      if (document2.state < documents_1.DocumentState.ComputedScopes) {
        console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document2.uri}).`);
      }
      const referenceType = this.reflection.getReferenceType(refInfo);
      return Object.assign(Object.assign({}, refInfo), { message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`, targetDescription });
    }
  }
  linker.DefaultLinker = DefaultLinker;
  return linker;
}
var jsonSerializer = {};
var hasRequiredJsonSerializer;
function requireJsonSerializer() {
  if (hasRequiredJsonSerializer)
    return jsonSerializer;
  hasRequiredJsonSerializer = 1;
  Object.defineProperty(jsonSerializer, "__esModule", { value: true });
  jsonSerializer.DefaultJsonSerializer = void 0;
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const grammar_util_1 = requireGrammarUtil();
  function isIntermediateReference(obj) {
    return typeof obj === "object" && !!obj && ("$ref" in obj || "$error" in obj);
  }
  class DefaultJsonSerializer {
    constructor(services2) {
      this.ignoreProperties = /* @__PURE__ */ new Set(["$container", "$containerProperty", "$containerIndex", "$document", "$cstNode"]);
      this.astNodeLocator = services2.workspace.AstNodeLocator;
      this.nameProvider = services2.references.NameProvider;
    }
    serialize(node, options) {
      const specificReplacer = options === null || options === void 0 ? void 0 : options.replacer;
      const defaultReplacer = (key, value) => this.replacer(key, value, options);
      const replacer = specificReplacer ? (key, value) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;
      return JSON.stringify(node, replacer, options === null || options === void 0 ? void 0 : options.space);
    }
    deserialize(content2) {
      const root = JSON.parse(content2);
      this.linkNode(root, root);
      return root;
    }
    replacer(key, value, { refText, sourceText, textRegions } = {}) {
      var _a2, _b2, _c2;
      if (this.ignoreProperties.has(key)) {
        return void 0;
      } else if ((0, syntax_tree_1.isReference)(value)) {
        const refValue = value.ref;
        const $refText = refText ? value.$refText : void 0;
        if (refValue) {
          return {
            $refText,
            $ref: "#" + (refValue && this.astNodeLocator.getAstNodePath(refValue))
          };
        } else {
          return {
            $refText,
            $error: (_b2 = (_a2 = value.error) === null || _a2 === void 0 ? void 0 : _a2.message) !== null && _b2 !== void 0 ? _b2 : "Could not resolve reference"
          };
        }
      } else {
        let astNode = void 0;
        if (textRegions && (0, syntax_tree_1.isAstNode)(value)) {
          astNode = this.addAstNodeRegionWithAssignmentsTo(Object.assign({}, value));
          if ((!key || value.$document) && (astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion)) {
            try {
              astNode.$textRegion.documentURI = (0, ast_util_1.getDocument)(value).uri.toString();
            } catch (e) {
            }
          }
        }
        if (sourceText && !key && (0, syntax_tree_1.isAstNode)(value)) {
          astNode !== null && astNode !== void 0 ? astNode : astNode = Object.assign({}, value);
          astNode.$sourceText = (_c2 = value.$cstNode) === null || _c2 === void 0 ? void 0 : _c2.text;
        }
        return astNode !== null && astNode !== void 0 ? astNode : value;
      }
    }
    addAstNodeRegionWithAssignmentsTo(node) {
      const createDocumentSegment = (cstNode) => ({
        offset: cstNode.offset,
        end: cstNode.end,
        length: cstNode.length,
        range: cstNode.range
      });
      if (node.$cstNode) {
        const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);
        const assignments = textRegion.assignments = {};
        Object.keys(node).filter((key) => !key.startsWith("$")).forEach((key) => {
          const propertyAssignments = (0, grammar_util_1.findNodesForProperty)(node.$cstNode, key).map(createDocumentSegment);
          if (propertyAssignments.length !== 0) {
            assignments[key] = propertyAssignments;
          }
        });
        return node;
      }
      return void 0;
    }
    linkNode(node, root, container, containerProperty, containerIndex) {
      for (const [propertyName2, item] of Object.entries(node)) {
        if (Array.isArray(item)) {
          for (let index = 0; index < item.length; index++) {
            const element = item[index];
            if (isIntermediateReference(element)) {
              item[index] = this.reviveReference(node, propertyName2, root, element);
            } else if ((0, syntax_tree_1.isAstNode)(element)) {
              this.linkNode(element, root, node, propertyName2, index);
            }
          }
        } else if (isIntermediateReference(item)) {
          node[propertyName2] = this.reviveReference(node, propertyName2, root, item);
        } else if ((0, syntax_tree_1.isAstNode)(item)) {
          this.linkNode(item, root, node, propertyName2);
        }
      }
      const mutable = node;
      mutable.$container = container;
      mutable.$containerProperty = containerProperty;
      mutable.$containerIndex = containerIndex;
    }
    reviveReference(container, property, root, reference) {
      let refText = reference.$refText;
      if (reference.$ref) {
        const ref = this.getRefNode(root, reference.$ref);
        if (!refText) {
          refText = this.nameProvider.getName(ref);
        }
        return {
          $refText: refText !== null && refText !== void 0 ? refText : "",
          ref
        };
      } else if (reference.$error) {
        const ref = {
          $refText: refText !== null && refText !== void 0 ? refText : ""
        };
        ref.error = {
          container,
          property,
          message: reference.$error,
          reference: ref
        };
        return ref;
      } else {
        return void 0;
      }
    }
    getRefNode(root, path) {
      return this.astNodeLocator.getAstNode(root, path.substring(1));
    }
  }
  jsonSerializer.DefaultJsonSerializer = DefaultJsonSerializer;
  return jsonSerializer;
}
var serviceRegistry = {};
var hasRequiredServiceRegistry;
function requireServiceRegistry() {
  if (hasRequiredServiceRegistry)
    return serviceRegistry;
  hasRequiredServiceRegistry = 1;
  Object.defineProperty(serviceRegistry, "__esModule", { value: true });
  serviceRegistry.DefaultServiceRegistry = void 0;
  const vscode_uri_1 = require$$1;
  class DefaultServiceRegistry {
    register(language2) {
      if (!this.singleton && !this.map) {
        this.singleton = language2;
        return;
      }
      if (!this.map) {
        this.map = {};
        if (this.singleton) {
          for (const ext of this.singleton.LanguageMetaData.fileExtensions) {
            this.map[ext] = this.singleton;
          }
          this.singleton = void 0;
        }
      }
      for (const ext of language2.LanguageMetaData.fileExtensions) {
        if (this.map[ext] !== void 0 && this.map[ext] !== language2) {
          console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${language2.LanguageMetaData.languageId}'.`);
        }
        this.map[ext] = language2;
      }
    }
    getServices(uri) {
      if (this.singleton !== void 0) {
        return this.singleton;
      }
      if (this.map === void 0) {
        throw new Error("The service registry is empty. Use `register` to register the services of a language.");
      }
      const ext = vscode_uri_1.Utils.extname(uri);
      const services2 = this.map[ext];
      if (!services2) {
        throw new Error(`The service registry contains no services for the extension '${ext}'.`);
      }
      return services2;
    }
    get all() {
      if (this.singleton !== void 0) {
        return [this.singleton];
      }
      if (this.map !== void 0) {
        return Object.values(this.map);
      }
      return [];
    }
  }
  serviceRegistry.DefaultServiceRegistry = DefaultServiceRegistry;
  return serviceRegistry;
}
var validationRegistry = {};
var hasRequiredValidationRegistry;
function requireValidationRegistry() {
  if (hasRequiredValidationRegistry)
    return validationRegistry;
  hasRequiredValidationRegistry = 1;
  Object.defineProperty(validationRegistry, "__esModule", { value: true });
  validationRegistry.ValidationRegistry = void 0;
  const collections_1 = requireCollections();
  const promise_util_1 = requirePromiseUtil();
  class ValidationRegistry {
    constructor(services2) {
      this.validationChecks = new collections_1.MultiMap();
      this.reflection = services2.shared.AstReflection;
    }
    register(checksRecord, thisObj = this) {
      for (const [type, ch] of Object.entries(checksRecord)) {
        const callbacks = ch;
        if (Array.isArray(callbacks)) {
          for (const check of callbacks) {
            this.doRegister(type, this.wrapValidationException(check, thisObj));
          }
        } else if (typeof callbacks === "function") {
          this.doRegister(type, this.wrapValidationException(callbacks, thisObj));
        }
      }
    }
    wrapValidationException(check, thisObj) {
      return async (node, accept, cancelToken) => {
        try {
          await check.call(thisObj, node, accept, cancelToken);
        } catch (err) {
          if ((0, promise_util_1.isOperationCancelled)(err)) {
            throw err;
          }
          console.error("An error occurred during validation:", err);
          const message = err instanceof Error ? err.message : String(err);
          if (err instanceof Error && err.stack) {
            console.error(err.stack);
          }
          accept("error", "An error occurred during validation: " + message, { node });
        }
      };
    }
    doRegister(type, check) {
      if (type === "AstNode") {
        this.validationChecks.add("AstNode", check);
        return;
      }
      for (const subtype of this.reflection.getAllSubTypes(type)) {
        this.validationChecks.add(subtype, check);
      }
    }
    getChecks(type) {
      return this.validationChecks.get(type).concat(this.validationChecks.get("AstNode"));
    }
  }
  validationRegistry.ValidationRegistry = ValidationRegistry;
  return validationRegistry;
}
var astDescriptions = {};
var hasRequiredAstDescriptions;
function requireAstDescriptions() {
  if (hasRequiredAstDescriptions)
    return astDescriptions;
  hasRequiredAstDescriptions = 1;
  Object.defineProperty(astDescriptions, "__esModule", { value: true });
  astDescriptions.DefaultReferenceDescriptionProvider = astDescriptions.DefaultAstNodeDescriptionProvider = void 0;
  const vscode_languageserver_1 = requireMain();
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const promise_util_1 = requirePromiseUtil();
  const uri_util_1 = requireUriUtil();
  class DefaultAstNodeDescriptionProvider {
    constructor(services2) {
      this.astNodeLocator = services2.workspace.AstNodeLocator;
      this.nameProvider = services2.references.NameProvider;
    }
    createDescription(node, name2, document2 = (0, ast_util_1.getDocument)(node)) {
      var _a2;
      name2 !== null && name2 !== void 0 ? name2 : name2 = this.nameProvider.getName(node);
      const path = this.astNodeLocator.getAstNodePath(node);
      if (!name2) {
        throw new Error(`Node at path ${path} has no name.`);
      }
      const nameNode = (_a2 = this.nameProvider.getNameNode(node)) !== null && _a2 !== void 0 ? _a2 : node.$cstNode;
      return {
        node,
        name: name2,
        nameSegment: (0, cst_util_1.toDocumentSegment)(nameNode),
        selectionSegment: (0, cst_util_1.toDocumentSegment)(node.$cstNode),
        type: node.$type,
        documentUri: document2.uri,
        path
      };
    }
  }
  astDescriptions.DefaultAstNodeDescriptionProvider = DefaultAstNodeDescriptionProvider;
  class DefaultReferenceDescriptionProvider {
    constructor(services2) {
      this.nodeLocator = services2.workspace.AstNodeLocator;
    }
    async createDescriptions(document2, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const descr = [];
      const rootNode = document2.parseResult.value;
      for (const astNode of (0, ast_util_1.streamAst)(rootNode)) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        (0, ast_util_1.streamReferences)(astNode).filter((refInfo) => !(0, syntax_tree_1.isLinkingError)(refInfo)).forEach((refInfo) => {
          const description = this.createDescription(refInfo);
          if (description) {
            descr.push(description);
          }
        });
      }
      return descr;
    }
    createDescription(refInfo) {
      const targetNodeDescr = refInfo.reference.$nodeDescription;
      const refCstNode = refInfo.reference.$refNode;
      if (!targetNodeDescr || !refCstNode) {
        return void 0;
      }
      const docUri = (0, ast_util_1.getDocument)(refInfo.container).uri;
      return {
        sourceUri: docUri,
        sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),
        targetUri: targetNodeDescr.documentUri,
        targetPath: targetNodeDescr.path,
        segment: (0, cst_util_1.toDocumentSegment)(refCstNode),
        local: (0, uri_util_1.equalURI)(targetNodeDescr.documentUri, docUri)
      };
    }
  }
  astDescriptions.DefaultReferenceDescriptionProvider = DefaultReferenceDescriptionProvider;
  return astDescriptions;
}
var astNodeLocator = {};
var hasRequiredAstNodeLocator;
function requireAstNodeLocator() {
  if (hasRequiredAstNodeLocator)
    return astNodeLocator;
  hasRequiredAstNodeLocator = 1;
  Object.defineProperty(astNodeLocator, "__esModule", { value: true });
  astNodeLocator.DefaultAstNodeLocator = void 0;
  class DefaultAstNodeLocator {
    constructor() {
      this.segmentSeparator = "/";
      this.indexSeparator = "@";
    }
    getAstNodePath(node) {
      if (node.$container) {
        const containerPath = this.getAstNodePath(node.$container);
        const newSegment = this.getPathSegment(node);
        const nodePath = containerPath + this.segmentSeparator + newSegment;
        return nodePath;
      }
      return "";
    }
    getPathSegment({ $containerProperty, $containerIndex }) {
      if (!$containerProperty) {
        throw new Error("Missing '$containerProperty' in AST node.");
      }
      if ($containerIndex !== void 0) {
        return $containerProperty + this.indexSeparator + $containerIndex;
      }
      return $containerProperty;
    }
    getAstNode(node, path) {
      const segments = path.split(this.segmentSeparator);
      return segments.reduce((previousValue, currentValue) => {
        if (!previousValue || currentValue.length === 0) {
          return previousValue;
        }
        const propertyIndex = currentValue.indexOf(this.indexSeparator);
        if (propertyIndex > 0) {
          const property = currentValue.substring(0, propertyIndex);
          const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));
          const array = previousValue[property];
          return array === null || array === void 0 ? void 0 : array[arrayIndex];
        }
        return previousValue[currentValue];
      }, node);
    }
  }
  astNodeLocator.DefaultAstNodeLocator = DefaultAstNodeLocator;
  return astNodeLocator;
}
var configuration = {};
var hasRequiredConfiguration;
function requireConfiguration() {
  if (hasRequiredConfiguration)
    return configuration;
  hasRequiredConfiguration = 1;
  Object.defineProperty(configuration, "__esModule", { value: true });
  configuration.DefaultConfigurationProvider = void 0;
  const vscode_languageserver_protocol_1 = requireMain$1();
  class DefaultConfigurationProvider {
    constructor(services2) {
      this.settings = {};
      this.workspaceConfig = false;
      this.initialized = false;
      this.serviceRegistry = services2.ServiceRegistry;
      this.connection = services2.lsp.Connection;
      services2.lsp.LanguageServer.onInitialize((params) => {
        var _a2, _b2;
        this.workspaceConfig = (_b2 = (_a2 = params.capabilities.workspace) === null || _a2 === void 0 ? void 0 : _a2.configuration) !== null && _b2 !== void 0 ? _b2 : false;
      });
      services2.lsp.LanguageServer.onInitialized((_params) => {
        var _a2;
        const languages = this.serviceRegistry.all;
        (_a2 = services2.lsp.Connection) === null || _a2 === void 0 ? void 0 : _a2.client.register(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, {
          // Listen to configuration changes for all languages
          section: languages.map((lang) => this.toSectionName(lang.LanguageMetaData.languageId))
        });
      });
    }
    async initialize() {
      if (this.workspaceConfig && this.connection) {
        const languages = this.serviceRegistry.all;
        const configToUpdate = languages.map((lang) => {
          return { section: this.toSectionName(lang.LanguageMetaData.languageId) };
        });
        const configs = await this.connection.workspace.getConfiguration(configToUpdate);
        configToUpdate.forEach((conf, idx) => {
          this.updateSectionConfiguration(conf.section, configs[idx]);
        });
      }
      this.initialized = true;
    }
    updateConfiguration(change) {
      if (!change.settings) {
        return;
      }
      Object.keys(change.settings).forEach((section) => {
        this.updateSectionConfiguration(section, change.settings[section]);
      });
    }
    updateSectionConfiguration(section, configuration2) {
      this.settings[section] = configuration2;
    }
    async getConfiguration(language2, configuration2) {
      if (!this.initialized) {
        await this.initialize();
      }
      const sectionName = this.toSectionName(language2);
      if (this.settings[sectionName]) {
        return this.settings[sectionName][configuration2];
      }
    }
    toSectionName(languageId) {
      return `${languageId}`;
    }
  }
  configuration.DefaultConfigurationProvider = DefaultConfigurationProvider;
  return configuration;
}
var documentBuilder = {};
var hasRequiredDocumentBuilder;
function requireDocumentBuilder() {
  if (hasRequiredDocumentBuilder)
    return documentBuilder;
  hasRequiredDocumentBuilder = 1;
  Object.defineProperty(documentBuilder, "__esModule", { value: true });
  documentBuilder.DefaultDocumentBuilder = void 0;
  const vscode_languageserver_1 = requireMain();
  const collections_1 = requireCollections();
  const promise_util_1 = requirePromiseUtil();
  const documents_1 = requireDocuments$1();
  class DefaultDocumentBuilder {
    constructor(services2) {
      this.updateListeners = [];
      this.buildPhaseListeners = new collections_1.MultiMap();
      this.langiumDocuments = services2.workspace.LangiumDocuments;
      this.langiumDocumentFactory = services2.workspace.LangiumDocumentFactory;
      this.indexManager = services2.workspace.IndexManager;
      this.serviceRegistry = services2.ServiceRegistry;
    }
    async build(documents2, options = {}, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      await this.buildDocuments(documents2, options, cancelToken);
    }
    async update(changed, deleted, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      for (const deletedDocument of deleted) {
        this.langiumDocuments.deleteDocument(deletedDocument);
      }
      this.indexManager.remove(deleted);
      for (const changedUri of changed) {
        this.langiumDocuments.invalidateDocument(changedUri);
      }
      for (const listener of this.updateListeners) {
        listener(changed, deleted);
      }
      await (0, promise_util_1.interruptAndCheck)(cancelToken);
      const changedDocuments = changed.map((e) => this.langiumDocuments.getOrCreateDocument(e));
      const rebuildDocuments = this.collectDocuments(changedDocuments, deleted);
      const buildOptions = {
        // This method is meant to be called after receiving a change notification from the client,
        // so we assume that we want diagnostics to be reported in the editor.
        validationChecks: "all"
      };
      await this.buildDocuments(rebuildDocuments, buildOptions, cancelToken);
    }
    onUpdate(callback) {
      this.updateListeners.push(callback);
      return vscode_languageserver_1.Disposable.create(() => {
        const index = this.updateListeners.indexOf(callback);
        if (index >= 0) {
          this.updateListeners.splice(index, 1);
        }
      });
    }
    collectDocuments(changed, deleted) {
      const allUris = changed.map((e) => e.uri).concat(deleted);
      const affected = this.indexManager.getAffectedDocuments(allUris).toArray();
      affected.forEach((e) => {
        const linker2 = this.serviceRegistry.getServices(e.uri).references.Linker;
        linker2.unlink(e);
        e.state = Math.min(e.state, documents_1.DocumentState.ComputedScopes);
      });
      const docSet = /* @__PURE__ */ new Set([
        ...changed,
        ...affected,
        // Also include all documents haven't completed the document lifecycle yet
        ...this.langiumDocuments.all.filter((e) => e.state < documents_1.DocumentState.Validated)
      ]);
      return Array.from(docSet);
    }
    async buildDocuments(documents2, options, cancelToken) {
      await this.runCancelable(documents2, documents_1.DocumentState.Parsed, cancelToken, (doc2) => this.langiumDocumentFactory.update(doc2));
      await this.runCancelable(documents2, documents_1.DocumentState.IndexedContent, cancelToken, (doc2) => this.indexManager.updateContent(doc2, cancelToken));
      await this.runCancelable(documents2, documents_1.DocumentState.ComputedScopes, cancelToken, (doc2) => this.computeScopes(doc2, cancelToken));
      await this.runCancelable(documents2, documents_1.DocumentState.Linked, cancelToken, (doc2) => this.serviceRegistry.getServices(doc2.uri).references.Linker.link(doc2, cancelToken));
      await this.runCancelable(documents2, documents_1.DocumentState.IndexedReferences, cancelToken, (doc2) => this.indexManager.updateReferences(doc2, cancelToken));
      const validateDocs = documents2.filter((doc2) => this.shouldValidate(doc2, options));
      await this.runCancelable(validateDocs, documents_1.DocumentState.Validated, cancelToken, (doc2) => this.validate(doc2, cancelToken));
    }
    async runCancelable(documents2, targetState, cancelToken, callback) {
      const filtered = documents2.filter((e) => e.state < targetState);
      for (const document2 of filtered) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        await callback(document2);
      }
      await this.notifyBuildPhase(filtered, targetState, cancelToken);
    }
    onBuildPhase(targetState, callback) {
      this.buildPhaseListeners.add(targetState, callback);
      return vscode_languageserver_1.Disposable.create(() => {
        this.buildPhaseListeners.delete(targetState, callback);
      });
    }
    async notifyBuildPhase(documents2, state, cancelToken) {
      if (documents2.length === 0) {
        return;
      }
      const listeners = this.buildPhaseListeners.get(state);
      for (const listener of listeners) {
        await (0, promise_util_1.interruptAndCheck)(cancelToken);
        await listener(documents2, cancelToken);
      }
    }
    /**
     * Precompute the local scopes of the given document. The resulting data structure is used by
     * the `ScopeProvider` service to determine the visible scope of any cross-reference.
     *
     * _Note:_ You should not resolve any cross-references during this phase. Once the phase is completed,
     * you may follow the `ref` property of a reference, which triggers lazy resolution. The result is
     * either the respective target AST node or `undefined` in case the target is not in scope.
     */
    async computeScopes(document2, cancelToken) {
      const scopeComputation2 = this.serviceRegistry.getServices(document2.uri).references.ScopeComputation;
      document2.precomputedScopes = await scopeComputation2.computeLocalScopes(document2, cancelToken);
      document2.state = documents_1.DocumentState.ComputedScopes;
    }
    /**
     * Determine whether the given document should be validated during a build. The default
     * implementation checks the `validationChecks` property of the build options.
     */
    shouldValidate(_document, options) {
      return options.validationChecks === "all";
    }
    /**
     * Run validation checks on the given document and store the resulting diagnostics in the document.
     */
    async validate(document2, cancelToken) {
      const validator2 = this.serviceRegistry.getServices(document2.uri).validation.DocumentValidator;
      const diagnostics = await validator2.validateDocument(document2, cancelToken);
      document2.diagnostics = diagnostics;
      document2.state = documents_1.DocumentState.Validated;
    }
  }
  documentBuilder.DefaultDocumentBuilder = DefaultDocumentBuilder;
  return documentBuilder;
}
var indexManager = {};
var hasRequiredIndexManager;
function requireIndexManager() {
  if (hasRequiredIndexManager)
    return indexManager;
  hasRequiredIndexManager = 1;
  Object.defineProperty(indexManager, "__esModule", { value: true });
  indexManager.DefaultIndexManager = void 0;
  const vscode_languageserver_1 = requireMain();
  const ast_util_1 = requireAstUtil();
  const stream_1 = requireStream();
  const uri_util_1 = requireUriUtil();
  const documents_1 = requireDocuments$1();
  class DefaultIndexManager {
    constructor(services2) {
      this.simpleIndex = /* @__PURE__ */ new Map();
      this.referenceIndex = /* @__PURE__ */ new Map();
      this.globalScopeCache = /* @__PURE__ */ new Map();
      this.serviceRegistry = services2.ServiceRegistry;
      this.astReflection = services2.AstReflection;
      this.langiumDocuments = () => services2.workspace.LangiumDocuments;
    }
    findAllReferences(targetNode, astNodePath) {
      const targetDocUri = (0, ast_util_1.getDocument)(targetNode).uri;
      const result = [];
      this.referenceIndex.forEach((docRefs) => {
        docRefs.forEach((refDescr) => {
          if ((0, uri_util_1.equalURI)(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {
            result.push(refDescr);
          }
        });
      });
      return (0, stream_1.stream)(result);
    }
    allElements(nodeType = "") {
      if (!this.globalScopeCache.has("")) {
        this.globalScopeCache.set("", Array.from(this.simpleIndex.values()).flat());
      }
      const cached = this.globalScopeCache.get(nodeType);
      if (cached) {
        return (0, stream_1.stream)(cached);
      } else {
        const elements = this.globalScopeCache.get("").filter((e) => this.astReflection.isSubtype(e.type, nodeType));
        this.globalScopeCache.set(nodeType, elements);
        return (0, stream_1.stream)(elements);
      }
    }
    remove(uris) {
      for (const uri of uris) {
        const uriString = uri.toString();
        this.simpleIndex.delete(uriString);
        this.referenceIndex.delete(uriString);
        this.globalScopeCache.clear();
      }
    }
    async updateContent(document2, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      this.globalScopeCache.clear();
      const services2 = this.serviceRegistry.getServices(document2.uri);
      const exports = await services2.references.ScopeComputation.computeExports(document2, cancelToken);
      for (const data of exports) {
        data.node = void 0;
      }
      this.simpleIndex.set(document2.uri.toString(), exports);
      document2.state = documents_1.DocumentState.IndexedContent;
    }
    async updateReferences(document2, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const services2 = this.serviceRegistry.getServices(document2.uri);
      const indexData = await services2.workspace.ReferenceDescriptionProvider.createDescriptions(document2, cancelToken);
      this.referenceIndex.set(document2.uri.toString(), indexData);
      document2.state = documents_1.DocumentState.IndexedReferences;
    }
    getAffectedDocuments(uris) {
      return this.langiumDocuments().all.filter((e) => {
        if (uris.some((uri) => (0, uri_util_1.equalURI)(e.uri, uri))) {
          return false;
        }
        for (const uri of uris) {
          if (this.isAffected(e, uri)) {
            return true;
          }
        }
        return false;
      });
    }
    /**
     * Determine whether the given document could be affected by a change of the document
     * identified by the given URI (second parameter).
     */
    isAffected(document2, changed) {
      const changedUriString = changed.toString();
      const documentUri = document2.uri.toString();
      if (document2.references.some((e) => e.error !== void 0)) {
        return true;
      }
      const references2 = this.referenceIndex.get(documentUri);
      if (references2) {
        return references2.filter((e) => !e.local).some((e) => (0, uri_util_1.equalURI)(e.targetUri, changedUriString));
      }
      return false;
    }
  }
  indexManager.DefaultIndexManager = DefaultIndexManager;
  return indexManager;
}
var workspaceManager = {};
var hasRequiredWorkspaceManager;
function requireWorkspaceManager() {
  if (hasRequiredWorkspaceManager)
    return workspaceManager;
  hasRequiredWorkspaceManager = 1;
  Object.defineProperty(workspaceManager, "__esModule", { value: true });
  workspaceManager.DefaultWorkspaceManager = void 0;
  const vscode_languageserver_1 = requireMain();
  const vscode_uri_1 = require$$1;
  const promise_util_1 = requirePromiseUtil();
  class DefaultWorkspaceManager {
    constructor(services2) {
      this.serviceRegistry = services2.ServiceRegistry;
      this.langiumDocuments = services2.workspace.LangiumDocuments;
      this.documentBuilder = services2.workspace.DocumentBuilder;
      this.fileSystemProvider = services2.workspace.FileSystemProvider;
      this.mutex = services2.workspace.MutexLock;
      services2.lsp.LanguageServer.onInitialize((params) => {
        var _a2;
        this.folders = (_a2 = params.workspaceFolders) !== null && _a2 !== void 0 ? _a2 : void 0;
      });
      services2.lsp.LanguageServer.onInitialized((_params) => {
        this.mutex.lock((token) => {
          var _a2;
          return this.initializeWorkspace((_a2 = this.folders) !== null && _a2 !== void 0 ? _a2 : [], token);
        });
      });
    }
    async initializeWorkspace(folders, cancelToken = vscode_languageserver_1.CancellationToken.None) {
      const fileExtensions = this.serviceRegistry.all.flatMap((e) => e.LanguageMetaData.fileExtensions);
      const documents2 = [];
      const collector = (document2) => {
        documents2.push(document2);
        if (!this.langiumDocuments.hasDocument(document2.uri)) {
          this.langiumDocuments.addDocument(document2);
        }
      };
      await this.loadAdditionalDocuments(folders, collector);
      await Promise.all(folders.map((wf) => [wf, this.getRootFolder(wf)]).map(async (entry) => this.traverseFolder(...entry, fileExtensions, collector)));
      await (0, promise_util_1.interruptAndCheck)(cancelToken);
      await this.documentBuilder.build(documents2, void 0, cancelToken);
    }
    /**
     * Load all additional documents that shall be visible in the context of the given workspace
     * folders and add them to the collector. This can be used to include built-in libraries of
     * your language, which can be either loaded from provided files or constructed in memory.
     */
    loadAdditionalDocuments(_folders, _collector) {
      return Promise.resolve();
    }
    /**
     * Determine the root folder of the source documents in the given workspace folder.
     * The default implementation returns the URI of the workspace folder, but you can override
     * this to return a subfolder like `src` instead.
     */
    getRootFolder(workspaceFolder2) {
      return vscode_uri_1.URI.parse(workspaceFolder2.uri);
    }
    /**
     * Traverse the file system folder identified by the given URI and its subfolders. All
     * contained files that match the file extensions are added to the collector.
     */
    async traverseFolder(workspaceFolder2, folderPath, fileExtensions, collector) {
      const content2 = await this.fileSystemProvider.readDirectory(folderPath);
      await Promise.all(content2.map(async (entry) => {
        if (this.includeEntry(workspaceFolder2, entry, fileExtensions)) {
          if (entry.isDirectory) {
            await this.traverseFolder(workspaceFolder2, entry.uri, fileExtensions, collector);
          } else if (entry.isFile) {
            const document2 = this.langiumDocuments.getOrCreateDocument(entry.uri);
            collector(document2);
          }
        }
      }));
    }
    /**
     * Determine whether the given folder entry shall be included while indexing the workspace.
     */
    includeEntry(workspaceFolder2, entry, fileExtensions) {
      const name2 = vscode_uri_1.Utils.basename(entry.uri);
      if (name2.startsWith(".")) {
        return false;
      }
      if (entry.isDirectory) {
        return name2 !== "node_modules" && name2 !== "out";
      } else if (entry.isFile) {
        const extname = vscode_uri_1.Utils.extname(entry.uri);
        return fileExtensions.includes(extname);
      }
      return false;
    }
  }
  workspaceManager.DefaultWorkspaceManager = DefaultWorkspaceManager;
  return workspaceManager;
}
var lexer = {};
var hasRequiredLexer;
function requireLexer() {
  if (hasRequiredLexer)
    return lexer;
  hasRequiredLexer = 1;
  Object.defineProperty(lexer, "__esModule", { value: true });
  lexer.isTokenTypeDictionary = lexer.isIMultiModeLexerDefinition = lexer.isTokenTypeArray = lexer.DefaultLexer = void 0;
  const chevrotain_1 = requireApi();
  class DefaultLexer {
    constructor(services2) {
      const tokens2 = services2.parser.TokenBuilder.buildTokens(services2.Grammar, {
        caseInsensitive: services2.LanguageMetaData.caseInsensitive
      });
      this.tokenTypes = this.toTokenTypeDictionary(tokens2);
      const lexerTokens = isTokenTypeDictionary(tokens2) ? Object.values(tokens2) : tokens2;
      this.chevrotainLexer = new chevrotain_1.Lexer(lexerTokens);
    }
    get definition() {
      return this.tokenTypes;
    }
    tokenize(text) {
      var _a2;
      const chevrotainResult = this.chevrotainLexer.tokenize(text);
      return {
        tokens: chevrotainResult.tokens,
        errors: chevrotainResult.errors,
        hidden: (_a2 = chevrotainResult.groups.hidden) !== null && _a2 !== void 0 ? _a2 : []
      };
    }
    toTokenTypeDictionary(buildTokens) {
      if (isTokenTypeDictionary(buildTokens))
        return buildTokens;
      const tokens2 = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;
      const res = {};
      tokens2.forEach((token) => res[token.name] = token);
      return res;
    }
  }
  lexer.DefaultLexer = DefaultLexer;
  function isTokenTypeArray(tokenVocabulary) {
    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || "name" in tokenVocabulary[0]);
  }
  lexer.isTokenTypeArray = isTokenTypeArray;
  function isIMultiModeLexerDefinition(tokenVocabulary) {
    return tokenVocabulary && "modes" in tokenVocabulary && "defaultMode" in tokenVocabulary;
  }
  lexer.isIMultiModeLexerDefinition = isIMultiModeLexerDefinition;
  function isTokenTypeDictionary(tokenVocabulary) {
    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);
  }
  lexer.isTokenTypeDictionary = isTokenTypeDictionary;
  return lexer;
}
var documentation = {};
var documentationProvider = {};
var jsdoc = {};
var hasRequiredJsdoc;
function requireJsdoc() {
  if (hasRequiredJsdoc)
    return jsdoc;
  hasRequiredJsdoc = 1;
  Object.defineProperty(jsdoc, "__esModule", { value: true });
  jsdoc.isJSDoc = jsdoc.parseJSDoc = void 0;
  const vscode_languageserver_1 = requireMain();
  const vscode_uri_1 = require$$1;
  const template_string_1 = requireTemplateString();
  const regex_util_1 = requireRegexUtil();
  function parseJSDoc(node, start, options) {
    let opts;
    let position;
    if (typeof node === "string") {
      position = start;
      opts = options;
    } else {
      position = node.range.start;
      opts = start;
    }
    if (!position) {
      position = vscode_languageserver_1.Position.create(0, 0);
    }
    const lines = getLines(node);
    const normalizedOptions = normalizeOptions(opts);
    const tokens2 = tokenize({
      lines,
      position,
      options: normalizedOptions
    });
    return parseJSDocComment({
      index: 0,
      tokens: tokens2,
      position
    });
  }
  jsdoc.parseJSDoc = parseJSDoc;
  function isJSDoc(node, options) {
    const normalizedOptions = normalizeOptions(options);
    const lines = getLines(node);
    if (lines.length === 0) {
      return false;
    }
    const first2 = lines[0];
    const last2 = lines[lines.length - 1];
    const firstRegex = normalizedOptions.start;
    const lastRegex = normalizedOptions.end;
    return Boolean(firstRegex === null || firstRegex === void 0 ? void 0 : firstRegex.exec(first2)) && Boolean(lastRegex === null || lastRegex === void 0 ? void 0 : lastRegex.exec(last2));
  }
  jsdoc.isJSDoc = isJSDoc;
  function getLines(node) {
    let content2 = "";
    if (typeof node === "string") {
      content2 = node;
    } else {
      content2 = node.text;
    }
    const lines = content2.split(template_string_1.NEWLINE_REGEXP);
    return lines;
  }
  const tagRegex = /\s*(@([\p{L}][\p{L}\p{N}]*)?)/uy;
  const inlineTagRegex = /\{(@[\p{L}][\p{L}\p{N}]*)(\s*)([^\r\n}]+)?\}/gu;
  function tokenize(context) {
    var _a2, _b2, _c2;
    const tokens2 = [];
    let currentLine = context.position.line;
    let currentCharacter = context.position.character;
    for (let i = 0; i < context.lines.length; i++) {
      const first2 = i === 0;
      const last2 = i === context.lines.length - 1;
      let line = context.lines[i];
      let index = 0;
      if (first2 && context.options.start) {
        const match = (_a2 = context.options.start) === null || _a2 === void 0 ? void 0 : _a2.exec(line);
        if (match) {
          index = match.index + match[0].length;
        }
      } else {
        const match = (_b2 = context.options.line) === null || _b2 === void 0 ? void 0 : _b2.exec(line);
        if (match) {
          index = match.index + match[0].length;
        }
      }
      if (last2) {
        const match = (_c2 = context.options.end) === null || _c2 === void 0 ? void 0 : _c2.exec(line);
        if (match) {
          line = line.substring(0, match.index);
        }
      }
      line = line.substring(0, lastCharacter(line));
      const whitespaceEnd = skipWhitespace(line, 0);
      if (whitespaceEnd >= line.length) {
        if (tokens2.length > 0) {
          const position = vscode_languageserver_1.Position.create(currentLine, currentCharacter);
          tokens2.push({
            type: "break",
            content: "",
            range: vscode_languageserver_1.Range.create(position, position)
          });
        }
      } else {
        tagRegex.lastIndex = index;
        const tagMatch = tagRegex.exec(line);
        if (tagMatch) {
          const fullMatch = tagMatch[0];
          const value = tagMatch[1];
          const start = vscode_languageserver_1.Position.create(currentLine, currentCharacter + index);
          const end = vscode_languageserver_1.Position.create(currentLine, currentCharacter + index + fullMatch.length);
          tokens2.push({
            type: "tag",
            content: value,
            range: vscode_languageserver_1.Range.create(start, end)
          });
          index += fullMatch.length;
          index = skipWhitespace(line, index);
        }
        if (index < line.length) {
          const rest2 = line.substring(index);
          const inlineTagMatches = Array.from(rest2.matchAll(inlineTagRegex));
          tokens2.push(...buildInlineTokens(inlineTagMatches, rest2, currentLine, currentCharacter + index));
        }
      }
      currentLine++;
      currentCharacter = 0;
    }
    if (tokens2.length > 0 && tokens2[tokens2.length - 1].type === "break") {
      return tokens2.slice(0, -1);
    }
    return tokens2;
  }
  function buildInlineTokens(tags2, line, lineIndex, characterIndex) {
    const tokens2 = [];
    if (tags2.length === 0) {
      const start = vscode_languageserver_1.Position.create(lineIndex, characterIndex);
      const end = vscode_languageserver_1.Position.create(lineIndex, characterIndex + line.length);
      tokens2.push({
        type: "text",
        content: line,
        range: vscode_languageserver_1.Range.create(start, end)
      });
    } else {
      let lastIndex = 0;
      for (const match of tags2) {
        const matchIndex = match.index;
        const startContent = line.substring(lastIndex, matchIndex);
        if (startContent.length > 0) {
          tokens2.push({
            type: "text",
            content: line.substring(lastIndex, matchIndex),
            range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_1.Position.create(lineIndex, matchIndex + characterIndex))
          });
        }
        let offset = startContent.length + 1;
        const tagName = match[1];
        tokens2.push({
          type: "inline-tag",
          content: tagName,
          range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_1.Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex))
        });
        offset += tagName.length;
        if (match.length === 4) {
          offset += match[2].length;
          const value = match[3];
          tokens2.push({
            type: "text",
            content: value,
            range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_1.Position.create(lineIndex, lastIndex + offset + value.length + characterIndex))
          });
        } else {
          tokens2.push({
            type: "text",
            content: "",
            range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_1.Position.create(lineIndex, lastIndex + offset + characterIndex))
          });
        }
        lastIndex = matchIndex + match[0].length;
      }
      const endContent = line.substring(lastIndex);
      if (endContent.length > 0) {
        tokens2.push({
          type: "text",
          content: endContent,
          range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_1.Position.create(lineIndex, lastIndex + characterIndex + endContent.length))
        });
      }
    }
    return tokens2;
  }
  const nonWhitespaceRegex = /\S/;
  const whitespaceEndRegex = /\s*$/;
  function skipWhitespace(line, index) {
    const match = line.substring(index).match(nonWhitespaceRegex);
    if (match) {
      return index + match.index;
    } else {
      return line.length;
    }
  }
  function lastCharacter(line) {
    const match = line.match(whitespaceEndRegex);
    if (match && typeof match.index === "number") {
      return match.index;
    }
    return void 0;
  }
  function parseJSDocComment(context) {
    var _a2, _b2, _c2, _d;
    const startPosition = vscode_languageserver_1.Position.create(context.position.line, context.position.character);
    if (context.tokens.length === 0) {
      return new JSDocCommentImpl([], vscode_languageserver_1.Range.create(startPosition, startPosition));
    }
    const elements = [];
    while (context.index < context.tokens.length) {
      const element = parseJSDocElement(context, elements[elements.length - 1]);
      if (element) {
        elements.push(element);
      }
    }
    const start = (_b2 = (_a2 = elements[0]) === null || _a2 === void 0 ? void 0 : _a2.range.start) !== null && _b2 !== void 0 ? _b2 : startPosition;
    const end = (_d = (_c2 = elements[elements.length - 1]) === null || _c2 === void 0 ? void 0 : _c2.range.end) !== null && _d !== void 0 ? _d : startPosition;
    return new JSDocCommentImpl(elements, vscode_languageserver_1.Range.create(start, end));
  }
  function parseJSDocElement(context, last2) {
    const next = context.tokens[context.index];
    if (next.type === "tag") {
      return parseJSDocTag(context, false);
    } else if (next.type === "text" || next.type === "inline-tag") {
      return parseJSDocText(context);
    } else {
      appendEmptyLine(next, last2);
      context.index++;
      return void 0;
    }
  }
  function appendEmptyLine(token, element) {
    if (element) {
      const line = new JSDocLineImpl("", token.range);
      if ("inlines" in element) {
        element.inlines.push(line);
      } else {
        element.content.inlines.push(line);
      }
    }
  }
  function parseJSDocText(context) {
    let token = context.tokens[context.index];
    const firstToken = token;
    let lastToken = token;
    const lines = [];
    while (token && token.type !== "break" && token.type !== "tag") {
      lines.push(parseJSDocInline(context));
      lastToken = token;
      token = context.tokens[context.index];
    }
    return new JSDocTextImpl(lines, vscode_languageserver_1.Range.create(firstToken.range.start, lastToken.range.end));
  }
  function parseJSDocInline(context) {
    const token = context.tokens[context.index];
    if (token.type === "inline-tag") {
      return parseJSDocTag(context, true);
    } else {
      return parseJSDocLine(context);
    }
  }
  function parseJSDocTag(context, inline) {
    const tagToken = context.tokens[context.index++];
    const name2 = tagToken.content.substring(1);
    const nextToken = context.tokens[context.index];
    if ((nextToken === null || nextToken === void 0 ? void 0 : nextToken.type) === "text") {
      if (inline) {
        const docLine = parseJSDocLine(context);
        return new JSDocTagImpl(name2, new JSDocTextImpl([docLine], docLine.range), inline, vscode_languageserver_1.Range.create(tagToken.range.start, docLine.range.end));
      } else {
        const textDoc = parseJSDocText(context);
        return new JSDocTagImpl(name2, textDoc, inline, vscode_languageserver_1.Range.create(tagToken.range.start, textDoc.range.end));
      }
    } else {
      const range2 = tagToken.range;
      return new JSDocTagImpl(name2, new JSDocTextImpl([], range2), inline, range2);
    }
  }
  function parseJSDocLine(context) {
    const token = context.tokens[context.index++];
    return new JSDocLineImpl(token.content, token.range);
  }
  function normalizeOptions(options) {
    if (!options) {
      return normalizeOptions({
        start: "/**",
        end: "*/",
        line: "*"
      });
    }
    const { start, end, line } = options;
    return {
      start: normalizeOption(start, true),
      end: normalizeOption(end, false),
      line: normalizeOption(line, true)
    };
  }
  function normalizeOption(option, start) {
    if (typeof option === "string" || typeof option === "object") {
      const escaped = typeof option === "string" ? (0, regex_util_1.escapeRegExp)(option) : option.source;
      if (start) {
        return new RegExp(`^\\s*${escaped}`);
      } else {
        return new RegExp(`\\s*${escaped}\\s*$`);
      }
    } else {
      return option;
    }
  }
  class JSDocCommentImpl {
    constructor(elements, range2) {
      this.elements = elements;
      this.range = range2;
    }
    getTag(name2) {
      return this.getAllTags().find((e) => e.name === name2);
    }
    getTags(name2) {
      return this.getAllTags().filter((e) => e.name === name2);
    }
    getAllTags() {
      return this.elements.filter((e) => "name" in e);
    }
    toString() {
      let value = "";
      for (const element of this.elements) {
        if (value.length === 0) {
          value = element.toString();
        } else {
          const text = element.toString();
          value += fillNewlines(value) + text;
        }
      }
      return value.trim();
    }
    toMarkdown(options) {
      let value = "";
      for (const element of this.elements) {
        if (value.length === 0) {
          value = element.toMarkdown(options);
        } else {
          const text = element.toMarkdown(options);
          value += fillNewlines(value) + text;
        }
      }
      return value.trim();
    }
  }
  class JSDocTagImpl {
    constructor(name2, content2, inline, range2) {
      this.name = name2;
      this.content = content2;
      this.inline = inline;
      this.range = range2;
    }
    toString() {
      let text = `@${this.name}`;
      const content2 = this.content.toString();
      if (this.content.inlines.length === 1) {
        text = `${text} ${content2}`;
      } else if (this.content.inlines.length > 1) {
        text = `${text}
${content2}`;
      }
      if (this.inline) {
        return `{${text}}`;
      } else {
        return text;
      }
    }
    toMarkdown(options) {
      const content2 = this.content.toMarkdown(options);
      if (this.inline) {
        const rendered = renderInlineTag(this.name, content2, options !== null && options !== void 0 ? options : {});
        if (typeof rendered === "string") {
          return rendered;
        }
      }
      let marker = "";
      if ((options === null || options === void 0 ? void 0 : options.tag) === "italic" || (options === null || options === void 0 ? void 0 : options.tag) === void 0) {
        marker = "*";
      } else if ((options === null || options === void 0 ? void 0 : options.tag) === "bold") {
        marker = "**";
      } else if ((options === null || options === void 0 ? void 0 : options.tag) === "bold-italic") {
        marker = "***";
      }
      let text = `${marker}@${this.name}${marker}`;
      if (this.content.inlines.length === 1) {
        text = `${text} — ${content2}`;
      } else if (this.content.inlines.length > 1) {
        text = `${text}
${content2}`;
      }
      if (this.inline) {
        return `{${text}}`;
      } else {
        return text;
      }
    }
  }
  function renderInlineTag(tag, content2, options) {
    var _a2, _b2;
    if (tag === "linkplain" || tag === "linkcode" || tag === "link") {
      const index = content2.indexOf(" ");
      let display = content2;
      if (index > 0) {
        const displayStart = skipWhitespace(content2, index);
        display = content2.substring(displayStart);
        content2 = content2.substring(0, index);
      }
      if (tag === "linkcode" || tag === "link" && options.link === "code") {
        display = `\`${display}\``;
      }
      const renderedLink = (_b2 = (_a2 = options.renderLink) === null || _a2 === void 0 ? void 0 : _a2.call(options, content2, display)) !== null && _b2 !== void 0 ? _b2 : renderLinkDefault(content2, display);
      return renderedLink;
    }
    return void 0;
  }
  function renderLinkDefault(content2, display) {
    try {
      vscode_uri_1.URI.parse(content2, true);
      return `[${display}](${content2})`;
    } catch (_a2) {
      return content2;
    }
  }
  class JSDocTextImpl {
    constructor(lines, range2) {
      this.inlines = lines;
      this.range = range2;
    }
    toString() {
      let text = "";
      for (let i = 0; i < this.inlines.length; i++) {
        const inline = this.inlines[i];
        const next = this.inlines[i + 1];
        text += inline.toString();
        if (next && next.range.start.line > inline.range.start.line) {
          text += "\n";
        }
      }
      return text;
    }
    toMarkdown(options) {
      let text = "";
      for (let i = 0; i < this.inlines.length; i++) {
        const inline = this.inlines[i];
        const next = this.inlines[i + 1];
        text += inline.toMarkdown(options);
        if (next && next.range.start.line > inline.range.start.line) {
          text += "\n";
        }
      }
      return text;
    }
  }
  class JSDocLineImpl {
    constructor(text, range2) {
      this.text = text;
      this.range = range2;
    }
    toString() {
      return this.text;
    }
    toMarkdown() {
      return this.text;
    }
  }
  function fillNewlines(text) {
    if (text.endsWith("\n")) {
      return "\n";
    } else {
      return "\n\n";
    }
  }
  return jsdoc;
}
var hasRequiredDocumentationProvider;
function requireDocumentationProvider() {
  if (hasRequiredDocumentationProvider)
    return documentationProvider;
  hasRequiredDocumentationProvider = 1;
  Object.defineProperty(documentationProvider, "__esModule", { value: true });
  documentationProvider.JSDocDocumentationProvider = void 0;
  const syntax_tree_1 = requireSyntaxTree();
  const ast_util_1 = requireAstUtil();
  const cst_util_1 = requireCstUtil();
  const jsdoc_1 = requireJsdoc();
  class JSDocDocumentationProvider {
    constructor(services2) {
      this.indexManager = services2.shared.workspace.IndexManager;
      this.grammarConfig = services2.parser.GrammarConfig;
    }
    getDocumentation(node) {
      const lastNode = (0, cst_util_1.findCommentNode)(node.$cstNode, this.grammarConfig.multilineCommentRules);
      if ((0, syntax_tree_1.isLeafCstNode)(lastNode) && (0, jsdoc_1.isJSDoc)(lastNode)) {
        const parsedJSDoc = (0, jsdoc_1.parseJSDoc)(lastNode);
        return parsedJSDoc.toMarkdown({
          renderLink: (link, display) => {
            return this.documentationLinkRenderer(node, link, display);
          }
        });
      }
      return void 0;
    }
    documentationLinkRenderer(node, name2, display) {
      var _a2;
      const description = (_a2 = this.findNameInPrecomputedScopes(node, name2)) !== null && _a2 !== void 0 ? _a2 : this.findNameInGlobalScope(node, name2);
      if (description && description.nameSegment) {
        const line = description.nameSegment.range.start.line + 1;
        const character = description.nameSegment.range.start.character + 1;
        const uri = description.documentUri.with({ fragment: `L${line},${character}` });
        return `[${display}](${uri.toString()})`;
      } else {
        return void 0;
      }
    }
    findNameInPrecomputedScopes(node, name2) {
      const document2 = (0, ast_util_1.getDocument)(node);
      const precomputed = document2.precomputedScopes;
      if (!precomputed) {
        return void 0;
      }
      let currentNode = node;
      do {
        const allDescriptions = precomputed.get(currentNode);
        const description = allDescriptions.find((e) => e.name === name2);
        if (description) {
          return description;
        }
        currentNode = currentNode.$container;
      } while (currentNode);
      return void 0;
    }
    findNameInGlobalScope(node, name2) {
      const description = this.indexManager.allElements().find((e) => e.name === name2);
      return description;
    }
  }
  documentationProvider.JSDocDocumentationProvider = JSDocDocumentationProvider;
  return documentationProvider;
}
var hasRequiredDocumentation;
function requireDocumentation() {
  if (hasRequiredDocumentation)
    return documentation;
  hasRequiredDocumentation = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireDocumentationProvider(), exports);
    __exportStar(requireJsdoc(), exports);
  })(documentation);
  return documentation;
}
var hasRequiredDefaultModule;
function requireDefaultModule() {
  if (hasRequiredDefaultModule)
    return defaultModule;
  hasRequiredDefaultModule = 1;
  Object.defineProperty(defaultModule, "__esModule", { value: true });
  defaultModule.createDefaultSharedModule = defaultModule.createDefaultModule = void 0;
  const vscode_languageserver_1 = requireMain();
  const vscode_languageserver_textdocument_1 = require$$1$1;
  const grammar_config_1 = requireGrammarConfig();
  const completion_parser_builder_1 = requireCompletionParserBuilder();
  const completion_provider_1 = requireCompletionProvider();
  const document_highlight_provider_1 = requireDocumentHighlightProvider();
  const document_symbol_provider_1 = requireDocumentSymbolProvider();
  const folding_range_provider_1 = requireFoldingRangeProvider();
  const definition_provider_1 = requireDefinitionProvider();
  const hover_provider_1 = requireHoverProvider();
  const language_server_1 = requireLanguageServer();
  const references_provider_1 = requireReferencesProvider();
  const rename_provider_1 = requireRenameProvider();
  const langium_parser_builder_1 = requireLangiumParserBuilder();
  const token_builder_1 = requireTokenBuilder();
  const value_converter_1 = requireValueConverter();
  const linker_1 = requireLinker();
  const name_provider_1 = requireNameProvider();
  const references_1 = requireReferences$1();
  const scope_computation_1 = requireScopeComputation();
  const scope_provider_1 = requireScopeProvider();
  const json_serializer_1 = requireJsonSerializer();
  const service_registry_1 = requireServiceRegistry();
  const promise_util_1 = requirePromiseUtil();
  const document_validator_1 = requireDocumentValidator();
  const validation_registry_1 = requireValidationRegistry();
  const ast_descriptions_1 = requireAstDescriptions();
  const ast_node_locator_1 = requireAstNodeLocator();
  const configuration_1 = requireConfiguration();
  const document_builder_1 = requireDocumentBuilder();
  const documents_1 = requireDocuments$1();
  const index_manager_1 = requireIndexManager();
  const workspace_manager_1 = requireWorkspaceManager();
  const lexer_1 = requireLexer();
  const documentation_1 = requireDocumentation();
  function createDefaultModule(context) {
    return {
      documentation: {
        DocumentationProvider: (services2) => new documentation_1.JSDocDocumentationProvider(services2)
      },
      parser: {
        GrammarConfig: (services2) => (0, grammar_config_1.createGrammarConfig)(services2),
        LangiumParser: (services2) => (0, langium_parser_builder_1.createLangiumParser)(services2),
        CompletionParser: (services2) => (0, completion_parser_builder_1.createCompletionParser)(services2),
        ValueConverter: () => new value_converter_1.DefaultValueConverter(),
        TokenBuilder: () => new token_builder_1.DefaultTokenBuilder(),
        Lexer: (services2) => new lexer_1.DefaultLexer(services2)
      },
      lsp: {
        CompletionProvider: (services2) => new completion_provider_1.DefaultCompletionProvider(services2),
        DocumentSymbolProvider: (services2) => new document_symbol_provider_1.DefaultDocumentSymbolProvider(services2),
        HoverProvider: (services2) => new hover_provider_1.MultilineCommentHoverProvider(services2),
        FoldingRangeProvider: (services2) => new folding_range_provider_1.DefaultFoldingRangeProvider(services2),
        ReferencesProvider: (services2) => new references_provider_1.DefaultReferencesProvider(services2),
        DefinitionProvider: (services2) => new definition_provider_1.DefaultDefinitionProvider(services2),
        DocumentHighlightProvider: (services2) => new document_highlight_provider_1.DefaultDocumentHighlightProvider(services2),
        RenameProvider: (services2) => new rename_provider_1.DefaultRenameProvider(services2)
      },
      workspace: {
        AstNodeLocator: () => new ast_node_locator_1.DefaultAstNodeLocator(),
        AstNodeDescriptionProvider: (services2) => new ast_descriptions_1.DefaultAstNodeDescriptionProvider(services2),
        ReferenceDescriptionProvider: (services2) => new ast_descriptions_1.DefaultReferenceDescriptionProvider(services2)
      },
      references: {
        Linker: (services2) => new linker_1.DefaultLinker(services2),
        NameProvider: () => new name_provider_1.DefaultNameProvider(),
        ScopeProvider: (services2) => new scope_provider_1.DefaultScopeProvider(services2),
        ScopeComputation: (services2) => new scope_computation_1.DefaultScopeComputation(services2),
        References: (services2) => new references_1.DefaultReferences(services2)
      },
      serializer: {
        JsonSerializer: (services2) => new json_serializer_1.DefaultJsonSerializer(services2)
      },
      validation: {
        DocumentValidator: (services2) => new document_validator_1.DefaultDocumentValidator(services2),
        ValidationRegistry: (services2) => new validation_registry_1.ValidationRegistry(services2)
      },
      shared: () => context.shared
    };
  }
  defaultModule.createDefaultModule = createDefaultModule;
  function createDefaultSharedModule(context) {
    return {
      ServiceRegistry: () => new service_registry_1.DefaultServiceRegistry(),
      lsp: {
        Connection: () => context.connection,
        LanguageServer: (services2) => new language_server_1.DefaultLanguageServer(services2)
      },
      workspace: {
        LangiumDocuments: (services2) => new documents_1.DefaultLangiumDocuments(services2),
        LangiumDocumentFactory: (services2) => new documents_1.DefaultLangiumDocumentFactory(services2),
        DocumentBuilder: (services2) => new document_builder_1.DefaultDocumentBuilder(services2),
        TextDocuments: () => new vscode_languageserver_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument),
        IndexManager: (services2) => new index_manager_1.DefaultIndexManager(services2),
        WorkspaceManager: (services2) => new workspace_manager_1.DefaultWorkspaceManager(services2),
        FileSystemProvider: (services2) => context.fileSystemProvider(services2),
        MutexLock: () => new promise_util_1.MutexLock(),
        ConfigurationProvider: (services2) => new configuration_1.DefaultConfigurationProvider(services2)
      }
    };
  }
  defaultModule.createDefaultSharedModule = createDefaultSharedModule;
  return defaultModule;
}
var services = {};
var hasRequiredServices;
function requireServices() {
  if (hasRequiredServices)
    return services;
  hasRequiredServices = 1;
  Object.defineProperty(services, "__esModule", { value: true });
  return services;
}
var generator = {};
var nodeJoiner = {};
var hasRequiredNodeJoiner;
function requireNodeJoiner() {
  if (hasRequiredNodeJoiner)
    return nodeJoiner;
  hasRequiredNodeJoiner = 1;
  Object.defineProperty(nodeJoiner, "__esModule", { value: true });
  nodeJoiner.joinTracedToNodeIf = nodeJoiner.joinTracedToNode = nodeJoiner.joinToNode = void 0;
  const generator_node_1 = requireGeneratorNode();
  function joinToNode(iterable, toGenerated = String, { filter, prefix, suffix, separator, appendNewLineIfNotEmpty } = {}) {
    return reduceWithIsLast(iterable, (node, it, i, isLast) => {
      if (filter && !filter(it, i, isLast)) {
        return node;
      }
      const content2 = toGenerated(it, i, isLast);
      return (node !== null && node !== void 0 ? node : node = new generator_node_1.CompositeGeneratorNode()).append(prefix && prefix(it, i, isLast)).append(content2).append(suffix && suffix(it, i, isLast)).appendIf(!isLast && content2 !== void 0, separator).appendNewLineIfNotEmptyIf(
        // append 'newLineIfNotEmpty' elements only if 'node' has some content already,
        //  as if the parent is an IndentNode with 'indentImmediately' set to 'false'
        //  the indentation is not properly applied to the first non-empty line of the (this) child node
        !node.isEmpty() && !!appendNewLineIfNotEmpty
      );
    });
  }
  nodeJoiner.joinToNode = joinToNode;
  function joinTracedToNode(source, property) {
    return (iterable, toGenerated = String, options) => {
      return (0, generator_node_1.traceToNode)(source, property)(joinToNode(iterable, source && property ? (element, index, isLast) => (0, generator_node_1.traceToNode)(source, property, index)(toGenerated(element, index, isLast)) : toGenerated, options));
    };
  }
  nodeJoiner.joinTracedToNode = joinTracedToNode;
  function joinTracedToNodeIf(condition, source, property) {
    return condition ? joinTracedToNode(typeof source === "function" ? source() : source, property) : () => void 0;
  }
  nodeJoiner.joinTracedToNodeIf = joinTracedToNodeIf;
  function reduceWithIsLast(iterable, callbackfn, initial) {
    const iterator = iterable[Symbol.iterator]();
    let next = iterator.next();
    let index = 0;
    let result = initial;
    while (!next.done) {
      const nextNext = iterator.next();
      result = callbackfn(result, next.value, index, Boolean(nextNext.done));
      next = nextNext;
      index++;
    }
    return result;
  }
  return nodeJoiner;
}
var hasRequiredGenerator;
function requireGenerator() {
  if (hasRequiredGenerator)
    return generator;
  hasRequiredGenerator = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeEOL = exports.expandToStringWithNL = exports.expandToString = void 0;
    __exportStar(requireGeneratorNode(), exports);
    __exportStar(requireNodeJoiner(), exports);
    __exportStar(requireTemplateNode(), exports);
    var template_string_1 = requireTemplateString();
    Object.defineProperty(exports, "expandToString", { enumerable: true, get: function() {
      return template_string_1.expandToString;
    } });
    Object.defineProperty(exports, "expandToStringWithNL", { enumerable: true, get: function() {
      return template_string_1.expandToStringWithNL;
    } });
    Object.defineProperty(exports, "normalizeEOL", { enumerable: true, get: function() {
      return template_string_1.normalizeEOL;
    } });
  })(generator);
  return generator;
}
var grammar = {};
var languageMetaData = {};
var hasRequiredLanguageMetaData;
function requireLanguageMetaData() {
  if (hasRequiredLanguageMetaData)
    return languageMetaData;
  hasRequiredLanguageMetaData = 1;
  Object.defineProperty(languageMetaData, "__esModule", { value: true });
  return languageMetaData;
}
var hasRequiredGrammar;
function requireGrammar() {
  if (hasRequiredGrammar)
    return grammar;
  hasRequiredGrammar = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireAstReflectionInterpreter(), exports);
    __exportStar(requireGrammarConfig(), exports);
    __exportStar(requireLangiumGrammarModule(), exports);
    __exportStar(requireLanguageMetaData(), exports);
  })(grammar);
  return grammar;
}
var parser = {};
var parserConfig = {};
var hasRequiredParserConfig;
function requireParserConfig() {
  if (hasRequiredParserConfig)
    return parserConfig;
  hasRequiredParserConfig = 1;
  Object.defineProperty(parserConfig, "__esModule", { value: true });
  return parserConfig;
}
var hasRequiredParser;
function requireParser() {
  if (hasRequiredParser)
    return parser;
  hasRequiredParser = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireCompletionParserBuilder(), exports);
    __exportStar(requireCstNodeBuilder(), exports);
    __exportStar(requireLangiumParserBuilder(), exports);
    __exportStar(requireLangiumParser(), exports);
    __exportStar(requireLexer(), exports);
    __exportStar(requireParserConfig(), exports);
    __exportStar(requireTokenBuilder(), exports);
    __exportStar(requireValueConverter(), exports);
  })(parser);
  return parser;
}
var references = {};
var hasRequiredReferences;
function requireReferences() {
  if (hasRequiredReferences)
    return references;
  hasRequiredReferences = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireLinker(), exports);
    __exportStar(requireNameProvider(), exports);
    __exportStar(requireReferences$1(), exports);
    __exportStar(requireScopeComputation(), exports);
    __exportStar(requireScopeProvider(), exports);
  })(references);
  return references;
}
var serializer = {};
var hasRequiredSerializer;
function requireSerializer() {
  if (hasRequiredSerializer)
    return serializer;
  hasRequiredSerializer = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireJsonSerializer(), exports);
  })(serializer);
  return serializer;
}
var utils = {};
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils)
    return utils;
  hasRequiredUtils = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireAstUtil(), exports);
    __exportStar(requireCollections(), exports);
    __exportStar(requireCstUtil(), exports);
    __exportStar(requireErrors(), exports);
    __exportStar(requireGrammarUtil(), exports);
    __exportStar(requirePromiseUtil(), exports);
    __exportStar(requireRegexUtil(), exports);
    __exportStar(requireStream(), exports);
    __exportStar(requireUriUtil(), exports);
  })(utils);
  return utils;
}
var validation = {};
var hasRequiredValidation;
function requireValidation() {
  if (hasRequiredValidation)
    return validation;
  hasRequiredValidation = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireDocumentValidator(), exports);
    __exportStar(requireValidationRegistry(), exports);
  })(validation);
  return validation;
}
var workspace = {};
var hasRequiredWorkspace;
function requireWorkspace() {
  if (hasRequiredWorkspace)
    return workspace;
  hasRequiredWorkspace = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireAstDescriptions(), exports);
    __exportStar(requireAstNodeLocator(), exports);
    __exportStar(requireConfiguration(), exports);
    __exportStar(requireDocumentBuilder(), exports);
    __exportStar(requireDocuments$1(), exports);
    __exportStar(requireFileSystemProvider(), exports);
    __exportStar(requireIndexManager(), exports);
    __exportStar(requireWorkspaceManager(), exports);
  })(workspace);
  return workspace;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib)
    return lib$1;
  hasRequiredLib = 1;
  (function(exports) {
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GrammarAST = void 0;
    __exportStar(requireDefaultModule(), exports);
    __exportStar(requireDependencyInjection(), exports);
    __exportStar(requireServiceRegistry(), exports);
    __exportStar(requireServices(), exports);
    __exportStar(requireSyntaxTree(), exports);
    __exportStar(requireDocumentation(), exports);
    __exportStar(requireGenerator(), exports);
    __exportStar(requireGrammar(), exports);
    __exportStar(requireLsp(), exports);
    __exportStar(requireParser(), exports);
    __exportStar(requireReferences(), exports);
    __exportStar(requireSerializer(), exports);
    __exportStar(requireUtils(), exports);
    __exportStar(requireValidation(), exports);
    __exportStar(requireWorkspace(), exports);
    const GrammarAST = __importStar(requireAst());
    exports.GrammarAST = GrammarAST;
  })(lib$1);
  return lib$1;
}
requireLib();
function generateXState(model2, options = {}) {
  const initial = getInitialState(model2, options);
  const states = mapStates(model2.states, options);
  const machine2 = {
    initial,
    states
  };
  return machine2;
  function getInitialState(model22, { generateInitialIfMissing }) {
    var _a2, _b2;
    const { init } = model22;
    if (init) {
      return ((_a2 = init.ref) == null ? void 0 : _a2.name) ?? init.$refText;
    }
    if (generateInitialIfMissing) {
      return (_b2 = model22.states[0]) == null ? void 0 : _b2.name;
    }
    return void 0;
  }
  function mapStates(states2, options2) {
    return states2.reduce((acc, state) => {
      const { name: name2 } = state;
      acc[name2] = mapState(state, options2);
      return acc;
    }, {});
  }
  function mapState(state, options2) {
    var _a2;
    const stateOut = {};
    if (((_a2 = state.transitions) == null ? void 0 : _a2.length) > 0) {
      stateOut.on = state.transitions.reduce((acc, tn) => {
        var _a3, _b2;
        acc[tn.event] = (_b2 = (_a3 = tn.to) == null ? void 0 : _a3.ref) == null ? void 0 : _b2.name;
        return acc;
      }, {});
    }
    if (state.states && state.states.length > 0) {
      stateOut.initial = getInitialState(state, options2);
      stateOut.states = mapStates(state.states, options2);
    }
    return stateOut;
  }
}
function getParentState(state) {
  const { $container } = state;
  if ($container && $container.$type === "State") {
    return $container;
  }
  return void 0;
}
function ArrowPathIcon({
  title,
  titleId,
  ...props
}, svgRef) {
  return /* @__PURE__ */ reactExports.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef,
    "aria-labelledby": titleId
  }, props), title ? /* @__PURE__ */ reactExports.createElement("title", {
    id: titleId
  }, title) : null, /* @__PURE__ */ reactExports.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"
  }));
}
const ForwardRef$2 = reactExports.forwardRef(ArrowPathIcon);
const ArrowPathIcon$1 = ForwardRef$2;
function ArrowUturnLeftIcon({
  title,
  titleId,
  ...props
}, svgRef) {
  return /* @__PURE__ */ reactExports.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef,
    "aria-labelledby": titleId
  }, props), title ? /* @__PURE__ */ reactExports.createElement("title", {
    id: titleId
  }, title) : null, /* @__PURE__ */ reactExports.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3"
  }));
}
const ForwardRef$1 = reactExports.forwardRef(ArrowUturnLeftIcon);
const ArrowUturnLeftIcon$1 = ForwardRef$1;
function ArrowUturnRightIcon({
  title,
  titleId,
  ...props
}, svgRef) {
  return /* @__PURE__ */ reactExports.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef,
    "aria-labelledby": titleId
  }, props), title ? /* @__PURE__ */ reactExports.createElement("title", {
    id: titleId
  }, title) : null, /* @__PURE__ */ reactExports.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 15l6-6m0 0l-6-6m6 6H9a6 6 0 000 12h3"
  }));
}
const ForwardRef = reactExports.forwardRef(ArrowUturnRightIcon);
const ArrowUturnRightIcon$1 = ForwardRef;
let listenerQueue = [];
let atom = (initialValue, level) => {
  let listeners = [];
  let store = {
    get() {
      if (!store.lc) {
        store.listen(() => {
        })();
      }
      return store.value;
    },
    l: level || 0,
    lc: 0,
    listen(listener, listenerLevel) {
      store.lc = listeners.push(listener, listenerLevel || store.l) / 2;
      return () => {
        let index = listeners.indexOf(listener);
        if (~index) {
          listeners.splice(index, 2);
          store.lc--;
          if (!store.lc)
            store.off();
        }
      };
    },
    notify(changedKey) {
      let runListenerQueue = !listenerQueue.length;
      for (let i = 0; i < listeners.length; i += 2) {
        listenerQueue.push(
          listeners[i],
          store.value,
          changedKey,
          listeners[i + 1]
        );
      }
      if (runListenerQueue) {
        for (let i = 0; i < listenerQueue.length; i += 4) {
          let skip = false;
          for (let j2 = i + 7; j2 < listenerQueue.length; j2 += 4) {
            if (listenerQueue[j2] < listenerQueue[i + 3]) {
              skip = true;
              break;
            }
          }
          if (skip) {
            listenerQueue.push(
              listenerQueue[i],
              listenerQueue[i + 1],
              listenerQueue[i + 2],
              listenerQueue[i + 3]
            );
          } else {
            listenerQueue[i](listenerQueue[i + 1], listenerQueue[i + 2]);
          }
        }
        listenerQueue.length = 0;
      }
    },
    off() {
    },
    set(data) {
      if (store.value !== data) {
        store.value = data;
        store.notify();
      }
    },
    subscribe(cb, listenerLevel) {
      let unbind = store.listen(cb, listenerLevel);
      cb(store.value);
      return unbind;
    },
    value: initialValue
    /* It will be called on last listener unsubscribing.
    We will redefine it in onMount and onStop. */
  };
  return store;
};
const MOUNT = 5;
const UNMOUNT = 6;
const REVERT_MUTATION = 10;
let on = (object, listener, eventKey, mutateStore) => {
  object.events = object.events || {};
  if (!object.events[eventKey + REVERT_MUTATION]) {
    object.events[eventKey + REVERT_MUTATION] = mutateStore((eventProps) => {
      object.events[eventKey].reduceRight((event, l2) => (l2(event), event), {
        shared: {},
        ...eventProps
      });
    });
  }
  object.events[eventKey] = object.events[eventKey] || [];
  object.events[eventKey].push(listener);
  return () => {
    let currentListeners = object.events[eventKey];
    let index = currentListeners.indexOf(listener);
    currentListeners.splice(index, 1);
    if (!currentListeners.length) {
      delete object.events[eventKey];
      object.events[eventKey + REVERT_MUTATION]();
      delete object.events[eventKey + REVERT_MUTATION];
    }
  };
};
let STORE_UNMOUNT_DELAY = 1e3;
let onMount = (store, initialize) => {
  let listener = (payload) => {
    let destroy = initialize(payload);
    if (destroy)
      store.events[UNMOUNT].push(destroy);
  };
  return on(store, listener, MOUNT, (runListeners) => {
    let originListen = store.listen;
    store.listen = (...args) => {
      if (!store.lc && !store.active) {
        store.active = true;
        runListeners();
      }
      return originListen(...args);
    };
    let originOff = store.off;
    store.events[UNMOUNT] = [];
    store.off = () => {
      originOff();
      setTimeout(() => {
        if (store.active && !store.lc) {
          store.active = false;
          for (let destroy of store.events[UNMOUNT])
            destroy();
          store.events[UNMOUNT] = [];
        }
      }, STORE_UNMOUNT_DELAY);
    };
    return () => {
      store.listen = originListen;
      store.off = originOff;
    };
  });
};
let computed = (stores, cb) => {
  if (!Array.isArray(stores))
    stores = [stores];
  let diamondArgs;
  let run = () => {
    let args = stores.map((store) => store.get());
    if (diamondArgs === void 0 || args.some((arg, i) => arg !== diamondArgs[i])) {
      diamondArgs = args;
      derived.set(cb(...args));
    }
  };
  let derived = atom(void 0, Math.max(...stores.map((s2) => s2.l)) + 1);
  onMount(derived, () => {
    let unbinds = stores.map((store) => store.listen(run, derived.l));
    run();
    return () => {
      for (let unbind of unbinds)
        unbind();
    };
  });
  return derived;
};
function listenKeys(store, keys2, listener) {
  let keysSet = /* @__PURE__ */ new Set([...keys2, void 0]);
  return store.listen((value, changed) => {
    if (keysSet.has(changed)) {
      listener(value, changed);
    }
  });
}
let map = (value = {}) => {
  let store = atom(value);
  store.setKey = function(key, newValue) {
    if (typeof newValue === "undefined") {
      if (key in store.value) {
        store.value = { ...store.value };
        delete store.value[key];
        store.notify(key);
      }
    } else if (store.value[key] !== newValue) {
      store.value = {
        ...store.value,
        [key]: newValue
      };
      store.notify(key);
    }
  };
  return store;
};
map();
map({});
const machineMode = atom();
const machineState = atom({});
const model = atom();
function getModelErrors(model2) {
  var _a2;
  const diagnostics = (_a2 = model2 == null ? void 0 : model2.$document) == null ? void 0 : _a2.diagnostics;
  return (diagnostics == null ? void 0 : diagnostics.filter((i) => i.severity === 1)) || [];
}
const modelErrors = computed([model], (model2) => {
  return getModelErrors(model2);
});
const modelIsValid = computed([modelErrors], (errors2) => !errors2 || errors2.length === 0);
const latestValidModel = atom();
onMount(latestValidModel, () => {
  const deps = computed([model, modelIsValid], (model2, modelIsValid2) => ({ model: model2, modelIsValid: modelIsValid2 }));
  return deps.subscribe(({ model: model2, modelIsValid: modelIsValid2 }) => {
    if (modelIsValid2)
      latestValidModel.set(model2);
  });
});
const code = atom(``);
const api = {
  send(event) {
    console.log("todo: send", event);
  }
};
const machine = {
  mode: machineMode,
  state: machineState,
  ...api
};
const dark = atom(true);
const toggleDark = () => dark.set(!dark.get());
const theme$1 = { dark, toggleDark };
window.app = {
  theme: theme$1,
  code,
  model,
  machine
};
function StateMachine({ model: model2, instance }) {
  var _a2;
  reactExports.useState(theme$1.dark);
  const { states } = model2;
  const { send, undo: undo2, redo: redo2, canUndo, canRedo, reset } = instance;
  const activeStates = reactExports.useMemo(() => {
    const items = [];
    let state = instance.state;
    while (state) {
      items.push(state);
      state = getParentState(state);
    }
    return items.reverse();
  }, [states, instance.state]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full flex flex-col was-bg-base-100", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 was-bg-base-200", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 p-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
          "State: ",
          (_a2 = instance.state) == null ? void 0 : _a2.name
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
          "Active States: ",
          activeStates.map((state) => state.name).join(", ")
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "menu menu-horizontal", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "btn btn-sm btn-ghost rounded-btn", onClick: reset, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowPathIcon$1, { className: "h-6 w-6" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { disabled: !canUndo, className: "btn btn-sm btn-ghost rounded-btn", onClick: undo2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUturnLeftIcon$1, { className: "h-6 w-6" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { disabled: !canRedo, className: "btn btn-sm btn-ghost rounded-btn", onClick: redo2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowUturnRightIcon$1, { className: "h-6 w-6" }) })
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 overflow-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx(StateList, { states, state: instance.state, send }) })
  ] });
}
function StateList({ state: currentState, states, send, path = [] }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "pl-2 mt-2 flex flex-wrap gap-2", children: states.map((state, index) => {
    const { name: name2, states: substates, transitions } = state;
    const active = currentState && (state === currentState || name2 === currentState.name);
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `border card was-bg-base-100 shadow-xl ${active ? "was-bg-slate-800 border border-accent" : "was-bg-base-200 border-slate-700"} `, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `card-body rounded py-2 px-2`, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("h2", { className: "card-title text-base", children: [
        " ",
        name2
      ] }),
      !!transitions && /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionList, { transitions, send }),
      (substates == null ? void 0 : substates.length) > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(StateList, { states: substates, state: currentState, send })
    ] }) }, state.name);
  }) });
}
function TransitionList({ transitions, send }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: transitions.map((transition, index) => {
    var _a2;
    const { event, to } = transition;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "btn btn-sm btn-ghost rounded-btn normal-case", onClick: () => send(event), children: event }),
      " ",
      "->",
      " ",
      (_a2 = to == null ? void 0 : to.ref) == null ? void 0 : _a2.name
    ] }, event || index);
  }) });
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var NO_PROVIDER = {};
function createUseContext(context) {
  return function() {
    var value = reactExports.useContext(context);
    return value;
  };
}
function constate(useValue) {
  for (var _len = arguments.length, selectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    selectors[_key - 1] = arguments[_key];
  }
  var contexts = [];
  var hooks = [];
  var createContext$1 = function createContext$12(displayName) {
    var context = /* @__PURE__ */ reactExports.createContext(NO_PROVIDER);
    contexts.push(context);
    hooks.push(createUseContext(context));
  };
  if (selectors.length) {
    selectors.forEach(function(selector) {
      return createContext$1(selector.name);
    });
  } else {
    createContext$1(useValue.name);
  }
  var Provider = function Provider2(_ref) {
    var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["children"]);
    var value = useValue(props);
    var element = children;
    for (var i = 0; i < contexts.length; i += 1) {
      var context = contexts[i];
      var selector = selectors[i] || function(v2) {
        return v2;
      };
      element = /* @__PURE__ */ reactExports.createElement(context.Provider, {
        value: selector(value)
      }, element);
    }
    return element;
  };
  return [Provider].concat(hooks);
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var ActionType;
(function(ActionType2) {
  ActionType2["Undo"] = "UNDO";
  ActionType2["Redo"] = "REDO";
  ActionType2["Set"] = "SET";
  ActionType2["Reset"] = "RESET";
})(ActionType || (ActionType = {}));
var initialState = {
  past: [],
  present: null,
  future: []
};
var useUndo = function useUndo2(initialPresent, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var _useCheckpoints$opts = _extends({
    useCheckpoints: false
  }, opts), useCheckpoints = _useCheckpoints$opts.useCheckpoints;
  var reducer = function reducer2(state2, action) {
    var past = state2.past, present = state2.present, future = state2.future;
    switch (action.type) {
      case ActionType.Undo: {
        if (past.length === 0) {
          return state2;
        }
        var previous = past[past.length - 1];
        var newPast = past.slice(0, past.length - 1);
        return {
          past: newPast,
          present: previous,
          future: [present].concat(future)
        };
      }
      case ActionType.Redo: {
        if (future.length === 0) {
          return state2;
        }
        var next = future[0];
        var newFuture = future.slice(1);
        return {
          past: [].concat(past, [present]),
          present: next,
          future: newFuture
        };
      }
      case ActionType.Set: {
        var isNewCheckpoint = useCheckpoints ? !!action.historyCheckpoint : true;
        var newPresent = action.newPresent;
        if (newPresent === present) {
          return state2;
        }
        return {
          past: isNewCheckpoint === false ? past : [].concat(past, [present]),
          present: newPresent,
          future: []
        };
      }
      case ActionType.Reset: {
        var _newPresent = action.newPresent;
        return {
          past: [],
          present: _newPresent,
          future: []
        };
      }
    }
  };
  var _useReducer = reactExports.useReducer(reducer, _extends({}, initialState, {
    present: initialPresent
  })), state = _useReducer[0], dispatch = _useReducer[1];
  var canUndo = state.past.length !== 0;
  var canRedo = state.future.length !== 0;
  var undo2 = reactExports.useCallback(function() {
    if (canUndo) {
      dispatch({
        type: ActionType.Undo
      });
    }
  }, [canUndo]);
  var redo2 = reactExports.useCallback(function() {
    if (canRedo) {
      dispatch({
        type: ActionType.Redo
      });
    }
  }, [canRedo]);
  var set = reactExports.useCallback(function(newPresent, checkpoint) {
    if (checkpoint === void 0) {
      checkpoint = false;
    }
    dispatch({
      type: ActionType.Set,
      newPresent,
      historyCheckpoint: checkpoint
    });
  }, []);
  var reset = reactExports.useCallback(function(newPresent) {
    return dispatch({
      type: ActionType.Reset,
      newPresent
    });
  }, []);
  return [state, {
    set,
    reset,
    undo: undo2,
    redo: redo2,
    canUndo,
    canRedo
  }];
};
function getInitState(initialState2, states) {
  return (initialState2 == null ? void 0 : initialState2.ref) ?? (states == null ? void 0 : states[0]);
}
const [StateMachineInstanceProvider, useStateMachineContext] = constate(useStateMachine);
function useStateMachine({ model: model2 }) {
  const [
    stateHistory,
    {
      set: setState,
      reset: resetState,
      undo: undo2,
      redo: redo2,
      canUndo,
      canRedo
    }
  ] = useUndo(getTargetState(getInitState(model2 == null ? void 0 : model2.init, model2 == null ? void 0 : model2.states)));
  const memo = reactExports.useMemo(() => ({ state: stateHistory, lastTransition: void 0 }), []);
  memo.state = stateHistory;
  const { present: state } = stateHistory;
  reactExports.useEffect(() => {
    const previousState = state !== void 0 && model2 && findStateByName(model2, state.name);
    const validState = previousState || getInitState(model2 == null ? void 0 : model2.init, model2 == null ? void 0 : model2.states);
    if (validState) {
      setState(getTargetState(validState));
    }
  }, [model2]);
  function getTargetState(newState) {
    var _a2;
    if (newState === void 0)
      return newState;
    const firstState = (_a2 = newState == null ? void 0 : newState.states) == null ? void 0 : _a2[0];
    const nestedInitialState = firstState && getTargetState(firstState);
    return nestedInitialState ?? firstState ?? newState;
  }
  function updateState(state2) {
    const newState = (state2 && getTargetState(state2)) ?? state2;
    setState(newState);
  }
  function send(event) {
    var _a2;
    const state2 = memo.state.present;
    const transition = state2 && findTransition(state2, event);
    if (state2 && transition) {
      const newState = (_a2 = transition == null ? void 0 : transition.to) == null ? void 0 : _a2.ref;
      newState && updateState(newState);
      memo.lastTransition = {
        from: state2,
        transition
      };
    }
  }
  function reset() {
    const initialState2 = getInitState(model2 == null ? void 0 : model2.init, model2 == null ? void 0 : model2.states);
    resetState(initialState2 && getTargetState(initialState2));
  }
  return { state, send, undo: undo2, redo: redo2, canUndo, canRedo, reset, model: model2, lastTransition: memo.lastTransition };
}
function recurseStates(states, fn) {
  for (let state of states) {
    const found = fn(state);
    if (found)
      return found;
    if (state.states) {
      return recurseStates(state.states, fn);
    }
  }
}
function findState(model2, fn) {
  return recurseStates(model2.states, fn);
}
function findStateByName(model2, name2) {
  return findState(model2, (state) => {
    if (state.name === name2) {
      return state;
    }
  });
}
function findTransition(state, event) {
  var _a2;
  let curState = state;
  while (curState) {
    const transition = (_a2 = curState.transitions) == null ? void 0 : _a2.find((t2) => t2.event === event);
    if (transition)
      return transition;
    const $container = curState.$container;
    if ($container && $container.$type === "State") {
      curState = $container;
    } else {
      curState = void 0;
    }
  }
}
function StateMachinePane({}) {
  const { model: model2, setModel } = reactExports.useContext(ModelContext);
  const instance = useStateMachineContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full", children: model2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(StateMachine, { model: model2, instance }) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "no state machine yet" }) });
}
function useStore(store, opts = {}) {
  let subscribe = reactExports.useCallback(
    (onChange) => opts.keys ? listenKeys(store, opts.keys, onChange) : store.listen(onChange),
    [opts.keys, store]
  );
  let get = store.get.bind(store);
  return reactExports.useSyncExternalStore(subscribe, get, get);
}
function peek(store) {
  return store.value;
}
function isStore(value) {
  return value && value.subscribe;
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_is_object = __commonJS({
  "node_modules/is-object/index.js"(exports, module) {
    module.exports = function isObject(x2) {
      return typeof x2 === "object" && x2 !== null;
    };
  }
});
var require_is_window = __commonJS({
  "node_modules/is-window/index.js"(exports, module) {
    module.exports = function(obj) {
      if (obj == null) {
        return false;
      }
      var o2 = Object(obj);
      return o2 === o2.window;
    };
  }
});
var require_is_dom = __commonJS({
  "node_modules/is-dom/index.js"(exports, module) {
    var isObject = require_is_object();
    var isWindow = require_is_window();
    function isNode(val) {
      if (!isObject(val) || !isWindow(window) || typeof window.Node !== "function") {
        return false;
      }
      return typeof val.nodeType === "number" && typeof val.nodeName === "string";
    }
    module.exports = isNode;
  }
});
var themes_exports = {};
__export(themes_exports, {
  chromeDark: () => theme,
  chromeLight: () => theme2
});
var theme = {
  BASE_FONT_FAMILY: "Menlo, monospace",
  BASE_FONT_SIZE: "11px",
  BASE_LINE_HEIGHT: 1.2,
  BASE_BACKGROUND_COLOR: "rgb(36, 36, 36)",
  BASE_COLOR: "rgb(213, 213, 213)",
  OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES: 10,
  OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES: 5,
  OBJECT_NAME_COLOR: "rgb(227, 110, 236)",
  OBJECT_VALUE_NULL_COLOR: "rgb(127, 127, 127)",
  OBJECT_VALUE_UNDEFINED_COLOR: "rgb(127, 127, 127)",
  OBJECT_VALUE_REGEXP_COLOR: "rgb(233, 63, 59)",
  OBJECT_VALUE_STRING_COLOR: "rgb(233, 63, 59)",
  OBJECT_VALUE_SYMBOL_COLOR: "rgb(233, 63, 59)",
  OBJECT_VALUE_NUMBER_COLOR: "hsl(252, 100%, 75%)",
  OBJECT_VALUE_BOOLEAN_COLOR: "hsl(252, 100%, 75%)",
  OBJECT_VALUE_FUNCTION_PREFIX_COLOR: "rgb(85, 106, 242)",
  HTML_TAG_COLOR: "rgb(93, 176, 215)",
  HTML_TAGNAME_COLOR: "rgb(93, 176, 215)",
  HTML_TAGNAME_TEXT_TRANSFORM: "lowercase",
  HTML_ATTRIBUTE_NAME_COLOR: "rgb(155, 187, 220)",
  HTML_ATTRIBUTE_VALUE_COLOR: "rgb(242, 151, 102)",
  HTML_COMMENT_COLOR: "rgb(137, 137, 137)",
  HTML_DOCTYPE_COLOR: "rgb(192, 192, 192)",
  ARROW_COLOR: "rgb(145, 145, 145)",
  ARROW_MARGIN_RIGHT: 3,
  ARROW_FONT_SIZE: 12,
  ARROW_ANIMATION_DURATION: "0",
  TREENODE_FONT_FAMILY: "Menlo, monospace",
  TREENODE_FONT_SIZE: "11px",
  TREENODE_LINE_HEIGHT: 1.2,
  TREENODE_PADDING_LEFT: 12,
  TABLE_BORDER_COLOR: "rgb(85, 85, 85)",
  TABLE_TH_BACKGROUND_COLOR: "rgb(44, 44, 44)",
  TABLE_TH_HOVER_COLOR: "rgb(48, 48, 48)",
  TABLE_SORT_ICON_COLOR: "black",
  TABLE_DATA_BACKGROUND_IMAGE: "linear-gradient(rgba(255, 255, 255, 0), rgba(255, 255, 255, 0) 50%, rgba(51, 139, 255, 0.0980392) 50%, rgba(51, 139, 255, 0.0980392))",
  TABLE_DATA_BACKGROUND_SIZE: "128px 32px"
};
var theme2 = {
  BASE_FONT_FAMILY: "Menlo, monospace",
  BASE_FONT_SIZE: "11px",
  BASE_LINE_HEIGHT: 1.2,
  BASE_BACKGROUND_COLOR: "white",
  BASE_COLOR: "black",
  OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES: 10,
  OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES: 5,
  OBJECT_NAME_COLOR: "rgb(136, 19, 145)",
  OBJECT_VALUE_NULL_COLOR: "rgb(128, 128, 128)",
  OBJECT_VALUE_UNDEFINED_COLOR: "rgb(128, 128, 128)",
  OBJECT_VALUE_REGEXP_COLOR: "rgb(196, 26, 22)",
  OBJECT_VALUE_STRING_COLOR: "rgb(196, 26, 22)",
  OBJECT_VALUE_SYMBOL_COLOR: "rgb(196, 26, 22)",
  OBJECT_VALUE_NUMBER_COLOR: "rgb(28, 0, 207)",
  OBJECT_VALUE_BOOLEAN_COLOR: "rgb(28, 0, 207)",
  OBJECT_VALUE_FUNCTION_PREFIX_COLOR: "rgb(13, 34, 170)",
  HTML_TAG_COLOR: "rgb(168, 148, 166)",
  HTML_TAGNAME_COLOR: "rgb(136, 18, 128)",
  HTML_TAGNAME_TEXT_TRANSFORM: "lowercase",
  HTML_ATTRIBUTE_NAME_COLOR: "rgb(153, 69, 0)",
  HTML_ATTRIBUTE_VALUE_COLOR: "rgb(26, 26, 166)",
  HTML_COMMENT_COLOR: "rgb(35, 110, 37)",
  HTML_DOCTYPE_COLOR: "rgb(192, 192, 192)",
  ARROW_COLOR: "#6e6e6e",
  ARROW_MARGIN_RIGHT: 3,
  ARROW_FONT_SIZE: 12,
  ARROW_ANIMATION_DURATION: "0",
  TREENODE_FONT_FAMILY: "Menlo, monospace",
  TREENODE_FONT_SIZE: "11px",
  TREENODE_LINE_HEIGHT: 1.2,
  TREENODE_PADDING_LEFT: 12,
  TABLE_BORDER_COLOR: "#aaa",
  TABLE_TH_BACKGROUND_COLOR: "#eee",
  TABLE_TH_HOVER_COLOR: "hsla(0, 0%, 90%, 1)",
  TABLE_SORT_ICON_COLOR: "#6e6e6e",
  TABLE_DATA_BACKGROUND_IMAGE: "linear-gradient(to bottom, white, white 50%, rgb(234, 243, 255) 50%, rgb(234, 243, 255))",
  TABLE_DATA_BACKGROUND_SIZE: "128px 32px"
};
var ExpandedPathsContext = reactExports.createContext([{}, () => {
}]);
var unselectable = {
  WebkitTouchCallout: "none",
  WebkitUserSelect: "none",
  KhtmlUserSelect: "none",
  MozUserSelect: "none",
  msUserSelect: "none",
  OUserSelect: "none",
  userSelect: "none"
};
var createTheme = (theme3) => ({
  DOMNodePreview: {
    htmlOpenTag: {
      base: {
        color: theme3.HTML_TAG_COLOR
      },
      tagName: {
        color: theme3.HTML_TAGNAME_COLOR,
        textTransform: theme3.HTML_TAGNAME_TEXT_TRANSFORM
      },
      htmlAttributeName: {
        color: theme3.HTML_ATTRIBUTE_NAME_COLOR
      },
      htmlAttributeValue: {
        color: theme3.HTML_ATTRIBUTE_VALUE_COLOR
      }
    },
    htmlCloseTag: {
      base: {
        color: theme3.HTML_TAG_COLOR
      },
      offsetLeft: {
        marginLeft: -theme3.TREENODE_PADDING_LEFT
      },
      tagName: {
        color: theme3.HTML_TAGNAME_COLOR,
        textTransform: theme3.HTML_TAGNAME_TEXT_TRANSFORM
      }
    },
    htmlComment: {
      color: theme3.HTML_COMMENT_COLOR
    },
    htmlDoctype: {
      color: theme3.HTML_DOCTYPE_COLOR
    }
  },
  ObjectPreview: {
    objectDescription: {
      fontStyle: "italic"
    },
    preview: {
      fontStyle: "italic"
    },
    arrayMaxProperties: theme3.OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES,
    objectMaxProperties: theme3.OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES
  },
  ObjectName: {
    base: {
      color: theme3.OBJECT_NAME_COLOR
    },
    dimmed: {
      opacity: 0.6
    }
  },
  ObjectValue: {
    objectValueNull: {
      color: theme3.OBJECT_VALUE_NULL_COLOR
    },
    objectValueUndefined: {
      color: theme3.OBJECT_VALUE_UNDEFINED_COLOR
    },
    objectValueRegExp: {
      color: theme3.OBJECT_VALUE_REGEXP_COLOR
    },
    objectValueString: {
      color: theme3.OBJECT_VALUE_STRING_COLOR
    },
    objectValueSymbol: {
      color: theme3.OBJECT_VALUE_SYMBOL_COLOR
    },
    objectValueNumber: {
      color: theme3.OBJECT_VALUE_NUMBER_COLOR
    },
    objectValueBoolean: {
      color: theme3.OBJECT_VALUE_BOOLEAN_COLOR
    },
    objectValueFunctionPrefix: {
      color: theme3.OBJECT_VALUE_FUNCTION_PREFIX_COLOR,
      fontStyle: "italic"
    },
    objectValueFunctionName: {
      fontStyle: "italic"
    }
  },
  TreeView: {
    treeViewOutline: {
      padding: 0,
      margin: 0,
      listStyleType: "none"
    }
  },
  TreeNode: {
    treeNodeBase: {
      color: theme3.BASE_COLOR,
      backgroundColor: theme3.BASE_BACKGROUND_COLOR,
      lineHeight: theme3.TREENODE_LINE_HEIGHT,
      cursor: "default",
      boxSizing: "border-box",
      listStyle: "none",
      fontFamily: theme3.TREENODE_FONT_FAMILY,
      fontSize: theme3.TREENODE_FONT_SIZE
    },
    treeNodePreviewContainer: {},
    treeNodePlaceholder: {
      whiteSpace: "pre",
      fontSize: theme3.ARROW_FONT_SIZE,
      marginRight: theme3.ARROW_MARGIN_RIGHT,
      ...unselectable
    },
    treeNodeArrow: {
      base: {
        color: theme3.ARROW_COLOR,
        display: "inline-block",
        fontSize: theme3.ARROW_FONT_SIZE,
        marginRight: theme3.ARROW_MARGIN_RIGHT,
        ...parseFloat(theme3.ARROW_ANIMATION_DURATION) > 0 ? {
          transition: `transform ${theme3.ARROW_ANIMATION_DURATION} ease 0s`
        } : {},
        ...unselectable
      },
      expanded: {
        WebkitTransform: "rotateZ(90deg)",
        MozTransform: "rotateZ(90deg)",
        transform: "rotateZ(90deg)"
      },
      collapsed: {
        WebkitTransform: "rotateZ(0deg)",
        MozTransform: "rotateZ(0deg)",
        transform: "rotateZ(0deg)"
      }
    },
    treeNodeChildNodesContainer: {
      margin: 0,
      paddingLeft: theme3.TREENODE_PADDING_LEFT
    }
  },
  TableInspector: {
    base: {
      color: theme3.BASE_COLOR,
      position: "relative",
      border: `1px solid ${theme3.TABLE_BORDER_COLOR}`,
      fontFamily: theme3.BASE_FONT_FAMILY,
      fontSize: theme3.BASE_FONT_SIZE,
      lineHeight: "120%",
      boxSizing: "border-box",
      cursor: "default"
    }
  },
  TableInspectorHeaderContainer: {
    base: {
      top: 0,
      height: "17px",
      left: 0,
      right: 0,
      overflowX: "hidden"
    },
    table: {
      tableLayout: "fixed",
      borderSpacing: 0,
      borderCollapse: "separate",
      height: "100%",
      width: "100%",
      margin: 0
    }
  },
  TableInspectorDataContainer: {
    tr: {
      display: "table-row"
    },
    td: {
      boxSizing: "border-box",
      border: "none",
      height: "16px",
      verticalAlign: "top",
      padding: "1px 4px",
      WebkitUserSelect: "text",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      overflow: "hidden",
      lineHeight: "14px"
    },
    div: {
      position: "static",
      top: "17px",
      bottom: 0,
      overflowY: "overlay",
      transform: "translateZ(0)",
      left: 0,
      right: 0,
      overflowX: "hidden"
    },
    table: {
      positon: "static",
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      borderTop: "0 none transparent",
      margin: 0,
      backgroundImage: theme3.TABLE_DATA_BACKGROUND_IMAGE,
      backgroundSize: theme3.TABLE_DATA_BACKGROUND_SIZE,
      tableLayout: "fixed",
      borderSpacing: 0,
      borderCollapse: "separate",
      width: "100%",
      fontSize: theme3.BASE_FONT_SIZE,
      lineHeight: "120%"
    }
  },
  TableInspectorTH: {
    base: {
      position: "relative",
      height: "auto",
      textAlign: "left",
      backgroundColor: theme3.TABLE_TH_BACKGROUND_COLOR,
      borderBottom: `1px solid ${theme3.TABLE_BORDER_COLOR}`,
      fontWeight: "normal",
      verticalAlign: "middle",
      padding: "0 4px",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      overflow: "hidden",
      lineHeight: "14px",
      ":hover": {
        backgroundColor: theme3.TABLE_TH_HOVER_COLOR
      }
    },
    div: {
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      overflow: "hidden",
      fontSize: theme3.BASE_FONT_SIZE,
      lineHeight: "120%"
    }
  },
  TableInspectorLeftBorder: {
    none: {
      borderLeft: "none"
    },
    solid: {
      borderLeft: `1px solid ${theme3.TABLE_BORDER_COLOR}`
    }
  },
  TableInspectorSortIcon: {
    display: "block",
    marginRight: 3,
    width: 8,
    height: 7,
    marginTop: -7,
    color: theme3.TABLE_SORT_ICON_COLOR,
    fontSize: 12,
    ...unselectable
  }
});
var DEFAULT_THEME_NAME = "chromeLight";
var ThemeContext = reactExports.createContext(createTheme(themes_exports[DEFAULT_THEME_NAME]));
var useStyles = (baseStylesKey) => {
  const themeStyles = reactExports.useContext(ThemeContext);
  return themeStyles[baseStylesKey];
};
var themeAcceptor = (WrappedComponent) => {
  const ThemeAcceptor = ({ theme: theme3 = DEFAULT_THEME_NAME, ...restProps }) => {
    const themeStyles = reactExports.useMemo(() => {
      switch (Object.prototype.toString.call(theme3)) {
        case "[object String]":
          return createTheme(themes_exports[theme3]);
        case "[object Object]":
          return createTheme(theme3);
        default:
          return createTheme(themes_exports[DEFAULT_THEME_NAME]);
      }
    }, [theme3]);
    return /* @__PURE__ */ React.createElement(ThemeContext.Provider, {
      value: themeStyles
    }, /* @__PURE__ */ React.createElement(WrappedComponent, {
      ...restProps
    }));
  };
  return ThemeAcceptor;
};
var Arrow = ({ expanded, styles }) => /* @__PURE__ */ React.createElement("span", {
  style: {
    ...styles.base,
    ...expanded ? styles.expanded : styles.collapsed
  }
}, "▶");
var TreeNode2 = reactExports.memo((props) => {
  props = {
    expanded: true,
    nodeRenderer: ({ name: name2 }) => /* @__PURE__ */ React.createElement("span", null, name2),
    onClick: () => {
    },
    shouldShowArrow: false,
    shouldShowPlaceholder: true,
    ...props
  };
  const { expanded, onClick, children, nodeRenderer, title, shouldShowArrow, shouldShowPlaceholder } = props;
  const styles = useStyles("TreeNode");
  const NodeRenderer = nodeRenderer;
  return /* @__PURE__ */ React.createElement("li", {
    "aria-expanded": expanded,
    role: "treeitem",
    style: styles.treeNodeBase,
    title
  }, /* @__PURE__ */ React.createElement("div", {
    style: styles.treeNodePreviewContainer,
    onClick
  }, shouldShowArrow || reactExports.Children.count(children) > 0 ? /* @__PURE__ */ React.createElement(Arrow, {
    expanded,
    styles: styles.treeNodeArrow
  }) : shouldShowPlaceholder && /* @__PURE__ */ React.createElement("span", {
    style: styles.treeNodePlaceholder
  }, " "), /* @__PURE__ */ React.createElement(NodeRenderer, {
    ...props
  })), /* @__PURE__ */ React.createElement("ol", {
    role: "group",
    style: styles.treeNodeChildNodesContainer
  }, expanded ? children : void 0));
});
var DEFAULT_ROOT_PATH = "$";
var WILDCARD = "*";
function hasChildNodes(data, dataIterator) {
  return !dataIterator(data).next().done;
}
var wildcardPathsFromLevel = (level) => {
  return Array.from({ length: level }, (_, i) => [DEFAULT_ROOT_PATH].concat(Array.from({ length: i }, () => "*")).join("."));
};
var getExpandedPaths = (data, dataIterator, expandPaths, expandLevel, prevExpandedPaths) => {
  const wildcardPaths = [].concat(wildcardPathsFromLevel(expandLevel)).concat(expandPaths).filter((path) => typeof path === "string");
  const expandedPaths = [];
  wildcardPaths.forEach((wildcardPath) => {
    const keyPaths = wildcardPath.split(".");
    const populatePaths = (curData, curPath, depth) => {
      if (depth === keyPaths.length) {
        expandedPaths.push(curPath);
        return;
      }
      const key = keyPaths[depth];
      if (depth === 0) {
        if (hasChildNodes(curData, dataIterator) && (key === DEFAULT_ROOT_PATH || key === WILDCARD)) {
          populatePaths(curData, DEFAULT_ROOT_PATH, depth + 1);
        }
      } else {
        if (key === WILDCARD) {
          for (const { name: name2, data: data2 } of dataIterator(curData)) {
            if (hasChildNodes(data2, dataIterator)) {
              populatePaths(data2, `${curPath}.${name2}`, depth + 1);
            }
          }
        } else {
          const value = curData[key];
          if (hasChildNodes(value, dataIterator)) {
            populatePaths(value, `${curPath}.${key}`, depth + 1);
          }
        }
      }
    };
    populatePaths(data, "", 0);
  });
  return expandedPaths.reduce((obj, path) => {
    obj[path] = true;
    return obj;
  }, { ...prevExpandedPaths });
};
var ConnectedTreeNode = reactExports.memo((props) => {
  const { data, dataIterator, path, depth, nodeRenderer } = props;
  const [expandedPaths, setExpandedPaths] = reactExports.useContext(ExpandedPathsContext);
  const nodeHasChildNodes = hasChildNodes(data, dataIterator);
  const expanded = !!expandedPaths[path];
  const handleClick = reactExports.useCallback(() => nodeHasChildNodes && setExpandedPaths((prevExpandedPaths) => ({
    ...prevExpandedPaths,
    [path]: !expanded
  })), [nodeHasChildNodes, setExpandedPaths, path, expanded]);
  return /* @__PURE__ */ React.createElement(TreeNode2, {
    expanded,
    onClick: handleClick,
    shouldShowArrow: nodeHasChildNodes,
    shouldShowPlaceholder: depth > 0,
    nodeRenderer,
    ...props
  }, expanded ? [...dataIterator(data)].map(({ name: name2, data: data2, ...renderNodeProps }) => {
    return /* @__PURE__ */ React.createElement(ConnectedTreeNode, {
      name: name2,
      data: data2,
      depth: depth + 1,
      path: `${path}.${name2}`,
      key: name2,
      dataIterator,
      nodeRenderer,
      ...renderNodeProps
    });
  }) : null);
});
var TreeView = reactExports.memo(({ name: name2, data, dataIterator, nodeRenderer, expandPaths, expandLevel }) => {
  const styles = useStyles("TreeView");
  const stateAndSetter = reactExports.useState({});
  const [, setExpandedPaths] = stateAndSetter;
  reactExports.useLayoutEffect(() => setExpandedPaths((prevExpandedPaths) => getExpandedPaths(data, dataIterator, expandPaths, expandLevel, prevExpandedPaths)), [data, dataIterator, expandPaths, expandLevel]);
  return /* @__PURE__ */ React.createElement(ExpandedPathsContext.Provider, {
    value: stateAndSetter
  }, /* @__PURE__ */ React.createElement("ol", {
    role: "tree",
    style: styles.treeViewOutline
  }, /* @__PURE__ */ React.createElement(ConnectedTreeNode, {
    name: name2,
    data,
    dataIterator,
    depth: 0,
    path: DEFAULT_ROOT_PATH,
    nodeRenderer
  })));
});
var ObjectName = ({ name: name2, dimmed = false, styles = {} }) => {
  const themeStyles = useStyles("ObjectName");
  const appliedStyles = {
    ...themeStyles.base,
    ...dimmed ? themeStyles["dimmed"] : {},
    ...styles
  };
  return /* @__PURE__ */ React.createElement("span", {
    style: appliedStyles
  }, name2);
};
var ObjectValue = ({ object, styles }) => {
  const themeStyles = useStyles("ObjectValue");
  const mkStyle = (key) => ({ ...themeStyles[key], ...styles });
  switch (typeof object) {
    case "bigint":
      return /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueNumber")
      }, String(object), "n");
    case "number":
      return /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueNumber")
      }, String(object));
    case "string":
      return /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueString")
      }, '"', object, '"');
    case "boolean":
      return /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueBoolean")
      }, String(object));
    case "undefined":
      return /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueUndefined")
      }, "undefined");
    case "object":
      if (object === null) {
        return /* @__PURE__ */ React.createElement("span", {
          style: mkStyle("objectValueNull")
        }, "null");
      }
      if (object instanceof Date) {
        return /* @__PURE__ */ React.createElement("span", null, object.toString());
      }
      if (object instanceof RegExp) {
        return /* @__PURE__ */ React.createElement("span", {
          style: mkStyle("objectValueRegExp")
        }, object.toString());
      }
      if (Array.isArray(object)) {
        return /* @__PURE__ */ React.createElement("span", null, `Array(${object.length})`);
      }
      if (!object.constructor) {
        return /* @__PURE__ */ React.createElement("span", null, "Object");
      }
      if (typeof object.constructor.isBuffer === "function" && object.constructor.isBuffer(object)) {
        return /* @__PURE__ */ React.createElement("span", null, `Buffer[${object.length}]`);
      }
      return /* @__PURE__ */ React.createElement("span", null, object.constructor.name);
    case "function":
      return /* @__PURE__ */ React.createElement("span", null, /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueFunctionPrefix")
      }, "ƒ "), /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueFunctionName")
      }, object.name, "()"));
    case "symbol":
      return /* @__PURE__ */ React.createElement("span", {
        style: mkStyle("objectValueSymbol")
      }, object.toString());
    default:
      return /* @__PURE__ */ React.createElement("span", null);
  }
};
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propertyIsEnumerable = Object.prototype.propertyIsEnumerable;
function getPropertyValue(object, propertyName2) {
  const propertyDescriptor = Object.getOwnPropertyDescriptor(object, propertyName2);
  if (propertyDescriptor.get) {
    try {
      return propertyDescriptor.get();
    } catch {
      return propertyDescriptor.get;
    }
  }
  return object[propertyName2];
}
function intersperse(arr, sep) {
  if (arr.length === 0) {
    return [];
  }
  return arr.slice(1).reduce((xs, x2) => xs.concat([sep, x2]), [arr[0]]);
}
var ObjectPreview = ({ data }) => {
  const styles = useStyles("ObjectPreview");
  const object = data;
  if (typeof object !== "object" || object === null || object instanceof Date || object instanceof RegExp) {
    return /* @__PURE__ */ React.createElement(ObjectValue, {
      object
    });
  }
  if (Array.isArray(object)) {
    const maxProperties = styles.arrayMaxProperties;
    const previewArray = object.slice(0, maxProperties).map((element, index) => /* @__PURE__ */ React.createElement(ObjectValue, {
      key: index,
      object: element
    }));
    if (object.length > maxProperties) {
      previewArray.push(/* @__PURE__ */ React.createElement("span", {
        key: "ellipsis"
      }, "…"));
    }
    const arrayLength = object.length;
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
      style: styles.objectDescription
    }, arrayLength === 0 ? `` : `(${arrayLength}) `), /* @__PURE__ */ React.createElement("span", {
      style: styles.preview
    }, "[", intersperse(previewArray, ", "), "]"));
  } else {
    const maxProperties = styles.objectMaxProperties;
    const propertyNodes = [];
    for (const propertyName2 in object) {
      if (hasOwnProperty.call(object, propertyName2)) {
        let ellipsis;
        if (propertyNodes.length === maxProperties - 1 && Object.keys(object).length > maxProperties) {
          ellipsis = /* @__PURE__ */ React.createElement("span", {
            key: "ellipsis"
          }, "…");
        }
        const propertyValue = getPropertyValue(object, propertyName2);
        propertyNodes.push(/* @__PURE__ */ React.createElement("span", {
          key: propertyName2
        }, /* @__PURE__ */ React.createElement(ObjectName, {
          name: propertyName2 || `""`
        }), ": ", /* @__PURE__ */ React.createElement(ObjectValue, {
          object: propertyValue
        }), ellipsis));
        if (ellipsis)
          break;
      }
    }
    const objectConstructorName = object.constructor ? object.constructor.name : "Object";
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
      style: styles.objectDescription
    }, objectConstructorName === "Object" ? "" : `${objectConstructorName} `), /* @__PURE__ */ React.createElement("span", {
      style: styles.preview
    }, "{", intersperse(propertyNodes, ", "), "}"));
  }
};
var ObjectRootLabel = ({ name: name2, data }) => {
  if (typeof name2 === "string") {
    return /* @__PURE__ */ React.createElement("span", null, /* @__PURE__ */ React.createElement(ObjectName, {
      name: name2
    }), /* @__PURE__ */ React.createElement("span", null, ": "), /* @__PURE__ */ React.createElement(ObjectPreview, {
      data
    }));
  } else {
    return /* @__PURE__ */ React.createElement(ObjectPreview, {
      data
    });
  }
};
var ObjectLabel = ({ name: name2, data, isNonenumerable = false }) => {
  const object = data;
  return /* @__PURE__ */ React.createElement("span", null, typeof name2 === "string" ? /* @__PURE__ */ React.createElement(ObjectName, {
    name: name2,
    dimmed: isNonenumerable
  }) : /* @__PURE__ */ React.createElement(ObjectPreview, {
    data: name2
  }), /* @__PURE__ */ React.createElement("span", null, ": "), /* @__PURE__ */ React.createElement(ObjectValue, {
    object
  }));
};
var createIterator = (showNonenumerable, sortObjectKeys) => {
  const objectIterator = function* (data) {
    const shouldIterate = typeof data === "object" && data !== null || typeof data === "function";
    if (!shouldIterate)
      return;
    const dataIsArray = Array.isArray(data);
    if (!dataIsArray && data[Symbol.iterator]) {
      let i = 0;
      for (const entry of data) {
        if (Array.isArray(entry) && entry.length === 2) {
          const [k2, v2] = entry;
          yield {
            name: k2,
            data: v2
          };
        } else {
          yield {
            name: i.toString(),
            data: entry
          };
        }
        i++;
      }
    } else {
      const keys2 = Object.getOwnPropertyNames(data);
      if (sortObjectKeys === true && !dataIsArray) {
        keys2.sort();
      } else if (typeof sortObjectKeys === "function") {
        keys2.sort(sortObjectKeys);
      }
      for (const propertyName2 of keys2) {
        if (propertyIsEnumerable.call(data, propertyName2)) {
          const propertyValue = getPropertyValue(data, propertyName2);
          yield {
            name: propertyName2 || `""`,
            data: propertyValue
          };
        } else if (showNonenumerable) {
          let propertyValue;
          try {
            propertyValue = getPropertyValue(data, propertyName2);
          } catch (e) {
          }
          if (propertyValue !== void 0) {
            yield {
              name: propertyName2,
              data: propertyValue,
              isNonenumerable: true
            };
          }
        }
      }
      if (showNonenumerable && data !== Object.prototype) {
        yield {
          name: "__proto__",
          data: Object.getPrototypeOf(data),
          isNonenumerable: true
        };
      }
    }
  };
  return objectIterator;
};
var defaultNodeRenderer = ({ depth, name: name2, data, isNonenumerable }) => depth === 0 ? /* @__PURE__ */ React.createElement(ObjectRootLabel, {
  name: name2,
  data
}) : /* @__PURE__ */ React.createElement(ObjectLabel, {
  name: name2,
  data,
  isNonenumerable
});
var ObjectInspector = ({ showNonenumerable = false, sortObjectKeys, nodeRenderer, ...treeViewProps }) => {
  const dataIterator = createIterator(showNonenumerable, sortObjectKeys);
  const renderer = nodeRenderer ? nodeRenderer : defaultNodeRenderer;
  return /* @__PURE__ */ React.createElement(TreeView, {
    nodeRenderer: renderer,
    dataIterator,
    ...treeViewProps
  });
};
var themedObjectInspector = themeAcceptor(ObjectInspector);
__toESM(require_is_dom());
function useNanostoreProxy(data) {
  const [version2, setVersion] = reactExports.useState(0);
  const onChange = () => setVersion((version22) => version22 + 1);
  const proxy = reactExports.useMemo(() => createDeepOnChangeProxy(data, onChange), [data]);
  reactExports.useEffect(() => () => {
    console.log("TODO: dispose deep store proxy");
  }, []);
  return proxy;
}
let proxyCache = /* @__PURE__ */ new WeakMap();
let storeValueCache = /* @__PURE__ */ new WeakMap();
function createDeepOnChangeProxy(target, onChange) {
  return new Proxy(target, {
    get(target2, property) {
      const item = target2[property];
      if (property === "__store") {
        return item;
      }
      if (item && typeof item === "object") {
        if (proxyCache.has(item))
          return proxyCache.get(item);
        if (isStore(item)) {
          const __store = item;
          const storeValue = {
            __store,
            __value: peek(__store)
          };
          storeValueCache.set(item, storeValue);
          __store.listen((value) => {
            storeValue.__value = value;
            onChange();
          });
          return storeValue;
        } else {
          const proxy = createDeepOnChangeProxy(item, onChange);
          proxyCache.set(item, proxy);
          return proxy;
        }
      }
      return item;
    }
  });
}
const $inspectorTheme = computed([theme$1.dark], (isDark) => {
  return { ...isDark ? theme : theme2, BASE_FONT_SIZE: "12px", TREENODE_FONT_SIZE: "12px", TREENODE_LINE_HEIGHT: "18px" };
});
const Inspector = (...[{ data }]) => {
  reactExports.useMemo(() => /* @__PURE__ */ new WeakMap(), []);
  const inspectorTheme = useStore($inspectorTheme);
  const isDark = useStore(theme$1.dark);
  const wrapped = useNanostoreProxy(data);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `pl-2 pt-1 h-full ${isDark ? "bg-[rgb(36,36,36)]" : "bg-white"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(themedObjectInspector, { expandLevel: 2, theme: inspectorTheme, data: wrapped }) });
};
function DebugPane({}) {
  const machine2 = useStateMachineContext();
  const { state, model: model2 } = machine2;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Inspector, { data: {
    state,
    model: model2
    // code: store.code
  } });
}
atom({ test: { nested: { ok: true, store: map({ count: 1 }) } } });
const monarchSyntaxRaw = '{\n  "name": "statetree",\n  "scopeName": "source.statetree",\n  "fileTypes": [\n    ".statetree"\n  ],\n  "patterns": [\n    {\n      "include": "#statements"\n    }\n  ],\n  "repository": {\n    "statements": {\n      "patterns": [\n        {\n          "include": "#comments"\n        },\n        {\n          "include": "#statemachine-name"\n        },\n        {\n          "include": "#initialState"\n        },\n        {\n          "include": "#states-statement"\n        }\n      ]\n    },\n    "statemachine-name": {\n      "match": "s*(statemachine) ([_a-zA-Z][\\\\w_]*)",\n      "captures": {\n        "1": {\n          "name": "storage.type.class"\n        },\n        "2": {\n          "name": "support.type"\n        }\n      }\n    },\n    "initialState": {\n      "match": "s*(initialState) ([_a-zA-Z][\\\\w_]*)",\n      "captures": {\n        "1": {\n          "name": "variable.other.constant"\n        },\n        "2": {\n          "name": "variable.other.enummember"\n        }\n      }\n    },\n    "sequence-event": {\n      "match": "(\\\\()(.*?)(\\\\))",\n      "begin": "^",\n      "captures": {\n        "1": {\n          "name": "meta.brace.round.js"\n        },\n        "2": {\n          "name": "entity.name.function.statetree"\n        },\n        "3": {\n          "name": "meta.brace.round.js"\n        }\n      },\n      "end": "\\\\)",\n      "endCaptures": {\n        "0": {\n          "name": "meta.brace.round.js"\n        }\n      },\n      "patterns": [\n        {\n          "match": "[_a-zA-Z][\\\\w_]*",\n          "name": "entity.name.function.statetree"\n        }\n      ]\n    },\n    "states-block": {\n      "name": "states-block.expr.js",\n      "patterns": [\n        {\n          "include": "#state-body"\n        }\n      ]\n    },\n    "case-clause": {\n      "name": "case-clause.expr.js",\n      "begin": "(?<!\\\\.|\\\\$)\\\\b(case|default(?=:))\\\\b(?!\\\\$)",\n      "beginCaptures": {\n        "1": {\n          "name": "keyword.control.states.js"\n        }\n      },\n      "end": ":",\n      "endCaptures": {\n        "0": {\n          "name": "punctuation.definition.section.case-statement.js"\n        }\n      },\n      "patterns": [\n        {}\n      ]\n    },\n    "states-statement": {\n      "name": "states-statement.expr.js",\n      "begin": "(states|sequence|loop)\\\\s+(?:(on)\\\\s+([_a-zA-Z][\\\\w_]*)\\\\s*)?{",\n      "end": "}",\n      "beginCaptures": {\n        "0": {\n          "name": "keyword.control.states.statetree"\n        },\n        "2": {\n          "name": "storage.type.function.arrow.js\\""\n        },\n        "3": {\n          "name": "entity.name.function.statetree"\n        }\n      },\n      "endCaptures": {\n        "0": {\n          "name": "keyword.control.states.statetree"\n        }\n      },\n      "patterns": [\n        {\n          "include": "#sequence-event"\n        },\n        {\n          "include": "#state-name"\n        },\n        {\n          "include": "#state-block"\n        }\n      ]\n    },\n    "state-body": {\n      "patterns": [\n        {\n          "include": "#state-block"\n        }\n      ]\n    },\n    "transition-statement": {\n      "patterns": [\n        {\n          "include": "#midfix-transition-statement"\n        }\n      ]\n    },\n    "prefix-transition-statement": {\n      "match": "\\\\s*(on)\\\\s*([_a-zA-Z][\\\\w_]*)\\\\s*(=>|go)?\\\\s*(\\\\w*)\\\\s*",\n      "captures": {\n        "1": {\n          "name": "storage.type.function.arrow.js"\n        },\n        "2": {\n          "name": "entity.name.function.statetree"\n        },\n        "3": {\n          "name": "storage.type.function.arrow.js"\n        },\n        "4": {\n          "name": "variable.other.enummember"\n        }\n      }\n    },\n    "midfix-transition-statement": {\n      "match": "\\\\s*([_a-zA-Z][\\\\w_]*)\\\\s*(=>|go)\\\\s*(\\\\w*)\\\\s*",\n      "captures": {\n        "1": {\n          "name": "entity.name.function.statetree"\n        },\n        "2": {\n          "name": "storage.type.function.arrow.js\\""\n        },\n        "3": {\n          "name": "variable.other.enummember"\n        }\n      }\n    },\n    "state-name": {\n      "match": "[_a-zA-Z][\\\\w_]*",\n      "name": "variable.other.enummember"\n    },\n    "state-block": {\n      "begin": "\\\\{",\n      "end": "\\\\}",\n      "patterns": [\n        {\n          "include": "#transition-statement"\n        },\n        {\n          "include": "#state-body"\n        },\n        {\n          "include": "#states-statement"\n        }\n      ]\n    },\n    "id": {\n      "match": "[_a-zA-Z][\\\\w_]*"\n    },\n    "comments": {\n      "patterns": [\n        {\n          "begin": "#",\n          "beginCaptures": {\n            "1": {\n              "name": "punctuation.whitespace.comment.leading.statetree"\n            }\n          },\n          "end": "(?=$)",\n          "name": "comment.line.statetree"\n        },\n        {\n          "name": "comment.block.statetree",\n          "begin": "/\\\\*",\n          "beginCaptures": {\n            "0": {\n              "name": "punctuation.definition.comment.statetree"\n            }\n          },\n          "end": "\\\\*/",\n          "endCaptures": {\n            "0": {\n              "name": "punctuation.definition.comment.statetree"\n            }\n          }\n        },\n        {\n          "begin": "//",\n          "beginCaptures": {\n            "1": {\n              "name": "punctuation.whitespace.comment.leading.statetree"\n            }\n          },\n          "end": "(?=$)",\n          "name": "comment.line.statetree"\n        }\n      ]\n    }\n  }\n}';
const statetreeWorkerUrl = "/statetree-language/assets/statetree-server-worker-0fc1624c.js";
const languageConfigurationRaw = `{
    "comments": {
        // symbol used for single line comment. Remove this entry if your language does not support line comments
        "lineComment": "//",
        // symbols used for start and end a block comment. Remove this entry if your language does not support block comments
        "blockComment": [ "/*", "*/" ]
    },
    // symbols used as brackets
    "brackets": [
        ["{", "}"],
        ["[", "]"],
        ["(", ")"]
    ],
    // symbols that are auto closed when typing
    "autoClosingPairs": [
        ["{", "}"],
        ["[", "]"],
        ["(", ")"],
        ["\\"", "\\""],
        ["'", "'"]
    ],
    // symbols that can be used to surround a selection
    "surroundingPairs": [
        ["{", "}"],
        ["[", "]"],
        ["(", ")"],
        ["\\"", "\\""],
        ["'", "'"]
    ]
}
`;
function WorkerWrapper$5() {
  return new Worker("/statetree-language/assets/editor.worker-fc2c2eb5.js");
}
function WorkerWrapper$4() {
  return new Worker("/statetree-language/assets/json.worker-548b3c5d.js");
}
function WorkerWrapper$3() {
  return new Worker("/statetree-language/assets/css.worker-a4ea1858.js");
}
function WorkerWrapper$2() {
  return new Worker("/statetree-language/assets/html.worker-84a1e213.js");
}
function WorkerWrapper$1() {
  return new Worker("/statetree-language/assets/ts.worker-e7322dfb.js");
}
function WorkerWrapper() {
  return new Worker("/statetree-language/assets/statetree-server-worker-572371ad.js");
}
function getWorker(_, label) {
  if (label === "json") {
    return new WorkerWrapper$4();
  }
  if (label === "css" || label === "scss" || label === "less") {
    return new WorkerWrapper$3();
  }
  if (label === "html" || label === "handlebars" || label === "razor") {
    return new WorkerWrapper$2();
  }
  if (label === "typescript" || label === "javascript") {
    return new WorkerWrapper$1();
  }
  if (label === "statetree") {
    return new WorkerWrapper();
  }
  return new WorkerWrapper$5();
}
self.MonacoEnvironment = {
  getWorker
};
const MonacoEditorReactComp = reactExports.lazy(() => __vitePreload(() => import("./index-ca8d23e0.js").then((n2) => n2.a1), true ? ["assets/index-ca8d23e0.js","assets/theme-defaults-1df7f429.js","assets/theme-defaults-61c0c9ec.css","assets/index-0b30e76e.css"] : void 0));
const extensionFilesOrContents = /* @__PURE__ */ new Map();
extensionFilesOrContents.set("/statetree-configuration.json", languageConfigurationRaw);
extensionFilesOrContents.set("/statetree-grammar.json", monarchSyntaxRaw);
new URL(statetreeWorkerUrl, window.location.href);
const getTheme = (isDark) => isDark ? "Default Dark+" : "Default Light+";
function StatetreeEditor({ value, onChange, onAstCreated, ...rest2 }) {
  const monacoEditor = reactExports.useRef(null);
  const isDark = useStore(theme$1.dark);
  const userConfig = reactExports.useMemo(
    () => ({
      htmlElement: void 0,
      wrapperConfig: {
        serviceConfig: {
          enableThemeService: true,
          enableTextmateService: true,
          enableModelService: true,
          configureEditorOrViewsService: {},
          configureConfigurationService: {
            defaultWorkspaceUri: "/tmp/"
          },
          enableLanguagesService: true,
          enableKeybindingsService: true,
          debugLogging: true
        },
        editorAppConfig: {
          $type: "vscodeApi",
          languageId: "statetree",
          code: value,
          useDiffEditor: false,
          extension: {
            name: "statetree",
            publisher: "winston-fassett",
            version: "1.0.0",
            engines: { vscode: "*" },
            contributes: {
              languages: [{
                id: "statetree",
                extensions: [".statetree"],
                aliases: ["statetree", "Statetree"],
                configuration: "./statetree-configuration.json"
              }],
              grammars: [{
                language: "statetree",
                scopeName: "source.statetree",
                path: "./statetree-grammar.json"
              }],
              keybindings: [{
                key: "ctrl+p",
                command: "editor.action.quickCommand",
                when: "editorTextFocus"
              }, {
                key: "ctrl+shift+c",
                command: "editor.action.commentLine",
                when: "editorTextFocus"
              }]
            }
          },
          extensionFilesOrContents,
          userConfiguration: {
            json: `{
              "workbench.colorTheme": "${getTheme(isDark)}",
              "workbench.iconTheme": "vs-seti",
"not.workbench.colorTheme": "Default Dark Modern",
"editor.guides.bracketPairsHorizontal": "active",
"editor.lightbulb.enabled": true
}`
          }
        }
      },
      languageClientConfig: {
        options: {
          $type: "WorkerDirect",
          worker: getWorker(null, "statetree")
        }
      }
    }),
    [isDark]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    MonacoEditorReactComp,
    {
      ref: monacoEditor,
      userConfig,
      onTextChanged: (text) => {
        code.set(text);
        onChange && onChange(text);
      },
      onLoad: () => {
        var _a2;
        if (!monacoEditor.current) {
          throw new Error("Unable to get a reference to the Monaco Editor");
        }
        theme$1.dark.subscribe((isDark2) => {
          var _a3;
          (_a3 = monacoEditor.current) == null ? void 0 : _a3.getEditorWrapper().updateEditorOptions({
            json: `{
              "workbench.colorTheme": "${getTheme(isDark2)}"
            }`
          });
        });
        const lc = (_a2 = monacoEditor.current.getEditorWrapper()) == null ? void 0 : _a2.getLanguageClient();
        if (!lc) {
          throw new Error("Could not get handle to Language Client on mount");
        }
        lc.onNotification("browser/DocumentChange", (resp) => {
          onAstCreated && onAstCreated(resp.content);
        });
      },
      style: {
        "paddingTop": "5px",
        "height": "100%"
      }
    }
  );
}
class LangiumAST {
  // Identify an AST node by it's type & shape
  isReference(obj) {
    return typeof obj === "object" && obj !== null && typeof obj.$ref === "string";
  }
  // Identify a ref by its type & shape as well
  isAstNode(obj) {
    return typeof obj === "object" && obj !== null && typeof obj.$type === "string";
  }
  // Takes the root, and a path string, traversing the root to find the node denoted by the path
  getAstNode(root, path) {
    if (!path.startsWith("#")) {
      return void 0;
    }
    const segments = path.substring(1).split("/");
    return segments.reduce((previousValue, currentValue) => {
      if (!previousValue || currentValue.length === 0) {
        return previousValue;
      }
      const propertyIndex = currentValue.indexOf("@");
      if (propertyIndex > 0) {
        const property = currentValue.substring(0, propertyIndex);
        const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));
        const array = previousValue[property];
        return array == null ? void 0 : array[arrayIndex];
      }
      return previousValue[currentValue];
    }, root);
  }
  // Link a given node
  linkNode(node, root, container, containerProperty, containerIndex) {
    node.$containerProperty = containerProperty;
    node.$containerIndex = containerIndex;
    node.$container = container;
    for (const [propertyName2, item] of Object.entries(node)) {
      if (propertyName2 === "$container") {
        continue;
      }
      if (Array.isArray(item)) {
        for (let index = 0; index < item.length; index++) {
          const element = item[index];
          if (this.isReference(element)) {
            element.ref = this.getAstNode(root, element.$ref);
          } else if (this.isAstNode(element)) {
            this.linkNode(element, root, node, propertyName2, index);
          }
        }
      } else if (this.isReference(item)) {
        item.ref = this.getAstNode(root, item.$ref);
      } else if (this.isAstNode(item)) {
        this.linkNode(item, root, node, propertyName2);
      }
    }
  }
  // link given ast
  linkAst(root) {
    this.linkNode(root, root);
  }
  /**
  * Takes a string corresponding to a serialized Langium AST, and returns a deserialized AST node
  * 
  * @param content String to parse & deserialize
  * @returns A Langium AST with cross-refs restored
  */
  deserializeAST(content2) {
    const root = JSON.parse(content2);
    this.linkNode(root, root);
    return root;
  }
}
function StatetreeEditorPane({ filename = "/machine.statetree", outfile = "/machine.xstate" }) {
  const { model: model2, setModel } = reactExports.useContext(ModelContext);
  const { sandpack: sandpack2 } = useSandpack();
  const stateTreeCode = sandpack2.files[filename].code;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(StatetreeEditor, { value: stateTreeCode, onChange: (value) => {
    sandpack2.updateFile(filename, value);
  }, onAstCreated });
  function onAstCreated(astJson) {
    const statemachineAst = new LangiumAST().deserializeAST(astJson);
    setModel(statemachineAst);
  }
}
function getDomNodePagePosition(domNode) {
  const { left, top: top2, width, height } = domNode.getBoundingClientRect();
  return {
    left: left + window.scrollX,
    top: top2 + window.scrollY,
    width,
    height
  };
}
function toggleVisibility(element, isVisible) {
  element.style.visibility = isVisible ? "visible" : "hidden";
}
const HoistedDockviewPanel = (DockviewPanelComponent) => {
  return (props) => {
    const ref = reactExports.useRef(null);
    const innerRef = reactExports.useRef(null);
    const positionHoistedPanel = () => {
      if (!ref.current || !innerRef.current) {
        return;
      }
      const { left, top: top2, height, width } = getDomNodePagePosition(
        ref.current.parentElement
        // use the parent element to determine our size
      );
      innerRef.current.style.left = `${left}px`;
      innerRef.current.style.top = `${top2}px`;
      innerRef.current.style.height = `${height}px`;
      innerRef.current.style.width = `${width}px`;
    };
    reactExports.useEffect(() => {
      if (!innerRef.current) {
        return;
      }
      const disposable1 = props.api.onDidVisibilityChange((event) => {
        if (!innerRef.current) {
          return;
        }
        toggleVisibility(innerRef.current, event.isVisible);
      });
      const disposable2 = props.api.onDidDimensionsChange(() => {
        positionHoistedPanel();
      });
      positionHoistedPanel();
      return () => {
        disposable1.dispose();
        disposable2.dispose();
      };
    }, [props.api]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref, children: reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          ref: innerRef,
          style: {
            position: "absolute",
            overflow: "hidden"
            // zIndex: 999,
            // pointerEvents: 'none', // prevent this wrapper contain stealing events
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(DockviewPanelComponent, { ...props })
        }
      ),
      document.body
      // <-- you may choose to mount these 'global' elements to anywhere you see suitable
    ) });
  };
};
function RenderWhenVisible(Component) {
  const HigherOrderComponent = (props) => {
    const [visible, setVisible] = reactExports.useState(
      props.api.isVisible
    );
    reactExports.useEffect(() => {
      const disposable2 = props.api.onDidVisibilityChange(
        (event) => setVisible(event.isVisible)
      );
      return () => {
        disposable2.dispose();
      };
    }, [props.api]);
    if (!visible) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Component, { ...props });
  };
  return HigherOrderComponent;
}
const StateMachinePlantUmlPane = reactExports.lazy(() => __vitePreload(() => import("./StateMachinePlantUmlPane-d88595ce.js"), true ? [] : void 0));
const SandpackMonacoEditor = reactExports.lazy(() => __vitePreload(() => import("./SandpackMonacoEditor-fd5112ef.js").then((n2) => n2.S), true ? ["assets/SandpackMonacoEditor-fd5112ef.js","assets/theme-defaults-1df7f429.js","assets/theme-defaults-61c0c9ec.css"] : void 0));
const PlantUml = RenderWhenVisible(({}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(Loader, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(StateMachinePlantUmlPane, {}) });
});
const Editor = RenderWhenVisible((props) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxRuntimeExports.jsx(Loader, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(SandpackMonacoEditor, { afterEdit: props.params.afterEdit, filename: props.params.filename, language: props.params.language }) });
});
const Loader = () => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Itsa Loading..." });
const components = {
  default: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: props.params.someProps });
  },
  debug: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DebugPane, {});
  },
  viz: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(StateMachinePane, {});
  },
  // mermaid: (props: IDockviewPanelProps<{}>) => {
  //   return (<StateMachineMermaidPane />)
  // },
  // forceGraph: (props: IDockviewPanelProps<{ someProps: string; }>) => {
  //   return (<StateMachineForceGraph />);
  // },
  plantuml: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(PlantUml, { ...props });
  },
  statetree: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(StatetreeEditorPane, {});
  },
  editor: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Editor, { ...props });
  },
  preview: HoistedDockviewPanel((props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(SandpackPreview, { showOpenInCodeSandbox: false, showSandpackErrorOverlay: true });
  })
};
const headers = {
  customTab: (props) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: props.api.title }) });
  }
};
const DockView = () => {
  useSandpack();
  const onReady = (event) => {
    event.api.addPanel({
      id: "XState",
      component: "editor",
      tabComponent: "customTab",
      params: {
        filename: "/machine.json",
        language: "json"
        // afterEdit:  debounce((code: string, filename: string) => {
        //   // try import and update statetree
        // //   console.log('user changed machine.json')
        // //   console.log('todo: import xstate', code)
        //   // let data
        //   // try {
        //   //     importXState(sandpack, code)
        //   //     data = JSON.parse(code)
        //   //     console.log({ data })
        //   // } catch (err) {
        //   //     console.log('failed to import xstate', err)
        //   // }
        // }, 500)
      }
    });
    event.api.addPanel({
      id: "DSL",
      component: "statetree",
      tabComponent: "customTab",
      params: {
        someProps: "machine.statetree"
      }
    });
    event.api.addPanel({
      id: "Code",
      component: "editor",
      tabComponent: "customTab",
      params: {
        filename: "/App.js",
        language: "json"
      },
      position: { referencePanel: "DSL", direction: "below" }
    });
    event.api.addPanel({
      id: "Diagram",
      component: "plantuml",
      tabComponent: "customTab",
      params: {
        someProps: "World"
      },
      position: { referencePanel: "DSL", direction: "right" }
    });
    event.api.addPanel({
      id: "State",
      component: "viz",
      tabComponent: "customTab",
      params: {
        someProps: "World"
      }
      // position: { referencePanel: 'machine.statetree', direction: 'right' },
    });
    event.api.addPanel({
      id: "Preview",
      component: "preview",
      tabComponent: "customTab",
      params: {
        someProps: "World"
      },
      position: { referencePanel: "Code", direction: "right" }
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    DockviewReact,
    {
      components,
      tabComponents: headers,
      onReady
    }
  );
};
const AppJS = `import { useSharedState } from './useSharedState'
export default function App() {
  const { mode, model, isDark } = useSharedState()
  return <div className="h-full flex flex-col" data-theme={isDark ? "dark" :"light"}>
    <div className='rounded p-4 text-3xl bg-primary text-primary-content'>
      Hello!
    </div>
    <div className='flex-1 p-4'>
      <div>The state is 
        <div className={\`text-2xl text-accent-content bg-\${mode?.toLowerCase() || "slate"}-500 rounded-full text-center my-4 p-4\`}>
          {mode ?? 'Unknown'}
        </div>
      </div>      
    </div>
  </div>
}

`;
const useSharedStateJS = `import { useEffect, useState } from 'react';

export function useSharedState() {
  const [model, setModel] = useState();
  const [mode, setMode] = useState();
  const [isDark, setIsDark] = useState(true);
  useEffect(() => {
    window.addEventListener("message", (event) => {
      let { data } = event;
      if (typeof data === 'object') {
        const { type } = data;
        if (type === 'model') {
          setModel(data.model);
        }
        if (type === 'state') {
          setMode(data.state);
        }
        if (type === 'dark') {
          setIsDark(data.dark);
        }
      }
    });
  }, []);
  return { mode, model, isDark };
}
`;
const example = "loop on switch {\n  On { loop on tick { Red  Green Yellow } }\n  Off { loop on flash { RedOn RedOff } }\n}\n\n";
const externalResources = [
  "https://cdn.tailwindcss.com",
  "https://cdn.jsdelivr.net/npm/daisyui@3.1.6/dist/full.css"
];
const STATETREE_TEMPLATE = {
  files: {
    "/App.js": AppJS,
    "/styles.css": REACT_TEMPLATE.files["/styles.css"].code + `
    html, body, #root { height: 100%; }
    `,
    "/Wrapper.js": `export default ({ children }) => (<h2>
      Hello {children}!
      </h2>)`,
    "/machine.statetree": example,
    "/machine2.statetree": example,
    // '/xstate.json': '{}',
    "/machine.json": "{}",
    "/useSharedState.js": useSharedStateJS
  },
  customSetup: {
    dependencies: {
      "nanostores": "latest",
      "@nanostores/react": "latest",
      "@heroicons/react": "latest"
    }
  },
  options: {
    externalResources
  }
};
function sendToSandpackBundlers(sandpack2, message) {
  Object.values(sandpack2.clients).forEach((client2) => {
    var _a2;
    (_a2 = client2.iframe.contentWindow) == null ? void 0 : _a2.postMessage(message, "*");
  });
}
function useStatetreeSandpackFiddle() {
  const { sandpack: sandpack2 } = useSandpack();
  const model2 = useStore(latestValidModel);
  const machine2 = useStateMachineContext();
  const { state } = machine2;
  const isDark = useStore(theme$1.dark);
  reactExports.useEffect(() => {
    sendStateMachineToSandpack(model2, sandpack2);
  }, [model2]);
  reactExports.useEffect(() => {
    sendMachineToSandpacks(machine2, sandpack2);
  }, [machine2.state]);
  reactExports.useEffect(() => {
    sendToSandpackBundlers(sandpack2, { type: "dark", dark: isDark });
  }, [isDark]);
  return { model: model2, state, machine: machine2 };
}
function sendMachineToSandpacks(machine2, sandpack2) {
  var _a2;
  if (machine2) {
    sendToSandpackBundlers(sandpack2, {
      type: "state",
      state: (_a2 = machine2.state) == null ? void 0 : _a2.name
    });
  }
}
function sendStateMachineToSandpack(model2, sandpack2) {
  if (model2) {
    const expanded = expandAst(model2);
    const xstate = generateXState(expanded);
    sandpack2.updateFile("/machine.json", JSON.stringify(xstate, null, 2));
    sendToSandpackBundlers(sandpack2, {
      type: "model",
      model: xstate
    });
  }
}
const sandpack = "";
function r(e) {
  var t2, f2, n2 = "";
  if ("string" == typeof e || "number" == typeof e)
    n2 += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t2 = 0; t2 < e.length; t2++)
        e[t2] && (f2 = r(e[t2])) && (n2 && (n2 += " "), n2 += f2);
    else
      for (t2 in e)
        e[t2] && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
function clsx() {
  for (var e, t2, f2 = 0, n2 = ""; f2 < arguments.length; )
    (e = arguments[f2++]) && (t2 = r(e)) && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
function twJoin() {
  var index = 0;
  var argument;
  var resolvedValue;
  var string2 = "";
  while (index < arguments.length) {
    if (argument = arguments[index++]) {
      if (resolvedValue = toValue(argument)) {
        string2 && (string2 += " ");
        string2 += resolvedValue;
      }
    }
  }
  return string2;
}
function toValue(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  var resolvedValue;
  var string2 = "";
  for (var k2 = 0; k2 < mix.length; k2++) {
    if (mix[k2]) {
      if (resolvedValue = toValue(mix[k2])) {
        string2 && (string2 += " ");
        string2 += resolvedValue;
      }
    }
  }
  return string2;
}
var CLASS_PART_SEPARATOR = "-";
function createClassUtils(config2) {
  var classMap = createClassMap(config2);
  var conflictingClassGroups = config2.conflictingClassGroups, _config$conflictingCl = config2.conflictingClassGroupModifiers, conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
  function getClassGroupId(className) {
    var classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    var conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _a2;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  var currentClassPart = classParts[0];
  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  var classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a2 = classPartObject.validators.find(function(_ref) {
    var validator2 = _ref.validator;
    return validator2(classRest);
  })) == null ? void 0 : _a2.classGroupId;
}
var arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    var property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config2) {
  var theme3 = config2.theme, prefix = config2.prefix;
  var classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config2.classGroups), prefix);
  prefixedClassGroupEntries.forEach(function(_ref2) {
    var classGroupId = _ref2[0], classGroup = _ref2[1];
    processClassesRecursively(classGroup, classMap, classGroupId, theme3);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme3) {
  classGroup.forEach(function(classDefinition) {
    if (typeof classDefinition === "string") {
      var classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme3), classPartObject, classGroupId, theme3);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(function(_ref3) {
      var key = _ref3[0], classGroup2 = _ref3[1];
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme3);
    });
  });
}
function getPart(classPartObject, path) {
  var currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach(function(pathPart) {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(function(_ref4) {
    var classGroupId = _ref4[0], classGroup = _ref4[1];
    var prefixedClassGroup = classGroup.map(function(classDefinition) {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(function(_ref5) {
          var key = _ref5[0], value = _ref5[1];
          return [prefix + key, value];
        }));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: function get() {
        return void 0;
      },
      set: function set() {
      }
    };
  }
  var cacheSize = 0;
  var cache2 = /* @__PURE__ */ new Map();
  var previousCache = /* @__PURE__ */ new Map();
  function update(key, value) {
    cache2.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache2;
      cache2 = /* @__PURE__ */ new Map();
    }
  }
  return {
    get: function get(key) {
      var value = cache2.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set: function set(key, value) {
      if (cache2.has(key)) {
        cache2.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}
var IMPORTANT_MODIFIER = "!";
function createSplitModifiers(config2) {
  var separator = config2.separator || ":";
  var isSeparatorSingleCharacter = separator.length === 1;
  var firstSeparatorCharacter = separator[0];
  var separatorLength = separator.length;
  return function splitModifiers(className) {
    var modifiers2 = [];
    var bracketDepth = 0;
    var modifierStart = 0;
    var postfixModifierPosition;
    for (var index = 0; index < className.length; index++) {
      var currentCharacter = className[index];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
          modifiers2.push(className.slice(modifierStart, index));
          modifierStart = index + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    var baseClassNameWithImportantModifier = modifiers2.length === 0 ? className : className.substring(modifierStart);
    var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers: modifiers2,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers(modifiers2) {
  if (modifiers2.length <= 1) {
    return modifiers2;
  }
  var sortedModifiers = [];
  var unsortedModifiers = [];
  modifiers2.forEach(function(modifier) {
    var isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
  return sortedModifiers;
}
function createConfigUtils(config2) {
  return {
    cache: createLruCache(config2.cacheSize),
    splitModifiers: createSplitModifiers(config2),
    ...createClassUtils(config2)
  };
}
var SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  var splitModifiers = configUtils.splitModifiers, getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
  var classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function(originalClassName) {
    var _splitModifiers = splitModifiers(originalClassName), modifiers2 = _splitModifiers.modifiers, hasImportantModifier = _splitModifiers.hasImportantModifier, baseClassName = _splitModifiers.baseClassName, maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
    var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    var variantModifier = sortModifiers(modifiers2).join(":");
    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter(function(parsed) {
    if (!parsed.isTailwindClass) {
      return true;
    }
    var modifierId = parsed.modifierId, classGroupId = parsed.classGroupId, hasPostfixModifier = parsed.hasPostfixModifier;
    var classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function(group) {
      return classGroupsInConflict.add(modifierId + group);
    });
    return true;
  }).reverse().map(function(parsed) {
    return parsed.originalClassName;
  }).join(" ");
}
function createTailwindMerge() {
  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
    createConfig[_key] = arguments[_key];
  }
  var configUtils;
  var cacheGet;
  var cacheSet;
  var functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1);
    var config2 = restCreateConfig.reduce(function(previousConfig, createConfigCurrent) {
      return createConfigCurrent(previousConfig);
    }, firstCreateConfig());
    configUtils = createConfigUtils(config2);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    var cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    var result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
function fromTheme(key) {
  var themeGetter = function themeGetter2(theme3) {
    return theme3[key] || [];
  };
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|^0$/;
var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
function isLength(value) {
  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, "size", isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
function isArbitraryUrl(value) {
  return getIsArbitraryValue(value, "url", isUrl);
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber);
}
function isNumber(value) {
  return !Number.isNaN(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber(value.slice(0, -1));
}
function isInteger(value) {
  return isIntegerOnly(value) || getIsArbitraryValue(value, "number", isIntegerOnly);
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isAny() {
  return true;
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function getIsArbitraryValue(value, label, testValue) {
  var result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return result[1] === label;
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value);
}
function isNever() {
  return false;
}
function isUrl(value) {
  return value.startsWith("url(");
}
function isIntegerOnly(value) {
  return Number.isInteger(Number(value));
}
function isShadow(value) {
  return shadowRegex.test(value);
}
function getDefaultConfig() {
  var colors = fromTheme("colors");
  var spacing = fromTheme("spacing");
  var blur = fromTheme("blur");
  var brightness = fromTheme("brightness");
  var borderColor = fromTheme("borderColor");
  var borderRadius = fromTheme("borderRadius");
  var borderSpacing = fromTheme("borderSpacing");
  var borderWidth = fromTheme("borderWidth");
  var contrast = fromTheme("contrast");
  var grayscale = fromTheme("grayscale");
  var hueRotate = fromTheme("hueRotate");
  var invert = fromTheme("invert");
  var gap = fromTheme("gap");
  var gradientColorStops = fromTheme("gradientColorStops");
  var gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  var inset = fromTheme("inset");
  var margin = fromTheme("margin");
  var opacity = fromTheme("opacity");
  var padding = fromTheme("padding");
  var saturate = fromTheme("saturate");
  var scale = fromTheme("scale");
  var sepia = fromTheme("sepia");
  var skew = fromTheme("skew");
  var space2 = fromTheme("space");
  var translate = fromTheme("translate");
  var getOverscroll = function getOverscroll2() {
    return ["auto", "contain", "none"];
  };
  var getOverflow = function getOverflow2() {
    return ["auto", "hidden", "clip", "visible", "scroll"];
  };
  var getSpacingWithAuto = function getSpacingWithAuto2() {
    return ["auto", spacing];
  };
  var getLengthWithEmpty = function getLengthWithEmpty2() {
    return ["", isLength];
  };
  var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary2() {
    return ["auto", isNumber, isArbitraryValue];
  };
  var getPositions = function getPositions2() {
    return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  };
  var getLineStyles = function getLineStyles2() {
    return ["solid", "dashed", "dotted", "double", "none"];
  };
  var getBlendModes = function getBlendModes2() {
    return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
  };
  var getAlign = function getAlign2() {
    return ["start", "end", "center", "between", "around", "evenly", "stretch"];
  };
  var getZeroAndEmpty = function getZeroAndEmpty2() {
    return ["", "0", isArbitraryValue];
  };
  var getBreaks = function getBreaks2() {
    return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  };
  var getNumber = function getNumber2() {
    return [isNumber, isArbitraryNumber];
  };
  var getNumberAndArbitrary = function getNumberAndArbitrary2() {
    return [isNumber, isArbitraryValue];
  };
  return {
    cacheSize: 500,
    theme: {
      colors: [isAny],
      spacing: [isLength],
      blur: ["none", "", isTshirtSize, isArbitraryLength],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryLength],
      borderSpacing: [spacing],
      borderWidth: getLengthWithEmpty(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: [spacing],
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAuto(),
      margin: getSpacingWithAuto(),
      opacity: getNumber(),
      padding: [spacing],
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: [spacing],
      translate: [spacing]
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      "float": [{
        "float": ["right", "left", "none"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [].concat(getPositions(), [isArbitraryValue])
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAuto()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: [isInteger]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal"].concat(getAlign())
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal"].concat(getAlign(), ["baseline"])
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [].concat(getAlign(), ["baseline"])
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space2]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space2]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": ["min", "max", "fit", isLength]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize, isArbitraryLength]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [spacing, "auto", "min", "max", "fit"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": ["min", "max", "fit", isLength]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [spacing, "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryLength]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [].concat(getLineStyles(), ["wavy"])
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: [spacing]
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryLength]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      "break": [{
        "break": ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [].concat(getPositions(), [isArbitraryPosition])
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryUrl]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [].concat(getLineStyles(), ["hidden"])
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: [""].concat(getLineStyles())
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmpty()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": getBlendModes()
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: ["appearance-none"],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": [spacing]
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": [spacing]
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": [spacing]
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": [spacing]
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": [spacing]
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": [spacing]
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": [spacing]
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": [spacing]
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": [spacing]
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": [spacing]
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": [spacing]
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": [spacing]
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": [spacing]
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": [spacing]
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": [spacing]
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": [spacing]
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": [spacing]
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": [spacing]
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "pinch-zoom", "manipulation", {
          pan: ["x", "left", "right", "y", "up", "down"]
        }]
      }],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}
var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
let checkedUri = false;
function ShareButton({ className = "btn btn-primary", ...props } = {}) {
  const { sandpack: sandpack2 } = useSandpack();
  if (!checkedUri) {
    restoreSharedText();
    checkedUri = true;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: cn(className), onClick: handleShareClick, children: "Share" });
  function stringifySession() {
    return JSON.stringify(getSessionData(sandpack2));
  }
  function restoreSharedText() {
    const encodedText = window.location.hash.substr(1);
    if (encodedText) {
      console.log({ encodedText });
      const decodedText = atob(encodedText);
      const sessionData = parseSession(decodedText);
      restoreSession(sandpack2, sessionData);
    }
  }
  function handleShareClick() {
    const text = stringifySession();
    const encodedText = btoa(text);
    const shareLink = `${window.location.origin}/#${encodedText}`;
    window.history.pushState({ path: shareLink }, "", shareLink);
    copyToClipboard(shareLink);
    alert("Link copied to clipboard!");
  }
}
function getSessionData(sandpack2) {
  const { files, activeFile } = sandpack2;
  return { files, activeFile };
}
function parseSession(text) {
  return JSON.parse(text);
}
function restoreSession(sandpack2, sessionData) {
  console.log("TODO: restore session", sessionData);
  sandpack2.updateFile(sessionData.files);
  sandpack2.setActiveFile(sessionData.activeFile);
}
function copyToClipboard(text) {
  const textField = document.createElement("textarea");
  textField.innerText = text;
  document.body.appendChild(textField);
  textField.select();
  document.execCommand("copy");
  textField.remove();
}
function useActiveClass(classNames = [], activeClassName, element = document.body) {
  reactExports.useEffect(() => {
    classNames.forEach((name2) => {
      element.classList[name2 === activeClassName ? "add" : "remove"](name2);
    });
    return () => {
      classNames.forEach((name2) => element.classList.remove(name2));
    };
  }, [element, classNames, activeClassName]);
}
function StatetreeSandpackFiddle() {
  const isDark = useStore(theme$1.dark);
  useActiveClass(["dark", "light"], isDark ? "dark" : "light");
  useActiveClass(["dockview-theme-dark", "dockview-theme-light"], isDark ? "dockview-theme-dark" : "dockview-theme-light");
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    SandpackProvider,
    {
      template: "react",
      theme: isDark !== false ? "dark" : "light",
      customSetup: STATETREE_TEMPLATE.customSetup,
      files: STATETREE_TEMPLATE.files,
      options: STATETREE_TEMPLATE.options,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(SandpackLayout, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(TheStack, {}) })
    }
  );
}
function TheStack() {
  useStatetreeSandpackFiddle();
  const isDark = useStore(theme$1.dark);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(SandpackStack, { className: "m-0 flex flex-col", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center p-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pl-4 flex-1 text-2xl font-extrabold", children: "Statetree Playground" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "btn btn-ghost", onClick: theme$1.toggleDark, children: isDark ? "Dark" : "Light" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ShareButton, {})
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DockView, {}) })
  ] }) });
}
function App() {
  const model$12 = useStore(latestValidModel);
  function setModel(model2) {
    model.set(model2);
  }
  reactExports.useEffect(() => {
    globalThis.machine = model;
    window.windowModel = model;
  }, [model]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ModelContext.Provider, { value: { model: model$12, setModel }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(StateMachineInstanceProvider, { model: model$12, children: /* @__PURE__ */ jsxRuntimeExports.jsx(StatetreeSandpackFiddle, {}) }) }) });
}
ReactDOM.createRoot(document.getElementById("root")).render(
  // <React.StrictMode>
  /* @__PURE__ */ jsxRuntimeExports.jsx(App, {})
  // </React.StrictMode>,
);
export {
  React as R,
  SandpackLogLevel as S,
  __extends as _,
  __awaiter$1 as a,
  __generator$1 as b,
  __assign$1 as c,
  createError as d,
  dequal as e,
  createPackageJSON as f,
  addPackageJSONIfNeeded as g,
  __spreadArray$2 as h,
  invariant as i,
  extractErrorDetails as j,
  getAugmentedNamespace as k,
  getDefaultExportFromCjs as l,
  commonjsGlobal as m,
  nullthrows as n,
  jsxRuntimeExports as o,
  useStore as p,
  __vitePreload as q,
  reactExports as r,
  theme$1 as t,
  useSandpack as u
};
